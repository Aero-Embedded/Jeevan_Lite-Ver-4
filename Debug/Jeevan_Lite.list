
Jeevan_Lite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ce2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0801cfbc  0801cfbc  0002cfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d284  0801d284  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  0801d284  0801d284  0002d284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d28c  0801d28c  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d28c  0801d28c  0002d28c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d290  0801d290  0002d290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0801d294  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030070  2**0
                  CONTENTS
 10 .bss          00012e14  20000070  20000070  00030070  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20012e84  20012e84  00030070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000f93bf  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a78b  00000000  00000000  0012945f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c8  00000000  00000000  00133bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002268  00000000  00000000  001361b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000344da  00000000  00000000  00138420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005976d  00000000  00000000  0016c8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebf80  00000000  00000000  001c6067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002b1fe7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000094a0  00000000  00000000  002b203c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801cfa4 	.word	0x0801cfa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0801cfa4 	.word	0x0801cfa4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <Split_Alert_Parameter_Packets>:
 * @brief SEND_ALERT_PACKET.
 * This function store the alert range data using alert_Range structure.
 * */

void Split_Alert_Parameter_Packets(ALERT_RANGE_PACKET *Receive_Graph_Packet)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	Alert_Range._RANGE_PIP_MIN_Val      =	(Receive_Graph_Packet->_RANGE_PIP_MIN);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	78da      	ldrb	r2, [r3, #3]
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000eb2:	701a      	strb	r2, [r3, #0]
	Alert_Range._RANGE_PIP_MAX_Val	    =	(Receive_Graph_Packet->_RANGE_PIP_MAX);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	791a      	ldrb	r2, [r3, #4]
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000eba:	705a      	strb	r2, [r3, #1]
	Alert_Range._RANGE_VT_MIN_Val	    = 	(Receive_Graph_Packet->_RANGE_VT_MIN);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000ec6:	805a      	strh	r2, [r3, #2]
	Alert_Range._RANGE_VT_MAX_Val	    = 	(Receive_Graph_Packet->_RANGE_VT_MAX);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000ed2:	809a      	strh	r2, [r3, #4]
	Alert_Range._RANGE_RR_MIN_Val       =	(Receive_Graph_Packet->_RANGE_RR_MIN);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7a5a      	ldrb	r2, [r3, #9]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000eda:	719a      	strb	r2, [r3, #6]
	Alert_Range._RANGE_RR_MAX_Val       =	(Receive_Graph_Packet->_RANGE_RR_MAX);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7a9a      	ldrb	r2, [r3, #10]
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000ee2:	71da      	strb	r2, [r3, #7]
	Alert_Range._RANGE_MINT_VOL_MIN_Val =	(Receive_Graph_Packet->_RANGE_MINT_VOL_MIN);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7ada      	ldrb	r2, [r3, #11]
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000eea:	721a      	strb	r2, [r3, #8]
	Alert_Range._RANGE_MINT_VOL_MAX_Val =	(Receive_Graph_Packet->_RANGE_MINT_VOL_MAX);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7b1a      	ldrb	r2, [r3, #12]
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000ef2:	725a      	strb	r2, [r3, #9]
	Alert_Range._RANGE_SPO2_MIN_Val     =	(Receive_Graph_Packet->_RANGE_SPO2_MIN);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7b5a      	ldrb	r2, [r3, #13]
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000efa:	729a      	strb	r2, [r3, #10]
	Alert_Range._RANGE_PULSE_MAX_Val    =	(Receive_Graph_Packet->_RANGE_PULSE_MAX);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7bda      	ldrb	r2, [r3, #15]
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000f02:	731a      	strb	r2, [r3, #12]
	Alert_Range._RANGE_PULSE_MIN_Val    =	(Receive_Graph_Packet->_RANGE_PULSE_MIN);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7b9a      	ldrb	r2, [r3, #14]
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000f0a:	72da      	strb	r2, [r3, #11]
	Alert_Range._RANGE_Leak             =	(Receive_Graph_Packet->_RANGE_LEAK);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7c1b      	ldrb	r3, [r3, #16]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <Split_Alert_Parameter_Packets+0x80>)
 8000f14:	81da      	strh	r2, [r3, #14]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20012b54 	.word	0x20012b54

08000f28 <SEND_ALERT_PACKET>:
/**
 * @brief SEND_ALERT_PACKET.
 * This function send the alert frame from the Bluetooth_Data_Send() function.
 * */
void SEND_ALERT_PACKET()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

	DEVICE_ALERT_DATA_SEND._header  = Send_BlueTooth_Alert_Header;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <SEND_ALERT_PACKET+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8000f3c:	705a      	strb	r2, [r3, #1]
	DEVICE_ALERT_DATA_SEND._length  = 7;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <SEND_ALERT_PACKET+0x40>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	709a      	strb	r2, [r3, #2]
	DEVICE_ALERT_DATA_SEND._CRC8    = chksum8((unsigned char*)&DEVICE_ALERT_DATA_SEND.FIRST_FRAME_UN.FIRST_BYTES,(DEVICE_ALERT_DATA_SEND_LENGTH -1));
 8000f44:	2105      	movs	r1, #5
 8000f46:	4809      	ldr	r0, [pc, #36]	; (8000f6c <SEND_ALERT_PACKET+0x44>)
 8000f48:	f004 faa0 	bl	800548c <chksum8>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SEND_ALERT_PACKET+0x40>)
 8000f52:	725a      	strb	r2, [r3, #9]
	HAL_UART_Transmit(&huart6,(uint8_t*)&DEVICE_ALERT_DATA_SEND,sizeof(DEVICE_ALERT_DATA_SEND),300);
 8000f54:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000f58:	220a      	movs	r2, #10
 8000f5a:	4903      	ldr	r1, [pc, #12]	; (8000f68 <SEND_ALERT_PACKET+0x40>)
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <SEND_ALERT_PACKET+0x48>)
 8000f5e:	f017 ff97 	bl	8018e90 <HAL_UART_Transmit>




}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20012408 	.word	0x20012408
 8000f6c:	2001240b 	.word	0x2001240b
 8000f70:	20012a40 	.word	0x20012a40

08000f74 <Clear_All_Alert_Bits>:
 * @brief Clear_All_Alert_Bits.
 * This function resets all alert bits when the alert frame is sent
 * */

void Clear_All_Alert_Bits()
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_PLUGGED_IN);
 8000f78:	4a36      	ldr	r2, [pc, #216]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000f7a:	78d3      	ldrb	r3, [r2, #3]
 8000f7c:	f36f 0300 	bfc	r3, #0, #1
 8000f80:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BATTERY_MODE);
 8000f82:	4a34      	ldr	r2, [pc, #208]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000f84:	78d3      	ldrb	r3, [r2, #3]
 8000f86:	f36f 0341 	bfc	r3, #1, #1
 8000f8a:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PIP);
 8000f8c:	4a31      	ldr	r2, [pc, #196]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000f8e:	7953      	ldrb	r3, [r2, #5]
 8000f90:	f36f 0300 	bfc	r3, #0, #1
 8000f94:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
 8000f96:	4a2f      	ldr	r2, [pc, #188]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000f98:	7953      	ldrb	r3, [r2, #5]
 8000f9a:	f36f 0341 	bfc	r3, #1, #1
 8000f9e:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PEEP);
 8000fa0:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000fa2:	7953      	ldrb	r3, [r2, #5]
 8000fa4:	f36f 0382 	bfc	r3, #2, #1
 8000fa8:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
 8000faa:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000fac:	7953      	ldrb	r3, [r2, #5]
 8000fae:	f36f 03c3 	bfc	r3, #3, #1
 8000fb2:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
 8000fb4:	4a27      	ldr	r2, [pc, #156]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000fb6:	7953      	ldrb	r3, [r2, #5]
 8000fb8:	f36f 1386 	bfc	r3, #6, #1
 8000fbc:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
 8000fbe:	4a25      	ldr	r2, [pc, #148]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000fc0:	7953      	ldrb	r3, [r2, #5]
 8000fc2:	f36f 13c7 	bfc	r3, #7, #1
 8000fc6:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_TIDAL_VOLUME);
 8000fc8:	4a22      	ldr	r2, [pc, #136]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000fca:	7953      	ldrb	r3, [r2, #5]
 8000fcc:	f36f 1304 	bfc	r3, #4, #1
 8000fd0:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_TIDAL_VOLUME);
 8000fd2:	4a20      	ldr	r2, [pc, #128]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000fd4:	7953      	ldrb	r3, [r2, #5]
 8000fd6:	f36f 1345 	bfc	r3, #5, #1
 8000fda:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
 8000fdc:	4a1d      	ldr	r2, [pc, #116]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000fde:	7993      	ldrb	r3, [r2, #6]
 8000fe0:	f36f 1386 	bfc	r3, #6, #1
 8000fe4:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
 8000fe6:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000fe8:	7993      	ldrb	r3, [r2, #6]
 8000fea:	f36f 13c7 	bfc	r3, #7, #1
 8000fee:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 8000ff0:	4a18      	ldr	r2, [pc, #96]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000ff2:	78d3      	ldrb	r3, [r2, #3]
 8000ff4:	f36f 03c3 	bfc	r3, #3, #1
 8000ff8:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8000ffc:	78d3      	ldrb	r3, [r2, #3]
 8000ffe:	f36f 1304 	bfc	r3, #4, #1
 8001002:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_FLOW_SENSOR_WRONG_DIRECTION);
 8001004:	4a13      	ldr	r2, [pc, #76]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8001006:	78d3      	ldrb	r3, [r2, #3]
 8001008:	f36f 1345 	bfc	r3, #5, #1
 800100c:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_HIGH_FIO2);
 800100e:	4a11      	ldr	r2, [pc, #68]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8001010:	7993      	ldrb	r3, [r2, #6]
 8001012:	f36f 0300 	bfc	r3, #0, #1
 8001016:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LOW_FIO2);
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 800101a:	7993      	ldrb	r3, [r2, #6]
 800101c:	f36f 0341 	bfc	r3, #1, #1
 8001020:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_LEAK);
 8001022:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8001024:	7913      	ldrb	r3, [r2, #4]
 8001026:	f36f 03c3 	bfc	r3, #3, #1
 800102a:	7113      	strb	r3, [r2, #4]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_20_PER_BATTERY_DRAIN);
 800102c:	4a09      	ldr	r2, [pc, #36]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 800102e:	78d3      	ldrb	r3, [r2, #3]
 8001030:	f36f 0382 	bfc	r3, #2, #1
 8001034:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8001036:	4a07      	ldr	r2, [pc, #28]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8001038:	78d3      	ldrb	r3, [r2, #3]
 800103a:	f36f 1386 	bfc	r3, #6, #1
 800103e:	70d3      	strb	r3, [r2, #3]
    CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <Clear_All_Alert_Bits+0xe0>)
 8001042:	78d3      	ldrb	r3, [r2, #3]
 8001044:	f36f 13c7 	bfc	r3, #7, #1
 8001048:	70d3      	strb	r3, [r2, #3]
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	20012408 	.word	0x20012408

08001058 <Alert_Task>:
 * @brief Alert_Task.
 * This alert task runs only during inspiration time to check for
 * patient circuit disconnection alerts and proximal sensor reverse direction.
 * */
void Alert_Task (void *argument)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if( (Run_Current_Breathe_State == Run_Inspiration_Cycle)  )
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <Alert_Task+0x38>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d10f      	bne.n	8001088 <Alert_Task+0x30>
		{
			if(Alert_Check == 1 && (! ((Assist_Control == ASSIST_OFF) && (Patient_Trigger == PATIENT_TRIGGER_HAPPEN) )) )
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <Alert_Task+0x3c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d109      	bne.n	8001084 <Alert_Task+0x2c>
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <Alert_Task+0x40>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d103      	bne.n	8001080 <Alert_Task+0x28>
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <Alert_Task+0x44>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d001      	beq.n	8001084 <Alert_Task+0x2c>
			{
				Patient_Circuit_Disconnected_Alert();
 8001080:	f000 fc0a 	bl	8001898 <Patient_Circuit_Disconnected_Alert>
			}
			Proximal_Flow_Sensor_Reverse_Direction();
 8001084:	f000 fd5c 	bl	8001b40 <Proximal_Flow_Sensor_Reverse_Direction>
		}
		vTaskDelay(Two_Millisecond_Delay);
 8001088:	2002      	movs	r0, #2
 800108a:	f019 ffdf 	bl	801b04c <vTaskDelay>
		if( (Run_Current_Breathe_State == Run_Inspiration_Cycle)  )
 800108e:	e7e7      	b.n	8001060 <Alert_Task+0x8>
 8001090:	20012870 	.word	0x20012870
 8001094:	20012aa0 	.word	0x20012aa0
 8001098:	200122cc 	.word	0x200122cc
 800109c:	2001263d 	.word	0x2001263d

080010a0 <Alert_Flags_Reset>:
/**
 * @brief Alert_Flags_Reset.
 * This function resets all the alerts that occur once when the mode starts
 * */
void Alert_Flags_Reset()
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	Alert_Count.PIP_Alert_Count          = 0;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <Alert_Flags_Reset+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
	Alert_Count.PEEP_Alert_Count         = 0;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <Alert_Flags_Reset+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	705a      	strb	r2, [r3, #1]
	Alert_Count.Tidal_Volume_Alert_Count = 0;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <Alert_Flags_Reset+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	709a      	strb	r2, [r3, #2]
	Achieved_Respiratory_Count           = 0;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <Alert_Flags_Reset+0x54>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
	Total_Tidal_volume                   = 0;
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <Alert_Flags_Reset+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
	Alert_Count.FIO2_Supply_Alert_Count  = 0;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <Alert_Flags_Reset+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	70da      	strb	r2, [r3, #3]
	Alert_Count.FIO2_Alert_Count         = 0;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <Alert_Flags_Reset+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	711a      	strb	r2, [r3, #4]
	Alert_Count.Leak_Alert_Count         = 0;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <Alert_Flags_Reset+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	715a      	strb	r2, [r3, #5]
	Alert_Count.Patient_Circuit_disconnected_Alert_Count=0;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <Alert_Flags_Reset+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	80da      	strh	r2, [r3, #6]
	Alert_Check=5;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <Alert_Flags_Reset+0x5c>)
 80010dc:	2205      	movs	r2, #5
 80010de:	701a      	strb	r2, [r3, #0]
	O2_Check   = 5;
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <Alert_Flags_Reset+0x60>)
 80010e2:	2205      	movs	r2, #5
 80010e4:	701a      	strb	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	20012b98 	.word	0x20012b98
 80010f4:	2000008c 	.word	0x2000008c
 80010f8:	20012344 	.word	0x20012344
 80010fc:	20012aa0 	.word	0x20012aa0
 8001100:	2001220e 	.word	0x2001220e

08001104 <Check_Alert>:
/**
 * @brief Check_Alert.
 * This function calls all alert functions from here
 * */
void Check_Alert()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	Convert_Battery_Percentage();
 8001108:	f000 fe70 	bl	8001dec <Convert_Battery_Percentage>
	if(Patient_Ckt_Discon == 1)
 800110c:	4b48      	ldr	r3, [pc, #288]	; (8001230 <Check_Alert+0x12c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d105      	bne.n	8001120 <Check_Alert+0x1c>
	{
		Hide_Alert_1();
 8001114:	f000 fd8e 	bl	8001c34 <Hide_Alert_1>
		Patient_Ckt_Discon = 0;
 8001118:	4b45      	ldr	r3, [pc, #276]	; (8001230 <Check_Alert+0x12c>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e05f      	b.n	80011e0 <Check_Alert+0xdc>
	}
    else if(Proximal_Flow_Sensor_Reverse == 1)
 8001120:	4b44      	ldr	r3, [pc, #272]	; (8001234 <Check_Alert+0x130>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d105      	bne.n	8001134 <Check_Alert+0x30>
	{
		Hide_Alert_2();
 8001128:	f000 fdf2 	bl	8001d10 <Hide_Alert_2>
		Proximal_Flow_Sensor_Reverse = 0;
 800112c:	4b41      	ldr	r3, [pc, #260]	; (8001234 <Check_Alert+0x130>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e055      	b.n	80011e0 <Check_Alert+0xdc>
	}
	else
	{
		if(Alert_Check == 1)
 8001134:	4b40      	ldr	r3, [pc, #256]	; (8001238 <Check_Alert+0x134>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d151      	bne.n	80011e0 <Check_Alert+0xdc>
		{
				Pip_Alert(PIP_Average_Parameter.Maximum_PIP_Acheived );
 800113c:	4b3f      	ldr	r3, [pc, #252]	; (800123c <Check_Alert+0x138>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f93f 	bl	80013c4 <Pip_Alert>

				Peep_Alert(Common_Mode_Parameter._PEEP_Val);
 8001146:	4b3e      	ldr	r3, [pc, #248]	; (8001240 <Check_Alert+0x13c>)
 8001148:	785b      	ldrb	r3, [r3, #1]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f98e 	bl	800146c <Peep_Alert>

				if(Vent_Type == ET_TUBE_MODE)
 8001150:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <Check_Alert+0x140>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d125      	bne.n	80011a4 <Check_Alert+0xa0>
				{
					Tidal_Volume_Alert(Volume_max);
 8001158:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <Check_Alert+0x144>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f9df 	bl	8001520 <Tidal_Volume_Alert>


					if(Achieved_Respiratory_Count == Common_Mode_Parameter._RESPIRATORY_RATE_Val)
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <Check_Alert+0x13c>)
 8001164:	789a      	ldrb	r2, [r3, #2]
 8001166:	4b39      	ldr	r3, [pc, #228]	; (800124c <Check_Alert+0x148>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d11a      	bne.n	80011a4 <Check_Alert+0xa0>
					{
						Achieved_Minite_Volume         = ((float)Total_Tidal_volume / 1000);
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <Check_Alert+0x14c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800117a:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001254 <Check_Alert+0x150>
 800117e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	ee17 2a90 	vmov	r2, s15
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <Check_Alert+0x154>)
 800118c:	601a      	str	r2, [r3, #0]
						Total_Tidal_volume             = 0;
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <Check_Alert+0x14c>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
						Achieved_Respiratory_Count     = 0;
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <Check_Alert+0x148>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
						Minite_Volume_Alert(Achieved_Minite_Volume);
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <Check_Alert+0x154>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fa14 	bl	80015cc <Minite_Volume_Alert>
				}




				Respiratory_Rate_Alert();
 80011a4:	f000 fa54 	bl	8001650 <Respiratory_Rate_Alert>

				if(Common_Mode_Parameter._FIO2_Val>21)
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <Check_Alert+0x13c>)
 80011aa:	78db      	ldrb	r3, [r3, #3]
 80011ac:	2b15      	cmp	r3, #21
 80011ae:	d911      	bls.n	80011d4 <Check_Alert+0xd0>
				{
					Oxygen_Supply_Alert(Common_Mode_Parameter._FIO2_Val,GRAPH_VALUES.Maximum_oxygen_flow);
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <Check_Alert+0x13c>)
 80011b2:	78db      	ldrb	r3, [r3, #3]
 80011b4:	4a29      	ldr	r2, [pc, #164]	; (800125c <Check_Alert+0x158>)
 80011b6:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 faa4 	bl	800170c <Oxygen_Supply_Alert>
					Oxygen_Blending_Alert(Common_Mode_Parameter._FIO2_Val,Oxygen_Parameter.Achieved_Oxygen);
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <Check_Alert+0x13c>)
 80011c6:	78db      	ldrb	r3, [r3, #3]
 80011c8:	4a25      	ldr	r2, [pc, #148]	; (8001260 <Check_Alert+0x15c>)
 80011ca:	7a12      	ldrb	r2, [r2, #8]
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fad4 	bl	800177c <Oxygen_Blending_Alert>
				}

				if(Vent_Type == ET_TUBE_MODE)
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <Check_Alert+0x140>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <Check_Alert+0xdc>
				{
					Leak_Alert();
 80011dc:	f000 fb2a 	bl	8001834 <Leak_Alert>
				}
		}
	}
	AC_Supply_or_Battery_Supply_Indication();
 80011e0:	f000 f8a2 	bl	8001328 <AC_Supply_or_Battery_Supply_Indication>
	if(old_State != Newstate)
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <Check_Alert+0x160>)
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <Check_Alert+0x164>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d01c      	beq.n	800122a <Check_Alert+0x126>
	{
		if(Toggle == 1)
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <Check_Alert+0x168>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d10a      	bne.n	800120e <Check_Alert+0x10a>
		{
		    SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_PLUGGED_IN);
 80011f8:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <Check_Alert+0x16c>)
 80011fa:	78d3      	ldrb	r3, [r2, #3]
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	70d3      	strb	r3, [r2, #3]
			CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BATTERY_MODE);
 8001202:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <Check_Alert+0x16c>)
 8001204:	78d3      	ldrb	r3, [r2, #3]
 8001206:	f36f 0341 	bfc	r3, #1, #1
 800120a:	70d3      	strb	r3, [r2, #3]
 800120c:	e009      	b.n	8001222 <Check_Alert+0x11e>
		}
		else
		{
			CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_PLUGGED_IN);
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <Check_Alert+0x16c>)
 8001210:	78d3      	ldrb	r3, [r2, #3]
 8001212:	f36f 0300 	bfc	r3, #0, #1
 8001216:	70d3      	strb	r3, [r2, #3]
			SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BATTERY_MODE);
 8001218:	4a15      	ldr	r2, [pc, #84]	; (8001270 <Check_Alert+0x16c>)
 800121a:	78d3      	ldrb	r3, [r2, #3]
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	70d3      	strb	r3, [r2, #3]
		}
		Newstate = old_State;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <Check_Alert+0x160>)
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <Check_Alert+0x164>)
 8001228:	701a      	strb	r2, [r3, #0]
	}


}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000009d 	.word	0x2000009d
 8001234:	2000009e 	.word	0x2000009e
 8001238:	20012aa0 	.word	0x20012aa0
 800123c:	200124bc 	.word	0x200124bc
 8001240:	200124f0 	.word	0x200124f0
 8001244:	200129f4 	.word	0x200129f4
 8001248:	20012c70 	.word	0x20012c70
 800124c:	2000008c 	.word	0x2000008c
 8001250:	20012344 	.word	0x20012344
 8001254:	447a0000 	.word	0x447a0000
 8001258:	20000090 	.word	0x20000090
 800125c:	200125f8 	.word	0x200125f8
 8001260:	200129d4 	.word	0x200129d4
 8001264:	20000000 	.word	0x20000000
 8001268:	200000a0 	.word	0x200000a0
 800126c:	2000009f 	.word	0x2000009f
 8001270:	20012408 	.word	0x20012408

08001274 <Alert_Inspiration_Time_Parameter>:
 * @brief Alert_Inspiration_Time_Parameter.
 * This function stores the data from the previous breath.
 * */

void Alert_Inspiration_Time_Parameter()
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

	Achieved_Respiratory_Count++;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <Alert_Inspiration_Time_Parameter+0x88>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <Alert_Inspiration_Time_Parameter+0x88>)
 8001282:	701a      	strb	r2, [r3, #0]
	Total_Tidal_volume += Volume_max;
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <Alert_Inspiration_Time_Parameter+0x8c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <Alert_Inspiration_Time_Parameter+0x90>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4413      	add	r3, r2
 800128e:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <Alert_Inspiration_Time_Parameter+0x8c>)
 8001290:	6013      	str	r3, [r2, #0]
	RR_E_TIME_ACHIEVED = TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED ;
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <Alert_Inspiration_Time_Parameter+0x94>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	4a1d      	ldr	r2, [pc, #116]	; (800130c <Alert_Inspiration_Time_Parameter+0x98>)
 8001298:	6013      	str	r3, [r2, #0]
	if(Alert_Check>1)
 800129a:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <Alert_Inspiration_Time_Parameter+0x9c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d905      	bls.n	80012ae <Alert_Inspiration_Time_Parameter+0x3a>
		Alert_Check--;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <Alert_Inspiration_Time_Parameter+0x9c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <Alert_Inspiration_Time_Parameter+0x9c>)
 80012ac:	701a      	strb	r2, [r3, #0]
	if(O2_Check>1)
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <Alert_Inspiration_Time_Parameter+0xa0>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d905      	bls.n	80012c2 <Alert_Inspiration_Time_Parameter+0x4e>
		O2_Check--;
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <Alert_Inspiration_Time_Parameter+0xa0>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <Alert_Inspiration_Time_Parameter+0xa0>)
 80012c0:	701a      	strb	r2, [r3, #0]
	Exp_Volume=GRAPH_VALUES.volume;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <Alert_Inspiration_Time_Parameter+0xa4>)
 80012c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012cc:	ee17 2a90 	vmov	r2, s15
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <Alert_Inspiration_Time_Parameter+0xa8>)
 80012d2:	601a      	str	r2, [r3, #0]
    Exp_Volume=Insp_Volume-Exp_Volume;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <Alert_Inspiration_Time_Parameter+0xac>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <Alert_Inspiration_Time_Parameter+0xa8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	4a0f      	ldr	r2, [pc, #60]	; (800131c <Alert_Inspiration_Time_Parameter+0xa8>)
 80012e0:	6013      	str	r3, [r2, #0]


	Leak=Exp_Volume-Insp_Volume;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <Alert_Inspiration_Time_Parameter+0xa8>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <Alert_Inspiration_Time_Parameter+0xac>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <Alert_Inspiration_Time_Parameter+0xb0>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000008c 	.word	0x2000008c
 8001300:	20012344 	.word	0x20012344
 8001304:	20012c70 	.word	0x20012c70
 8001308:	20012b38 	.word	0x20012b38
 800130c:	20000094 	.word	0x20000094
 8001310:	20012aa0 	.word	0x20012aa0
 8001314:	2001220e 	.word	0x2001220e
 8001318:	200125f8 	.word	0x200125f8
 800131c:	200129f0 	.word	0x200129f0
 8001320:	20012bf0 	.word	0x20012bf0
 8001324:	20012878 	.word	0x20012878

08001328 <AC_Supply_or_Battery_Supply_Indication>:
/**
 * @brief AC_Supply_or_Battery_Supply_Indication.
 * This This function checks whether the device is running on battery mode or AC supply mode
 * */
void AC_Supply_or_Battery_Supply_Indication()
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
		Toggle = 0;
		old_State = Toggle;
	}*/        //This one is for pin number has been changed PE2


		if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))== 0)
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	480b      	ldr	r0, [pc, #44]	; (800135c <AC_Supply_or_Battery_Supply_Indication+0x34>)
 8001330:	f015 fafa 	bl	8016928 <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d107      	bne.n	800134a <AC_Supply_or_Battery_Supply_Indication+0x22>
		{
			Toggle = 1;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <AC_Supply_or_Battery_Supply_Indication+0x38>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
			old_State=Toggle;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <AC_Supply_or_Battery_Supply_Indication+0x38>)
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <AC_Supply_or_Battery_Supply_Indication+0x3c>)
 8001346:	701a      	strb	r2, [r3, #0]
			Toggle = 0;
			old_State = Toggle;
		}


}
 8001348:	e006      	b.n	8001358 <AC_Supply_or_Battery_Supply_Indication+0x30>
			Toggle = 0;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <AC_Supply_or_Battery_Supply_Indication+0x38>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
			old_State = Toggle;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <AC_Supply_or_Battery_Supply_Indication+0x38>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <AC_Supply_or_Battery_Supply_Indication+0x3c>)
 8001356:	701a      	strb	r2, [r3, #0]
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40020000 	.word	0x40020000
 8001360:	2000009f 	.word	0x2000009f
 8001364:	20000000 	.word	0x20000000

08001368 <Alert_Expiration_Time_Parameter>:
 * @brief Alert_Expiration_Time_Parameter.
 * This function reset the alert flags during expiration time.
 * */

void Alert_Expiration_Time_Parameter()
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	RR_I_TIME_ACHIEVED = TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED ;
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <Alert_Expiration_Time_Parameter+0x40>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <Alert_Expiration_Time_Parameter+0x44>)
 8001372:	6013      	str	r3, [r2, #0]
	Insp_Volume=GRAPH_VALUES.volume;
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <Alert_Expiration_Time_Parameter+0x48>)
 8001376:	edd3 7a02 	vldr	s15, [r3, #8]
 800137a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800137e:	ee17 2a90 	vmov	r2, s15
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <Alert_Expiration_Time_Parameter+0x4c>)
 8001384:	601a      	str	r2, [r3, #0]
	Alert_Count.Patient_Circuit_disconnected_Alert_Count=0;
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <Alert_Expiration_Time_Parameter+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	80da      	strh	r2, [r3, #6]
	Alert_Count.Proximal_Flow_Sensor_reversed_Alert_Count=0;
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <Alert_Expiration_Time_Parameter+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	811a      	strh	r2, [r3, #8]
	PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = CHECK;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <Alert_Expiration_Time_Parameter+0x54>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
	PROXIMAL_SENSOR_REVERSE_ALERT_CHECK = CHECK;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <Alert_Expiration_Time_Parameter+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]

}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	20012b38 	.word	0x20012b38
 80013ac:	20000098 	.word	0x20000098
 80013b0:	200125f8 	.word	0x200125f8
 80013b4:	20012bf0 	.word	0x20012bf0
 80013b8:	20012b98 	.word	0x20012b98
 80013bc:	20012349 	.word	0x20012349
 80013c0:	200121d4 	.word	0x200121d4

080013c4 <Pip_Alert>:
 * @brief Pip_Alert.
 * This function checks whether the PIP value exceeds the alert limit.
 * @param PIP Maximum PIP value achieved in the last breath cycle from the mode
 * */
void Pip_Alert(uint8_t PIP)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]

	if ( (PIP >= Alert_Range._RANGE_PIP_MIN_Val) && (PIP <= Alert_Range._RANGE_PIP_MAX_Val))
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <Pip_Alert+0x98>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	79fa      	ldrb	r2, [r7, #7]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d308      	bcc.n	80013ea <Pip_Alert+0x26>
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <Pip_Alert+0x98>)
 80013da:	785b      	ldrb	r3, [r3, #1]
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d803      	bhi.n	80013ea <Pip_Alert+0x26>
	{
		Alert_Count.PIP_Alert_Count = 0;
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <Pip_Alert+0x9c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
					Alert_Count.PIP_Alert_Count = 0;
				}
		}
	}
}
 80013e8:	e031      	b.n	800144e <Pip_Alert+0x8a>
		Alert_Count.PIP_Alert_Count++;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <Pip_Alert+0x9c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <Pip_Alert+0x9c>)
 80013f4:	701a      	strb	r2, [r3, #0]
		if (Alert_Count.PIP_Alert_Count > 3)
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <Pip_Alert+0x9c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d927      	bls.n	800144e <Pip_Alert+0x8a>
			Alert_Status = ALERT_HAPPEN;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <Pip_Alert+0xa0>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
				if (Alert_Range._RANGE_PIP_MIN_Val > PIP)
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <Pip_Alert+0x98>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	429a      	cmp	r2, r3
 800140c:	d20d      	bcs.n	800142a <Pip_Alert+0x66>
					SET_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <Pip_Alert+0xa4>)
 8001410:	7953      	ldrb	r3, [r2, #5]
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	7153      	strb	r3, [r2, #5]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PIP);
 8001418:	4a13      	ldr	r2, [pc, #76]	; (8001468 <Pip_Alert+0xa4>)
 800141a:	7953      	ldrb	r3, [r2, #5]
 800141c:	f36f 0300 	bfc	r3, #0, #1
 8001420:	7153      	strb	r3, [r2, #5]
					Alert_Count.PIP_Alert_Count = 0;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <Pip_Alert+0x9c>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
}
 8001428:	e011      	b.n	800144e <Pip_Alert+0x8a>
				else if (Alert_Range._RANGE_PIP_MAX_Val < PIP)
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <Pip_Alert+0x98>)
 800142c:	785b      	ldrb	r3, [r3, #1]
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	429a      	cmp	r2, r3
 8001432:	d90c      	bls.n	800144e <Pip_Alert+0x8a>
					SET_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PIP);
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <Pip_Alert+0xa4>)
 8001436:	7953      	ldrb	r3, [r2, #5]
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	7153      	strb	r3, [r2, #5]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <Pip_Alert+0xa4>)
 8001440:	7953      	ldrb	r3, [r2, #5]
 8001442:	f36f 0341 	bfc	r3, #1, #1
 8001446:	7153      	strb	r3, [r2, #5]
					Alert_Count.PIP_Alert_Count = 0;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <Pip_Alert+0x9c>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20012b54 	.word	0x20012b54
 8001460:	20012b98 	.word	0x20012b98
 8001464:	2001287c 	.word	0x2001287c
 8001468:	20012408 	.word	0x20012408

0800146c <Peep_Alert>:
 * @brief Peep_Alert.
 * This function checks whether the PEEP value exceeds the alert limit.
 * @param PEEP minimum PEEP value achieved in the last breath cycle from the mode
 * */
void Peep_Alert(uint8_t PEEP)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
	uint8_t PEEP_HIGH = (PEEP+3);
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	3303      	adds	r3, #3
 800147a:	73fb      	strb	r3, [r7, #15]
	uint8_t PEEP_LOW = (PEEP-3);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3b03      	subs	r3, #3
 8001480:	73bb      	strb	r3, [r7, #14]
	if ((PEEP_Maintain_Parameter.PEEP_AVG_VAL <= PEEP_HIGH)&& (PEEP_Maintain_Parameter.PEEP_AVG_VAL >= PEEP_LOW))
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <Peep_Alert+0xa4>)
 8001484:	7c1b      	ldrb	r3, [r3, #16]
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	429a      	cmp	r2, r3
 800148a:	d308      	bcc.n	800149e <Peep_Alert+0x32>
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <Peep_Alert+0xa4>)
 800148e:	7c1b      	ldrb	r3, [r3, #16]
 8001490:	7bba      	ldrb	r2, [r7, #14]
 8001492:	429a      	cmp	r2, r3
 8001494:	d803      	bhi.n	800149e <Peep_Alert+0x32>
	{
		Alert_Count.PEEP_Alert_Count = 0;
 8001496:	4b1f      	ldr	r3, [pc, #124]	; (8001514 <Peep_Alert+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	705a      	strb	r2, [r3, #1]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
					Alert_Count.PEEP_Alert_Count = 0;
				}
			}
	}
}
 800149c:	e031      	b.n	8001502 <Peep_Alert+0x96>
		Alert_Count.PEEP_Alert_Count++;
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <Peep_Alert+0xa8>)
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <Peep_Alert+0xa8>)
 80014a8:	705a      	strb	r2, [r3, #1]
			if(Alert_Count.PEEP_Alert_Count>3)
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <Peep_Alert+0xa8>)
 80014ac:	785b      	ldrb	r3, [r3, #1]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d927      	bls.n	8001502 <Peep_Alert+0x96>
				Alert_Status = ALERT_HAPPEN;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <Peep_Alert+0xac>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
				if (PEEP_HIGH > PEEP_Maintain_Parameter.PEEP_AVG_VAL)
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <Peep_Alert+0xa4>)
 80014ba:	7c1b      	ldrb	r3, [r3, #16]
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d90d      	bls.n	80014de <Peep_Alert+0x72>
					SET_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
 80014c2:	4a16      	ldr	r2, [pc, #88]	; (800151c <Peep_Alert+0xb0>)
 80014c4:	7953      	ldrb	r3, [r2, #5]
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	7153      	strb	r3, [r2, #5]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PEEP);
 80014cc:	4a13      	ldr	r2, [pc, #76]	; (800151c <Peep_Alert+0xb0>)
 80014ce:	7953      	ldrb	r3, [r2, #5]
 80014d0:	f36f 0382 	bfc	r3, #2, #1
 80014d4:	7153      	strb	r3, [r2, #5]
					Alert_Count.PEEP_Alert_Count = 0;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <Peep_Alert+0xa8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	705a      	strb	r2, [r3, #1]
}
 80014dc:	e011      	b.n	8001502 <Peep_Alert+0x96>
				else if (PEEP_LOW< PEEP_Maintain_Parameter.PEEP_AVG_VAL)
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <Peep_Alert+0xa4>)
 80014e0:	7c1b      	ldrb	r3, [r3, #16]
 80014e2:	7bba      	ldrb	r2, [r7, #14]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d20c      	bcs.n	8001502 <Peep_Alert+0x96>
					SET_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PEEP);
 80014e8:	4a0c      	ldr	r2, [pc, #48]	; (800151c <Peep_Alert+0xb0>)
 80014ea:	7953      	ldrb	r3, [r2, #5]
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	7153      	strb	r3, [r2, #5]
					CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <Peep_Alert+0xb0>)
 80014f4:	7953      	ldrb	r3, [r2, #5]
 80014f6:	f36f 03c3 	bfc	r3, #3, #1
 80014fa:	7153      	strb	r3, [r2, #5]
					Alert_Count.PEEP_Alert_Count = 0;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <Peep_Alert+0xa8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	705a      	strb	r2, [r3, #1]
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20012c74 	.word	0x20012c74
 8001514:	20012b98 	.word	0x20012b98
 8001518:	2001287c 	.word	0x2001287c
 800151c:	20012408 	.word	0x20012408

08001520 <Tidal_Volume_Alert>:
 * This function checks whether the Tidal volume value exceeds the alert limit.
 * @param Maximum_Volume_Achieved  achieved tidal volume in the last breath cycle from the mode
 * */

void Tidal_Volume_Alert(int Maximum_Volume_Achieved)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	if( (Maximum_Volume_Achieved >= Alert_Range._RANGE_VT_MIN_Val)  &&  (Maximum_Volume_Achieved <= Alert_Range._RANGE_VT_MAX_Val))
 8001528:	4b24      	ldr	r3, [pc, #144]	; (80015bc <Tidal_Volume_Alert+0x9c>)
 800152a:	885b      	ldrh	r3, [r3, #2]
 800152c:	461a      	mov	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4293      	cmp	r3, r2
 8001532:	db09      	blt.n	8001548 <Tidal_Volume_Alert+0x28>
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <Tidal_Volume_Alert+0x9c>)
 8001536:	889b      	ldrh	r3, [r3, #4]
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4293      	cmp	r3, r2
 800153e:	dc03      	bgt.n	8001548 <Tidal_Volume_Alert+0x28>
	{
		Alert_Count.Tidal_Volume_Alert_Count=0;
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <Tidal_Volume_Alert+0xa0>)
 8001542:	2200      	movs	r2, #0
 8001544:	709a      	strb	r2, [r3, #2]
				Alert_Count.Tidal_Volume_Alert_Count=0;
			}
		}

	  }
}
 8001546:	e033      	b.n	80015b0 <Tidal_Volume_Alert+0x90>
		Alert_Count.Tidal_Volume_Alert_Count++;
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <Tidal_Volume_Alert+0xa0>)
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	3301      	adds	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <Tidal_Volume_Alert+0xa0>)
 8001552:	709a      	strb	r2, [r3, #2]
		if(Alert_Count.Tidal_Volume_Alert_Count>3)
 8001554:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <Tidal_Volume_Alert+0xa0>)
 8001556:	789b      	ldrb	r3, [r3, #2]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d929      	bls.n	80015b0 <Tidal_Volume_Alert+0x90>
			Alert_Status = ALERT_HAPPEN;
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <Tidal_Volume_Alert+0xa4>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
			if(Alert_Range._RANGE_VT_MIN_Val>Maximum_Volume_Achieved)
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <Tidal_Volume_Alert+0x9c>)
 8001564:	885b      	ldrh	r3, [r3, #2]
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4293      	cmp	r3, r2
 800156c:	da0d      	bge.n	800158a <Tidal_Volume_Alert+0x6a>
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_TIDAL_VOLUME);
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <Tidal_Volume_Alert+0xa8>)
 8001570:	7953      	ldrb	r3, [r2, #5]
 8001572:	f043 0320 	orr.w	r3, r3, #32
 8001576:	7153      	strb	r3, [r2, #5]
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_TIDAL_VOLUME);
 8001578:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <Tidal_Volume_Alert+0xa8>)
 800157a:	7953      	ldrb	r3, [r2, #5]
 800157c:	f36f 1304 	bfc	r3, #4, #1
 8001580:	7153      	strb	r3, [r2, #5]
				Alert_Count.Tidal_Volume_Alert_Count=0;
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <Tidal_Volume_Alert+0xa0>)
 8001584:	2200      	movs	r2, #0
 8001586:	709a      	strb	r2, [r3, #2]
}
 8001588:	e012      	b.n	80015b0 <Tidal_Volume_Alert+0x90>
			else if(Alert_Range._RANGE_VT_MAX_Val<Maximum_Volume_Achieved)
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <Tidal_Volume_Alert+0x9c>)
 800158c:	889b      	ldrh	r3, [r3, #4]
 800158e:	461a      	mov	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4293      	cmp	r3, r2
 8001594:	dd0c      	ble.n	80015b0 <Tidal_Volume_Alert+0x90>
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_TIDAL_VOLUME);
 8001596:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <Tidal_Volume_Alert+0xa8>)
 8001598:	7953      	ldrb	r3, [r2, #5]
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	7153      	strb	r3, [r2, #5]
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_TIDAL_VOLUME);
 80015a0:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <Tidal_Volume_Alert+0xa8>)
 80015a2:	7953      	ldrb	r3, [r2, #5]
 80015a4:	f36f 1345 	bfc	r3, #5, #1
 80015a8:	7153      	strb	r3, [r2, #5]
				Alert_Count.Tidal_Volume_Alert_Count=0;
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <Tidal_Volume_Alert+0xa0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	709a      	strb	r2, [r3, #2]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	20012b54 	.word	0x20012b54
 80015c0:	20012b98 	.word	0x20012b98
 80015c4:	2001287c 	.word	0x2001287c
 80015c8:	20012408 	.word	0x20012408

080015cc <Minite_Volume_Alert>:
 * This function checks whether the minite volume value exceeds the alert limit.
 * @param Achieved_Minite_Volume  achieved minite volume in the last one minute.
 * */

void Minite_Volume_Alert(int Achieved_Minite_Volume)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	if ((Achieved_Minite_Volume >= Alert_Range._RANGE_MINT_VOL_MIN_Val) && (Achieved_Minite_Volume <= Alert_Range._RANGE_MINT_VOL_MAX_Val))
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <Minite_Volume_Alert+0x78>)
 80015d6:	7a1b      	ldrb	r3, [r3, #8]
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4293      	cmp	r3, r2
 80015de:	db05      	blt.n	80015ec <Minite_Volume_Alert+0x20>
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <Minite_Volume_Alert+0x78>)
 80015e2:	7a5b      	ldrb	r3, [r3, #9]
 80015e4:	461a      	mov	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4293      	cmp	r3, r2
 80015ea:	dd24      	ble.n	8001636 <Minite_Volume_Alert+0x6a>

	}
	else
	{

		Alert_Status = ALERT_HAPPEN;
 80015ec:	4b16      	ldr	r3, [pc, #88]	; (8001648 <Minite_Volume_Alert+0x7c>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]

			if (Alert_Range._RANGE_MINT_VOL_MIN_Val > Achieved_Minite_Volume)
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <Minite_Volume_Alert+0x78>)
 80015f4:	7a1b      	ldrb	r3, [r3, #8]
 80015f6:	461a      	mov	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4293      	cmp	r3, r2
 80015fc:	da0a      	bge.n	8001614 <Minite_Volume_Alert+0x48>
			{
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <Minite_Volume_Alert+0x80>)
 8001600:	7953      	ldrb	r3, [r2, #5]
 8001602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001606:	7153      	strb	r3, [r2, #5]
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
 8001608:	4a10      	ldr	r2, [pc, #64]	; (800164c <Minite_Volume_Alert+0x80>)
 800160a:	7953      	ldrb	r3, [r2, #5]
 800160c:	f36f 1386 	bfc	r3, #6, #1
 8001610:	7153      	strb	r3, [r2, #5]
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
			}
	}

}
 8001612:	e010      	b.n	8001636 <Minite_Volume_Alert+0x6a>
			else if (Alert_Range._RANGE_MINT_VOL_MAX_Val < Achieved_Minite_Volume)
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <Minite_Volume_Alert+0x78>)
 8001616:	7a5b      	ldrb	r3, [r3, #9]
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4293      	cmp	r3, r2
 800161e:	dd0a      	ble.n	8001636 <Minite_Volume_Alert+0x6a>
				SET_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <Minite_Volume_Alert+0x80>)
 8001622:	7953      	ldrb	r3, [r2, #5]
 8001624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001628:	7153      	strb	r3, [r2, #5]
				CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <Minite_Volume_Alert+0x80>)
 800162c:	7953      	ldrb	r3, [r2, #5]
 800162e:	f36f 13c7 	bfc	r3, #7, #1
 8001632:	7153      	strb	r3, [r2, #5]
}
 8001634:	e7ff      	b.n	8001636 <Minite_Volume_Alert+0x6a>
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20012b54 	.word	0x20012b54
 8001648:	2001287c 	.word	0x2001287c
 800164c:	20012408 	.word	0x20012408

08001650 <Respiratory_Rate_Alert>:
 * This function checks whether the Respiratory rate value exceeds the alert limit.
 * @param None.
 * */

void Respiratory_Rate_Alert()
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
	Achieved_One_RR=  (60000/((float)(RR_E_TIME_ACHIEVED + RR_I_TIME_ACHIEVED)));
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <Respiratory_Rate_Alert+0xa0>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <Respiratory_Rate_Alert+0xa4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001668:	eddf 6a23 	vldr	s13, [pc, #140]	; 80016f8 <Respiratory_Rate_Alert+0xa8>
 800166c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001674:	edc7 7a01 	vstr	s15, [r7, #4]
 8001678:	793b      	ldrb	r3, [r7, #4]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <Respiratory_Rate_Alert+0xac>)
 800167e:	701a      	strb	r2, [r3, #0]
	if(( Achieved_One_RR >= Alert_Range._RANGE_RR_MIN_Val) && (Achieved_One_RR <=Alert_Range._RANGE_RR_MAX_Val))
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <Respiratory_Rate_Alert+0xb0>)
 8001682:	799a      	ldrb	r2, [r3, #6]
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <Respiratory_Rate_Alert+0xac>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	d805      	bhi.n	8001698 <Respiratory_Rate_Alert+0x48>
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <Respiratory_Rate_Alert+0xb0>)
 800168e:	79da      	ldrb	r2, [r3, #7]
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <Respiratory_Rate_Alert+0xac>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d224      	bcs.n	80016e2 <Respiratory_Rate_Alert+0x92>
	{

	}
	else
	{
		Alert_Status = ALERT_HAPPEN;
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <Respiratory_Rate_Alert+0xb4>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
		if(Alert_Range._RANGE_RR_MIN_Val>Achieved_One_RR)
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <Respiratory_Rate_Alert+0xb0>)
 80016a0:	799a      	ldrb	r2, [r3, #6]
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <Respiratory_Rate_Alert+0xac>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d90a      	bls.n	80016c0 <Respiratory_Rate_Alert+0x70>
		{
			SET_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <Respiratory_Rate_Alert+0xb8>)
 80016ac:	7993      	ldrb	r3, [r2, #6]
 80016ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b2:	7193      	strb	r3, [r2, #6]
			CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
 80016b4:	4a14      	ldr	r2, [pc, #80]	; (8001708 <Respiratory_Rate_Alert+0xb8>)
 80016b6:	7993      	ldrb	r3, [r2, #6]
 80016b8:	f36f 1386 	bfc	r3, #6, #1
 80016bc:	7193      	strb	r3, [r2, #6]
		{
			SET_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
			CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
		}
	}
}
 80016be:	e010      	b.n	80016e2 <Respiratory_Rate_Alert+0x92>
		else if(Alert_Range._RANGE_RR_MAX_Val<Achieved_One_RR)
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <Respiratory_Rate_Alert+0xb0>)
 80016c2:	79da      	ldrb	r2, [r3, #7]
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <Respiratory_Rate_Alert+0xac>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d20a      	bcs.n	80016e2 <Respiratory_Rate_Alert+0x92>
			SET_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <Respiratory_Rate_Alert+0xb8>)
 80016ce:	7993      	ldrb	r3, [r2, #6]
 80016d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d4:	7193      	strb	r3, [r2, #6]
			CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
 80016d6:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <Respiratory_Rate_Alert+0xb8>)
 80016d8:	7993      	ldrb	r3, [r2, #6]
 80016da:	f36f 13c7 	bfc	r3, #7, #1
 80016de:	7193      	strb	r3, [r2, #6]
}
 80016e0:	e7ff      	b.n	80016e2 <Respiratory_Rate_Alert+0x92>
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000094 	.word	0x20000094
 80016f4:	20000098 	.word	0x20000098
 80016f8:	476a6000 	.word	0x476a6000
 80016fc:	2000008d 	.word	0x2000008d
 8001700:	20012b54 	.word	0x20012b54
 8001704:	2001287c 	.word	0x2001287c
 8001708:	20012408 	.word	0x20012408

0800170c <Oxygen_Supply_Alert>:
 * @param Maximum_oxygen_flow maximum oxygen flow achieved in last breath.
 * */


void Oxygen_Supply_Alert(uint8_t FIO2_Val,uint8_t Maximum_oxygen_flow)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	460a      	mov	r2, r1
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	4613      	mov	r3, r2
 800171a:	71bb      	strb	r3, [r7, #6]
	if(Maximum_oxygen_flow<=2)
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d818      	bhi.n	8001754 <Oxygen_Supply_Alert+0x48>
	{
		Alert_Count.FIO2_Supply_Alert_Count++;
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <Oxygen_Supply_Alert+0x60>)
 8001724:	78db      	ldrb	r3, [r3, #3]
 8001726:	3301      	adds	r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <Oxygen_Supply_Alert+0x60>)
 800172c:	70da      	strb	r2, [r3, #3]
		if(Alert_Count.FIO2_Supply_Alert_Count>3)
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <Oxygen_Supply_Alert+0x60>)
 8001730:	78db      	ldrb	r3, [r3, #3]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d914      	bls.n	8001760 <Oxygen_Supply_Alert+0x54>
		{
			Alert_Status = ALERT_HAPPEN;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <Oxygen_Supply_Alert+0x64>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
			  SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 800173c:	4a0d      	ldr	r2, [pc, #52]	; (8001774 <Oxygen_Supply_Alert+0x68>)
 800173e:	78d3      	ldrb	r3, [r2, #3]
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	70d3      	strb	r3, [r2, #3]
			  Alert_Count.FIO2_Supply_Alert_Count=0;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <Oxygen_Supply_Alert+0x60>)
 8001748:	2200      	movs	r2, #0
 800174a:	70da      	strb	r2, [r3, #3]
			  Oxygen_Supply_Failed = YES;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <Oxygen_Supply_Alert+0x6c>)
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
	{
		Alert_Count.FIO2_Supply_Alert_Count=0;
		Oxygen_Supply_Failed = NO;
	}

}
 8001752:	e005      	b.n	8001760 <Oxygen_Supply_Alert+0x54>
		Alert_Count.FIO2_Supply_Alert_Count=0;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <Oxygen_Supply_Alert+0x60>)
 8001756:	2200      	movs	r2, #0
 8001758:	70da      	strb	r2, [r3, #3]
		Oxygen_Supply_Failed = NO;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <Oxygen_Supply_Alert+0x6c>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20012b98 	.word	0x20012b98
 8001770:	2001287c 	.word	0x2001287c
 8001774:	20012408 	.word	0x20012408
 8001778:	2000009c 	.word	0x2000009c

0800177c <Oxygen_Blending_Alert>:
 * his function Checks whether Achieved_Oxygen value exceeds the alert limit
 * @param FIO2_Val mode set FIO2_Val.
 * @param Maximum_oxygen_flow maximum oxygen flow achieved in last breath.
 * */
void Oxygen_Blending_Alert(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	460a      	mov	r2, r1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	4613      	mov	r3, r2
 800178a:	71bb      	strb	r3, [r7, #6]
	if( Oxygen_Supply_Failed == NO)
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <Oxygen_Blending_Alert+0xa8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d141      	bne.n	8001818 <Oxygen_Blending_Alert+0x9c>
	{
			uint8_t FIO2_HIGH = (FIO2_Val+5);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	3305      	adds	r3, #5
 8001798:	73fb      	strb	r3, [r7, #15]
			uint8_t FIO2_LOW = (FIO2_Val-5);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	3b05      	subs	r3, #5
 800179e:	73bb      	strb	r3, [r7, #14]
			 if( (Achieved_Oxygen <= FIO2_HIGH) && (Achieved_Oxygen >= FIO2_LOW))
 80017a0:	79ba      	ldrb	r2, [r7, #6]
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d807      	bhi.n	80017b8 <Oxygen_Blending_Alert+0x3c>
 80017a8:	79ba      	ldrb	r2, [r7, #6]
 80017aa:	7bbb      	ldrb	r3, [r7, #14]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d303      	bcc.n	80017b8 <Oxygen_Blending_Alert+0x3c>
			 {

				Alert_Count.FIO2_Alert_Count=0;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <Oxygen_Blending_Alert+0xac>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	711a      	strb	r2, [r3, #4]
						}
					}
			 }
	}

}
 80017b6:	e02f      	b.n	8001818 <Oxygen_Blending_Alert+0x9c>
				Alert_Count.FIO2_Alert_Count++;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <Oxygen_Blending_Alert+0xac>)
 80017ba:	791b      	ldrb	r3, [r3, #4]
 80017bc:	3301      	adds	r3, #1
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <Oxygen_Blending_Alert+0xac>)
 80017c2:	711a      	strb	r2, [r3, #4]
					if(Alert_Count.FIO2_Alert_Count>3)
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <Oxygen_Blending_Alert+0xac>)
 80017c6:	791b      	ldrb	r3, [r3, #4]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d925      	bls.n	8001818 <Oxygen_Blending_Alert+0x9c>
						Alert_Status = ALERT_HAPPEN;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <Oxygen_Blending_Alert+0xb0>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
						if (Achieved_Oxygen > FIO2_HIGH)
 80017d2:	79ba      	ldrb	r2, [r7, #6]
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d90d      	bls.n	80017f6 <Oxygen_Blending_Alert+0x7a>
							SET_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_HIGH_FIO2);
 80017da:	4a15      	ldr	r2, [pc, #84]	; (8001830 <Oxygen_Blending_Alert+0xb4>)
 80017dc:	7993      	ldrb	r3, [r2, #6]
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	7193      	strb	r3, [r2, #6]
							CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LOW_FIO2);
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <Oxygen_Blending_Alert+0xb4>)
 80017e6:	7993      	ldrb	r3, [r2, #6]
 80017e8:	f36f 0341 	bfc	r3, #1, #1
 80017ec:	7193      	strb	r3, [r2, #6]
							Alert_Count.FIO2_Alert_Count=0;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <Oxygen_Blending_Alert+0xac>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	711a      	strb	r2, [r3, #4]
}
 80017f4:	e010      	b.n	8001818 <Oxygen_Blending_Alert+0x9c>
						else if (Achieved_Oxygen < FIO2_LOW)
 80017f6:	79ba      	ldrb	r2, [r7, #6]
 80017f8:	7bbb      	ldrb	r3, [r7, #14]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d20c      	bcs.n	8001818 <Oxygen_Blending_Alert+0x9c>
							SET_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LOW_FIO2);
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <Oxygen_Blending_Alert+0xb4>)
 8001800:	7993      	ldrb	r3, [r2, #6]
 8001802:	f043 0302 	orr.w	r3, r3, #2
 8001806:	7193      	strb	r3, [r2, #6]
							CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_HIGH_FIO2);
 8001808:	4a09      	ldr	r2, [pc, #36]	; (8001830 <Oxygen_Blending_Alert+0xb4>)
 800180a:	7993      	ldrb	r3, [r2, #6]
 800180c:	f36f 0300 	bfc	r3, #0, #1
 8001810:	7193      	strb	r3, [r2, #6]
							Alert_Count.FIO2_Alert_Count=0;
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <Oxygen_Blending_Alert+0xac>)
 8001814:	2200      	movs	r2, #0
 8001816:	711a      	strb	r2, [r3, #4]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	2000009c 	.word	0x2000009c
 8001828:	20012b98 	.word	0x20012b98
 800182c:	2001287c 	.word	0x2001287c
 8001830:	20012408 	.word	0x20012408

08001834 <Leak_Alert>:
 * @brief Leak_Alert.
 * This function Checks for any leaks in the breathing circuit.
 * @param None.
 * */
void Leak_Alert()
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
	if(Alert_Range._RANGE_Leak  < Leak)
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <Leak_Alert+0x50>)
 800183a:	89db      	ldrh	r3, [r3, #14]
 800183c:	461a      	mov	r2, r3
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <Leak_Alert+0x54>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	da15      	bge.n	8001872 <Leak_Alert+0x3e>
	{
		Alert_Count.Leak_Alert_Count++;
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <Leak_Alert+0x58>)
 8001848:	795b      	ldrb	r3, [r3, #5]
 800184a:	3301      	adds	r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <Leak_Alert+0x58>)
 8001850:	715a      	strb	r2, [r3, #5]
		 if(Alert_Count.Leak_Alert_Count>3)
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <Leak_Alert+0x58>)
 8001854:	795b      	ldrb	r3, [r3, #5]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d90e      	bls.n	8001878 <Leak_Alert+0x44>
		 {
			Alert_Status = ALERT_HAPPEN;
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <Leak_Alert+0x5c>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
		    SET_ALERT_BIT(SECOND_FRAME_UN, _ALERT_LEAK);
 8001860:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <Leak_Alert+0x60>)
 8001862:	7913      	ldrb	r3, [r2, #4]
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	7113      	strb	r3, [r2, #4]
		    Alert_Count.Leak_Alert_Count=0;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <Leak_Alert+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	715a      	strb	r2, [r3, #5]
	}
	else
	{
		Alert_Count.Leak_Alert_Count=0;
	}
}
 8001870:	e002      	b.n	8001878 <Leak_Alert+0x44>
		Alert_Count.Leak_Alert_Count=0;
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <Leak_Alert+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	715a      	strb	r2, [r3, #5]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20012b54 	.word	0x20012b54
 8001888:	20012878 	.word	0x20012878
 800188c:	20012b98 	.word	0x20012b98
 8001890:	2001287c 	.word	0x2001287c
 8001894:	20012408 	.word	0x20012408

08001898 <Patient_Circuit_Disconnected_Alert>:
 * @brief Patient_Circuit_Disconnected_Alert.
 * This function checks if the breathing circuit is disconnected from the device.
 * @param None.
 * */
void Patient_Circuit_Disconnected_Alert()
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
	if(Vent_Type == MASK_MODE)
 800189c:	4b9c      	ldr	r3, [pc, #624]	; (8001b10 <Patient_Circuit_Disconnected_Alert+0x278>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d158      	bne.n	8001956 <Patient_Circuit_Disconnected_Alert+0xbe>
	{
		if(  (GRAPH_VALUES.pressure<=3) && ( (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2) || ( (GRAPH_VALUES.flow>= 80) && (GRAPH_VALUES.pressure<=3) ) ) )
 80018a4:	4b9b      	ldr	r3, [pc, #620]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	f200 812b 	bhi.w	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
 80018ae:	4b99      	ldr	r3, [pc, #612]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 80018b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	d023      	beq.n	8001906 <Patient_Circuit_Disconnected_Alert+0x6e>
 80018be:	4b95      	ldr	r3, [pc, #596]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 80018c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80018c8:	eef4 7a47 	vcmp.f32	s15, s14
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	d019      	beq.n	8001906 <Patient_Circuit_Disconnected_Alert+0x6e>
 80018d2:	4b90      	ldr	r3, [pc, #576]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 80018d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80018dc:	eef4 7a47 	vcmp.f32	s15, s14
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d00f      	beq.n	8001906 <Patient_Circuit_Disconnected_Alert+0x6e>
 80018e6:	4b8b      	ldr	r3, [pc, #556]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 80018e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ec:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001b18 <Patient_Circuit_Disconnected_Alert+0x280>
 80018f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	da00      	bge.n	80018fc <Patient_Circuit_Disconnected_Alert+0x64>

			}
		}

	}
}
 80018fa:	e103      	b.n	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
		if(  (GRAPH_VALUES.pressure<=3) && ( (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2) || ( (GRAPH_VALUES.flow>= 80) && (GRAPH_VALUES.pressure<=3) ) ) )
 80018fc:	4b85      	ldr	r3, [pc, #532]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b03      	cmp	r3, #3
 8001902:	f200 80ff 	bhi.w	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
				if((DAC1->DHR12R1)>=400)
 8001906:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <Patient_Circuit_Disconnected_Alert+0x284>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800190e:	f0c0 80f9 	bcc.w	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
					if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 8001912:	4b83      	ldr	r3, [pc, #524]	; (8001b20 <Patient_Circuit_Disconnected_Alert+0x288>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80f4 	bne.w	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
						Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 800191c:	4b81      	ldr	r3, [pc, #516]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 800191e:	88db      	ldrh	r3, [r3, #6]
 8001920:	3301      	adds	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 8001926:	80da      	strh	r2, [r3, #6]
							if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= Alert_Check_Time)
 8001928:	4b7e      	ldr	r3, [pc, #504]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 800192a:	88db      	ldrh	r3, [r3, #6]
 800192c:	461a      	mov	r2, r3
 800192e:	4b7e      	ldr	r3, [pc, #504]	; (8001b28 <Patient_Circuit_Disconnected_Alert+0x290>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	f0c0 80e6 	bcc.w	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
								Alert_Status = ALERT_HAPPEN;
 8001938:	4b7c      	ldr	r3, [pc, #496]	; (8001b2c <Patient_Circuit_Disconnected_Alert+0x294>)
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
								SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 800193e:	4a7c      	ldr	r2, [pc, #496]	; (8001b30 <Patient_Circuit_Disconnected_Alert+0x298>)
 8001940:	78d3      	ldrb	r3, [r2, #3]
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	70d3      	strb	r3, [r2, #3]
								PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8001948:	4b75      	ldr	r3, [pc, #468]	; (8001b20 <Patient_Circuit_Disconnected_Alert+0x288>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
								Patient_Ckt_Discon = 1;
 800194e:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <Patient_Circuit_Disconnected_Alert+0x29c>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
}
 8001954:	e0d6      	b.n	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
	else if(Vent_Type == ET_TUBE_MODE)
 8001956:	4b6e      	ldr	r3, [pc, #440]	; (8001b10 <Patient_Circuit_Disconnected_Alert+0x278>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 80d2 	bne.w	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
		if(Fio2_Blending_Method == PRESSURE_CONTROLLED)
 8001960:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <Patient_Circuit_Disconnected_Alert+0x2a0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d162      	bne.n	8001a2e <Patient_Circuit_Disconnected_Alert+0x196>
				if(  ( (GRAPH_VALUES.volume<=3) && ( (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2))) || ( (GRAPH_VALUES.flow>= 80) && (GRAPH_VALUES.volume>=100)))
 8001968:	4b6a      	ldr	r3, [pc, #424]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 800196a:	edd3 7a02 	vldr	s15, [r3, #8]
 800196e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d81b      	bhi.n	80019b4 <Patient_Circuit_Disconnected_Alert+0x11c>
 800197c:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 800197e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001982:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	d029      	beq.n	80019e0 <Patient_Circuit_Disconnected_Alert+0x148>
 800198c:	4b61      	ldr	r3, [pc, #388]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 800198e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001992:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001996:	eef4 7a47 	vcmp.f32	s15, s14
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	d01f      	beq.n	80019e0 <Patient_Circuit_Disconnected_Alert+0x148>
 80019a0:	4b5c      	ldr	r3, [pc, #368]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 80019a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80019a6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80019aa:	eef4 7a47 	vcmp.f32	s15, s14
 80019ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b2:	d015      	beq.n	80019e0 <Patient_Circuit_Disconnected_Alert+0x148>
 80019b4:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 80019b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ba:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001b18 <Patient_Circuit_Disconnected_Alert+0x280>
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	da00      	bge.n	80019ca <Patient_Circuit_Disconnected_Alert+0x132>
}
 80019c8:	e09c      	b.n	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
				if(  ( (GRAPH_VALUES.volume<=3) && ( (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2))) || ( (GRAPH_VALUES.flow>= 80) && (GRAPH_VALUES.volume>=100)))
 80019ca:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 80019cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80019d0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001b3c <Patient_Circuit_Disconnected_Alert+0x2a4>
 80019d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	da00      	bge.n	80019e0 <Patient_Circuit_Disconnected_Alert+0x148>
}
 80019de:	e091      	b.n	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
						if((DAC1->DHR12R1)>=400)
 80019e0:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <Patient_Circuit_Disconnected_Alert+0x284>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80019e8:	f0c0 808c 	bcc.w	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
							if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 80019ec:	4b4c      	ldr	r3, [pc, #304]	; (8001b20 <Patient_Circuit_Disconnected_Alert+0x288>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 8087 	bne.w	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
								Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 80019f6:	4b4b      	ldr	r3, [pc, #300]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 80019f8:	88db      	ldrh	r3, [r3, #6]
 80019fa:	3301      	adds	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 8001a00:	80da      	strh	r2, [r3, #6]
									if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= Alert_Check_Time)
 8001a02:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 8001a04:	88db      	ldrh	r3, [r3, #6]
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <Patient_Circuit_Disconnected_Alert+0x290>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d379      	bcc.n	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
										Alert_Status = ALERT_HAPPEN;
 8001a10:	4b46      	ldr	r3, [pc, #280]	; (8001b2c <Patient_Circuit_Disconnected_Alert+0x294>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
										SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8001a16:	4a46      	ldr	r2, [pc, #280]	; (8001b30 <Patient_Circuit_Disconnected_Alert+0x298>)
 8001a18:	78d3      	ldrb	r3, [r2, #3]
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	70d3      	strb	r3, [r2, #3]
										PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8001a20:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <Patient_Circuit_Disconnected_Alert+0x288>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
										Patient_Ckt_Discon = 1;
 8001a26:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <Patient_Circuit_Disconnected_Alert+0x29c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
}
 8001a2c:	e06a      	b.n	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
			if(  ( (GRAPH_VALUES.volume<=3) && ( (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2))) )
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 8001a30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a34:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	d83b      	bhi.n	8001aba <Patient_Circuit_Disconnected_Alert+0x222>
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 8001a44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a50:	d013      	beq.n	8001a7a <Patient_Circuit_Disconnected_Alert+0x1e2>
 8001a52:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 8001a54:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a58:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001a5c:	eef4 7a47 	vcmp.f32	s15, s14
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	d009      	beq.n	8001a7a <Patient_Circuit_Disconnected_Alert+0x1e2>
 8001a66:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 8001a68:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a6c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001a70:	eef4 7a47 	vcmp.f32	s15, s14
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	d11f      	bne.n	8001aba <Patient_Circuit_Disconnected_Alert+0x222>
				if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 8001a7a:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <Patient_Circuit_Disconnected_Alert+0x288>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d13f      	bne.n	8001b02 <Patient_Circuit_Disconnected_Alert+0x26a>
					Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 8001a84:	88db      	ldrh	r3, [r3, #6]
 8001a86:	3301      	adds	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 8001a8c:	80da      	strh	r2, [r3, #6]
						if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= Alert_Check_Time)
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 8001a90:	88db      	ldrh	r3, [r3, #6]
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <Patient_Circuit_Disconnected_Alert+0x290>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d332      	bcc.n	8001b02 <Patient_Circuit_Disconnected_Alert+0x26a>
							Alert_Status = ALERT_HAPPEN;
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <Patient_Circuit_Disconnected_Alert+0x294>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
							SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8001aa2:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <Patient_Circuit_Disconnected_Alert+0x298>)
 8001aa4:	78d3      	ldrb	r3, [r2, #3]
 8001aa6:	f043 0310 	orr.w	r3, r3, #16
 8001aaa:	70d3      	strb	r3, [r2, #3]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <Patient_Circuit_Disconnected_Alert+0x288>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
							Patient_Ckt_Discon = 1;
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <Patient_Circuit_Disconnected_Alert+0x29c>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
				if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 8001ab8:	e023      	b.n	8001b02 <Patient_Circuit_Disconnected_Alert+0x26a>
			else if(   ((GRAPH_VALUES.pressure<=3))  )
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <Patient_Circuit_Disconnected_Alert+0x27c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d820      	bhi.n	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
				if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <Patient_Circuit_Disconnected_Alert+0x288>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d11c      	bne.n	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
					Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 8001acc:	88db      	ldrh	r3, [r3, #6]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 8001ad4:	80da      	strh	r2, [r3, #6]
						if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= Alert_Check_Time)
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <Patient_Circuit_Disconnected_Alert+0x28c>)
 8001ad8:	88db      	ldrh	r3, [r3, #6]
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <Patient_Circuit_Disconnected_Alert+0x290>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d30f      	bcc.n	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
							Alert_Status = ALERT_HAPPEN;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <Patient_Circuit_Disconnected_Alert+0x294>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
							SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8001aea:	4a11      	ldr	r2, [pc, #68]	; (8001b30 <Patient_Circuit_Disconnected_Alert+0x298>)
 8001aec:	78d3      	ldrb	r3, [r2, #3]
 8001aee:	f043 0310 	orr.w	r3, r3, #16
 8001af2:	70d3      	strb	r3, [r2, #3]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <Patient_Circuit_Disconnected_Alert+0x288>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
							Patient_Ckt_Discon = 1;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <Patient_Circuit_Disconnected_Alert+0x29c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
}
 8001b00:	e000      	b.n	8001b04 <Patient_Circuit_Disconnected_Alert+0x26c>
				if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 8001b02:	bf00      	nop
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200129f4 	.word	0x200129f4
 8001b14:	200125f8 	.word	0x200125f8
 8001b18:	42a00000 	.word	0x42a00000
 8001b1c:	40007400 	.word	0x40007400
 8001b20:	20012349 	.word	0x20012349
 8001b24:	20012b98 	.word	0x20012b98
 8001b28:	2001246c 	.word	0x2001246c
 8001b2c:	2001287c 	.word	0x2001287c
 8001b30:	20012408 	.word	0x20012408
 8001b34:	2000009d 	.word	0x2000009d
 8001b38:	20012360 	.word	0x20012360
 8001b3c:	42c80000 	.word	0x42c80000

08001b40 <Proximal_Flow_Sensor_Reverse_Direction>:
 * This function checks if the proximal flow sensor is connected in the reverse direction.
 * @param None.
 * */

void Proximal_Flow_Sensor_Reverse_Direction()
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED < 500)
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <Proximal_Flow_Sensor_Reverse_Direction+0x68>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b4c:	da26      	bge.n	8001b9c <Proximal_Flow_Sensor_Reverse_Direction+0x5c>
	{
		if((GRAPH_VALUES.volume<(-10)))
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <Proximal_Flow_Sensor_Reverse_Direction+0x6c>)
 8001b50:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b54:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	d400      	bmi.n	8001b64 <Proximal_Flow_Sensor_Reverse_Direction+0x24>
					 }
			}

		}
	}
}
 8001b62:	e01b      	b.n	8001b9c <Proximal_Flow_Sensor_Reverse_Direction+0x5c>
			if(PROXIMAL_SENSOR_REVERSE_ALERT_CHECK == CHECK)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <Proximal_Flow_Sensor_Reverse_Direction+0x70>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d117      	bne.n	8001b9c <Proximal_Flow_Sensor_Reverse_Direction+0x5c>
				Alert_Count.Proximal_Flow_Sensor_reversed_Alert_Count++;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <Proximal_Flow_Sensor_Reverse_Direction+0x74>)
 8001b6e:	891b      	ldrh	r3, [r3, #8]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <Proximal_Flow_Sensor_Reverse_Direction+0x74>)
 8001b76:	811a      	strh	r2, [r3, #8]
					 if( Alert_Count.Proximal_Flow_Sensor_reversed_Alert_Count>=150)
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <Proximal_Flow_Sensor_Reverse_Direction+0x74>)
 8001b7a:	891b      	ldrh	r3, [r3, #8]
 8001b7c:	2b95      	cmp	r3, #149	; 0x95
 8001b7e:	d90d      	bls.n	8001b9c <Proximal_Flow_Sensor_Reverse_Direction+0x5c>
						  Alert_Status = ALERT_HAPPEN;
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <Proximal_Flow_Sensor_Reverse_Direction+0x78>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
						  SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_FLOW_SENSOR_WRONG_DIRECTION);
 8001b86:	4a0d      	ldr	r2, [pc, #52]	; (8001bbc <Proximal_Flow_Sensor_Reverse_Direction+0x7c>)
 8001b88:	78d3      	ldrb	r3, [r2, #3]
 8001b8a:	f043 0320 	orr.w	r3, r3, #32
 8001b8e:	70d3      	strb	r3, [r2, #3]
						  PROXIMAL_SENSOR_REVERSE_ALERT_CHECK =  DO_NOT_CHECK;
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <Proximal_Flow_Sensor_Reverse_Direction+0x70>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
						  Proximal_Flow_Sensor_Reverse = 1;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <Proximal_Flow_Sensor_Reverse_Direction+0x80>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20012b38 	.word	0x20012b38
 8001bac:	200125f8 	.word	0x200125f8
 8001bb0:	200121d4 	.word	0x200121d4
 8001bb4:	20012b98 	.word	0x20012b98
 8001bb8:	2001287c 	.word	0x2001287c
 8001bbc:	20012408 	.word	0x20012408
 8001bc0:	2000009e 	.word	0x2000009e

08001bc4 <LED_Alert>:
 * This function controls the alert indication LED
 * @param None.
 * */

void LED_Alert()
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
	if(Alert_Status == ALERT_HAPPEN)
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <LED_Alert+0x68>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d112      	bne.n	8001bf6 <LED_Alert+0x32>
	{
		Red_Led_ON();
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <LED_Alert+0x6c>)
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <LED_Alert+0x6c>)
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	6153      	str	r3, [r2, #20]
		Blue_Led_OFF();
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <LED_Alert+0x6c>)
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <LED_Alert+0x6c>)
 8001be2:	f023 0308 	bic.w	r3, r3, #8
 8001be6:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <LED_Alert+0x6c>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <LED_Alert+0x6c>)
 8001bee:	f023 0320 	bic.w	r3, r3, #32
 8001bf2:	6153      	str	r3, [r2, #20]
	{
		Green_Led_ON();
		Blue_Led_OFF();
		Red_Led_OFF();
	}
}
 8001bf4:	e015      	b.n	8001c22 <LED_Alert+0x5e>
	else if(Alert_Status == NO_ALERT)
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <LED_Alert+0x68>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d111      	bne.n	8001c22 <LED_Alert+0x5e>
		Green_Led_ON();
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <LED_Alert+0x6c>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <LED_Alert+0x6c>)
 8001c04:	f043 0320 	orr.w	r3, r3, #32
 8001c08:	6153      	str	r3, [r2, #20]
		Blue_Led_OFF();
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <LED_Alert+0x6c>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <LED_Alert+0x6c>)
 8001c10:	f023 0308 	bic.w	r3, r3, #8
 8001c14:	6153      	str	r3, [r2, #20]
		Red_Led_OFF();
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <LED_Alert+0x6c>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <LED_Alert+0x6c>)
 8001c1c:	f023 0310 	bic.w	r3, r3, #16
 8001c20:	6153      	str	r3, [r2, #20]
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	2001287c 	.word	0x2001287c
 8001c30:	40020c00 	.word	0x40020c00

08001c34 <Hide_Alert_1>:
 * @brief Hide_Alert_1.
 * This function resets the alert bits when an alert occurs due to the
 * patient circuit being disconnected from the device.
 * */
void Hide_Alert_1()
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_PLUGGED_IN);
 8001c38:	4a34      	ldr	r2, [pc, #208]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c3a:	78d3      	ldrb	r3, [r2, #3]
 8001c3c:	f36f 0300 	bfc	r3, #0, #1
 8001c40:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BATTERY_MODE);
 8001c42:	4a32      	ldr	r2, [pc, #200]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c44:	78d3      	ldrb	r3, [r2, #3]
 8001c46:	f36f 0341 	bfc	r3, #1, #1
 8001c4a:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PIP);
 8001c4c:	4a2f      	ldr	r2, [pc, #188]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c4e:	7953      	ldrb	r3, [r2, #5]
 8001c50:	f36f 0300 	bfc	r3, #0, #1
 8001c54:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
 8001c56:	4a2d      	ldr	r2, [pc, #180]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c58:	7953      	ldrb	r3, [r2, #5]
 8001c5a:	f36f 0341 	bfc	r3, #1, #1
 8001c5e:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PEEP);
 8001c60:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c62:	7953      	ldrb	r3, [r2, #5]
 8001c64:	f36f 0382 	bfc	r3, #2, #1
 8001c68:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
 8001c6a:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c6c:	7953      	ldrb	r3, [r2, #5]
 8001c6e:	f36f 03c3 	bfc	r3, #3, #1
 8001c72:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
 8001c74:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c76:	7953      	ldrb	r3, [r2, #5]
 8001c78:	f36f 1386 	bfc	r3, #6, #1
 8001c7c:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
 8001c7e:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c80:	7953      	ldrb	r3, [r2, #5]
 8001c82:	f36f 13c7 	bfc	r3, #7, #1
 8001c86:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_TIDAL_VOLUME);
 8001c88:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c8a:	7953      	ldrb	r3, [r2, #5]
 8001c8c:	f36f 1304 	bfc	r3, #4, #1
 8001c90:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_TIDAL_VOLUME);
 8001c92:	4a1e      	ldr	r2, [pc, #120]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c94:	7953      	ldrb	r3, [r2, #5]
 8001c96:	f36f 1345 	bfc	r3, #5, #1
 8001c9a:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001c9e:	7993      	ldrb	r3, [r2, #6]
 8001ca0:	f36f 1386 	bfc	r3, #6, #1
 8001ca4:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
 8001ca6:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001ca8:	7993      	ldrb	r3, [r2, #6]
 8001caa:	f36f 13c7 	bfc	r3, #7, #1
 8001cae:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 8001cb0:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001cb2:	78d3      	ldrb	r3, [r2, #3]
 8001cb4:	f36f 03c3 	bfc	r3, #3, #1
 8001cb8:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_FLOW_SENSOR_WRONG_DIRECTION);
 8001cba:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001cbc:	78d3      	ldrb	r3, [r2, #3]
 8001cbe:	f36f 1345 	bfc	r3, #5, #1
 8001cc2:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_HIGH_FIO2);
 8001cc4:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001cc6:	7993      	ldrb	r3, [r2, #6]
 8001cc8:	f36f 0300 	bfc	r3, #0, #1
 8001ccc:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LOW_FIO2);
 8001cce:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001cd0:	7993      	ldrb	r3, [r2, #6]
 8001cd2:	f36f 0341 	bfc	r3, #1, #1
 8001cd6:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_LEAK);
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001cda:	7913      	ldrb	r3, [r2, #4]
 8001cdc:	f36f 03c3 	bfc	r3, #3, #1
 8001ce0:	7113      	strb	r3, [r2, #4]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_20_PER_BATTERY_DRAIN);
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001ce4:	78d3      	ldrb	r3, [r2, #3]
 8001ce6:	f36f 0382 	bfc	r3, #2, #1
 8001cea:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001cee:	78d3      	ldrb	r3, [r2, #3]
 8001cf0:	f36f 1386 	bfc	r3, #6, #1
 8001cf4:	70d3      	strb	r3, [r2, #3]
    CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <Hide_Alert_1+0xd8>)
 8001cf8:	78d3      	ldrb	r3, [r2, #3]
 8001cfa:	f36f 13c7 	bfc	r3, #7, #1
 8001cfe:	70d3      	strb	r3, [r2, #3]

}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20012408 	.word	0x20012408

08001d10 <Hide_Alert_2>:
 * @brief Hide_Alert_2.
 * This function resets the alert bits when an alert occurs due to the
 * proximal flow sensor is connected in the reverse direction.
 * */
void Hide_Alert_2()
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_PLUGGED_IN);
 8001d14:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d16:	78d3      	ldrb	r3, [r2, #3]
 8001d18:	f36f 0300 	bfc	r3, #0, #1
 8001d1c:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_BATTERY_MODE);
 8001d1e:	4a32      	ldr	r2, [pc, #200]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d20:	78d3      	ldrb	r3, [r2, #3]
 8001d22:	f36f 0341 	bfc	r3, #1, #1
 8001d26:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PIP);
 8001d28:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d2a:	7953      	ldrb	r3, [r2, #5]
 8001d2c:	f36f 0300 	bfc	r3, #0, #1
 8001d30:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PIP);
 8001d32:	4a2d      	ldr	r2, [pc, #180]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d34:	7953      	ldrb	r3, [r2, #5]
 8001d36:	f36f 0341 	bfc	r3, #1, #1
 8001d3a:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_HIGH_PEEP);
 8001d3c:	4a2a      	ldr	r2, [pc, #168]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d3e:	7953      	ldrb	r3, [r2, #5]
 8001d40:	f36f 0382 	bfc	r3, #2, #1
 8001d44:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN, _ALERT_LOW_PEEP);
 8001d46:	4a28      	ldr	r2, [pc, #160]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d48:	7953      	ldrb	r3, [r2, #5]
 8001d4a:	f36f 03c3 	bfc	r3, #3, #1
 8001d4e:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_MINUTE_VOLUME);
 8001d50:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d52:	7953      	ldrb	r3, [r2, #5]
 8001d54:	f36f 1386 	bfc	r3, #6, #1
 8001d58:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_MINUTE_VOLUME);
 8001d5a:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d5c:	7953      	ldrb	r3, [r2, #5]
 8001d5e:	f36f 13c7 	bfc	r3, #7, #1
 8001d62:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_HIGH_TIDAL_VOLUME);
 8001d64:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d66:	7953      	ldrb	r3, [r2, #5]
 8001d68:	f36f 1304 	bfc	r3, #4, #1
 8001d6c:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(THIRD_FRAME_UN,_ALERT_LOW_TIDAL_VOLUME);
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d70:	7953      	ldrb	r3, [r2, #5]
 8001d72:	f36f 1345 	bfc	r3, #5, #1
 8001d76:	7153      	strb	r3, [r2, #5]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_HIGH_RR);
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d7a:	7993      	ldrb	r3, [r2, #6]
 8001d7c:	f36f 1386 	bfc	r3, #6, #1
 8001d80:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN,_ALERT_LOW_RR);
 8001d82:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d84:	7993      	ldrb	r3, [r2, #6]
 8001d86:	f36f 13c7 	bfc	r3, #7, #1
 8001d8a:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d8e:	78d3      	ldrb	r3, [r2, #3]
 8001d90:	f36f 03c3 	bfc	r3, #3, #1
 8001d94:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001d98:	78d3      	ldrb	r3, [r2, #3]
 8001d9a:	f36f 1304 	bfc	r3, #4, #1
 8001d9e:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_HIGH_FIO2);
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001da2:	7993      	ldrb	r3, [r2, #6]
 8001da4:	f36f 0300 	bfc	r3, #0, #1
 8001da8:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(FOURTH_FRAME_UN, _ALERT_LOW_FIO2);
 8001daa:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001dac:	7993      	ldrb	r3, [r2, #6]
 8001dae:	f36f 0341 	bfc	r3, #1, #1
 8001db2:	7193      	strb	r3, [r2, #6]
	CLEAR_ALERT_BIT(SECOND_FRAME_UN, _ALERT_LEAK);
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001db6:	7913      	ldrb	r3, [r2, #4]
 8001db8:	f36f 03c3 	bfc	r3, #3, #1
 8001dbc:	7113      	strb	r3, [r2, #4]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_20_PER_BATTERY_DRAIN);
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001dc0:	78d3      	ldrb	r3, [r2, #3]
 8001dc2:	f36f 0382 	bfc	r3, #2, #1
 8001dc6:	70d3      	strb	r3, [r2, #3]
	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001dca:	78d3      	ldrb	r3, [r2, #3]
 8001dcc:	f36f 1386 	bfc	r3, #6, #1
 8001dd0:	70d3      	strb	r3, [r2, #3]
    CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <Hide_Alert_2+0xd8>)
 8001dd4:	78d3      	ldrb	r3, [r2, #3]
 8001dd6:	f36f 13c7 	bfc	r3, #7, #1
 8001dda:	70d3      	strb	r3, [r2, #3]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20012408 	.word	0x20012408

08001dec <Convert_Battery_Percentage>:
/**
 * @brief Convert_Battery_Percentage.
 * This function calculate the battery percentage in device.
 * */
void Convert_Battery_Percentage()
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
	if(Toggle == 0)
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <Convert_Battery_Percentage+0xbc>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d122      	bne.n	8001e40 <Convert_Battery_Percentage+0x54>
	{
		Battery_Voltage =  (uint8_t) (Bat_Avg / Bat_Avg_count);
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <Convert_Battery_Percentage+0xc0>)
 8001dfc:	edd3 6a00 	vldr	s13, [r3]
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <Convert_Battery_Percentage+0xc4>)
 8001e02:	ed93 7a00 	vldr	s14, [r3]
 8001e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e0e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e12:	793b      	ldrb	r3, [r7, #4]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <Convert_Battery_Percentage+0xc8>)
 8001e18:	701a      	strb	r2, [r3, #0]
		Battery_Voltage_old = Battery_Voltage;
 8001e1a:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <Convert_Battery_Percentage+0xc8>)
 8001e1c:	781a      	ldrb	r2, [r3, #0]
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <Convert_Battery_Percentage+0xcc>)
 8001e20:	701a      	strb	r2, [r3, #0]


		if(Battery_Voltage_new > Battery_Voltage)
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <Convert_Battery_Percentage+0xd0>)
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <Convert_Battery_Percentage+0xc8>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d903      	bls.n	8001e36 <Convert_Battery_Percentage+0x4a>
		{
			Battery_Voltage = Battery_Voltage_new;
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <Convert_Battery_Percentage+0xd0>)
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <Convert_Battery_Percentage+0xc8>)
 8001e34:	701a      	strb	r2, [r3, #0]
		}

		Battery_Voltage_new = Battery_Voltage;
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <Convert_Battery_Percentage+0xc8>)
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <Convert_Battery_Percentage+0xd0>)
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e024      	b.n	8001e8a <Convert_Battery_Percentage+0x9e>

	}
	else if(Toggle == 1)
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <Convert_Battery_Percentage+0xbc>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d120      	bne.n	8001e8a <Convert_Battery_Percentage+0x9e>
	{
		Battery_Voltage =  (uint8_t) (Bat_Avg / Bat_Avg_count);
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <Convert_Battery_Percentage+0xc0>)
 8001e4a:	edd3 6a00 	vldr	s13, [r3]
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <Convert_Battery_Percentage+0xc4>)
 8001e50:	ed93 7a00 	vldr	s14, [r3]
 8001e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e60:	793b      	ldrb	r3, [r7, #4]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <Convert_Battery_Percentage+0xc8>)
 8001e66:	701a      	strb	r2, [r3, #0]
		if(Battery_Voltage_old < Battery_Voltage)
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <Convert_Battery_Percentage+0xcc>)
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <Convert_Battery_Percentage+0xc8>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d203      	bcs.n	8001e7c <Convert_Battery_Percentage+0x90>
		{
			Battery_Voltage = Battery_Voltage_old;
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <Convert_Battery_Percentage+0xcc>)
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <Convert_Battery_Percentage+0xc8>)
 8001e7a:	701a      	strb	r2, [r3, #0]
		}
		Battery_Voltage_old = Battery_Voltage;
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <Convert_Battery_Percentage+0xc8>)
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <Convert_Battery_Percentage+0xcc>)
 8001e82:	701a      	strb	r2, [r3, #0]
		Battery_Voltage_new = 0;
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <Convert_Battery_Percentage+0xd0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
	}
	Bat_Avg         = 0;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <Convert_Battery_Percentage+0xc0>)
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
	Bat_Avg_count   = 0;
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <Convert_Battery_Percentage+0xc4>)
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2000009f 	.word	0x2000009f
 8001eac:	20012b4c 	.word	0x20012b4c
 8001eb0:	20012404 	.word	0x20012404
 8001eb4:	20012621 	.word	0x20012621
 8001eb8:	20000001 	.word	0x20000001
 8001ebc:	200000a1 	.word	0x200000a1

08001ec0 <Read_Battery_Voltage>:
/**
 * @brief Convert_Battery_Percentage.
 * This function calculate the analog value of battery percentage in device.
 * */
void Read_Battery_Voltage()
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
    if( (Running_Mode == Aprv)  )
 8001ec4:	4b6d      	ldr	r3, [pc, #436]	; (800207c <Read_Battery_Voltage+0x1bc>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d13f      	bne.n	8001f4c <Read_Battery_Voltage+0x8c>
    {
         if((BREATH_STATE == EXPIRATION_CYCLE))
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <Read_Battery_Voltage+0x1c0>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 80d1 	bne.w	8002078 <Read_Battery_Voltage+0x1b8>
         {
			Battery_Raw_Value  = ((Adc.AdcData[2]-3050)*100)/(750.0);           //pin number has changed for board pin changed
 8001ed6:	4b6b      	ldr	r3, [pc, #428]	; (8002084 <Read_Battery_Voltage+0x1c4>)
 8001ed8:	889b      	ldrh	r3, [r3, #4]
 8001eda:	f6a3 33ea 	subw	r3, r3, #3050	; 0xbea
 8001ede:	2264      	movs	r2, #100	; 0x64
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fac5 	bl	8000474 <__aeabi_i2d>
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	4b66      	ldr	r3, [pc, #408]	; (8002088 <Read_Battery_Voltage+0x1c8>)
 8001ef0:	f7fe fc54 	bl	800079c <__aeabi_ddiv>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fe06 	bl	8000b0c <__aeabi_d2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4a62      	ldr	r2, [pc, #392]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8001f04:	6013      	str	r3, [r2, #0]
			if(Battery_Raw_Value>100)
 8001f06:	4b61      	ldr	r3, [pc, #388]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002090 <Read_Battery_Voltage+0x1d0>
 8001f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	dd02      	ble.n	8001f20 <Read_Battery_Voltage+0x60>
			{
				Battery_Raw_Value=100;
 8001f1a:	4b5c      	ldr	r3, [pc, #368]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8001f1c:	4a5d      	ldr	r2, [pc, #372]	; (8002094 <Read_Battery_Voltage+0x1d4>)
 8001f1e:	601a      	str	r2, [r3, #0]
			}
			Bat_Avg += Battery_Raw_Value;
 8001f20:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <Read_Battery_Voltage+0x1d8>)
 8001f22:	ed93 7a00 	vldr	s14, [r3]
 8001f26:	4b59      	ldr	r3, [pc, #356]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f30:	4b59      	ldr	r3, [pc, #356]	; (8002098 <Read_Battery_Voltage+0x1d8>)
 8001f32:	edc3 7a00 	vstr	s15, [r3]
			Bat_Avg_count++;
 8001f36:	4b59      	ldr	r3, [pc, #356]	; (800209c <Read_Battery_Voltage+0x1dc>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <Read_Battery_Voltage+0x1dc>)
 8001f46:	edc3 7a00 	vstr	s15, [r3]
				Send_Bluetooth_Data_Farme = SEND_SAMPLED_PARAMETER_FRAME;
				Send_Frame                = First_Frame;
			}
		}
    }
}
 8001f4a:	e095      	b.n	8002078 <Read_Battery_Voltage+0x1b8>
    else if(Run_Current_Breathe_State == Run_Expiration_Cycle)
 8001f4c:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <Read_Battery_Voltage+0x1e0>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d13a      	bne.n	8001fca <Read_Battery_Voltage+0x10a>
		Battery_Raw_Value  = ((Adc.AdcData[2]-3050)*100)/(750.0);                //pin number has changed for board pin changed
 8001f54:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <Read_Battery_Voltage+0x1c4>)
 8001f56:	889b      	ldrh	r3, [r3, #4]
 8001f58:	f6a3 33ea 	subw	r3, r3, #3050	; 0xbea
 8001f5c:	2264      	movs	r2, #100	; 0x64
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fa86 	bl	8000474 <__aeabi_i2d>
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b46      	ldr	r3, [pc, #280]	; (8002088 <Read_Battery_Voltage+0x1c8>)
 8001f6e:	f7fe fc15 	bl	800079c <__aeabi_ddiv>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fdc7 	bl	8000b0c <__aeabi_d2f>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a42      	ldr	r2, [pc, #264]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8001f82:	6013      	str	r3, [r2, #0]
		if(Battery_Raw_Value>100)
 8001f84:	4b41      	ldr	r3, [pc, #260]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002090 <Read_Battery_Voltage+0x1d0>
 8001f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f96:	dd02      	ble.n	8001f9e <Read_Battery_Voltage+0xde>
			Battery_Raw_Value=100;
 8001f98:	4b3c      	ldr	r3, [pc, #240]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8001f9a:	4a3e      	ldr	r2, [pc, #248]	; (8002094 <Read_Battery_Voltage+0x1d4>)
 8001f9c:	601a      	str	r2, [r3, #0]
		Bat_Avg += Battery_Raw_Value;
 8001f9e:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <Read_Battery_Voltage+0x1d8>)
 8001fa0:	ed93 7a00 	vldr	s14, [r3]
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fae:	4b3a      	ldr	r3, [pc, #232]	; (8002098 <Read_Battery_Voltage+0x1d8>)
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
		Bat_Avg_count++;
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <Read_Battery_Voltage+0x1dc>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fc2:	4b36      	ldr	r3, [pc, #216]	; (800209c <Read_Battery_Voltage+0x1dc>)
 8001fc4:	edc3 7a00 	vstr	s15, [r3]
}
 8001fc8:	e056      	b.n	8002078 <Read_Battery_Voltage+0x1b8>
    else if(Run_Current_Breathe_State == No_Run_State)
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <Read_Battery_Voltage+0x1e0>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d152      	bne.n	8002078 <Read_Battery_Voltage+0x1b8>
		Battery_Raw_Value  = ((Adc.AdcData[2]-3050)*100)/(750.0);                //pin number has changed for board pin changed
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <Read_Battery_Voltage+0x1c4>)
 8001fd4:	889b      	ldrh	r3, [r3, #4]
 8001fd6:	f6a3 33ea 	subw	r3, r3, #3050	; 0xbea
 8001fda:	2264      	movs	r2, #100	; 0x64
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa47 	bl	8000474 <__aeabi_i2d>
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <Read_Battery_Voltage+0x1c8>)
 8001fec:	f7fe fbd6 	bl	800079c <__aeabi_ddiv>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f7fe fd88 	bl	8000b0c <__aeabi_d2f>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a23      	ldr	r2, [pc, #140]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8002000:	6013      	str	r3, [r2, #0]
		if(Battery_Raw_Value>100)
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002090 <Read_Battery_Voltage+0x1d0>
 800200c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002014:	dd02      	ble.n	800201c <Read_Battery_Voltage+0x15c>
			Battery_Raw_Value=100;
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8002018:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <Read_Battery_Voltage+0x1d4>)
 800201a:	601a      	str	r2, [r3, #0]
		Bat_Avg += Battery_Raw_Value;
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <Read_Battery_Voltage+0x1d8>)
 800201e:	ed93 7a00 	vldr	s14, [r3]
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <Read_Battery_Voltage+0x1cc>)
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <Read_Battery_Voltage+0x1d8>)
 800202e:	edc3 7a00 	vstr	s15, [r3]
		Bat_Avg_count++;
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <Read_Battery_Voltage+0x1dc>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800203c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <Read_Battery_Voltage+0x1dc>)
 8002042:	edc3 7a00 	vstr	s15, [r3]
		if(Bat_Avg_count > 5000)
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <Read_Battery_Voltage+0x1dc>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80020a4 <Read_Battery_Voltage+0x1e4>
 8002050:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002058:	dc00      	bgt.n	800205c <Read_Battery_Voltage+0x19c>
}
 800205a:	e00d      	b.n	8002078 <Read_Battery_Voltage+0x1b8>
			AC_Supply_or_Battery_Supply_Indication();
 800205c:	f7ff f964 	bl	8001328 <AC_Supply_or_Battery_Supply_Indication>
			Convert_Battery_Percentage();
 8002060:	f7ff fec4 	bl	8001dec <Convert_Battery_Percentage>
			if(Device_Monitoring  ==  NO)
 8002064:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <Read_Battery_Voltage+0x1e8>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d105      	bne.n	8002078 <Read_Battery_Voltage+0x1b8>
				Send_Bluetooth_Data_Farme = SEND_SAMPLED_PARAMETER_FRAME;
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <Read_Battery_Voltage+0x1ec>)
 800206e:	2203      	movs	r2, #3
 8002070:	701a      	strb	r2, [r3, #0]
				Send_Frame                = First_Frame;
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <Read_Battery_Voltage+0x1f0>)
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20012b68 	.word	0x20012b68
 8002080:	20012a3c 	.word	0x20012a3c
 8002084:	20012690 	.word	0x20012690
 8002088:	40877000 	.word	0x40877000
 800208c:	2001268c 	.word	0x2001268c
 8002090:	42c80000 	.word	0x42c80000
 8002094:	42c80000 	.word	0x42c80000
 8002098:	20012b4c 	.word	0x20012b4c
 800209c:	20012404 	.word	0x20012404
 80020a0:	20012870 	.word	0x20012870
 80020a4:	459c4000 	.word	0x459c4000
 80020a8:	20012640 	.word	0x20012640
 80020ac:	2001269d 	.word	0x2001269d
 80020b0:	20012770 	.word	0x20012770

080020b4 <APRV_Mode_Packet_Data>:




void APRV_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	 APRV.P_HIGH		     =  (Receive_Graph_Packet->PIP_PS_Phigh);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	791a      	ldrb	r2, [r3, #4]
 80020c0:	4b42      	ldr	r3, [pc, #264]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 80020c2:	701a      	strb	r2, [r3, #0]
	 APRV.P_LOW 		     =  (Receive_Graph_Packet->PEEP_CPAP_Plow);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	795a      	ldrb	r2, [r3, #5]
 80020c8:	4b40      	ldr	r3, [pc, #256]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 80020ca:	705a      	strb	r2, [r3, #1]
	 APRV.T_HIGH             =  (Receive_Graph_Packet->T_high);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7a9a      	ldrb	r2, [r3, #10]
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 80020d2:	709a      	strb	r2, [r3, #2]
	 APRV.T_LOW              =  (Receive_Graph_Packet->T_low);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7ada      	ldrb	r2, [r3, #11]
 80020d8:	4b3c      	ldr	r3, [pc, #240]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 80020da:	70da      	strb	r2, [r3, #3]
	 APRV.T_HIGH_VAL         =  ( APRV.T_HIGH   * 100);
 80020dc:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	461a      	mov	r2, r3
 80020e2:	2364      	movs	r3, #100	; 0x64
 80020e4:	fb03 f302 	mul.w	r3, r3, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 80020ec:	605a      	str	r2, [r3, #4]
	 APRV.T_LOW_VAL          =  ( APRV.T_LOW    * 100);
 80020ee:	4b37      	ldr	r3, [pc, #220]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 80020f0:	78db      	ldrb	r3, [r3, #3]
 80020f2:	461a      	mov	r2, r3
 80020f4:	2364      	movs	r3, #100	; 0x64
 80020f6:	fb03 f302 	mul.w	r3, r3, r2
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b33      	ldr	r3, [pc, #204]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 80020fe:	609a      	str	r2, [r3, #8]
	 APRV.FIO2_VAL           =  (Receive_Graph_Packet->FiO2);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7a1a      	ldrb	r2, [r3, #8]
 8002104:	4b31      	ldr	r3, [pc, #196]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 8002106:	751a      	strb	r2, [r3, #20]

	 APRV.TRIG_TYPE          = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	78db      	ldrb	r3, [r3, #3]
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	b2db      	uxtb	r3, r3
 8002110:	b29b      	uxth	r3, r3
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 800211a:	82da      	strh	r2, [r3, #22]
	 APRV.TRIG_LMT           = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7c1b      	ldrb	r3, [r3, #16]
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <APRV_Mode_Packet_Data+0x11c>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	08db      	lsrs	r3, r3, #3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 8002134:	edc3 7a06 	vstr	s15, [r3, #24]
	 APRV.TRIG_TIME          = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7bdb      	ldrb	r3, [r3, #15]
 800213c:	b29b      	uxth	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	4413      	add	r3, r2
 8002144:	461a      	mov	r2, r3
 8002146:	0091      	lsls	r1, r2, #2
 8002148:	461a      	mov	r2, r3
 800214a:	460b      	mov	r3, r1
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 8002154:	839a      	strh	r2, [r3, #28]


	 if(APRV.TRIG_TYPE == 0)
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 8002158:	8adb      	ldrh	r3, [r3, #22]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <APRV_Mode_Packet_Data+0xb2>
		Trigger_Type = Pressure_Trigger;
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <APRV_Mode_Packet_Data+0x120>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e006      	b.n	8002174 <APRV_Mode_Packet_Data+0xc0>
	else if(APRV.TRIG_TYPE == 1)
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 8002168:	8adb      	ldrh	r3, [r3, #22]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d102      	bne.n	8002174 <APRV_Mode_Packet_Data+0xc0>
		Trigger_Type = Flow_Trigger;
 800216e:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <APRV_Mode_Packet_Data+0x120>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]


	 Vent_Type               = ET_TUBE_MODE;
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <APRV_Mode_Packet_Data+0x124>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
	 OOM202.offset_minimum   = ( 0x7F & (Receive_Graph_Packet->Vent_Type_Min_O2));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7c5b      	ldrb	r3, [r3, #17]
 800217e:	b29b      	uxth	r3, r3
 8002180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002184:	b29a      	uxth	r2, r3
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <APRV_Mode_Packet_Data+0x128>)
 8002188:	805a      	strh	r2, [r3, #2]
	 OOM202.offset_maximum   = Receive_Graph_Packet->Max_O2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7c9b      	ldrb	r3, [r3, #18]
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <APRV_Mode_Packet_Data+0x128>)
 8002192:	809a      	strh	r2, [r3, #4]


	 Alert_Check_Time        = ((float)APRV.T_HIGH_VAL/3);
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <APRV_Mode_Packet_Data+0x118>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	ee07 3a90 	vmov	s15, r3
 800219c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021a0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80021a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ac:	ee17 2a90 	vmov	r2, s15
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <APRV_Mode_Packet_Data+0x12c>)
 80021b2:	601a      	str	r2, [r3, #0]
	 Mode_Initial_Flag_Set   = OPEN;
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <APRV_Mode_Packet_Data+0x130>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
	 vTaskResume(Mode_initial_Flag_Set_Handler);
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <APRV_Mode_Packet_Data+0x134>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f019 f83c 	bl	801b23c <vTaskResume>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20012a14 	.word	0x20012a14
 80021d0:	cccccccd 	.word	0xcccccccd
 80021d4:	20012244 	.word	0x20012244
 80021d8:	200129f4 	.word	0x200129f4
 80021dc:	20012224 	.word	0x20012224
 80021e0:	2001246c 	.word	0x2001246c
 80021e4:	20012cb1 	.word	0x20012cb1
 80021e8:	200129ac 	.word	0x200129ac

080021ec <APRV_Task>:




void APRV_Task(void *argument)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (APRV_current_breathe)
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <APRV_Task+0x40>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d002      	beq.n	8002202 <APRV_Task+0x16>
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d003      	beq.n	8002208 <APRV_Task+0x1c>
			  case APRV_EXP:
				  APRV_EXPIRATION_CYCLE_CONTINUOUS(PEEP_Maintain_Parameter.PEEP_Temp,
	                                                PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
			  break;
			  default:
			  break;
 8002200:	e00f      	b.n	8002222 <APRV_Task+0x36>
				  APRV_INSPIRATION_CYCLE_CONTINUOUS();
 8002202:	f000 f911 	bl	8002428 <APRV_INSPIRATION_CYCLE_CONTINUOUS>
			  break;
 8002206:	e00c      	b.n	8002222 <APRV_Task+0x36>
				  APRV_EXPIRATION_CYCLE_CONTINUOUS(PEEP_Maintain_Parameter.PEEP_Temp,
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <APRV_Task+0x44>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
	                                                PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <APRV_Task+0x44>)
 8002210:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
				  APRV_EXPIRATION_CYCLE_CONTINUOUS(PEEP_Maintain_Parameter.PEEP_Temp,
 8002214:	b29b      	uxth	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	eeb0 0a67 	vmov.f32	s0, s15
 800221c:	f000 f92a 	bl	8002474 <APRV_EXPIRATION_CYCLE_CONTINUOUS>
			  break;
 8002220:	bf00      	nop
		}
		vTaskDelay(Two_Millisecond_Delay);
 8002222:	2002      	movs	r0, #2
 8002224:	f018 ff12 	bl	801b04c <vTaskDelay>
		switch (APRV_current_breathe)
 8002228:	e7e4      	b.n	80021f4 <APRV_Task+0x8>
 800222a:	bf00      	nop
 800222c:	2001263c 	.word	0x2001263c
 8002230:	20012c74 	.word	0x20012c74

08002234 <APRV_ONE_TIME_Task>:
}



void APRV_ONE_TIME_Task(void *argument)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (APRV_Next_Breathe)
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <APRV_ONE_TIME_Task+0x24>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d002      	beq.n	800224a <APRV_ONE_TIME_Task+0x16>
 8002244:	2b02      	cmp	r3, #2
 8002246:	d003      	beq.n	8002250 <APRV_ONE_TIME_Task+0x1c>
			  break;
		      case APRV_EXPIRATION:
		    	  APRV_EXPIRATION_CYCLE_SINGLE();
		      break;
		      default:
		      break;
 8002248:	e005      	b.n	8002256 <APRV_ONE_TIME_Task+0x22>
		    	  APRV_INSPIRATION_CYCLE_SINGLE();
 800224a:	f000 f807 	bl	800225c <APRV_INSPIRATION_CYCLE_SINGLE>
			  break;
 800224e:	e002      	b.n	8002256 <APRV_ONE_TIME_Task+0x22>
		    	  APRV_EXPIRATION_CYCLE_SINGLE();
 8002250:	f000 f89a 	bl	8002388 <APRV_EXPIRATION_CYCLE_SINGLE>
		      break;
 8002254:	bf00      	nop
		switch (APRV_Next_Breathe)
 8002256:	e7f1      	b.n	800223c <APRV_ONE_TIME_Task+0x8>
 8002258:	20012a10 	.word	0x20012a10

0800225c <APRV_INSPIRATION_CYCLE_SINGLE>:
}



static void APRV_INSPIRATION_CYCLE_SINGLE()
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	//Breath_Count                       = Count_The_Breath;
	Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <APRV_INSPIRATION_CYCLE_SINGLE+0xdc>)
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
	Blower_Status       = BlOWER_ON;
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <APRV_INSPIRATION_CYCLE_SINGLE+0xe0>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
	Find_Average_Flow();
 800226c:	f00b fe0c 	bl	800de88 <Find_Average_Flow>
	BREATH_STATE                       = INSPIRATION_CYCLE;
 8002270:	4b33      	ldr	r3, [pc, #204]	; (8002340 <APRV_INSPIRATION_CYCLE_SINGLE+0xe4>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
	ExpValve_CLOSE();
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <APRV_INSPIRATION_CYCLE_SINGLE+0xe8>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4a32      	ldr	r2, [pc, #200]	; (8002344 <APRV_INSPIRATION_CYCLE_SINGLE+0xe8>)
 800227c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002280:	6153      	str	r3, [r2, #20]
	APRV_PIP_AVERAGE();
 8002282:	f000 f93b 	bl	80024fc <APRV_PIP_AVERAGE>
	APRV_PEEP_AVERAGE();
 8002286:	f000 f965 	bl	8002554 <APRV_PEEP_AVERAGE>

	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <APRV_INSPIRATION_CYCLE_SINGLE+0xec>)
 800228c:	78db      	ldrb	r3, [r3, #3]
 800228e:	4618      	mov	r0, r3
 8002290:	f00a fb02 	bl	800c898 <O2_DAC_Control>
	Check_Alert();
 8002294:	f7fe ff36 	bl	8001104 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 8002298:	f7fe ffec 	bl	8001274 <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 800229c:	f7ff fc92 	bl	8001bc4 <LED_Alert>
	Alert_Status                      = NO_ALERT;
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <APRV_INSPIRATION_CYCLE_SINGLE+0xf0>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
	Sampled_Parameter_Inspiration_time();
 80022a6:	f00f feef 	bl	8012088 <Sampled_Parameter_Inspiration_time>
	GRAPH_VALUES.Maximum_oxygen_flow                          = 0;
 80022aa:	4b29      	ldr	r3, [pc, #164]	; (8002350 <APRV_INSPIRATION_CYCLE_SINGLE+0xf4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	829a      	strh	r2, [r3, #20]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    =   PEEP_Control(APRV_PEEP_average.PEEP_AVG_VAL,
 80022b0:	4b28      	ldr	r3, [pc, #160]	; (8002354 <APRV_INSPIRATION_CYCLE_SINGLE+0xf8>)
 80022b2:	7a1b      	ldrb	r3, [r3, #8]
 80022b4:	4a28      	ldr	r2, [pc, #160]	; (8002358 <APRV_INSPIRATION_CYCLE_SINGLE+0xfc>)
 80022b6:	7851      	ldrb	r1, [r2, #1]
													                       APRV.P_LOW,
												                           PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 80022b8:	4a28      	ldr	r2, [pc, #160]	; (800235c <APRV_INSPIRATION_CYCLE_SINGLE+0x100>)
 80022ba:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    =   PEEP_Control(APRV_PEEP_average.PEEP_AVG_VAL,
 80022be:	b292      	uxth	r2, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f9eb 	bl	800269c <PEEP_Control>
 80022c6:	4603      	mov	r3, r0
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <APRV_INSPIRATION_CYCLE_SINGLE+0x100>)
 80022cc:	809a      	strh	r2, [r3, #4]

	PIP_Average_Parameter.Maximum_PIP_Acheived       =  RESET;
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <APRV_INSPIRATION_CYCLE_SINGLE+0x104>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
	Peep_Status                                      =  PEEP_NOT_ACHEIVED;
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <APRV_INSPIRATION_CYCLE_SINGLE+0x108>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay                      =  OPENED;
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <APRV_INSPIRATION_CYCLE_SINGLE+0x10c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
	GRAPH_VALUES.volume                              =  RESET;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <APRV_INSPIRATION_CYCLE_SINGLE+0xf4>)
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
	Volume_max                                       =  RESET;
 80022e8:	4b20      	ldr	r3, [pc, #128]	; (800236c <APRV_INSPIRATION_CYCLE_SINGLE+0x110>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
	APRV_Next_Breathe                                =  APRV_EXPIRATION;
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <APRV_INSPIRATION_CYCLE_SINGLE+0x114>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                             =  APRV_INS;
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <APRV_INSPIRATION_CYCLE_SINGLE+0x118>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
	APRV.T_HIGH_VAL_COUNTER                          =  APRV.T_HIGH_VAL;
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <APRV_INSPIRATION_CYCLE_SINGLE+0xfc>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4a16      	ldr	r2, [pc, #88]	; (8002358 <APRV_INSPIRATION_CYCLE_SINGLE+0xfc>)
 8002300:	6113      	str	r3, [r2, #16]
	TIME_Base_parameter._INSPIRATION_TIME            =  APRV.T_HIGH_VAL;
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <APRV_INSPIRATION_CYCLE_SINGLE+0xfc>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	461a      	mov	r2, r3
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <APRV_INSPIRATION_CYCLE_SINGLE+0x11c>)
 800230a:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED    =  RESET;
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <APRV_INSPIRATION_CYCLE_SINGLE+0x11c>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
	Patient_Trigger_Count                            = 0;
 8002312:	4b1a      	ldr	r3, [pc, #104]	; (800237c <APRV_INSPIRATION_CYCLE_SINGLE+0x120>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
	APRV_Trigger_Check_Time                          = APRV.TRIG_TIME;
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <APRV_INSPIRATION_CYCLE_SINGLE+0xfc>)
 800231a:	8b9b      	ldrh	r3, [r3, #28]
 800231c:	461a      	mov	r2, r3
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <APRV_INSPIRATION_CYCLE_SINGLE+0x124>)
 8002320:	601a      	str	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;  //new //new //new
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <APRV_INSPIRATION_CYCLE_SINGLE+0x128>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
	vTaskDelay(APRV.T_HIGH_VAL);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <APRV_INSPIRATION_CYCLE_SINGLE+0xfc>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	f018 fe8d 	bl	801b04c <vTaskDelay>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20012b71 	.word	0x20012b71
 800233c:	20012828 	.word	0x20012828
 8002340:	20012a3c 	.word	0x20012a3c
 8002344:	40020400 	.word	0x40020400
 8002348:	200124f0 	.word	0x200124f0
 800234c:	2001287c 	.word	0x2001287c
 8002350:	200125f8 	.word	0x200125f8
 8002354:	20012818 	.word	0x20012818
 8002358:	20012a14 	.word	0x20012a14
 800235c:	20012c74 	.word	0x20012c74
 8002360:	200124bc 	.word	0x200124bc
 8002364:	20012a37 	.word	0x20012a37
 8002368:	20012a34 	.word	0x20012a34
 800236c:	20012c70 	.word	0x20012c70
 8002370:	20012a10 	.word	0x20012a10
 8002374:	2001263c 	.word	0x2001263c
 8002378:	20012b38 	.word	0x20012b38
 800237c:	20012a0c 	.word	0x20012a0c
 8002380:	20012b30 	.word	0x20012b30
 8002384:	20012870 	.word	0x20012870

08002388 <APRV_EXPIRATION_CYCLE_SINGLE>:


static void APRV_EXPIRATION_CYCLE_SINGLE()
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
	BREATH_STATE                                        = EXPIRATION_CYCLE;
 800238c:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <APRV_EXPIRATION_CYCLE_SINGLE+0x78>)
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]
	ExpValve_OPEN();
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <APRV_EXPIRATION_CYCLE_SINGLE+0x7c>)
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <APRV_EXPIRATION_CYCLE_SINGLE+0x7c>)
 8002398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800239c:	6153      	str	r3, [r2, #20]
	APRV_mode_blower_control.BLOWER_DAC_VAL             = APRV_TUNE_PIP_BLOWER(&APRV_mode_blower_control.BLOWER_DAC_VAL,
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <APRV_EXPIRATION_CYCLE_SINGLE+0x80>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4819      	ldr	r0, [pc, #100]	; (800240c <APRV_EXPIRATION_CYCLE_SINGLE+0x84>)
 80023a6:	f000 f901 	bl	80025ac <APRV_TUNE_PIP_BLOWER>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <APRV_EXPIRATION_CYCLE_SINGLE+0x84>)
 80023b0:	801a      	strh	r2, [r3, #0]
			                                                       APRV.P_HIGH );

	Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <APRV_EXPIRATION_CYCLE_SINGLE+0x88>)
 80023b4:	78db      	ldrb	r3, [r3, #3]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f00a f87a 	bl	800c4b0 <Calculate_O2>
	Alert_Expiration_Time_Parameter();
 80023bc:	f7fe ffd4 	bl	8001368 <Alert_Expiration_Time_Parameter>

	APRV_Next_Breathe                                   = APRV_INSPIRATION;
 80023c0:	4b14      	ldr	r3, [pc, #80]	; (8002414 <APRV_EXPIRATION_CYCLE_SINGLE+0x8c>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                                = APRV_EXP;
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <APRV_EXPIRATION_CYCLE_SINGLE+0x90>)
 80023c8:	2202      	movs	r2, #2
 80023ca:	701a      	strb	r2, [r3, #0]
	APRV.T_LOW_VAL_COUNTER                              = APRV.T_LOW_VAL;
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <APRV_EXPIRATION_CYCLE_SINGLE+0x80>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <APRV_EXPIRATION_CYCLE_SINGLE+0x80>)
 80023d2:	60d3      	str	r3, [r2, #12]

	TIME_Base_parameter._EXPIRATION_TIME                = APRV.T_LOW_VAL;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <APRV_EXPIRATION_CYCLE_SINGLE+0x80>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <APRV_EXPIRATION_CYCLE_SINGLE+0x94>)
 80023dc:	605a      	str	r2, [r3, #4]
	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <APRV_EXPIRATION_CYCLE_SINGLE+0x94>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
	Parkar_valve_Signal(0);
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <APRV_EXPIRATION_CYCLE_SINGLE+0x98>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	615a      	str	r2, [r3, #20]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <APRV_EXPIRATION_CYCLE_SINGLE+0x9c>)
 80023ec:	2202      	movs	r2, #2
 80023ee:	701a      	strb	r2, [r3, #0]
	vTaskDelay(APRV.T_LOW_VAL);
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <APRV_EXPIRATION_CYCLE_SINGLE+0x80>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f018 fe29 	bl	801b04c <vTaskDelay>
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20012a3c 	.word	0x20012a3c
 8002404:	40020400 	.word	0x40020400
 8002408:	20012a14 	.word	0x20012a14
 800240c:	200122e4 	.word	0x200122e4
 8002410:	200124f0 	.word	0x200124f0
 8002414:	20012a10 	.word	0x20012a10
 8002418:	2001263c 	.word	0x2001263c
 800241c:	20012b38 	.word	0x20012b38
 8002420:	40007400 	.word	0x40007400
 8002424:	20012870 	.word	0x20012870

08002428 <APRV_INSPIRATION_CYCLE_CONTINUOUS>:



static void APRV_INSPIRATION_CYCLE_CONTINUOUS()
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	if(Blower_Wait_Time == 0)
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <APRV_INSPIRATION_CYCLE_CONTINUOUS+0x38>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <APRV_INSPIRATION_CYCLE_CONTINUOUS+0x14>
	{
		Blower_Signal(APRV_mode_blower_control.BLOWER_DAC_VAL);
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <APRV_INSPIRATION_CYCLE_CONTINUOUS+0x3c>)
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <APRV_INSPIRATION_CYCLE_CONTINUOUS+0x40>)
 800243a:	609a      	str	r2, [r3, #8]
	}
	Patient_Circuit_Disconnected_Alert();
 800243c:	f7ff fa2c 	bl	8001898 <Patient_Circuit_Disconnected_Alert>
	Find_Max_PIP();
 8002440:	f006 fc46 	bl	8008cd0 <Find_Max_PIP>
	Check_Trigger();
 8002444:	f000 fae8 	bl	8002a18 <Check_Trigger>
	if(GRAPH_VALUES.pressure >= APRV.P_HIGH)
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <APRV_INSPIRATION_CYCLE_CONTINUOUS+0x44>)
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <APRV_INSPIRATION_CYCLE_CONTINUOUS+0x48>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d302      	bcc.n	800245a <APRV_INSPIRATION_CYCLE_CONTINUOUS+0x32>
	{
		Parkar_valve_Signal(0);
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <APRV_INSPIRATION_CYCLE_CONTINUOUS+0x40>)
 8002456:	2200      	movs	r2, #0
 8002458:	615a      	str	r2, [r3, #20]
	}



}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20012b50 	.word	0x20012b50
 8002464:	200122e4 	.word	0x200122e4
 8002468:	40007400 	.word	0x40007400
 800246c:	200125f8 	.word	0x200125f8
 8002470:	20012a14 	.word	0x20012a14

08002474 <APRV_EXPIRATION_CYCLE_CONTINUOUS>:



static void APRV_EXPIRATION_CYCLE_CONTINUOUS(float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	ed87 0a01 	vstr	s0, [r7, #4]
 800247e:	4603      	mov	r3, r0
 8002480:	807b      	strh	r3, [r7, #2]
	Blower_Signal(0);
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x74>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
	if(GRAPH_VALUES.pressure<= PEEP)
 8002488:	4b18      	ldr	r3, [pc, #96]	; (80024ec <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x78>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002494:	ed97 7a01 	vldr	s14, [r7, #4]
 8002498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	db14      	blt.n	80024cc <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x58>
	{
		if(Expiratory_Valve_Lock_Delay==OPENED)
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x7c>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x44>
		{
			Expiratory_Valve_Lock_Delay=CLOSED;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x7c>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Expiratory_Valve_Open_Time);
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f018 fdca 	bl	801b04c <vTaskDelay>
		}
		Peep_Status=PEEP_ACHEIVED;
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x80>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
		ExpValve_CLOSE();
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x84>)
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x84>)
 80024c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024c8:	6153      	str	r3, [r2, #20]
	}
	else if(Peep_Status==PEEP_NOT_ACHEIVED)
	{
		ExpValve_OPEN();
	}
}
 80024ca:	e009      	b.n	80024e0 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x6c>
	else if(Peep_Status==PEEP_NOT_ACHEIVED)
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x80>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x6c>
		ExpValve_OPEN();
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x84>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <APRV_EXPIRATION_CYCLE_CONTINUOUS+0x84>)
 80024da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024de:	6153      	str	r3, [r2, #20]
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40007400 	.word	0x40007400
 80024ec:	200125f8 	.word	0x200125f8
 80024f0:	20012a34 	.word	0x20012a34
 80024f4:	20012a37 	.word	0x20012a37
 80024f8:	40020400 	.word	0x40020400

080024fc <APRV_PIP_AVERAGE>:




static void APRV_PIP_AVERAGE()
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
	if((APRV_PIP_average.PIP_Cumulative_Val == 0) || (APRV_PIP_average.PIP_Event_Count == 0))
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <APRV_PIP_AVERAGE+0x50>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <APRV_PIP_AVERAGE+0x14>
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <APRV_PIP_AVERAGE+0x50>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <APRV_PIP_AVERAGE+0x20>
	{
		APRV_PIP_average.PIP_Cumulative_Val = 1;
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <APRV_PIP_AVERAGE+0x50>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]
		APRV_PIP_average.PIP_Event_Count    = 1;
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <APRV_PIP_AVERAGE+0x50>)
 8002518:	2201      	movs	r2, #1
 800251a:	605a      	str	r2, [r3, #4]
	}
	APRV_PIP_average.PIP_AVG_VAL        = (uint32_t)(APRV_PIP_average.PIP_Cumulative_Val/ APRV_PIP_average.PIP_Event_Count);
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <APRV_PIP_AVERAGE+0x50>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <APRV_PIP_AVERAGE+0x50>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <APRV_PIP_AVERAGE+0x50>)
 800252c:	721a      	strb	r2, [r3, #8]
	APRV_PIP_average.PIP_Cumulative_Val = RESET;
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <APRV_PIP_AVERAGE+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
	APRV_PIP_average.PIP_Event_Count    = RESET;
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <APRV_PIP_AVERAGE+0x50>)
 8002536:	2200      	movs	r2, #0
 8002538:	605a      	str	r2, [r3, #4]
	PIP_Average_Parameter.PIP_AVG_VAL   = APRV_PIP_average.PIP_AVG_VAL;
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <APRV_PIP_AVERAGE+0x50>)
 800253c:	7a1a      	ldrb	r2, [r3, #8]
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <APRV_PIP_AVERAGE+0x54>)
 8002540:	731a      	strb	r2, [r3, #12]
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	20012a8c 	.word	0x20012a8c
 8002550:	200124bc 	.word	0x200124bc

08002554 <APRV_PEEP_AVERAGE>:




static void APRV_PEEP_AVERAGE()
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
	if((APRV_PEEP_average.PEEP_Cumulative_Val == 0) || (APRV_PEEP_average.PEEP_Event_Count == 0))
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <APRV_PEEP_AVERAGE+0x50>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <APRV_PEEP_AVERAGE+0x14>
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <APRV_PEEP_AVERAGE+0x50>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <APRV_PEEP_AVERAGE+0x20>
	{
		APRV_PEEP_average.PEEP_Cumulative_Val = 1;
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <APRV_PEEP_AVERAGE+0x50>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]
		APRV_PEEP_average.PEEP_Event_Count    = 1;
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <APRV_PEEP_AVERAGE+0x50>)
 8002570:	2201      	movs	r2, #1
 8002572:	605a      	str	r2, [r3, #4]
	}
	APRV_PEEP_average.PEEP_AVG_VAL        = (uint32_t)(APRV_PEEP_average.PEEP_Cumulative_Val/ APRV_PEEP_average.PEEP_Event_Count);
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <APRV_PEEP_AVERAGE+0x50>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <APRV_PEEP_AVERAGE+0x50>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <APRV_PEEP_AVERAGE+0x50>)
 8002584:	721a      	strb	r2, [r3, #8]
	APRV_PEEP_average.PEEP_Cumulative_Val = RESET;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <APRV_PEEP_AVERAGE+0x50>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
	APRV_PEEP_average.PEEP_Event_Count    = RESET;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <APRV_PEEP_AVERAGE+0x50>)
 800258e:	2200      	movs	r2, #0
 8002590:	605a      	str	r2, [r3, #4]

	PEEP_Maintain_Parameter.PEEP_AVG_VAL  = APRV_PEEP_average.PEEP_AVG_VAL;
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <APRV_PEEP_AVERAGE+0x50>)
 8002594:	7a1a      	ldrb	r2, [r3, #8]
 8002596:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <APRV_PEEP_AVERAGE+0x54>)
 8002598:	741a      	strb	r2, [r3, #16]
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20012818 	.word	0x20012818
 80025a8:	20012c74 	.word	0x20012c74

080025ac <APRV_TUNE_PIP_BLOWER>:

static uint16_t APRV_TUNE_PIP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PIP)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	70fb      	strb	r3, [r7, #3]
	if(  ( APRV_PIP_average.PIP_AVG_VAL)  > ( Set_PIP ) && (APRV_PIP_average.PIP_AVG_VAL  < (Set_PIP + 2) ) )
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <APRV_TUNE_PIP_BLOWER+0xec>)
 80025ba:	7a1b      	ldrb	r3, [r3, #8]
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d20c      	bcs.n	80025dc <APRV_TUNE_PIP_BLOWER+0x30>
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	3301      	adds	r3, #1
 80025c6:	4a34      	ldr	r2, [pc, #208]	; (8002698 <APRV_TUNE_PIP_BLOWER+0xec>)
 80025c8:	7a12      	ldrb	r2, [r2, #8]
 80025ca:	4293      	cmp	r3, r2
 80025cc:	db06      	blt.n	80025dc <APRV_TUNE_PIP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	3b0a      	subs	r3, #10
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	e055      	b.n	8002688 <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  ( APRV_PIP_average.PIP_AVG_VAL)  >= ( Set_PIP + 2 ) && (APRV_PIP_average.PIP_AVG_VAL  < (Set_PIP + 4) ) )
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	3301      	adds	r3, #1
 80025e0:	4a2d      	ldr	r2, [pc, #180]	; (8002698 <APRV_TUNE_PIP_BLOWER+0xec>)
 80025e2:	7a12      	ldrb	r2, [r2, #8]
 80025e4:	4293      	cmp	r3, r2
 80025e6:	da0c      	bge.n	8002602 <APRV_TUNE_PIP_BLOWER+0x56>
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	3303      	adds	r3, #3
 80025ec:	4a2a      	ldr	r2, [pc, #168]	; (8002698 <APRV_TUNE_PIP_BLOWER+0xec>)
 80025ee:	7a12      	ldrb	r2, [r2, #8]
 80025f0:	4293      	cmp	r3, r2
 80025f2:	db06      	blt.n	8002602 <APRV_TUNE_PIP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	3b14      	subs	r3, #20
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	e042      	b.n	8002688 <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  ( APRV_PIP_average.PIP_AVG_VAL)  >= ( Set_PIP + 4 )  )
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	3303      	adds	r3, #3
 8002606:	4a24      	ldr	r2, [pc, #144]	; (8002698 <APRV_TUNE_PIP_BLOWER+0xec>)
 8002608:	7a12      	ldrb	r2, [r2, #8]
 800260a:	4293      	cmp	r3, r2
 800260c:	da06      	bge.n	800261c <APRV_TUNE_PIP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	3b28      	subs	r3, #40	; 0x28
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	801a      	strh	r2, [r3, #0]
 800261a:	e035      	b.n	8002688 <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else if( (APRV_PIP_average.PIP_AVG_VAL  < Set_PIP) && (APRV_PIP_average.PIP_AVG_VAL  > (Set_PIP -2) ) )
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <APRV_TUNE_PIP_BLOWER+0xec>)
 800261e:	7a1b      	ldrb	r3, [r3, #8]
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	429a      	cmp	r2, r3
 8002624:	d90c      	bls.n	8002640 <APRV_TUNE_PIP_BLOWER+0x94>
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	3b01      	subs	r3, #1
 800262a:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <APRV_TUNE_PIP_BLOWER+0xec>)
 800262c:	7a12      	ldrb	r2, [r2, #8]
 800262e:	4293      	cmp	r3, r2
 8002630:	dc06      	bgt.n	8002640 <APRV_TUNE_PIP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	330a      	adds	r3, #10
 8002638:	b29a      	uxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	801a      	strh	r2, [r3, #0]
 800263e:	e023      	b.n	8002688 <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  (APRV_PIP_average.PIP_AVG_VAL  <= (Set_PIP-2) ) && (APRV_PIP_average.PIP_AVG_VAL  >  (Set_PIP-4) ) )
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	3b01      	subs	r3, #1
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <APRV_TUNE_PIP_BLOWER+0xec>)
 8002646:	7a12      	ldrb	r2, [r2, #8]
 8002648:	4293      	cmp	r3, r2
 800264a:	dd0c      	ble.n	8002666 <APRV_TUNE_PIP_BLOWER+0xba>
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	3b03      	subs	r3, #3
 8002650:	4a11      	ldr	r2, [pc, #68]	; (8002698 <APRV_TUNE_PIP_BLOWER+0xec>)
 8002652:	7a12      	ldrb	r2, [r2, #8]
 8002654:	4293      	cmp	r3, r2
 8002656:	dc06      	bgt.n	8002666 <APRV_TUNE_PIP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	3314      	adds	r3, #20
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	801a      	strh	r2, [r3, #0]
 8002664:	e010      	b.n	8002688 <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  (APRV_PIP_average.PIP_AVG_VAL  <= (Set_PIP-4) )  )
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	3b03      	subs	r3, #3
 800266a:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <APRV_TUNE_PIP_BLOWER+0xec>)
 800266c:	7a12      	ldrb	r2, [r2, #8]
 800266e:	4293      	cmp	r3, r2
 8002670:	dd06      	ble.n	8002680 <APRV_TUNE_PIP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	3328      	adds	r3, #40	; 0x28
 8002678:	b29a      	uxth	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	801a      	strh	r2, [r3, #0]
 800267e:	e003      	b.n	8002688 <APRV_TUNE_PIP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	881a      	ldrh	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	881b      	ldrh	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	20012a8c 	.word	0x20012a8c

0800269c <PEEP_Control>:




static uint16_t PEEP_Control(uint8_t Achieved_PEEP,uint8_t Set_PEEP,uint16_t Valve_Open_Time)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
 80026a6:	460b      	mov	r3, r1
 80026a8:	71bb      	strb	r3, [r7, #6]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80bb      	strh	r3, [r7, #4]
	static uint8_t Wait_Count_1,Wait_Count_2;
	if (Achieved_PEEP >  (Set_PEEP+8) )
 80026ae:	79fa      	ldrb	r2, [r7, #7]
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	3308      	adds	r3, #8
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dd2f      	ble.n	8002718 <PEEP_Control+0x7c>
	{
		Wait_Count_1++;
 80026b8:	4bac      	ldr	r3, [pc, #688]	; (800296c <PEEP_Control+0x2d0>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4baa      	ldr	r3, [pc, #680]	; (800296c <PEEP_Control+0x2d0>)
 80026c2:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 80026c4:	4ba9      	ldr	r3, [pc, #676]	; (800296c <PEEP_Control+0x2d0>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d016      	beq.n	80026fa <PEEP_Control+0x5e>
		{
			Valve_Open_Time = (Valve_Open_Time + 100);
 80026cc:	88bb      	ldrh	r3, [r7, #4]
 80026ce:	3364      	adds	r3, #100	; 0x64
 80026d0:	80bb      	strh	r3, [r7, #4]
			Wait_Count_1    = RESET;
 80026d2:	4ba6      	ldr	r3, [pc, #664]	; (800296c <PEEP_Control+0x2d0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 500)
 80026d8:	88bb      	ldrh	r3, [r7, #4]
 80026da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026de:	d30c      	bcc.n	80026fa <PEEP_Control+0x5e>
				{
					Valve_Open_Time                   = 500;
 80026e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026e4:	80bb      	strh	r3, [r7, #4]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 0.5);
 80026e6:	4ba2      	ldr	r3, [pc, #648]	; (8002970 <PEEP_Control+0x2d4>)
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026f4:	4b9e      	ldr	r3, [pc, #632]	; (8002970 <PEEP_Control+0x2d4>)
 80026f6:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80026fa:	4b9d      	ldr	r3, [pc, #628]	; (8002970 <PEEP_Control+0x2d4>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	f200 8179 	bhi.w	8002a02 <PEEP_Control+0x366>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8002710:	4b97      	ldr	r3, [pc, #604]	; (8002970 <PEEP_Control+0x2d4>)
 8002712:	4a98      	ldr	r2, [pc, #608]	; (8002974 <PEEP_Control+0x2d8>)
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e174      	b.n	8002a02 <PEEP_Control+0x366>

	}
	else if( (Achieved_PEEP> (Set_PEEP+2))  && (Achieved_PEEP<= (Set_PEEP+8)) )
 8002718:	79fa      	ldrb	r2, [r7, #7]
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	3302      	adds	r3, #2
 800271e:	429a      	cmp	r2, r3
 8002720:	dd34      	ble.n	800278c <PEEP_Control+0xf0>
 8002722:	79fa      	ldrb	r2, [r7, #7]
 8002724:	79bb      	ldrb	r3, [r7, #6]
 8002726:	3308      	adds	r3, #8
 8002728:	429a      	cmp	r2, r3
 800272a:	dc2f      	bgt.n	800278c <PEEP_Control+0xf0>
	{

		Wait_Count_1++;
 800272c:	4b8f      	ldr	r3, [pc, #572]	; (800296c <PEEP_Control+0x2d0>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b8d      	ldr	r3, [pc, #564]	; (800296c <PEEP_Control+0x2d0>)
 8002736:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8002738:	4b8c      	ldr	r3, [pc, #560]	; (800296c <PEEP_Control+0x2d0>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d016      	beq.n	800276e <PEEP_Control+0xd2>
		{
			Valve_Open_Time = Valve_Open_Time + 40;
 8002740:	88bb      	ldrh	r3, [r7, #4]
 8002742:	3328      	adds	r3, #40	; 0x28
 8002744:	80bb      	strh	r3, [r7, #4]
			Wait_Count_1    = RESET;
 8002746:	4b89      	ldr	r3, [pc, #548]	; (800296c <PEEP_Control+0x2d0>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 500)
 800274c:	88bb      	ldrh	r3, [r7, #4]
 800274e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002752:	d30c      	bcc.n	800276e <PEEP_Control+0xd2>
				{
					Valve_Open_Time                   = 500;
 8002754:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002758:	80bb      	strh	r3, [r7, #4]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 0.5);
 800275a:	4b85      	ldr	r3, [pc, #532]	; (8002970 <PEEP_Control+0x2d4>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002768:	4b81      	ldr	r3, [pc, #516]	; (8002970 <PEEP_Control+0x2d4>)
 800276a:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 800276e:	4b80      	ldr	r3, [pc, #512]	; (8002970 <PEEP_Control+0x2d4>)
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	f200 813f 	bhi.w	8002a02 <PEEP_Control+0x366>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8002784:	4b7a      	ldr	r3, [pc, #488]	; (8002970 <PEEP_Control+0x2d4>)
 8002786:	4a7b      	ldr	r2, [pc, #492]	; (8002974 <PEEP_Control+0x2d8>)
 8002788:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 800278a:	e13a      	b.n	8002a02 <PEEP_Control+0x366>

	}


	else if( (Achieved_PEEP> Set_PEEP)  && (Achieved_PEEP <= (Set_PEEP+2)) )
 800278c:	79fa      	ldrb	r2, [r7, #7]
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	429a      	cmp	r2, r3
 8002792:	d934      	bls.n	80027fe <PEEP_Control+0x162>
 8002794:	79fa      	ldrb	r2, [r7, #7]
 8002796:	79bb      	ldrb	r3, [r7, #6]
 8002798:	3302      	adds	r3, #2
 800279a:	429a      	cmp	r2, r3
 800279c:	dc2f      	bgt.n	80027fe <PEEP_Control+0x162>
	{
		Wait_Count_1++;
 800279e:	4b73      	ldr	r3, [pc, #460]	; (800296c <PEEP_Control+0x2d0>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b71      	ldr	r3, [pc, #452]	; (800296c <PEEP_Control+0x2d0>)
 80027a8:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 80027aa:	4b70      	ldr	r3, [pc, #448]	; (800296c <PEEP_Control+0x2d0>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d016      	beq.n	80027e0 <PEEP_Control+0x144>
		{

			Valve_Open_Time = Valve_Open_Time + 10;
 80027b2:	88bb      	ldrh	r3, [r7, #4]
 80027b4:	330a      	adds	r3, #10
 80027b6:	80bb      	strh	r3, [r7, #4]
			Wait_Count_1    = RESET;
 80027b8:	4b6c      	ldr	r3, [pc, #432]	; (800296c <PEEP_Control+0x2d0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 500)
 80027be:	88bb      	ldrh	r3, [r7, #4]
 80027c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027c4:	d30c      	bcc.n	80027e0 <PEEP_Control+0x144>
				{
					Valve_Open_Time                   = 500;
 80027c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80027ca:	80bb      	strh	r3, [r7, #4]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 0.5);
 80027cc:	4b68      	ldr	r3, [pc, #416]	; (8002970 <PEEP_Control+0x2d4>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <PEEP_Control+0x2d4>)
 80027dc:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80027e0:	4b63      	ldr	r3, [pc, #396]	; (8002970 <PEEP_Control+0x2d4>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80027ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f2:	f200 8106 	bhi.w	8002a02 <PEEP_Control+0x366>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 80027f6:	4b5e      	ldr	r3, [pc, #376]	; (8002970 <PEEP_Control+0x2d4>)
 80027f8:	4a5e      	ldr	r2, [pc, #376]	; (8002974 <PEEP_Control+0x2d8>)
 80027fa:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80027fc:	e101      	b.n	8002a02 <PEEP_Control+0x366>

	}
	else if ((Achieved_PEEP == 0 ) )
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d136      	bne.n	8002872 <PEEP_Control+0x1d6>
	{
		Wait_Count_2++;
 8002804:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <PEEP_Control+0x2dc>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b5a      	ldr	r3, [pc, #360]	; (8002978 <PEEP_Control+0x2dc>)
 800280e:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8002810:	4b59      	ldr	r3, [pc, #356]	; (8002978 <PEEP_Control+0x2dc>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d018      	beq.n	800284a <PEEP_Control+0x1ae>
		{
			PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8002818:	4b55      	ldr	r3, [pc, #340]	; (8002970 <PEEP_Control+0x2d4>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002822:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002826:	4b52      	ldr	r3, [pc, #328]	; (8002970 <PEEP_Control+0x2d4>)
 8002828:	edc3 7a00 	vstr	s15, [r3]
			Valve_Open_Time                   = (Valve_Open_Time - 10);
 800282c:	88bb      	ldrh	r3, [r7, #4]
 800282e:	3b0a      	subs	r3, #10
 8002830:	80bb      	strh	r3, [r7, #4]
			Wait_Count_2                      = RESET;
 8002832:	4b51      	ldr	r3, [pc, #324]	; (8002978 <PEEP_Control+0x2dc>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
				if ( (Valve_Open_Time < 1) || (Valve_Open_Time > 500) )
 8002838:	88bb      	ldrh	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <PEEP_Control+0x1aa>
 800283e:	88bb      	ldrh	r3, [r7, #4]
 8002840:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002844:	d901      	bls.n	800284a <PEEP_Control+0x1ae>
				{
					Valve_Open_Time = 1;
 8002846:	2301      	movs	r3, #1
 8002848:	80bb      	strh	r3, [r7, #4]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp  > (Set_PEEP + 10) )
 800284a:	4b49      	ldr	r3, [pc, #292]	; (8002970 <PEEP_Control+0x2d4>)
 800284c:	ed93 7a00 	vldr	s14, [r3]
 8002850:	79bb      	ldrb	r3, [r7, #6]
 8002852:	330a      	adds	r3, #10
 8002854:	ee07 3a90 	vmov	s15, r3
 8002858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	f340 80cd 	ble.w	8002a02 <PEEP_Control+0x366>
			PEEP_Maintain_Parameter.PEEP_Temp  = PEEP_Maintain_Parameter.PEEP_Temp ;
 8002868:	4b41      	ldr	r3, [pc, #260]	; (8002970 <PEEP_Control+0x2d4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a40      	ldr	r2, [pc, #256]	; (8002970 <PEEP_Control+0x2d4>)
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e0c7      	b.n	8002a02 <PEEP_Control+0x366>

	}
		else if (Achieved_PEEP< (Set_PEEP -8))
 8002872:	79fa      	ldrb	r2, [r7, #7]
 8002874:	79bb      	ldrb	r3, [r7, #6]
 8002876:	3b08      	subs	r3, #8
 8002878:	429a      	cmp	r2, r3
 800287a:	da36      	bge.n	80028ea <PEEP_Control+0x24e>
		{
			Wait_Count_2++;
 800287c:	4b3e      	ldr	r3, [pc, #248]	; (8002978 <PEEP_Control+0x2dc>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4b3c      	ldr	r3, [pc, #240]	; (8002978 <PEEP_Control+0x2dc>)
 8002886:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 0)
 8002888:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <PEEP_Control+0x2dc>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d018      	beq.n	80028c2 <PEEP_Control+0x226>
			{
				Valve_Open_Time = ( Valve_Open_Time - 50);
 8002890:	88bb      	ldrh	r3, [r7, #4]
 8002892:	3b32      	subs	r3, #50	; 0x32
 8002894:	80bb      	strh	r3, [r7, #4]
				Wait_Count_2    = RESET;
 8002896:	4b38      	ldr	r3, [pc, #224]	; (8002978 <PEEP_Control+0x2dc>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
					if ((Valve_Open_Time < 1) || (Valve_Open_Time > 500) )
 800289c:	88bb      	ldrh	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <PEEP_Control+0x20e>
 80028a2:	88bb      	ldrh	r3, [r7, #4]
 80028a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028a8:	d90b      	bls.n	80028c2 <PEEP_Control+0x226>
					{
						Valve_Open_Time                   = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	80bb      	strh	r3, [r7, #4]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 0.5);
 80028ae:	4b30      	ldr	r3, [pc, #192]	; (8002970 <PEEP_Control+0x2d4>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <PEEP_Control+0x2d4>)
 80028be:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp> (Set_PEEP + 10) )
 80028c2:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <PEEP_Control+0x2d4>)
 80028c4:	ed93 7a00 	vldr	s14, [r3]
 80028c8:	79bb      	ldrb	r3, [r7, #6]
 80028ca:	330a      	adds	r3, #10
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	f340 8091 	ble.w	8002a02 <PEEP_Control+0x366>
				PEEP_Maintain_Parameter.PEEP_Temp =PEEP_Maintain_Parameter.PEEP_Temp;
 80028e0:	4b23      	ldr	r3, [pc, #140]	; (8002970 <PEEP_Control+0x2d4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a22      	ldr	r2, [pc, #136]	; (8002970 <PEEP_Control+0x2d4>)
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e08b      	b.n	8002a02 <PEEP_Control+0x366>

		}
		else if (( Achieved_PEEP >= (Set_PEEP -8)) && (Achieved_PEEP< (Set_PEEP-2)))
 80028ea:	79fa      	ldrb	r2, [r7, #7]
 80028ec:	79bb      	ldrb	r3, [r7, #6]
 80028ee:	3b08      	subs	r3, #8
 80028f0:	429a      	cmp	r2, r3
 80028f2:	db43      	blt.n	800297c <PEEP_Control+0x2e0>
 80028f4:	79fa      	ldrb	r2, [r7, #7]
 80028f6:	79bb      	ldrb	r3, [r7, #6]
 80028f8:	3b02      	subs	r3, #2
 80028fa:	429a      	cmp	r2, r3
 80028fc:	da3e      	bge.n	800297c <PEEP_Control+0x2e0>
		{
			Wait_Count_2++;
 80028fe:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <PEEP_Control+0x2dc>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <PEEP_Control+0x2dc>)
 8002908:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 0)
 800290a:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <PEEP_Control+0x2dc>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d018      	beq.n	8002944 <PEEP_Control+0x2a8>
			{
				Valve_Open_Time = (Valve_Open_Time - 30);
 8002912:	88bb      	ldrh	r3, [r7, #4]
 8002914:	3b1e      	subs	r3, #30
 8002916:	80bb      	strh	r3, [r7, #4]
				Wait_Count_2    = RESET;
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <PEEP_Control+0x2dc>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time< 1 || Valve_Open_Time > 500)
 800291e:	88bb      	ldrh	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <PEEP_Control+0x290>
 8002924:	88bb      	ldrh	r3, [r7, #4]
 8002926:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800292a:	d90b      	bls.n	8002944 <PEEP_Control+0x2a8>
					{
						Valve_Open_Time                   = 1;
 800292c:	2301      	movs	r3, #1
 800292e:	80bb      	strh	r3, [r7, #4]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 0.5);
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <PEEP_Control+0x2d4>)
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800293a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <PEEP_Control+0x2d4>)
 8002940:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8002944:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <PEEP_Control+0x2d4>)
 8002946:	ed93 7a00 	vldr	s14, [r3]
 800294a:	79bb      	ldrb	r3, [r7, #6]
 800294c:	330a      	adds	r3, #10
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	dd50      	ble.n	8002a02 <PEEP_Control+0x366>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8002960:	4b03      	ldr	r3, [pc, #12]	; (8002970 <PEEP_Control+0x2d4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a02      	ldr	r2, [pc, #8]	; (8002970 <PEEP_Control+0x2d4>)
 8002966:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8002968:	e04b      	b.n	8002a02 <PEEP_Control+0x366>
 800296a:	bf00      	nop
 800296c:	200000a2 	.word	0x200000a2
 8002970:	20012c74 	.word	0x20012c74
 8002974:	40400000 	.word	0x40400000
 8002978:	200000a3 	.word	0x200000a3

		}
		else if ((Achieved_PEEP>= (Set_PEEP -2)) && (Achieved_PEEP< (Set_PEEP)))
 800297c:	79fa      	ldrb	r2, [r7, #7]
 800297e:	79bb      	ldrb	r3, [r7, #6]
 8002980:	3b02      	subs	r3, #2
 8002982:	429a      	cmp	r2, r3
 8002984:	db39      	blt.n	80029fa <PEEP_Control+0x35e>
 8002986:	79fa      	ldrb	r2, [r7, #7]
 8002988:	79bb      	ldrb	r3, [r7, #6]
 800298a:	429a      	cmp	r2, r3
 800298c:	d235      	bcs.n	80029fa <PEEP_Control+0x35e>
		{
			Wait_Count_2++;
 800298e:	4b20      	ldr	r3, [pc, #128]	; (8002a10 <PEEP_Control+0x374>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	b2da      	uxtb	r2, r3
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <PEEP_Control+0x374>)
 8002998:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 0)
 800299a:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <PEEP_Control+0x374>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <PEEP_Control+0x338>
			{

				Valve_Open_Time = (Valve_Open_Time - 10);
 80029a2:	88bb      	ldrh	r3, [r7, #4]
 80029a4:	3b0a      	subs	r3, #10
 80029a6:	80bb      	strh	r3, [r7, #4]
				Wait_Count_2    = RESET;
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <PEEP_Control+0x374>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
					if ( (Valve_Open_Time < 1) || (Valve_Open_Time> 500) )
 80029ae:	88bb      	ldrh	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <PEEP_Control+0x320>
 80029b4:	88bb      	ldrh	r3, [r7, #4]
 80029b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029ba:	d90b      	bls.n	80029d4 <PEEP_Control+0x338>
					{
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 0.5);
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <PEEP_Control+0x378>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ca:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <PEEP_Control+0x378>)
 80029cc:	edc3 7a00 	vstr	s15, [r3]
						Valve_Open_Time                   = 1;
 80029d0:	2301      	movs	r3, #1
 80029d2:	80bb      	strh	r3, [r7, #4]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <PEEP_Control+0x378>)
 80029d6:	ed93 7a00 	vldr	s14, [r3]
 80029da:	79bb      	ldrb	r3, [r7, #6]
 80029dc:	330a      	adds	r3, #10
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	dd08      	ble.n	8002a02 <PEEP_Control+0x366>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 80029f0:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <PEEP_Control+0x378>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <PEEP_Control+0x378>)
 80029f6:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 80029f8:	e003      	b.n	8002a02 <PEEP_Control+0x366>
		}
		else
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <PEEP_Control+0x378>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a05      	ldr	r2, [pc, #20]	; (8002a14 <PEEP_Control+0x378>)
 8002a00:	6013      	str	r3, [r2, #0]


	return Valve_Open_Time;
 8002a02:	88bb      	ldrh	r3, [r7, #4]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	200000a3 	.word	0x200000a3
 8002a14:	20012c74 	.word	0x20012c74

08002a18 <Check_Trigger>:




static void Check_Trigger()
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
	if(APRV_Trigger_Check_Time == 0 )
 8002a1c:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <Check_Trigger+0x48>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d118      	bne.n	8002a56 <Check_Trigger+0x3e>
	{
		if( (GRAPH_VALUES.flow > 0) )
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <Check_Trigger+0x4c>)
 8002a26:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a32:	dc00      	bgt.n	8002a36 <Check_Trigger+0x1e>
	}
	else
	{
		CHECK_TRIGGER_OFFSET();
	}
}
 8002a34:	e011      	b.n	8002a5a <Check_Trigger+0x42>
			STOP_BLOWER_IF_FLOW_SENSE();
 8002a36:	f000 f819 	bl	8002a6c <STOP_BLOWER_IF_FLOW_SENSE>
				if (Trigger_Type == Pressure_Trigger)
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <Check_Trigger+0x50>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <Check_Trigger+0x30>
					CHECK_PRESSURE_TRIGGER();
 8002a42:	f000 f861 	bl	8002b08 <CHECK_PRESSURE_TRIGGER>
}
 8002a46:	e008      	b.n	8002a5a <Check_Trigger+0x42>
				else if (Trigger_Type == Flow_Trigger)
 8002a48:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <Check_Trigger+0x50>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d104      	bne.n	8002a5a <Check_Trigger+0x42>
					CHECK_FLOW_TRIGGER();
 8002a50:	f000 f89a 	bl	8002b88 <CHECK_FLOW_TRIGGER>
}
 8002a54:	e001      	b.n	8002a5a <Check_Trigger+0x42>
		CHECK_TRIGGER_OFFSET();
 8002a56:	f000 f81b 	bl	8002a90 <CHECK_TRIGGER_OFFSET>
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20012b30 	.word	0x20012b30
 8002a64:	200125f8 	.word	0x200125f8
 8002a68:	20012244 	.word	0x20012244

08002a6c <STOP_BLOWER_IF_FLOW_SENSE>:



static void STOP_BLOWER_IF_FLOW_SENSE()
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <STOP_BLOWER_IF_FLOW_SENSE+0x1c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
	Blower_Wait_Time = 500;
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <STOP_BLOWER_IF_FLOW_SENSE+0x20>)
 8002a78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a7c:	601a      	str	r2, [r3, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40007400 	.word	0x40007400
 8002a8c:	20012b50 	.word	0x20012b50

08002a90 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
	if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <CHECK_TRIGGER_OFFSET+0x68>)
 8002a96:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa2:	d013      	beq.n	8002acc <CHECK_TRIGGER_OFFSET+0x3c>
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <CHECK_TRIGGER_OFFSET+0x68>)
 8002aa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aaa:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8002aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab6:	da00      	bge.n	8002aba <CHECK_TRIGGER_OFFSET+0x2a>
	{
		FLOW_TRIGGER             = 0;
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
	}
}
 8002ab8:	e019      	b.n	8002aee <CHECK_TRIGGER_OFFSET+0x5e>
	if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <CHECK_TRIGGER_OFFSET+0x68>)
 8002abc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ac0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	d400      	bmi.n	8002acc <CHECK_TRIGGER_OFFSET+0x3c>
}
 8002aca:	e010      	b.n	8002aee <CHECK_TRIGGER_OFFSET+0x5e>
		FLOW_TRIGGER             = 0;
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <CHECK_TRIGGER_OFFSET+0x6c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <CHECK_TRIGGER_OFFSET+0x68>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <CHECK_TRIGGER_OFFSET+0x70>)
 8002ada:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <CHECK_TRIGGER_OFFSET+0x68>)
 8002ade:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ae6:	ee17 2a90 	vmov	r2, s15
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <CHECK_TRIGGER_OFFSET+0x74>)
 8002aec:	601a      	str	r2, [r3, #0]
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	200125f8 	.word	0x200125f8
 8002afc:	200129aa 	.word	0x200129aa
 8002b00:	2001296c 	.word	0x2001296c
 8002b04:	20012900 	.word	0x20012900

08002b08 <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
	if (( GRAPH_VALUES.pressure < (Pressure_Trigger_Offset - APRV.TRIG_LMT )))
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <CHECK_PRESSURE_TRIGGER+0x64>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <CHECK_PRESSURE_TRIGGER+0x68>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	ee07 3a90 	vmov	s15, r3
 8002b20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <CHECK_PRESSURE_TRIGGER+0x6c>)
 8002b26:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b2a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	d400      	bmi.n	8002b3a <CHECK_PRESSURE_TRIGGER+0x32>
		Patient_Trigger                              = PATIENT_TRIGGER_HAPPEN;
		Patient_Trigger_Count++;
		APRV_Trigger_Check_Time                      = APRV.TRIG_TIME;
		Patient_Trigger  							 = NO_PATIENT_TRIGGER;
	}
}
 8002b38:	e012      	b.n	8002b60 <CHECK_PRESSURE_TRIGGER+0x58>
	    Breath_Count                                 = Count_The_Breath;
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <CHECK_PRESSURE_TRIGGER+0x70>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
		Patient_Trigger                              = PATIENT_TRIGGER_HAPPEN;
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <CHECK_PRESSURE_TRIGGER+0x74>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
		Patient_Trigger_Count++;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <CHECK_PRESSURE_TRIGGER+0x78>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	4a0c      	ldr	r2, [pc, #48]	; (8002b80 <CHECK_PRESSURE_TRIGGER+0x78>)
 8002b4e:	6013      	str	r3, [r2, #0]
		APRV_Trigger_Check_Time                      = APRV.TRIG_TIME;
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <CHECK_PRESSURE_TRIGGER+0x6c>)
 8002b52:	8b9b      	ldrh	r3, [r3, #28]
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <CHECK_PRESSURE_TRIGGER+0x7c>)
 8002b58:	601a      	str	r2, [r3, #0]
		Patient_Trigger  							 = NO_PATIENT_TRIGGER;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <CHECK_PRESSURE_TRIGGER+0x74>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	200125f8 	.word	0x200125f8
 8002b70:	2001296c 	.word	0x2001296c
 8002b74:	20012a14 	.word	0x20012a14
 8002b78:	200122a8 	.word	0x200122a8
 8002b7c:	2001263d 	.word	0x2001263d
 8002b80:	20012a0c 	.word	0x20012a0c
 8002b84:	20012b30 	.word	0x20012b30

08002b88 <CHECK_FLOW_TRIGGER>:

static void CHECK_FLOW_TRIGGER()
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
	if ((GRAPH_VALUES.flow > (Flow_Trigger_Offset+APRV.TRIG_LMT )))
 8002b8c:	4b17      	ldr	r3, [pc, #92]	; (8002bec <CHECK_FLOW_TRIGGER+0x64>)
 8002b8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <CHECK_FLOW_TRIGGER+0x68>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <CHECK_FLOW_TRIGGER+0x6c>)
 8002ba0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb0:	dc00      	bgt.n	8002bb4 <CHECK_FLOW_TRIGGER+0x2c>
		Patient_Trigger  							= PATIENT_TRIGGER_HAPPEN;
		Patient_Trigger_Count++;
		APRV_Trigger_Check_Time                     = APRV.TRIG_TIME;
		Patient_Trigger  							= NO_PATIENT_TRIGGER;
	}
}
 8002bb2:	e016      	b.n	8002be2 <CHECK_FLOW_TRIGGER+0x5a>
		Breath_Count                                = Count_The_Breath;
 8002bb4:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <CHECK_FLOW_TRIGGER+0x70>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
		LAST_FLOW_TRIGGER 							= FLOW_TRIGGER;
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <CHECK_FLOW_TRIGGER+0x74>)
 8002bbc:	781a      	ldrb	r2, [r3, #0]
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <CHECK_FLOW_TRIGGER+0x78>)
 8002bc0:	701a      	strb	r2, [r3, #0]
		Patient_Trigger  							= PATIENT_TRIGGER_HAPPEN;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <CHECK_FLOW_TRIGGER+0x7c>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
		Patient_Trigger_Count++;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <CHECK_FLOW_TRIGGER+0x80>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <CHECK_FLOW_TRIGGER+0x80>)
 8002bd0:	6013      	str	r3, [r2, #0]
		APRV_Trigger_Check_Time                     = APRV.TRIG_TIME;
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <CHECK_FLOW_TRIGGER+0x6c>)
 8002bd4:	8b9b      	ldrh	r3, [r3, #28]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <CHECK_FLOW_TRIGGER+0x84>)
 8002bda:	601a      	str	r2, [r3, #0]
		Patient_Trigger  							= NO_PATIENT_TRIGGER;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <CHECK_FLOW_TRIGGER+0x7c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	200125f8 	.word	0x200125f8
 8002bf0:	20012900 	.word	0x20012900
 8002bf4:	20012a14 	.word	0x20012a14
 8002bf8:	200122a8 	.word	0x200122a8
 8002bfc:	200129aa 	.word	0x200129aa
 8002c00:	20012b70 	.word	0x20012b70
 8002c04:	2001263d 	.word	0x2001263d
 8002c08:	20012a0c 	.word	0x20012a0c
 8002c0c:	20012b30 	.word	0x20012b30

08002c10 <Backup_Pc_Cmv_Mode_Packet_Data>:

extern uint16_t Expiratory_Valve_Open_Time;


void Backup_Pc_Cmv_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	uint32_t One_Breathe_time;
	BACKUP_PC_CMV.PIP_Val                = Receive_Graph_Packet->PIP_PS_Phigh;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	791a      	ldrb	r2, [r3, #4]
 8002c1c:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c1e:	701a      	strb	r2, [r3, #0]
	BACKUP_PC_CMV.PEEP_Val               = Receive_Graph_Packet->PEEP_CPAP_Plow;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	795a      	ldrb	r2, [r3, #5]
 8002c24:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c26:	705a      	strb	r2, [r3, #1]
	BACKUP_PC_CMV.FIO2_Val               = Receive_Graph_Packet->FiO2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7a1a      	ldrb	r2, [r3, #8]
 8002c2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c2e:	70da      	strb	r2, [r3, #3]

	BACKUP_PC_CMV.RESPIRATORY_RATE_Val   = Receive_Graph_Packet->RR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7a5a      	ldrb	r2, [r3, #9]
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c36:	709a      	strb	r2, [r3, #2]
	One_Breathe_time                     = (One_Minite_In_MS / BACKUP_PC_CMV.RESPIRATORY_RATE_Val);
 8002c38:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c3a:	789b      	ldrb	r3, [r3, #2]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c42:	fb93 f3f2 	sdiv	r3, r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
	BACKUP_PC_CMV.INSPIRATION_TIME       = ( ( Receive_Graph_Packet->T_high) * 100 );
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7a9b      	ldrb	r3, [r3, #10]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2364      	movs	r3, #100	; 0x64
 8002c50:	fb03 f302 	mul.w	r3, r3, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c58:	609a      	str	r2, [r3, #8]
	BACKUP_PC_CMV.EXPIRATION_TIME        = (One_Breathe_time - BACKUP_PC_CMV.INSPIRATION_TIME);
 8002c5a:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	4a1f      	ldr	r2, [pc, #124]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c64:	60d3      	str	r3, [r2, #12]


	BACKUP_PC_CMV.Rise_Time              = Receive_Graph_Packet->Rise_Time;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7b1a      	ldrb	r2, [r3, #12]
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c6c:	749a      	strb	r2, [r3, #18]
	BACKUP_PC_CMV.RISE_TIME_MS_Val       = (BACKUP_PC_CMV.Rise_Time *100);
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c70:	7c9b      	ldrb	r3, [r3, #18]
 8002c72:	461a      	mov	r2, r3
 8002c74:	2364      	movs	r3, #100	; 0x64
 8002c76:	fb03 f302 	mul.w	r3, r3, r2
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002c84:	edc3 7a01 	vstr	s15, [r3, #4]
	BACKUP_PC_CMV.TRIG_TIME              = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7bdb      	ldrb	r3, [r3, #15]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	0092      	lsls	r2, r2, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	0091      	lsls	r1, r2, #2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002ca4:	829a      	strh	r2, [r3, #20]

	Alert_Check_Time                     = ((float)BACKUP_PC_CMV.INSPIRATION_TIME/3);
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <Backup_Pc_Cmv_Mode_Packet_Data+0xd0>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cb2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002cb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cbe:	ee17 2a90 	vmov	r2, s15
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <Backup_Pc_Cmv_Mode_Packet_Data+0xd4>)
 8002cc4:	601a      	str	r2, [r3, #0]
	Back_Up_Mode_Initial_Flag_Set        = OPEN;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <Backup_Pc_Cmv_Mode_Packet_Data+0xd8>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
	vTaskResume(Mode_initial_Flag_Set_Handler);
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <Backup_Pc_Cmv_Mode_Packet_Data+0xdc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f018 fab3 	bl	801b23c <vTaskResume>
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200121b8 	.word	0x200121b8
 8002ce4:	2001246c 	.word	0x2001246c
 8002ce8:	20012829 	.word	0x20012829
 8002cec:	200129ac 	.word	0x200129ac

08002cf0 <BACKUP_PC_CMV_Task>:



void BACKUP_PC_CMV_Task(void *argument)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <BACKUP_PC_CMV_Task+0x58>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d00b      	beq.n	8002d18 <BACKUP_PC_CMV_Task+0x28>
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	dc19      	bgt.n	8002d38 <BACKUP_PC_CMV_Task+0x48>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d019      	beq.n	8002d3c <BACKUP_PC_CMV_Task+0x4c>
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d115      	bne.n	8002d38 <BACKUP_PC_CMV_Task+0x48>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_BACKUP_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <BACKUP_PC_CMV_Task+0x5c>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f81f 	bl	8002d54 <Inspiration_Time_Blower_Control_BACKUP_PC_CMV>
			break;
 8002d16:	e012      	b.n	8002d3e <BACKUP_PC_CMV_Task+0x4e>
			case Run_Expiration_Cycle:
				Expiration_Time_Blower_Control_BACKUP_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <BACKUP_PC_CMV_Task+0x5c>)
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <BACKUP_PC_CMV_Task+0x60>)
 8002d1e:	edd2 7a00 	vldr	s15, [r2]
											   PEEP_Maintain_Parameter.PEEP_Temp,
											   PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <BACKUP_PC_CMV_Task+0x60>)
 8002d24:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_BACKUP_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 8002d28:	b292      	uxth	r2, r2
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f81f 	bl	8002d74 <Expiration_Time_Blower_Control_BACKUP_PC_CMV>
			break;
 8002d36:	e002      	b.n	8002d3e <BACKUP_PC_CMV_Task+0x4e>
			case No_Run_State:
			break;
			default:
			break;
 8002d38:	bf00      	nop
 8002d3a:	e000      	b.n	8002d3e <BACKUP_PC_CMV_Task+0x4e>
			break;
 8002d3c:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 8002d3e:	2002      	movs	r0, #2
 8002d40:	f018 f984 	bl	801b04c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 8002d44:	e7d8      	b.n	8002cf8 <BACKUP_PC_CMV_Task+0x8>
 8002d46:	bf00      	nop
 8002d48:	20012870 	.word	0x20012870
 8002d4c:	20012978 	.word	0x20012978
 8002d50:	20012c74 	.word	0x20012c74

08002d54 <Inspiration_Time_Blower_Control_BACKUP_PC_CMV>:




static void Inspiration_Time_Blower_Control_BACKUP_PC_CMV(uint16_t Blower_Signal)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
	Blower_Signal(Blower_Signal);
 8002d5e:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <Inspiration_Time_Blower_Control_BACKUP_PC_CMV+0x1c>)
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	6093      	str	r3, [r2, #8]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40007400 	.word	0x40007400

08002d74 <Expiration_Time_Blower_Control_BACKUP_PC_CMV>:

static void Expiration_Time_Blower_Control_BACKUP_PC_CMV(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	ed87 0a00 	vstr	s0, [r7]
 8002d80:	460a      	mov	r2, r1
 8002d82:	80fb      	strh	r3, [r7, #6]
 8002d84:	4613      	mov	r3, r2
 8002d86:	80bb      	strh	r3, [r7, #4]
		 if(Vent_Type == MASK_MODE)
 8002d88:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xe8>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d110      	bne.n	8002db2 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x3e>
		 {
			 if(Alert_Check <= 4)
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xec>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d803      	bhi.n	8002da0 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x2c>
			 {
			      Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 8002d98:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xf0>)
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xf4>)
 8002d9e:	615a      	str	r2, [r3, #20]
			 }
			 Blower_Signal( Blower_Signal);
 8002da0:	4a31      	ldr	r2, [pc, #196]	; (8002e68 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xf4>)
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	6093      	str	r3, [r2, #8]
			 CHECK_TRIGGER_BACKUP_PC_CMV(Common_Mode_Parameter.TRIG_WINDOW );
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xf8>)
 8002da8:	895b      	ldrh	r3, [r3, #10]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f868 	bl	8002e80 <CHECK_TRIGGER_BACKUP_PC_CMV>
						ExpValve_OPEN();
					}

					CHECK_TRIGGER_BACKUP_PC_CMV(Common_Mode_Parameter.TRIG_WINDOW );
		 }
}
 8002db0:	e04f      	b.n	8002e52 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xde>
		 else if(Vent_Type == ET_TUBE_MODE)
 8002db2:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xe8>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d14b      	bne.n	8002e52 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xde>
				Blower_Signal( Blower_Signal);
 8002dba:	4a2b      	ldr	r2, [pc, #172]	; (8002e68 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xf4>)
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	6093      	str	r3, [r2, #8]
					if(Peep_Status==PEEP_ACHEIVED)
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xfc>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d113      	bne.n	8002df0 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x7c>
							if(GRAPH_VALUES.pressure < PEEP)
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x100>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	ee07 3a90 	vmov	s15, r3
 8002dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dd4:	ed97 7a00 	vldr	s14, [r7]
 8002dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de0:	dd03      	ble.n	8002dea <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x76>
								Blower_Signal( Blower_Signal);
 8002de2:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xf4>)
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	6093      	str	r3, [r2, #8]
 8002de8:	e002      	b.n	8002df0 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x7c>
								Blower_Signal( Blower_Signal);
 8002dea:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xf4>)
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	6093      	str	r3, [r2, #8]
					if(GRAPH_VALUES.pressure<= PEEP)
 8002df0:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x100>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dfc:	ed97 7a00 	vldr	s14, [r7]
 8002e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e08:	db14      	blt.n	8002e34 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xc0>
						if(Expiratory_Valve_Lock_Delay==OPENED)
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x104>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xac>
							Expiratory_Valve_Lock_Delay=CLOSED;
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x104>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
							vTaskDelay(Expiratory_Valve_Open_Time);
 8002e18:	88bb      	ldrh	r3, [r7, #4]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f018 f916 	bl	801b04c <vTaskDelay>
						Peep_Status=PEEP_ACHEIVED;
 8002e20:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xfc>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
						ExpValve_CLOSE();
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x108>)
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x108>)
 8002e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e30:	6153      	str	r3, [r2, #20]
 8002e32:	e009      	b.n	8002e48 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xd4>
					else if(Peep_Status==PEEP_NOT_ACHEIVED)
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xfc>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d105      	bne.n	8002e48 <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xd4>
						ExpValve_OPEN();
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x108>)
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0x108>)
 8002e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e46:	6153      	str	r3, [r2, #20]
					CHECK_TRIGGER_BACKUP_PC_CMV(Common_Mode_Parameter.TRIG_WINDOW );
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <Expiration_Time_Blower_Control_BACKUP_PC_CMV+0xf8>)
 8002e4a:	895b      	ldrh	r3, [r3, #10]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 f817 	bl	8002e80 <CHECK_TRIGGER_BACKUP_PC_CMV>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200129f4 	.word	0x200129f4
 8002e60:	20012aa0 	.word	0x20012aa0
 8002e64:	200129d4 	.word	0x200129d4
 8002e68:	40007400 	.word	0x40007400
 8002e6c:	200124f0 	.word	0x200124f0
 8002e70:	20012a37 	.word	0x20012a37
 8002e74:	200125f8 	.word	0x200125f8
 8002e78:	20012a34 	.word	0x20012a34
 8002e7c:	40020400 	.word	0x40020400

08002e80 <CHECK_TRIGGER_BACKUP_PC_CMV>:



static void CHECK_TRIGGER_BACKUP_PC_CMV(uint16_t Trigger_Check_Time)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <CHECK_TRIGGER_BACKUP_PC_CMV+0x48>)
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	dc11      	bgt.n	8002eb8 <CHECK_TRIGGER_BACKUP_PC_CMV+0x38>
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <CHECK_TRIGGER_BACKUP_PC_CMV+0x48>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00d      	beq.n	8002eb8 <CHECK_TRIGGER_BACKUP_PC_CMV+0x38>
	{
		if (Trigger_Type == Pressure_Trigger)
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <CHECK_TRIGGER_BACKUP_PC_CMV+0x4c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <CHECK_TRIGGER_BACKUP_PC_CMV+0x2a>
		{
			CHECK_PRESSURE_TRIGGER();
 8002ea4:	f000 f814 	bl	8002ed0 <CHECK_PRESSURE_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 8002ea8:	e009      	b.n	8002ebe <CHECK_TRIGGER_BACKUP_PC_CMV+0x3e>
		}
		else if (Trigger_Type == Flow_Trigger)
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <CHECK_TRIGGER_BACKUP_PC_CMV+0x4c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d105      	bne.n	8002ebe <CHECK_TRIGGER_BACKUP_PC_CMV+0x3e>
		{
			CHECK_FLOW_TRIGGER();
 8002eb2:	f000 f847 	bl	8002f44 <CHECK_FLOW_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 8002eb6:	e002      	b.n	8002ebe <CHECK_TRIGGER_BACKUP_PC_CMV+0x3e>
		}
	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 8002eb8:	f000 f884 	bl	8002fc4 <CHECK_TRIGGER_OFFSET>
	}
}
 8002ebc:	e000      	b.n	8002ec0 <CHECK_TRIGGER_BACKUP_PC_CMV+0x40>
		if (Trigger_Type == Pressure_Trigger)
 8002ebe:	bf00      	nop
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20012b38 	.word	0x20012b38
 8002ecc:	20012244 	.word	0x20012244

08002ed0 <CHECK_PRESSURE_TRIGGER>:



static void CHECK_PRESSURE_TRIGGER()
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	if (( GRAPH_VALUES.pressure < (Pressure_Trigger_Offset - Common_Mode_Parameter.TRIG_LMT  )))
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <CHECK_PRESSURE_TRIGGER+0x58>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <CHECK_PRESSURE_TRIGGER+0x5c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <CHECK_PRESSURE_TRIGGER+0x60>)
 8002ee0:	8992      	ldrh	r2, [r2, #12]
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	4299      	cmp	r1, r3
 8002ee6:	da1c      	bge.n	8002f22 <CHECK_PRESSURE_TRIGGER+0x52>
	{
		Patient_Trigger                  = PATIENT_TRIGGER_HAPPEN;
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <CHECK_PRESSURE_TRIGGER+0x64>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
		Oxygen_Parameter.Achieved_Oxygen = 21;
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <CHECK_PRESSURE_TRIGGER+0x68>)
 8002ef0:	2215      	movs	r2, #21
 8002ef2:	721a      	strb	r2, [r3, #8]
		Apnea_Mode                       = ON;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <CHECK_PRESSURE_TRIGGER+0x6c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
				if(Running_Mode == Psv)
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <CHECK_PRESSURE_TRIGGER+0x70>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b07      	cmp	r3, #7
 8002f00:	d102      	bne.n	8002f08 <CHECK_PRESSURE_TRIGGER+0x38>
				{
					START_PSV();
 8002f02:	f000 fa1f 	bl	8003344 <START_PSV>
				else if(Running_Mode == Cpap)
				{
					START_CPAP();
				}
	}
}
 8002f06:	e00c      	b.n	8002f22 <CHECK_PRESSURE_TRIGGER+0x52>
				else if(Running_Mode == BiPap)
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <CHECK_PRESSURE_TRIGGER+0x70>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b0c      	cmp	r3, #12
 8002f0e:	d102      	bne.n	8002f16 <CHECK_PRESSURE_TRIGGER+0x46>
					START_BIPAP();
 8002f10:	f000 fa2c 	bl	800336c <START_BIPAP>
}
 8002f14:	e005      	b.n	8002f22 <CHECK_PRESSURE_TRIGGER+0x52>
				else if(Running_Mode == Cpap)
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <CHECK_PRESSURE_TRIGGER+0x70>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b0b      	cmp	r3, #11
 8002f1c:	d101      	bne.n	8002f22 <CHECK_PRESSURE_TRIGGER+0x52>
					START_CPAP();
 8002f1e:	f000 fa39 	bl	8003394 <START_CPAP>
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200125f8 	.word	0x200125f8
 8002f2c:	2001296c 	.word	0x2001296c
 8002f30:	200124f0 	.word	0x200124f0
 8002f34:	2001263d 	.word	0x2001263d
 8002f38:	200129d4 	.word	0x200129d4
 8002f3c:	20012aa1 	.word	0x20012aa1
 8002f40:	20012b68 	.word	0x20012b68

08002f44 <CHECK_FLOW_TRIGGER>:


static void CHECK_FLOW_TRIGGER()
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+Common_Mode_Parameter.TRIG_LMT  )))
 8002f48:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <CHECK_FLOW_TRIGGER+0x60>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <CHECK_FLOW_TRIGGER+0x64>)
 8002f50:	899b      	ldrh	r3, [r3, #12]
 8002f52:	4619      	mov	r1, r3
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <CHECK_FLOW_TRIGGER+0x68>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	440b      	add	r3, r1
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	dd20      	ble.n	8002fa0 <CHECK_FLOW_TRIGGER+0x5c>
	{
		LAST_FLOW_TRIGGER                = FLOW_TRIGGER;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <CHECK_FLOW_TRIGGER+0x60>)
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <CHECK_FLOW_TRIGGER+0x6c>)
 8002f64:	701a      	strb	r2, [r3, #0]
		Patient_Trigger                  = PATIENT_TRIGGER_HAPPEN;
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <CHECK_FLOW_TRIGGER+0x70>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
		Oxygen_Parameter.Achieved_Oxygen = 21;
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <CHECK_FLOW_TRIGGER+0x74>)
 8002f6e:	2215      	movs	r2, #21
 8002f70:	721a      	strb	r2, [r3, #8]
		Apnea_Mode                       = ON;
 8002f72:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <CHECK_FLOW_TRIGGER+0x78>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
	        	if(Running_Mode == Psv)
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <CHECK_FLOW_TRIGGER+0x7c>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b07      	cmp	r3, #7
 8002f7e:	d102      	bne.n	8002f86 <CHECK_FLOW_TRIGGER+0x42>
				{
					START_PSV();
 8002f80:	f000 f9e0 	bl	8003344 <START_PSV>
				else if(Running_Mode == Cpap)
				{
					START_CPAP();
				}
	}
}
 8002f84:	e00c      	b.n	8002fa0 <CHECK_FLOW_TRIGGER+0x5c>
				else if(Running_Mode == BiPap)
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <CHECK_FLOW_TRIGGER+0x7c>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d102      	bne.n	8002f94 <CHECK_FLOW_TRIGGER+0x50>
					START_BIPAP();
 8002f8e:	f000 f9ed 	bl	800336c <START_BIPAP>
}
 8002f92:	e005      	b.n	8002fa0 <CHECK_FLOW_TRIGGER+0x5c>
				else if(Running_Mode == Cpap)
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <CHECK_FLOW_TRIGGER+0x7c>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b0b      	cmp	r3, #11
 8002f9a:	d101      	bne.n	8002fa0 <CHECK_FLOW_TRIGGER+0x5c>
					START_CPAP();
 8002f9c:	f000 f9fa 	bl	8003394 <START_CPAP>
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	200129aa 	.word	0x200129aa
 8002fa8:	200124f0 	.word	0x200124f0
 8002fac:	20012900 	.word	0x20012900
 8002fb0:	20012b70 	.word	0x20012b70
 8002fb4:	2001263d 	.word	0x2001263d
 8002fb8:	200129d4 	.word	0x200129d4
 8002fbc:	20012aa1 	.word	0x20012aa1
 8002fc0:	20012b68 	.word	0x20012b68

08002fc4 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
	 if(Vent_Type == MASK_MODE)
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <CHECK_TRIGGER_OFFSET+0xb0>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d11a      	bne.n	8003006 <CHECK_TRIGGER_OFFSET+0x42>
	 {
		if(GRAPH_VALUES.flow >=0 )
 8002fd0:	4b29      	ldr	r3, [pc, #164]	; (8003078 <CHECK_TRIGGER_OFFSET+0xb4>)
 8002fd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	da00      	bge.n	8002fe2 <CHECK_TRIGGER_OFFSET+0x1e>
				Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
				Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
				FLOW_TRIGGER             =  0;
			}
	 }
}
 8002fe0:	e042      	b.n	8003068 <CHECK_TRIGGER_OFFSET+0xa4>
			Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 8002fe2:	4b25      	ldr	r3, [pc, #148]	; (8003078 <CHECK_TRIGGER_OFFSET+0xb4>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <CHECK_TRIGGER_OFFSET+0xb8>)
 8002fea:	601a      	str	r2, [r3, #0]
			Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 8002fec:	4b22      	ldr	r3, [pc, #136]	; (8003078 <CHECK_TRIGGER_OFFSET+0xb4>)
 8002fee:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ff2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ff6:	ee17 2a90 	vmov	r2, s15
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <CHECK_TRIGGER_OFFSET+0xbc>)
 8002ffc:	601a      	str	r2, [r3, #0]
			FLOW_TRIGGER             =  0;
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <CHECK_TRIGGER_OFFSET+0xc0>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
}
 8003004:	e030      	b.n	8003068 <CHECK_TRIGGER_OFFSET+0xa4>
	 else if(Vent_Type == ET_TUBE_MODE)
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <CHECK_TRIGGER_OFFSET+0xb0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d12c      	bne.n	8003068 <CHECK_TRIGGER_OFFSET+0xa4>
			if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 800300e:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <CHECK_TRIGGER_OFFSET+0xb4>)
 8003010:	edd3 7a01 	vldr	s15, [r3, #4]
 8003014:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	d013      	beq.n	8003046 <CHECK_TRIGGER_OFFSET+0x82>
 800301e:	4b16      	ldr	r3, [pc, #88]	; (8003078 <CHECK_TRIGGER_OFFSET+0xb4>)
 8003020:	edd3 7a01 	vldr	s15, [r3, #4]
 8003024:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8003028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800302c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003030:	da00      	bge.n	8003034 <CHECK_TRIGGER_OFFSET+0x70>
}
 8003032:	e019      	b.n	8003068 <CHECK_TRIGGER_OFFSET+0xa4>
			if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <CHECK_TRIGGER_OFFSET+0xb4>)
 8003036:	edd3 7a01 	vldr	s15, [r3, #4]
 800303a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003042:	d400      	bmi.n	8003046 <CHECK_TRIGGER_OFFSET+0x82>
}
 8003044:	e010      	b.n	8003068 <CHECK_TRIGGER_OFFSET+0xa4>
				Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <CHECK_TRIGGER_OFFSET+0xb4>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <CHECK_TRIGGER_OFFSET+0xb8>)
 800304e:	601a      	str	r2, [r3, #0]
				Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <CHECK_TRIGGER_OFFSET+0xb4>)
 8003052:	edd3 7a01 	vldr	s15, [r3, #4]
 8003056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800305a:	ee17 2a90 	vmov	r2, s15
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <CHECK_TRIGGER_OFFSET+0xbc>)
 8003060:	601a      	str	r2, [r3, #0]
				FLOW_TRIGGER             =  0;
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <CHECK_TRIGGER_OFFSET+0xc0>)
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	200129f4 	.word	0x200129f4
 8003078:	200125f8 	.word	0x200125f8
 800307c:	2001296c 	.word	0x2001296c
 8003080:	20012900 	.word	0x20012900
 8003084:	200129aa 	.word	0x200129aa

08003088 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset>:




void BACKUP_PC_CMV_Inspiration_Time_Variables_Reset()
{
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b083      	sub	sp, #12
 800308c:	af02      	add	r7, sp, #8
	Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 800308e:	4b61      	ldr	r3, [pc, #388]	; (8003214 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x18c>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
	Blower_Status       = BlOWER_ON;
 8003094:	4b60      	ldr	r3, [pc, #384]	; (8003218 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x190>)
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
	Find_Average_Flow();
 800309a:	f00a fef5 	bl	800de88 <Find_Average_Flow>
	Breath_Count         = Count_The_Breath;
 800309e:	4b5f      	ldr	r3, [pc, #380]	; (800321c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
	Smooth_Ramp_Pressure();
 80030a4:	f000 fdb8 	bl	8003c18 <Smooth_Ramp_Pressure>
    PIP_Not_Acheieved();
 80030a8:	f00a ff1a 	bl	800dee0 <PIP_Not_Acheieved>
	ExpValve_CLOSE();
 80030ac:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4a5b      	ldr	r2, [pc, #364]	; (8003220 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 80030b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030b6:	6153      	str	r3, [r2, #20]
	PIP_AVERAGE();
 80030b8:	f005 fe36 	bl	8008d28 <PIP_AVERAGE>
	PEEP_AVERAGE();
 80030bc:	f005 fe5a 	bl	8008d74 <PEEP_AVERAGE>
	//Set_Blower_Val();
	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 80030c0:	4b58      	ldr	r3, [pc, #352]	; (8003224 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x19c>)
 80030c2:	78db      	ldrb	r3, [r3, #3]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f009 fbe7 	bl	800c898 <O2_DAC_Control>
	Check_Alert();
 80030ca:	f7fe f81b 	bl	8001104 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 80030ce:	f7fe f8d1 	bl	8001274 <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 80030d2:	f7fe fd77 	bl	8001bc4 <LED_Alert>
	Alert_Status = NO_ALERT;
 80030d6:	4b54      	ldr	r3, [pc, #336]	; (8003228 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
	GRAPH_VALUES.Maximum_oxygen_flow   = 0;
 80030dc:	4b53      	ldr	r3, [pc, #332]	; (800322c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 80030de:	2200      	movs	r2, #0
 80030e0:	829a      	strh	r2, [r3, #20]
	Sampled_Parameter_Inspiration_time();
 80030e2:	f00e ffd1 	bl	8012088 <Sampled_Parameter_Inspiration_time>
	if( (BACKUP_PC_CMV.PEEP_Val != PEEP_Maintain_Parameter.PEEP_AVG_VAL ) )
 80030e6:	4b52      	ldr	r3, [pc, #328]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 80030e8:	785a      	ldrb	r2, [r3, #1]
 80030ea:	4b52      	ldr	r3, [pc, #328]	; (8003234 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1ac>)
 80030ec:	7c1b      	ldrb	r3, [r3, #16]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d013      	beq.n	800311a <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x92>
	{
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time     = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 80030f2:	4b50      	ldr	r3, [pc, #320]	; (8003234 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1ac>)
 80030f4:	7c18      	ldrb	r0, [r3, #16]
 80030f6:	4b4e      	ldr	r3, [pc, #312]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 80030f8:	7899      	ldrb	r1, [r3, #2]
 80030fa:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 8003100:	785c      	ldrb	r4, [r3, #1]
																															 BACKUP_PC_CMV.RESPIRATORY_RATE_Val,
																															 BACKUP_PC_CMV.INSPIRATION_TIME,
																															 BACKUP_PC_CMV.PEEP_Val,
																											                 PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8003102:	4b4c      	ldr	r3, [pc, #304]	; (8003234 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1ac>)
 8003104:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time     = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 8003108:	b29b      	uxth	r3, r3
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	4623      	mov	r3, r4
 800310e:	f004 f97f 	bl	8007410 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode>
 8003112:	4603      	mov	r3, r0
 8003114:	b21a      	sxth	r2, r3
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1ac>)
 8003118:	809a      	strh	r2, [r3, #4]

	}
	INCREASE_EACH_DAC_SET_CONST(Common_Mode_Parameter._PIP_Val,BACKUP_PC_CMV.RISE_TIME_MS_Val);
 800311a:	4b42      	ldr	r3, [pc, #264]	; (8003224 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x19c>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	4a44      	ldr	r2, [pc, #272]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 8003120:	edd2 7a01 	vldr	s15, [r2, #4]
 8003124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003128:	ee17 2a90 	vmov	r2, s15
 800312c:	b292      	uxth	r2, r2
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f00a ffc7 	bl	800e0c4 <INCREASE_EACH_DAC_SET_CONST>
	BLOWER_ENDING_DAC_SIGNAL_TUNE(BACKUP_PC_CMV.PIP_Val,BACKUP_PC_CMV.INSPIRATION_TIME,BACKUP_PC_CMV.Rise_Time_percentage);
 8003136:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	4a3d      	ldr	r2, [pc, #244]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 800313c:	6891      	ldr	r1, [r2, #8]
 800313e:	4a3c      	ldr	r2, [pc, #240]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 8003140:	7cd2      	ldrb	r2, [r2, #19]
 8003142:	4618      	mov	r0, r3
 8003144:	f00b fa1a 	bl	800e57c <BLOWER_ENDING_DAC_SIGNAL_TUNE>
	BREATH_STATE                                               = INSPIRATION_CYCLE;
 8003148:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1b0>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
	Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 800314e:	4b3b      	ldr	r3, [pc, #236]	; (800323c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1b4>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			                   = OPENED;
 8003154:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1b8>)
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
	PIP_Status                    				               = PIP_NOT_ACHEIVED;
 800315a:	4b3a      	ldr	r3, [pc, #232]	; (8003244 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1bc>)
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
	Set_PIP_Status                                             = SET_PIP_VALUE_NOT_ACHEIVED;
 8003160:	4b39      	ldr	r3, [pc, #228]	; (8003248 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1c0>)
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
	Read_Time_vs_Pressure                                      = READ_TIME_OPEN;
 8003166:	4b39      	ldr	r3, [pc, #228]	; (800324c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1c4>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.PIP_Control_Event_Occured                 = RESET;
 800316c:	4b38      	ldr	r3, [pc, #224]	; (8003250 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 800316e:	2200      	movs	r2, #0
 8003170:	805a      	strh	r2, [r3, #2]
	PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1cc>)
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
	if(Vent_Type == MASK_MODE)
 8003178:	4b37      	ldr	r3, [pc, #220]	; (8003258 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1d0>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d109      	bne.n	8003194 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x10c>
	{
		Pressure_Mode_blower_control.BLOWER_DAC_VAL              =  APNEA_DAC_VAL(BACKUP_PC_CMV.PEEP_Val);
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	4618      	mov	r0, r3
 8003186:	f006 fb05 	bl	8009794 <APNEA_DAC_VAL>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	4b33      	ldr	r3, [pc, #204]	; (800325c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1d4>)
 8003190:	801a      	strh	r2, [r3, #0]
 8003192:	e00c      	b.n	80031ae <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x126>
	}
	else if(Vent_Type == ET_TUBE_MODE)
 8003194:	4b30      	ldr	r3, [pc, #192]	; (8003258 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1d0>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d108      	bne.n	80031ae <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x126>
	{
		Pressure_Mode_blower_control.BLOWER_DAC_VAL                = DAC_VAL(BACKUP_PC_CMV.PEEP_Val );
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f005 ff33 	bl	800900c <DAC_VAL>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b2c      	ldr	r3, [pc, #176]	; (800325c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1d4>)
 80031ac:	801a      	strh	r2, [r3, #0]
	}
	Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL           = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1d4>)
 80031b0:	881a      	ldrh	r2, [r3, #0]
 80031b2:	4b2a      	ldr	r3, [pc, #168]	; (800325c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1d4>)
 80031b4:	805a      	strh	r2, [r3, #2]
	TIME_Base_parameter._INSPIRATION_TIME                      = BACKUP_PC_CMV.INSPIRATION_TIME;
 80031b6:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1d8>)
 80031be:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1d8>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	609a      	str	r2, [r3, #8]
	PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = PIP_control_Task.Early_Acheived_Ramp_Time_Percentage;
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80031c8:	7a1a      	ldrb	r2, [r3, #8]
 80031ca:	4b21      	ldr	r3, [pc, #132]	; (8003250 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80031cc:	725a      	strb	r2, [r3, #9]
	GRAPH_VALUES.volume                                        = RESET;
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
	Volume_max                                                 = RESET;
 80031d6:	4b23      	ldr	r3, [pc, #140]	; (8003264 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1dc>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
	OLD.LAST_PIP_Control_Task_Delay                            = PIP_control_Task.PIP_Control_Task_Delay ;
 80031dc:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80031de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1e0>)
 80031e6:	82da      	strh	r2, [r3, #22]
	OLD.LAST_Increase_Each_DAC_SET_CONST                       = PIP_control_Task.Increase_Each_DAC_SET_CONST ;
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80031ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1e0>)
 80031f2:	831a      	strh	r2, [r3, #24]
	Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1e4>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1e8>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
	vTaskDelay(BACKUP_PC_CMV.INSPIRATION_TIME);
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4618      	mov	r0, r3
 8003206:	f017 ff21 	bl	801b04c <vTaskDelay>
}
 800320a:	bf00      	nop
 800320c:	3704      	adds	r7, #4
 800320e:	46bd      	mov	sp, r7
 8003210:	bd90      	pop	{r4, r7, pc}
 8003212:	bf00      	nop
 8003214:	20012b71 	.word	0x20012b71
 8003218:	20012828 	.word	0x20012828
 800321c:	200122a8 	.word	0x200122a8
 8003220:	40020400 	.word	0x40020400
 8003224:	200124f0 	.word	0x200124f0
 8003228:	2001287c 	.word	0x2001287c
 800322c:	200125f8 	.word	0x200125f8
 8003230:	200121b8 	.word	0x200121b8
 8003234:	20012c74 	.word	0x20012c74
 8003238:	20012a3c 	.word	0x20012a3c
 800323c:	20012a37 	.word	0x20012a37
 8003240:	20012a34 	.word	0x20012a34
 8003244:	200129f7 	.word	0x200129f7
 8003248:	20012b34 	.word	0x20012b34
 800324c:	20012d34 	.word	0x20012d34
 8003250:	200123d0 	.word	0x200123d0
 8003254:	200124bc 	.word	0x200124bc
 8003258:	200129f4 	.word	0x200129f4
 800325c:	20012978 	.word	0x20012978
 8003260:	20012b38 	.word	0x20012b38
 8003264:	20012c70 	.word	0x20012c70
 8003268:	20012c08 	.word	0x20012c08
 800326c:	2001269e 	.word	0x2001269e
 8003270:	20012870 	.word	0x20012870

08003274 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset>:

void BACKUP_PC_CMV_Expiration_Time_Variables_Reset()
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
	Apnea_Mode                                          = OFF;
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa0>)
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
	BREATH_STATE                                        = EXPIRATION_CYCLE;
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa4>)
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
	PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 8003290:	4b22      	ldr	r3, [pc, #136]	; (800331c <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 8003296:	4b21      	ldr	r3, [pc, #132]	; (800331c <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xa8>)
 8003298:	2200      	movs	r2, #0
 800329a:	60da      	str	r2, [r3, #12]
	Patient_Trigger                                     = NO_PATIENT_TRIGGER;
 800329c:	4b20      	ldr	r3, [pc, #128]	; (8003320 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xac>)
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
	Trigger_Time_Monitor();
 80032a2:	f000 fcf7 	bl	8003c94 <Trigger_Time_Monitor>
	 if(Vent_Type == MASK_MODE)
 80032a6:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xb0>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10e      	bne.n	80032cc <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x58>
	 {
		Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL    = TUNE_PEEP_BLOWER(&Pressure_Mode_blower_control.LAST_PEEP_BLOWER_DAC_VAL,
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xb4>)
 80032b0:	785b      	ldrb	r3, [r3, #1]
 80032b2:	4619      	mov	r1, r3
 80032b4:	481d      	ldr	r0, [pc, #116]	; (800332c <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xb8>)
 80032b6:	f009 fe69 	bl	800cf8c <TUNE_PEEP_BLOWER>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	4b1c      	ldr	r3, [pc, #112]	; (8003330 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xbc>)
 80032c0:	821a      	strh	r2, [r3, #16]
					                                                               Common_Mode_Parameter._PEEP_Val );
		Pressure_Mode_blower_control.BLOWER_DAC_VAL         = Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL;
 80032c2:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xbc>)
 80032c4:	8a1a      	ldrh	r2, [r3, #16]
 80032c6:	4b1a      	ldr	r3, [pc, #104]	; (8003330 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xbc>)
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	e006      	b.n	80032da <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x66>
	 }
	 else if(Vent_Type == ET_TUBE_MODE)
 80032cc:	4b15      	ldr	r3, [pc, #84]	; (8003324 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xb0>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0x66>
	 {
		 Pressure_Mode_blower_control.BLOWER_DAC_VAL=0;
 80032d4:	4b16      	ldr	r3, [pc, #88]	; (8003330 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xbc>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	801a      	strh	r2, [r3, #0]
	 }
	 Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xb4>)
 80032dc:	78db      	ldrb	r3, [r3, #3]
 80032de:	4618      	mov	r0, r3
 80032e0:	f009 f8e6 	bl	800c4b0 <Calculate_O2>
	Alert_Expiration_Time_Parameter();
 80032e4:	f7fe f840 	bl	8001368 <Alert_Expiration_Time_Parameter>
	TIME_Base_parameter._EXPIRATION_TIME                = BACKUP_PC_CMV.EXPIRATION_TIME;
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xc0>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xc4>)
 80032f0:	605a      	str	r2, [r3, #4]
	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xc4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	60da      	str	r2, [r3, #12]
	Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xc8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xcc>)
 8003300:	2202      	movs	r2, #2
 8003302:	701a      	strb	r2, [r3, #0]
	vTaskDelay(BACKUP_PC_CMV.EXPIRATION_TIME);
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset+0xc0>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4618      	mov	r0, r3
 800330a:	f017 fe9f 	bl	801b04c <vTaskDelay>
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20012aa1 	.word	0x20012aa1
 8003318:	20012a3c 	.word	0x20012a3c
 800331c:	20012c74 	.word	0x20012c74
 8003320:	2001263d 	.word	0x2001263d
 8003324:	200129f4 	.word	0x200129f4
 8003328:	200124f0 	.word	0x200124f0
 800332c:	2001298a 	.word	0x2001298a
 8003330:	20012978 	.word	0x20012978
 8003334:	200121b8 	.word	0x200121b8
 8003338:	20012b38 	.word	0x20012b38
 800333c:	2001269e 	.word	0x2001269e
 8003340:	20012870 	.word	0x20012870

08003344 <START_PSV>:




void START_PSV()
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0

	if(Vent_Type == MASK_MODE)
 8003348:	4b07      	ldr	r3, [pc, #28]	; (8003368 <START_PSV+0x24>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <START_PSV+0x12>
	{
		START_MASK_PSV();
 8003350:	f000 f9b4 	bl	80036bc <START_MASK_PSV>
	{
		START_ET_TUBE_PSV();
	}


}
 8003354:	e005      	b.n	8003362 <START_PSV+0x1e>
	else if(Vent_Type == ET_TUBE_MODE)
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <START_PSV+0x24>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <START_PSV+0x1e>
		START_ET_TUBE_PSV();
 800335e:	f000 fa65 	bl	800382c <START_ET_TUBE_PSV>
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200129f4 	.word	0x200129f4

0800336c <START_BIPAP>:



void START_BIPAP()
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0

	if(Vent_Type == MASK_MODE)
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <START_BIPAP+0x24>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d102      	bne.n	800337e <START_BIPAP+0x12>
	{
		START_MASK_BIPAP();
 8003378:	f000 f820 	bl	80033bc <START_MASK_BIPAP>
	{
		START_ET_TUBE_BIPAP();
	}


}
 800337c:	e005      	b.n	800338a <START_BIPAP+0x1e>
	else if(Vent_Type == ET_TUBE_MODE)
 800337e:	4b04      	ldr	r3, [pc, #16]	; (8003390 <START_BIPAP+0x24>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <START_BIPAP+0x1e>
		START_ET_TUBE_BIPAP();
 8003386:	f000 f8d9 	bl	800353c <START_ET_TUBE_BIPAP>
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	200129f4 	.word	0x200129f4

08003394 <START_CPAP>:




void START_CPAP()
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0

	if(Vent_Type == MASK_MODE)
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <START_CPAP+0x24>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d102      	bne.n	80033a6 <START_CPAP+0x12>
	{
		START_MASK_CPAP();
 80033a0:	f000 fb02 	bl	80039a8 <START_MASK_CPAP>
	else if(Vent_Type == ET_TUBE_MODE)
	{
		START_ET_TUBE_CPAP();
	}

}
 80033a4:	e005      	b.n	80033b2 <START_CPAP+0x1e>
	else if(Vent_Type == ET_TUBE_MODE)
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <START_CPAP+0x24>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <START_CPAP+0x1e>
		START_ET_TUBE_CPAP();
 80033ae:	f000 fb93 	bl	8003ad8 <START_ET_TUBE_CPAP>
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200129f4 	.word	0x200129f4

080033bc <START_MASK_BIPAP>:

void START_MASK_BIPAP()
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 80033c0:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <START_MASK_BIPAP+0x124>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d130      	bne.n	800342a <START_MASK_BIPAP+0x6e>
		{
			 OLD.LAST_BLOWER_ENDING_DAC_SIGNAL     =  APNEA_DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 80033c8:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <START_MASK_BIPAP+0x128>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f006 f9e1 	bl	8009794 <APNEA_DAC_VAL>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b44      	ldr	r3, [pc, #272]	; (80034e8 <START_MASK_BIPAP+0x12c>)
 80033d8:	829a      	strh	r2, [r3, #20]
			 OLD.LAST_PIP_Control_Task_Delay       =  PIP_control_Task.PIP_Control_Task_Delay;
 80033da:	4b44      	ldr	r3, [pc, #272]	; (80034ec <START_MASK_BIPAP+0x130>)
 80033dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <START_MASK_BIPAP+0x12c>)
 80033e4:	82da      	strh	r2, [r3, #22]
			 OLD.LAST_Increase_Each_DAC_SET_CONST  =  PIP_control_Task.Increase_Each_DAC_SET_CONST;
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <START_MASK_BIPAP+0x130>)
 80033e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	4b3e      	ldr	r3, [pc, #248]	; (80034e8 <START_MASK_BIPAP+0x12c>)
 80033f0:	831a      	strh	r2, [r3, #24]
			 ExpValve_OPEN();
 80033f2:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <START_MASK_BIPAP+0x134>)
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	4a3e      	ldr	r2, [pc, #248]	; (80034f0 <START_MASK_BIPAP+0x134>)
 80033f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033fc:	6153      	str	r3, [r2, #20]
			 Wait_Time                             = 1000;
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <START_MASK_BIPAP+0x138>)
 8003400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003404:	601a      	str	r2, [r3, #0]
			 BIPAP.EPAP_COUNTER                    = BIPAP.EPAP_TIME;
 8003406:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <START_MASK_BIPAP+0x13c>)
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	4a3b      	ldr	r2, [pc, #236]	; (80034f8 <START_MASK_BIPAP+0x13c>)
 800340c:	62d3      	str	r3, [r2, #44]	; 0x2c
			 BIPAP_Control.Trigger_Check_Wait_Time = 500+ BIPAP.TRIG_TIME ;
 800340e:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <START_MASK_BIPAP+0x13c>)
 8003410:	899b      	ldrh	r3, [r3, #12]
 8003412:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003416:	4a39      	ldr	r2, [pc, #228]	; (80034fc <START_MASK_BIPAP+0x140>)
 8003418:	6093      	str	r3, [r2, #8]
			 Blower_Signal(0);
 800341a:	4b39      	ldr	r3, [pc, #228]	; (8003500 <START_MASK_BIPAP+0x144>)
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
			 vTaskSuspend(PIP_Control_Task_Handler);
 8003420:	4b38      	ldr	r3, [pc, #224]	; (8003504 <START_MASK_BIPAP+0x148>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f017 fe45 	bl	801b0b4 <vTaskSuspend>
		}
		Blower_Signal(0);
 800342a:	4b35      	ldr	r3, [pc, #212]	; (8003500 <START_MASK_BIPAP+0x144>)
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
		Parkar_valve_Signal(0);
 8003430:	4b33      	ldr	r3, [pc, #204]	; (8003500 <START_MASK_BIPAP+0x144>)
 8003432:	2200      	movs	r2, #0
 8003434:	615a      	str	r2, [r3, #20]
		vTaskSuspend(Oxygen_Blending_Handler);
 8003436:	4b34      	ldr	r3, [pc, #208]	; (8003508 <START_MASK_BIPAP+0x14c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f017 fe3a 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Alert_Handler);
 8003440:	4b32      	ldr	r3, [pc, #200]	; (800350c <START_MASK_BIPAP+0x150>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f017 fe35 	bl	801b0b4 <vTaskSuspend>
	    vTaskSuspend(One_Time_Handler);
 800344a:	4b31      	ldr	r3, [pc, #196]	; (8003510 <START_MASK_BIPAP+0x154>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f017 fe30 	bl	801b0b4 <vTaskSuspend>

	    BIPAP_Peep_Average.EPAP_AVG_VAL                       = RESET;
 8003454:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <START_MASK_BIPAP+0x158>)
 8003456:	2200      	movs	r2, #0
 8003458:	721a      	strb	r2, [r3, #8]
		GRAPH_VALUES.volume                                   = RESET;
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <START_MASK_BIPAP+0x15c>)
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
		Volume_max                                            = RESET;
 8003462:	4b2e      	ldr	r3, [pc, #184]	; (800351c <START_MASK_BIPAP+0x160>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
		BIPAP.APNEA_COUNTER                                   = (1000*BIPAP.APNEA_TIME) ;
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <START_MASK_BIPAP+0x13c>)
 800346a:	8a9b      	ldrh	r3, [r3, #20]
 800346c:	461a      	mov	r2, r3
 800346e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003472:	fb03 f302 	mul.w	r3, r3, r2
 8003476:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <START_MASK_BIPAP+0x13c>)
 8003478:	6193      	str	r3, [r2, #24]
		BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL         = APNEA_DAC_VAL(BIPAP.EPAP_Val );
 800347a:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <START_MASK_BIPAP+0x13c>)
 800347c:	789b      	ldrb	r3, [r3, #2]
 800347e:	4618      	mov	r0, r3
 8003480:	f006 f988 	bl	8009794 <APNEA_DAC_VAL>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <START_MASK_BIPAP+0x164>)
 800348a:	80da      	strh	r2, [r3, #6]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = APNEA_DAC_VAL(BIPAP.IPAP_Val);
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <START_MASK_BIPAP+0x13c>)
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4618      	mov	r0, r3
 8003494:	f006 f97e 	bl	8009794 <APNEA_DAC_VAL>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <START_MASK_BIPAP+0x168>)
 800349e:	811a      	strh	r2, [r3, #8]
		BREATH_STATE                                          = EXPIRATION_CYCLE;
 80034a0:	4b21      	ldr	r3, [pc, #132]	; (8003528 <START_MASK_BIPAP+0x16c>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
		Patient_Trigger                                       = NO_PATIENT_TRIGGER;
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <START_MASK_BIPAP+0x170>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
		BIPAP_Control.BIPAP_EPAP_Settle_Time                  = 2000;
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <START_MASK_BIPAP+0x140>)
 80034ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80034b2:	601a      	str	r2, [r3, #0]


		vTaskSuspend(BIPAP_PID_Handler);
 80034b4:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <START_MASK_BIPAP+0x174>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f017 fdfb 	bl	801b0b4 <vTaskSuspend>
		vTaskResume(BIPAP_Handler);
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <START_MASK_BIPAP+0x178>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f017 feba 	bl	801b23c <vTaskResume>
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <START_MASK_BIPAP+0x124>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d104      	bne.n	80034da <START_MASK_BIPAP+0x11e>
		{
			vTaskSuspend(BACKUP_PC_Handler);
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <START_MASK_BIPAP+0x17c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f017 fded 	bl	801b0b4 <vTaskSuspend>
		}
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20012846 	.word	0x20012846
 80034e4:	200121b8 	.word	0x200121b8
 80034e8:	20012c08 	.word	0x20012c08
 80034ec:	200123d0 	.word	0x200123d0
 80034f0:	40020400 	.word	0x40020400
 80034f4:	20012698 	.word	0x20012698
 80034f8:	20012484 	.word	0x20012484
 80034fc:	20012990 	.word	0x20012990
 8003500:	40007400 	.word	0x40007400
 8003504:	200124ec 	.word	0x200124ec
 8003508:	200127ac 	.word	0x200127ac
 800350c:	20012968 	.word	0x20012968
 8003510:	200129cc 	.word	0x200129cc
 8003514:	200122bc 	.word	0x200122bc
 8003518:	200125f8 	.word	0x200125f8
 800351c:	20012c70 	.word	0x20012c70
 8003520:	200126a4 	.word	0x200126a4
 8003524:	20012978 	.word	0x20012978
 8003528:	20012a3c 	.word	0x20012a3c
 800352c:	2001263d 	.word	0x2001263d
 8003530:	20012b04 	.word	0x20012b04
 8003534:	20012364 	.word	0x20012364
 8003538:	20012500 	.word	0x20012500

0800353c <START_ET_TUBE_BIPAP>:

void START_ET_TUBE_BIPAP()
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0



		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8003540:	4b47      	ldr	r3, [pc, #284]	; (8003660 <START_ET_TUBE_BIPAP+0x124>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d130      	bne.n	80035aa <START_ET_TUBE_BIPAP+0x6e>
		{
			 OLD.LAST_BLOWER_ENDING_DAC_SIGNAL     =  DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 8003548:	4b46      	ldr	r3, [pc, #280]	; (8003664 <START_ET_TUBE_BIPAP+0x128>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f005 fd5d 	bl	800900c <DAC_VAL>
 8003552:	4603      	mov	r3, r0
 8003554:	461a      	mov	r2, r3
 8003556:	4b44      	ldr	r3, [pc, #272]	; (8003668 <START_ET_TUBE_BIPAP+0x12c>)
 8003558:	829a      	strh	r2, [r3, #20]
			 OLD.LAST_PIP_Control_Task_Delay       =  PIP_control_Task.PIP_Control_Task_Delay;
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <START_ET_TUBE_BIPAP+0x130>)
 800355c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003560:	b29a      	uxth	r2, r3
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <START_ET_TUBE_BIPAP+0x12c>)
 8003564:	82da      	strh	r2, [r3, #22]
			 OLD.LAST_Increase_Each_DAC_SET_CONST  =  PIP_control_Task.Increase_Each_DAC_SET_CONST;
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <START_ET_TUBE_BIPAP+0x130>)
 8003568:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800356c:	b29a      	uxth	r2, r3
 800356e:	4b3e      	ldr	r3, [pc, #248]	; (8003668 <START_ET_TUBE_BIPAP+0x12c>)
 8003570:	831a      	strh	r2, [r3, #24]
			 ExpValve_OPEN();
 8003572:	4b3f      	ldr	r3, [pc, #252]	; (8003670 <START_ET_TUBE_BIPAP+0x134>)
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <START_ET_TUBE_BIPAP+0x134>)
 8003578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800357c:	6153      	str	r3, [r2, #20]
			 Wait_Time                             = 1000;
 800357e:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <START_ET_TUBE_BIPAP+0x138>)
 8003580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003584:	601a      	str	r2, [r3, #0]
			 BIPAP.EPAP_COUNTER                    = BIPAP.EPAP_TIME;
 8003586:	4b3c      	ldr	r3, [pc, #240]	; (8003678 <START_ET_TUBE_BIPAP+0x13c>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <START_ET_TUBE_BIPAP+0x13c>)
 800358c:	62d3      	str	r3, [r2, #44]	; 0x2c
			 BIPAP_Control.Trigger_Check_Wait_Time = 500+ BIPAP.TRIG_TIME ;
 800358e:	4b3a      	ldr	r3, [pc, #232]	; (8003678 <START_ET_TUBE_BIPAP+0x13c>)
 8003590:	899b      	ldrh	r3, [r3, #12]
 8003592:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003596:	4a39      	ldr	r2, [pc, #228]	; (800367c <START_ET_TUBE_BIPAP+0x140>)
 8003598:	6093      	str	r3, [r2, #8]
			 Blower_Signal(0);
 800359a:	4b39      	ldr	r3, [pc, #228]	; (8003680 <START_ET_TUBE_BIPAP+0x144>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
			 vTaskSuspend(PIP_Control_Task_Handler);
 80035a0:	4b38      	ldr	r3, [pc, #224]	; (8003684 <START_ET_TUBE_BIPAP+0x148>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f017 fd85 	bl	801b0b4 <vTaskSuspend>
		}
		Parkar_valve_Signal(0);
 80035aa:	4b35      	ldr	r3, [pc, #212]	; (8003680 <START_ET_TUBE_BIPAP+0x144>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	615a      	str	r2, [r3, #20]
		Blower_Signal(0);
 80035b0:	4b33      	ldr	r3, [pc, #204]	; (8003680 <START_ET_TUBE_BIPAP+0x144>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
		vTaskSuspend(Oxygen_Blending_Handler);
 80035b6:	4b34      	ldr	r3, [pc, #208]	; (8003688 <START_ET_TUBE_BIPAP+0x14c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f017 fd7a 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Alert_Handler);
 80035c0:	4b32      	ldr	r3, [pc, #200]	; (800368c <START_ET_TUBE_BIPAP+0x150>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f017 fd75 	bl	801b0b4 <vTaskSuspend>
	    vTaskSuspend(One_Time_Handler);
 80035ca:	4b31      	ldr	r3, [pc, #196]	; (8003690 <START_ET_TUBE_BIPAP+0x154>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f017 fd70 	bl	801b0b4 <vTaskSuspend>

	    BIPAP_Peep_Average.EPAP_AVG_VAL                       = RESET;
 80035d4:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <START_ET_TUBE_BIPAP+0x158>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	721a      	strb	r2, [r3, #8]
		GRAPH_VALUES.volume                                   = RESET;
 80035da:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <START_ET_TUBE_BIPAP+0x15c>)
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	609a      	str	r2, [r3, #8]
		Volume_max                                            = RESET;
 80035e2:	4b2e      	ldr	r3, [pc, #184]	; (800369c <START_ET_TUBE_BIPAP+0x160>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
		BIPAP.APNEA_COUNTER                                   = (1000*BIPAP.APNEA_TIME) ;
 80035e8:	4b23      	ldr	r3, [pc, #140]	; (8003678 <START_ET_TUBE_BIPAP+0x13c>)
 80035ea:	8a9b      	ldrh	r3, [r3, #20]
 80035ec:	461a      	mov	r2, r3
 80035ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035f2:	fb03 f302 	mul.w	r3, r3, r2
 80035f6:	4a20      	ldr	r2, [pc, #128]	; (8003678 <START_ET_TUBE_BIPAP+0x13c>)
 80035f8:	6193      	str	r3, [r2, #24]
		BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL         = DAC_VAL(BIPAP.EPAP_Val );
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <START_ET_TUBE_BIPAP+0x13c>)
 80035fc:	789b      	ldrb	r3, [r3, #2]
 80035fe:	4618      	mov	r0, r3
 8003600:	f005 fd04 	bl	800900c <DAC_VAL>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <START_ET_TUBE_BIPAP+0x164>)
 800360a:	80da      	strh	r2, [r3, #6]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(BIPAP.IPAP_Val);
 800360c:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <START_ET_TUBE_BIPAP+0x13c>)
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	4618      	mov	r0, r3
 8003614:	f005 fcfa 	bl	800900c <DAC_VAL>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <START_ET_TUBE_BIPAP+0x168>)
 800361e:	811a      	strh	r2, [r3, #8]
		BREATH_STATE                                          = EXPIRATION_CYCLE;
 8003620:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <START_ET_TUBE_BIPAP+0x16c>)
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
		Patient_Trigger                                       = NO_PATIENT_TRIGGER;
 8003626:	4b21      	ldr	r3, [pc, #132]	; (80036ac <START_ET_TUBE_BIPAP+0x170>)
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
		BIPAP_Control.BIPAP_EPAP_Settle_Time                  = 2000;
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <START_ET_TUBE_BIPAP+0x140>)
 800362e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003632:	601a      	str	r2, [r3, #0]

		vTaskSuspend(BIPAP_PID_Handler);
 8003634:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <START_ET_TUBE_BIPAP+0x174>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f017 fd3b 	bl	801b0b4 <vTaskSuspend>
		vTaskResume(BIPAP_Handler);
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <START_ET_TUBE_BIPAP+0x178>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f017 fdfa 	bl	801b23c <vTaskResume>
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <START_ET_TUBE_BIPAP+0x124>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d104      	bne.n	800365a <START_ET_TUBE_BIPAP+0x11e>
		{
			vTaskSuspend(BACKUP_PC_Handler);
 8003650:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <START_ET_TUBE_BIPAP+0x17c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f017 fd2d 	bl	801b0b4 <vTaskSuspend>
		}
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20012846 	.word	0x20012846
 8003664:	200121b8 	.word	0x200121b8
 8003668:	20012c08 	.word	0x20012c08
 800366c:	200123d0 	.word	0x200123d0
 8003670:	40020400 	.word	0x40020400
 8003674:	20012698 	.word	0x20012698
 8003678:	20012484 	.word	0x20012484
 800367c:	20012990 	.word	0x20012990
 8003680:	40007400 	.word	0x40007400
 8003684:	200124ec 	.word	0x200124ec
 8003688:	200127ac 	.word	0x200127ac
 800368c:	20012968 	.word	0x20012968
 8003690:	200129cc 	.word	0x200129cc
 8003694:	200122bc 	.word	0x200122bc
 8003698:	200125f8 	.word	0x200125f8
 800369c:	20012c70 	.word	0x20012c70
 80036a0:	200126a4 	.word	0x200126a4
 80036a4:	20012978 	.word	0x20012978
 80036a8:	20012a3c 	.word	0x20012a3c
 80036ac:	2001263d 	.word	0x2001263d
 80036b0:	20012b04 	.word	0x20012b04
 80036b4:	20012364 	.word	0x20012364
 80036b8:	20012500 	.word	0x20012500

080036bc <START_MASK_PSV>:

void START_MASK_PSV()
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
	     if(Current_Backup_Mode == Backup_PCCMV_Mode)
 80036c0:	4b42      	ldr	r3, [pc, #264]	; (80037cc <START_MASK_PSV+0x110>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d11e      	bne.n	8003706 <START_MASK_PSV+0x4a>
		 {
	    	 OLD.LAST_BLOWER_ENDING_DAC_SIGNAL        =	APNEA_DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 80036c8:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <START_MASK_PSV+0x114>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f006 f861 	bl	8009794 <APNEA_DAC_VAL>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b3f      	ldr	r3, [pc, #252]	; (80037d4 <START_MASK_PSV+0x118>)
 80036d8:	829a      	strh	r2, [r3, #20]
	    	 OLD.LAST_PIP_Control_Task_Delay          =	PIP_control_Task.PIP_Control_Task_Delay ;
 80036da:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <START_MASK_PSV+0x11c>)
 80036dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	4b3c      	ldr	r3, [pc, #240]	; (80037d4 <START_MASK_PSV+0x118>)
 80036e4:	82da      	strh	r2, [r3, #22]
	    	 OLD.LAST_Increase_Each_DAC_SET_CONST     = PIP_control_Task.Increase_Each_DAC_SET_CONST ;
 80036e6:	4b3c      	ldr	r3, [pc, #240]	; (80037d8 <START_MASK_PSV+0x11c>)
 80036e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <START_MASK_PSV+0x118>)
 80036f0:	831a      	strh	r2, [r3, #24]

	 	     vTaskSuspend(PIP_Control_Task_Handler);
 80036f2:	4b3a      	ldr	r3, [pc, #232]	; (80037dc <START_MASK_PSV+0x120>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f017 fcdc 	bl	801b0b4 <vTaskSuspend>
	 	     PSV_Control._INSPIRATION_TIME            = BACKUP_PC_CMV.INSPIRATION_TIME;
 80036fc:	4b34      	ldr	r3, [pc, #208]	; (80037d0 <START_MASK_PSV+0x114>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	461a      	mov	r2, r3
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <START_MASK_PSV+0x124>)
 8003704:	60da      	str	r2, [r3, #12]

		 }
			if(PSV.PSV_O2_Val > 21)
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <START_MASK_PSV+0x128>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	2b15      	cmp	r3, #21
 800370c:	dd04      	ble.n	8003718 <START_MASK_PSV+0x5c>
			{
				Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <START_MASK_PSV+0x12c>)
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	4b36      	ldr	r3, [pc, #216]	; (80037ec <START_MASK_PSV+0x130>)
 8003714:	615a      	str	r2, [r3, #20]
 8003716:	e002      	b.n	800371e <START_MASK_PSV+0x62>
			}
			else
			{
				Parkar_valve_Signal(0);
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <START_MASK_PSV+0x130>)
 800371a:	2200      	movs	r2, #0
 800371c:	615a      	str	r2, [r3, #20]
			}


	    vTaskSuspend(Oxygen_Blending_Handler);
 800371e:	4b34      	ldr	r3, [pc, #208]	; (80037f0 <START_MASK_PSV+0x134>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f017 fcc6 	bl	801b0b4 <vTaskSuspend>
	    vTaskSuspend(Alert_Handler);
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <START_MASK_PSV+0x138>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f017 fcc1 	bl	801b0b4 <vTaskSuspend>
	    vTaskSuspend(One_Time_Handler);
 8003732:	4b31      	ldr	r3, [pc, #196]	; (80037f8 <START_MASK_PSV+0x13c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f017 fcbc 	bl	801b0b4 <vTaskSuspend>
	    vTaskSuspend(PSV_Handler);
 800373c:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <START_MASK_PSV+0x140>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f017 fcb7 	bl	801b0b4 <vTaskSuspend>



		PIP_Status                    				          = PIP_NOT_ACHEIVED;
 8003746:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <START_MASK_PSV+0x144>)
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_DAC_VAL           = APNEA_DAC_VAL(PSV.PEEP_Val);
 800374c:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <START_MASK_PSV+0x128>)
 800374e:	789b      	ldrb	r3, [r3, #2]
 8003750:	4618      	mov	r0, r3
 8003752:	f006 f81f 	bl	8009794 <APNEA_DAC_VAL>
 8003756:	4603      	mov	r3, r0
 8003758:	461a      	mov	r2, r3
 800375a:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <START_MASK_PSV+0x148>)
 800375c:	801a      	strh	r2, [r3, #0]
		Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL      = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800375e:	4b29      	ldr	r3, [pc, #164]	; (8003804 <START_MASK_PSV+0x148>)
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	4b28      	ldr	r3, [pc, #160]	; (8003804 <START_MASK_PSV+0x148>)
 8003764:	805a      	strh	r2, [r3, #2]
		Set_PIP_Status                                        = SET_PIP_VALUE_NOT_ACHEIVED;
 8003766:	4b28      	ldr	r3, [pc, #160]	; (8003808 <START_MASK_PSV+0x14c>)
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
		Read_Time_vs_Pressure                                 = READ_TIME_OPEN;
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <START_MASK_PSV+0x150>)
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
		PIP_control_Task.PIP_Control_Event_Occured            = RESET;
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <START_MASK_PSV+0x11c>)
 8003774:	2200      	movs	r2, #0
 8003776:	805a      	strh	r2, [r3, #2]
		PIP_Average_Parameter.Maximum_PIP_Acheived            = RESET;
 8003778:	4b25      	ldr	r3, [pc, #148]	; (8003810 <START_MASK_PSV+0x154>)
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = APNEA_DAC_VAL(PSV.PRESSURE_SUPPORT_Val);
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <START_MASK_PSV+0x128>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	4618      	mov	r0, r3
 8003786:	f006 f805 	bl	8009794 <APNEA_DAC_VAL>
 800378a:	4603      	mov	r3, r0
 800378c:	461a      	mov	r2, r3
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <START_MASK_PSV+0x148>)
 8003790:	811a      	strh	r2, [r3, #8]
		BREATH_STATE                                          = INSPIRATION_CYCLE;
 8003792:	4b20      	ldr	r3, [pc, #128]	; (8003814 <START_MASK_PSV+0x158>)
 8003794:	2200      	movs	r2, #0
 8003796:	701a      	strb	r2, [r3, #0]
		GRAPH_VALUES.volume                                   = RESET;
 8003798:	4b1f      	ldr	r3, [pc, #124]	; (8003818 <START_MASK_PSV+0x15c>)
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
		Volume_max                                            = RESET;
 80037a0:	4b1e      	ldr	r3, [pc, #120]	; (800381c <START_MASK_PSV+0x160>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
		PSV_Peep_Average.PEEP_AVG_VAL                         = 0;
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <START_MASK_PSV+0x164>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	721a      	strb	r2, [r3, #8]

		vTaskResume(PSV_PID_Handler);
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <START_MASK_PSV+0x168>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f017 fd43 	bl	801b23c <vTaskResume>
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <START_MASK_PSV+0x110>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d104      	bne.n	80037c8 <START_MASK_PSV+0x10c>
		{
		   vTaskSuspend(BACKUP_PC_Handler);
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <START_MASK_PSV+0x16c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f017 fc76 	bl	801b0b4 <vTaskSuspend>
		}
}
 80037c8:	bf00      	nop
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20012846 	.word	0x20012846
 80037d0:	200121b8 	.word	0x200121b8
 80037d4:	20012c08 	.word	0x20012c08
 80037d8:	200123d0 	.word	0x200123d0
 80037dc:	200124ec 	.word	0x200124ec
 80037e0:	20012b78 	.word	0x20012b78
 80037e4:	20012710 	.word	0x20012710
 80037e8:	200129d4 	.word	0x200129d4
 80037ec:	40007400 	.word	0x40007400
 80037f0:	200127ac 	.word	0x200127ac
 80037f4:	20012968 	.word	0x20012968
 80037f8:	200129cc 	.word	0x200129cc
 80037fc:	200128a8 	.word	0x200128a8
 8003800:	200129f7 	.word	0x200129f7
 8003804:	20012978 	.word	0x20012978
 8003808:	20012b34 	.word	0x20012b34
 800380c:	20012d34 	.word	0x20012d34
 8003810:	200124bc 	.word	0x200124bc
 8003814:	20012a3c 	.word	0x20012a3c
 8003818:	200125f8 	.word	0x200125f8
 800381c:	20012c70 	.word	0x20012c70
 8003820:	20012b88 	.word	0x20012b88
 8003824:	200127a8 	.word	0x200127a8
 8003828:	20012500 	.word	0x20012500

0800382c <START_ET_TUBE_PSV>:
void START_ET_TUBE_PSV()
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
	    PSV_Control._INSPIRATION_TIME            = BACKUP_PC_CMV.INSPIRATION_TIME;
 8003830:	4b44      	ldr	r3, [pc, #272]	; (8003944 <START_ET_TUBE_PSV+0x118>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	461a      	mov	r2, r3
 8003836:	4b44      	ldr	r3, [pc, #272]	; (8003948 <START_ET_TUBE_PSV+0x11c>)
 8003838:	60da      	str	r2, [r3, #12]
	     if(Current_Backup_Mode == Backup_PCCMV_Mode)
 800383a:	4b44      	ldr	r3, [pc, #272]	; (800394c <START_ET_TUBE_PSV+0x120>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d119      	bne.n	8003876 <START_ET_TUBE_PSV+0x4a>
		 {
	    	 OLD.LAST_BLOWER_ENDING_DAC_SIGNAL        =	DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 8003842:	4b40      	ldr	r3, [pc, #256]	; (8003944 <START_ET_TUBE_PSV+0x118>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f005 fbe0 	bl	800900c <DAC_VAL>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	4b3f      	ldr	r3, [pc, #252]	; (8003950 <START_ET_TUBE_PSV+0x124>)
 8003852:	829a      	strh	r2, [r3, #20]
	    	 OLD.LAST_PIP_Control_Task_Delay          =	PIP_control_Task.PIP_Control_Task_Delay ;
 8003854:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <START_ET_TUBE_PSV+0x128>)
 8003856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800385a:	b29a      	uxth	r2, r3
 800385c:	4b3c      	ldr	r3, [pc, #240]	; (8003950 <START_ET_TUBE_PSV+0x124>)
 800385e:	82da      	strh	r2, [r3, #22]
	    	 OLD.LAST_Increase_Each_DAC_SET_CONST     = PIP_control_Task.Increase_Each_DAC_SET_CONST ;
 8003860:	4b3c      	ldr	r3, [pc, #240]	; (8003954 <START_ET_TUBE_PSV+0x128>)
 8003862:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003866:	b29a      	uxth	r2, r3
 8003868:	4b39      	ldr	r3, [pc, #228]	; (8003950 <START_ET_TUBE_PSV+0x124>)
 800386a:	831a      	strh	r2, [r3, #24]
	 	     vTaskSuspend(PIP_Control_Task_Handler);
 800386c:	4b3a      	ldr	r3, [pc, #232]	; (8003958 <START_ET_TUBE_PSV+0x12c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f017 fc1f 	bl	801b0b4 <vTaskSuspend>
		 }

		if(PSV.PSV_O2_Val > 21)
 8003876:	4b39      	ldr	r3, [pc, #228]	; (800395c <START_ET_TUBE_PSV+0x130>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	2b15      	cmp	r3, #21
 800387c:	dd07      	ble.n	800388e <START_ET_TUBE_PSV+0x62>
		{
			    Oxygen_Blending_Status = OXYGEN_NOT_ACHIEVED;
 800387e:	4b38      	ldr	r3, [pc, #224]	; (8003960 <START_ET_TUBE_PSV+0x134>)
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
				Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 8003884:	4b37      	ldr	r3, [pc, #220]	; (8003964 <START_ET_TUBE_PSV+0x138>)
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	4b37      	ldr	r3, [pc, #220]	; (8003968 <START_ET_TUBE_PSV+0x13c>)
 800388a:	615a      	str	r2, [r3, #20]
 800388c:	e002      	b.n	8003894 <START_ET_TUBE_PSV+0x68>
		}
		else
		{
			Parkar_valve_Signal(0);
 800388e:	4b36      	ldr	r3, [pc, #216]	; (8003968 <START_ET_TUBE_PSV+0x13c>)
 8003890:	2200      	movs	r2, #0
 8003892:	615a      	str	r2, [r3, #20]
		}



	    vTaskSuspend(Oxygen_Blending_Handler);
 8003894:	4b35      	ldr	r3, [pc, #212]	; (800396c <START_ET_TUBE_PSV+0x140>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f017 fc0b 	bl	801b0b4 <vTaskSuspend>
	    vTaskSuspend(Alert_Handler);
 800389e:	4b34      	ldr	r3, [pc, #208]	; (8003970 <START_ET_TUBE_PSV+0x144>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f017 fc06 	bl	801b0b4 <vTaskSuspend>
	    vTaskSuspend(One_Time_Handler);
 80038a8:	4b32      	ldr	r3, [pc, #200]	; (8003974 <START_ET_TUBE_PSV+0x148>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f017 fc01 	bl	801b0b4 <vTaskSuspend>
	    vTaskSuspend(PSV_Handler);
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <START_ET_TUBE_PSV+0x14c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f017 fbfc 	bl	801b0b4 <vTaskSuspend>

		PIP_Status                    				          = PIP_NOT_ACHEIVED;
 80038bc:	4b2f      	ldr	r3, [pc, #188]	; (800397c <START_ET_TUBE_PSV+0x150>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_DAC_VAL           = DAC_VAL(PSV.PEEP_Val);
 80038c2:	4b26      	ldr	r3, [pc, #152]	; (800395c <START_ET_TUBE_PSV+0x130>)
 80038c4:	789b      	ldrb	r3, [r3, #2]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f005 fba0 	bl	800900c <DAC_VAL>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <START_ET_TUBE_PSV+0x154>)
 80038d2:	801a      	strh	r2, [r3, #0]
		Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL      = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 80038d4:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <START_ET_TUBE_PSV+0x154>)
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	4b29      	ldr	r3, [pc, #164]	; (8003980 <START_ET_TUBE_PSV+0x154>)
 80038da:	805a      	strh	r2, [r3, #2]
		Set_PIP_Status                                        = SET_PIP_VALUE_NOT_ACHEIVED;
 80038dc:	4b29      	ldr	r3, [pc, #164]	; (8003984 <START_ET_TUBE_PSV+0x158>)
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
		Read_Time_vs_Pressure                                 = READ_TIME_OPEN;
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <START_ET_TUBE_PSV+0x15c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
		PIP_control_Task.PIP_Control_Event_Occured            = RESET;
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <START_ET_TUBE_PSV+0x128>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	805a      	strh	r2, [r3, #2]
		PIP_Average_Parameter.Maximum_PIP_Acheived            = RESET;
 80038ee:	4b27      	ldr	r3, [pc, #156]	; (800398c <START_ET_TUBE_PSV+0x160>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(PSV.PRESSURE_SUPPORT_Val);
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <START_ET_TUBE_PSV+0x130>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	4618      	mov	r0, r3
 80038fc:	f005 fb86 	bl	800900c <DAC_VAL>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <START_ET_TUBE_PSV+0x154>)
 8003906:	811a      	strh	r2, [r3, #8]
		BREATH_STATE                                          = INSPIRATION_CYCLE;
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <START_ET_TUBE_PSV+0x164>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
		GRAPH_VALUES.volume                                   = RESET;
 800390e:	4b21      	ldr	r3, [pc, #132]	; (8003994 <START_ET_TUBE_PSV+0x168>)
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
		Volume_max                                            = RESET;
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <START_ET_TUBE_PSV+0x16c>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
		PSV_Peep_Average.PEEP_AVG_VAL                         = 2;
 800391c:	4b1f      	ldr	r3, [pc, #124]	; (800399c <START_ET_TUBE_PSV+0x170>)
 800391e:	2202      	movs	r2, #2
 8003920:	721a      	strb	r2, [r3, #8]

		vTaskResume(PSV_PID_Handler);
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <START_ET_TUBE_PSV+0x174>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f017 fc88 	bl	801b23c <vTaskResume>
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <START_ET_TUBE_PSV+0x120>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d104      	bne.n	800393e <START_ET_TUBE_PSV+0x112>
		{
		   vTaskSuspend(BACKUP_PC_Handler);
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <START_ET_TUBE_PSV+0x178>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f017 fbbb 	bl	801b0b4 <vTaskSuspend>
		}
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200121b8 	.word	0x200121b8
 8003948:	20012b78 	.word	0x20012b78
 800394c:	20012846 	.word	0x20012846
 8003950:	20012c08 	.word	0x20012c08
 8003954:	200123d0 	.word	0x200123d0
 8003958:	200124ec 	.word	0x200124ec
 800395c:	20012710 	.word	0x20012710
 8003960:	20012b71 	.word	0x20012b71
 8003964:	200129d4 	.word	0x200129d4
 8003968:	40007400 	.word	0x40007400
 800396c:	200127ac 	.word	0x200127ac
 8003970:	20012968 	.word	0x20012968
 8003974:	200129cc 	.word	0x200129cc
 8003978:	200128a8 	.word	0x200128a8
 800397c:	200129f7 	.word	0x200129f7
 8003980:	20012978 	.word	0x20012978
 8003984:	20012b34 	.word	0x20012b34
 8003988:	20012d34 	.word	0x20012d34
 800398c:	200124bc 	.word	0x200124bc
 8003990:	20012a3c 	.word	0x20012a3c
 8003994:	200125f8 	.word	0x200125f8
 8003998:	20012c70 	.word	0x20012c70
 800399c:	20012b88 	.word	0x20012b88
 80039a0:	200127a8 	.word	0x200127a8
 80039a4:	20012500 	.word	0x20012500

080039a8 <START_MASK_CPAP>:


void START_MASK_CPAP()
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0

	   BREATH_STATE                                          = PATIENT_TRIGGER_INSPIRATION;
 80039ac:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <START_MASK_CPAP+0xe0>)
 80039ae:	2202      	movs	r2, #2
 80039b0:	701a      	strb	r2, [r3, #0]
		 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 80039b2:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <START_MASK_CPAP+0xe4>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d126      	bne.n	8003a08 <START_MASK_CPAP+0x60>
		 {
			 Blower_Signal(0);
 80039ba:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <START_MASK_CPAP+0xe8>)
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
			 Cpap_Flow_Cummulative_val             = RESET;
 80039c0:	4934      	ldr	r1, [pc, #208]	; (8003a94 <START_MASK_CPAP+0xec>)
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	e9c1 2300 	strd	r2, r3, [r1]
			 Flow_Sensor_Count                     = RESET;
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <START_MASK_CPAP+0xf0>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
			 OLD.LAST_BLOWER_ENDING_DAC_SIGNAL     = APNEA_DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 80039d4:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <START_MASK_CPAP+0xf4>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f005 fedb 	bl	8009794 <APNEA_DAC_VAL>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <START_MASK_CPAP+0xf8>)
 80039e4:	829a      	strh	r2, [r3, #20]
			 OLD.LAST_PIP_Control_Task_Delay       = PIP_control_Task.PIP_Control_Task_Delay;
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <START_MASK_CPAP+0xfc>)
 80039e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <START_MASK_CPAP+0xf8>)
 80039f0:	82da      	strh	r2, [r3, #22]
			 OLD.LAST_Increase_Each_DAC_SET_CONST  = PIP_control_Task.Increase_Each_DAC_SET_CONST;
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <START_MASK_CPAP+0xfc>)
 80039f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <START_MASK_CPAP+0xf8>)
 80039fc:	831a      	strh	r2, [r3, #24]
			 vTaskSuspend(PIP_Control_Task_Handler);
 80039fe:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <START_MASK_CPAP+0x100>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f017 fb56 	bl	801b0b4 <vTaskSuspend>
		 }

		vTaskSuspend(Oxygen_Blending_Handler);
 8003a08:	4b28      	ldr	r3, [pc, #160]	; (8003aac <START_MASK_CPAP+0x104>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f017 fb51 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Alert_Handler);
 8003a12:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <START_MASK_CPAP+0x108>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f017 fb4c 	bl	801b0b4 <vTaskSuspend>
	    vTaskSuspend(One_Time_Handler);
 8003a1c:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <START_MASK_CPAP+0x10c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f017 fb47 	bl	801b0b4 <vTaskSuspend>

		Parkar_valve_Signal(0);
 8003a26:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <START_MASK_CPAP+0xe8>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	615a      	str	r2, [r3, #20]

		GRAPH_VALUES.volume                               = RESET;
 8003a2c:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <START_MASK_CPAP+0x110>)
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
		Volume_max                                         = RESET;
 8003a34:	4b21      	ldr	r3, [pc, #132]	; (8003abc <START_MASK_CPAP+0x114>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
		CPAP.APNEA_COUNTER                                = (1000*CPAP.APNEA_TIME) ;
 8003a3a:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <START_MASK_CPAP+0x118>)
 8003a3c:	8a1b      	ldrh	r3, [r3, #16]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a44:	fb03 f302 	mul.w	r3, r3, r2
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <START_MASK_CPAP+0x118>)
 8003a4a:	6153      	str	r3, [r2, #20]
		BREATH_STATE                                      = EXPIRATION_CYCLE;
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <START_MASK_CPAP+0xe0>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
		Patient_Trigger                                   = NO_PATIENT_TRIGGER;
 8003a52:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <START_MASK_CPAP+0x11c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
		CPAP_Control.CPAP_Settle_Time                     = 2000;
 8003a58:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <START_MASK_CPAP+0x120>)
 8003a5a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a5e:	601a      	str	r2, [r3, #0]
		CPAP_Average.CPAP_AVG_VAL                         = 0;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <START_MASK_CPAP+0x124>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	731a      	strb	r2, [r3, #12]

		vTaskResume(CPAP_Handler);
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <START_MASK_CPAP+0x128>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f017 fbe6 	bl	801b23c <vTaskResume>
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <START_MASK_CPAP+0xe4>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d104      	bne.n	8003a82 <START_MASK_CPAP+0xda>
		{
		   vTaskSuspend(BACKUP_PC_Handler);
 8003a78:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <START_MASK_CPAP+0x12c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f017 fb19 	bl	801b0b4 <vTaskSuspend>
		}
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20012a3c 	.word	0x20012a3c
 8003a8c:	20012846 	.word	0x20012846
 8003a90:	40007400 	.word	0x40007400
 8003a94:	20012ac0 	.word	0x20012ac0
 8003a98:	20012a04 	.word	0x20012a04
 8003a9c:	200121b8 	.word	0x200121b8
 8003aa0:	20012c08 	.word	0x20012c08
 8003aa4:	200123d0 	.word	0x200123d0
 8003aa8:	200124ec 	.word	0x200124ec
 8003aac:	200127ac 	.word	0x200127ac
 8003ab0:	20012968 	.word	0x20012968
 8003ab4:	200129cc 	.word	0x200129cc
 8003ab8:	200125f8 	.word	0x200125f8
 8003abc:	20012c70 	.word	0x20012c70
 8003ac0:	200123e0 	.word	0x200123e0
 8003ac4:	2001263d 	.word	0x2001263d
 8003ac8:	20012628 	.word	0x20012628
 8003acc:	20012880 	.word	0x20012880
 8003ad0:	20012d38 	.word	0x20012d38
 8003ad4:	20012500 	.word	0x20012500

08003ad8 <START_ET_TUBE_CPAP>:

void START_ET_TUBE_CPAP()
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0

	   BREATH_STATE                                          = PATIENT_TRIGGER_INSPIRATION;
 8003adc:	4b39      	ldr	r3, [pc, #228]	; (8003bc4 <START_ET_TUBE_CPAP+0xec>)
 8003ade:	2202      	movs	r2, #2
 8003ae0:	701a      	strb	r2, [r3, #0]
		 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8003ae2:	4b39      	ldr	r3, [pc, #228]	; (8003bc8 <START_ET_TUBE_CPAP+0xf0>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d12c      	bne.n	8003b44 <START_ET_TUBE_CPAP+0x6c>
		 {
			 Blower_Signal(0);
 8003aea:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <START_ET_TUBE_CPAP+0xf4>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
			 Cpap_Flow_Cummulative_val             = RESET;
 8003af0:	4937      	ldr	r1, [pc, #220]	; (8003bd0 <START_ET_TUBE_CPAP+0xf8>)
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9c1 2300 	strd	r2, r3, [r1]
			 Flow_Sensor_Count                     = RESET;
 8003afe:	4b35      	ldr	r3, [pc, #212]	; (8003bd4 <START_ET_TUBE_CPAP+0xfc>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
			 OLD.LAST_BLOWER_ENDING_DAC_SIGNAL     = DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 8003b04:	4b34      	ldr	r3, [pc, #208]	; (8003bd8 <START_ET_TUBE_CPAP+0x100>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f005 fa7f 	bl	800900c <DAC_VAL>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <START_ET_TUBE_CPAP+0x104>)
 8003b14:	829a      	strh	r2, [r3, #20]
			 OLD.LAST_PIP_Control_Task_Delay       = PIP_control_Task.PIP_Control_Task_Delay;
 8003b16:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <START_ET_TUBE_CPAP+0x108>)
 8003b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	4b2f      	ldr	r3, [pc, #188]	; (8003bdc <START_ET_TUBE_CPAP+0x104>)
 8003b20:	82da      	strh	r2, [r3, #22]
			 OLD.LAST_Increase_Each_DAC_SET_CONST  = PIP_control_Task.Increase_Each_DAC_SET_CONST;
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <START_ET_TUBE_CPAP+0x108>)
 8003b24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <START_ET_TUBE_CPAP+0x104>)
 8003b2c:	831a      	strh	r2, [r3, #24]
			 ExpValve_OPEN();
 8003b2e:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <START_ET_TUBE_CPAP+0x10c>)
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	4a2c      	ldr	r2, [pc, #176]	; (8003be4 <START_ET_TUBE_CPAP+0x10c>)
 8003b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b38:	6153      	str	r3, [r2, #20]
			 vTaskSuspend(PIP_Control_Task_Handler);
 8003b3a:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <START_ET_TUBE_CPAP+0x110>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f017 fab8 	bl	801b0b4 <vTaskSuspend>
		 }


		vTaskSuspend(Oxygen_Blending_Handler);
 8003b44:	4b29      	ldr	r3, [pc, #164]	; (8003bec <START_ET_TUBE_CPAP+0x114>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f017 fab3 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Alert_Handler);
 8003b4e:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <START_ET_TUBE_CPAP+0x118>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f017 faae 	bl	801b0b4 <vTaskSuspend>
	    vTaskSuspend(One_Time_Handler);
 8003b58:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <START_ET_TUBE_CPAP+0x11c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f017 faa9 	bl	801b0b4 <vTaskSuspend>

		Parkar_valve_Signal(0);
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <START_ET_TUBE_CPAP+0xf4>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	615a      	str	r2, [r3, #20]

		GRAPH_VALUES.volume                               = RESET;
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <START_ET_TUBE_CPAP+0x120>)
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
		Volume_max                                        = RESET;
 8003b70:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <START_ET_TUBE_CPAP+0x124>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
		CPAP.APNEA_COUNTER                                = (1000*CPAP.APNEA_TIME) ;
 8003b76:	4b22      	ldr	r3, [pc, #136]	; (8003c00 <START_ET_TUBE_CPAP+0x128>)
 8003b78:	8a1b      	ldrh	r3, [r3, #16]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b80:	fb03 f302 	mul.w	r3, r3, r2
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <START_ET_TUBE_CPAP+0x128>)
 8003b86:	6153      	str	r3, [r2, #20]

		BREATH_STATE                                      = EXPIRATION_CYCLE;
 8003b88:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <START_ET_TUBE_CPAP+0xec>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	701a      	strb	r2, [r3, #0]
		Patient_Trigger                                   = NO_PATIENT_TRIGGER;
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <START_ET_TUBE_CPAP+0x12c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
		CPAP_Control.CPAP_Settle_Time                     = 2000;
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <START_ET_TUBE_CPAP+0x130>)
 8003b96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003b9a:	601a      	str	r2, [r3, #0]
		CPAP_Average.CPAP_AVG_VAL                         = 0;
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <START_ET_TUBE_CPAP+0x134>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	731a      	strb	r2, [r3, #12]

		vTaskResume(CPAP_Handler);
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <START_ET_TUBE_CPAP+0x138>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f017 fb48 	bl	801b23c <vTaskResume>
		if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <START_ET_TUBE_CPAP+0xf0>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d104      	bne.n	8003bbe <START_ET_TUBE_CPAP+0xe6>
		{
		   vTaskSuspend(BACKUP_PC_Handler);
 8003bb4:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <START_ET_TUBE_CPAP+0x13c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f017 fa7b 	bl	801b0b4 <vTaskSuspend>
		}

}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20012a3c 	.word	0x20012a3c
 8003bc8:	20012846 	.word	0x20012846
 8003bcc:	40007400 	.word	0x40007400
 8003bd0:	20012ac0 	.word	0x20012ac0
 8003bd4:	20012a04 	.word	0x20012a04
 8003bd8:	200121b8 	.word	0x200121b8
 8003bdc:	20012c08 	.word	0x20012c08
 8003be0:	200123d0 	.word	0x200123d0
 8003be4:	40020400 	.word	0x40020400
 8003be8:	200124ec 	.word	0x200124ec
 8003bec:	200127ac 	.word	0x200127ac
 8003bf0:	20012968 	.word	0x20012968
 8003bf4:	200129cc 	.word	0x200129cc
 8003bf8:	200125f8 	.word	0x200125f8
 8003bfc:	20012c70 	.word	0x20012c70
 8003c00:	200123e0 	.word	0x200123e0
 8003c04:	2001263d 	.word	0x2001263d
 8003c08:	20012628 	.word	0x20012628
 8003c0c:	20012880 	.word	0x20012880
 8003c10:	20012d38 	.word	0x20012d38
 8003c14:	20012500 	.word	0x20012500

08003c18 <Smooth_Ramp_Pressure>:
}



static void Smooth_Ramp_Pressure()
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
	if(Smooth_Ramp_Time   == Smooth_Ramp_Time_Val_Pending)
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <Smooth_Ramp_Pressure+0x68>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d128      	bne.n	8003c76 <Smooth_Ramp_Pressure+0x5e>
	{
		if( (BACKUP_PC_CMV.PEEP_Val == PEEP_Maintain_Parameter.PEEP_AVG_VAL)  && (BACKUP_PC_CMV.PEEP_Val >= 9) && (BACKUP_PC_CMV.PEEP_Val <= 14) && (BACKUP_PC_CMV.PIP_Val >=30) )
 8003c24:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <Smooth_Ramp_Pressure+0x6c>)
 8003c26:	785a      	ldrb	r2, [r3, #1]
 8003c28:	4b17      	ldr	r3, [pc, #92]	; (8003c88 <Smooth_Ramp_Pressure+0x70>)
 8003c2a:	7c1b      	ldrb	r3, [r3, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d122      	bne.n	8003c76 <Smooth_Ramp_Pressure+0x5e>
 8003c30:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <Smooth_Ramp_Pressure+0x6c>)
 8003c32:	785b      	ldrb	r3, [r3, #1]
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d91e      	bls.n	8003c76 <Smooth_Ramp_Pressure+0x5e>
 8003c38:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <Smooth_Ramp_Pressure+0x6c>)
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	2b0e      	cmp	r3, #14
 8003c3e:	d81a      	bhi.n	8003c76 <Smooth_Ramp_Pressure+0x5e>
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <Smooth_Ramp_Pressure+0x6c>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b1d      	cmp	r3, #29
 8003c46:	d916      	bls.n	8003c76 <Smooth_Ramp_Pressure+0x5e>
		{
			if(PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  < 2)
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <Smooth_Ramp_Pressure+0x70>)
 8003c4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	dc11      	bgt.n	8003c76 <Smooth_Ramp_Pressure+0x5e>
			{
				if(Smooth_Ramp_Time_Val_Count > 2 )
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <Smooth_Ramp_Pressure+0x74>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d907      	bls.n	8003c6a <Smooth_Ramp_Pressure+0x52>
				{
					Smooth_Ramp_Time_Val = BACKUP_PC_CMV.PEEP_Val;
 8003c5a:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <Smooth_Ramp_Pressure+0x6c>)
 8003c5c:	785a      	ldrb	r2, [r3, #1]
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <Smooth_Ramp_Pressure+0x78>)
 8003c60:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time     = Smooth_Ramp_Time_Val_Finished;
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <Smooth_Ramp_Pressure+0x68>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time_Val_Count++;
				}
			}
		}
    }
}
 8003c68:	e005      	b.n	8003c76 <Smooth_Ramp_Pressure+0x5e>
					Smooth_Ramp_Time_Val_Count++;
 8003c6a:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <Smooth_Ramp_Pressure+0x74>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <Smooth_Ramp_Pressure+0x74>)
 8003c74:	701a      	strb	r2, [r3, #0]
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	200124ce 	.word	0x200124ce
 8003c84:	200121b8 	.word	0x200121b8
 8003c88:	20012c74 	.word	0x20012c74
 8003c8c:	200129f6 	.word	0x200129f6
 8003c90:	200129a1 	.word	0x200129a1

08003c94 <Trigger_Time_Monitor>:




static void Trigger_Time_Monitor()
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
	uint16_t CALC_TRIG_VAL;
	CALC_TRIG_VAL 	    =  (BACKUP_PC_CMV.EXPIRATION_TIME   - PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time );
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <Trigger_Time_Monitor+0x4c>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <Trigger_Time_Monitor+0x50>)
 8003ca2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	80fb      	strh	r3, [r7, #6]
	if(CALC_TRIG_VAL <0)
	{
		CALC_TRIG_VAL = (CALC_TRIG_VAL * (-1));
	}

	Common_Mode_Parameter.TOLERANCE_EWAVE =  BACKUP_PC_CMV.TRIG_TIME ;
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <Trigger_Time_Monitor+0x4c>)
 8003cae:	8a9a      	ldrh	r2, [r3, #20]
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <Trigger_Time_Monitor+0x54>)
 8003cb2:	811a      	strh	r2, [r3, #8]
	if(CALC_TRIG_VAL < BACKUP_PC_CMV.TRIG_TIME  )
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <Trigger_Time_Monitor+0x4c>)
 8003cb6:	8a9b      	ldrh	r3, [r3, #20]
 8003cb8:	88fa      	ldrh	r2, [r7, #6]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d205      	bcs.n	8003cca <Trigger_Time_Monitor+0x36>
	{
		Common_Mode_Parameter.TOLERANCE_EWAVE =  (BACKUP_PC_CMV.TRIG_TIME  - 200) ;
 8003cbe:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <Trigger_Time_Monitor+0x4c>)
 8003cc0:	8a9b      	ldrh	r3, [r3, #20]
 8003cc2:	3bc8      	subs	r3, #200	; 0xc8
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <Trigger_Time_Monitor+0x54>)
 8003cc8:	811a      	strh	r2, [r3, #8]
	}
	Common_Mode_Parameter.TRIG_WINDOW        = Common_Mode_Parameter.TOLERANCE_EWAVE;
 8003cca:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <Trigger_Time_Monitor+0x54>)
 8003ccc:	891a      	ldrh	r2, [r3, #8]
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <Trigger_Time_Monitor+0x54>)
 8003cd0:	815a      	strh	r2, [r3, #10]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	200121b8 	.word	0x200121b8
 8003ce4:	20012c74 	.word	0x20012c74
 8003ce8:	200124f0 	.word	0x200124f0

08003cec <BIPAP_Mode_Packet_Data>:

void Oxygen_epap();


void BIPAP_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
	 uint32_t One_Breathe_time;
	 BIPAP.IPAP_Val                         = Receive_Graph_Packet->PIP_PS_Phigh;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	791b      	ldrb	r3, [r3, #4]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	4b51      	ldr	r3, [pc, #324]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003cfc:	801a      	strh	r2, [r3, #0]
	 BIPAP.EPAP_Val                         = Receive_Graph_Packet->PEEP_CPAP_Plow;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	795a      	ldrb	r2, [r3, #5]
 8003d02:	4b4f      	ldr	r3, [pc, #316]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d04:	709a      	strb	r2, [r3, #2]

	 BIPAP.TRIG_TYPE                        = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	78db      	ldrb	r3, [r3, #3]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	4b4a      	ldr	r3, [pc, #296]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d18:	809a      	strh	r2, [r3, #4]
	 BIPAP.TRIG_LMT                         = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	7c1b      	ldrb	r3, [r3, #16]
 8003d1e:	4a49      	ldr	r2, [pc, #292]	; (8003e44 <BIPAP_Mode_Packet_Data+0x158>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	ee07 3a90 	vmov	s15, r3
 8003d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d30:	4b43      	ldr	r3, [pc, #268]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d32:	edc3 7a02 	vstr	s15, [r3, #8]
	 BIPAP.TRIG_TIME                        = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7bdb      	ldrb	r3, [r3, #15]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	461a      	mov	r2, r3
 8003d44:	0091      	lsls	r1, r2, #2
 8003d46:	461a      	mov	r2, r3
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d52:	819a      	strh	r2, [r3, #12]


	 BIPAP.APNEA_TIME                       = Receive_Graph_Packet->Apnea_Time;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7b9b      	ldrb	r3, [r3, #14]
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d5c:	829a      	strh	r2, [r3, #20]
	 BIPAP.APNEA_COUNTER                    = (1000*BIPAP.APNEA_TIME) ;
 8003d5e:	4b38      	ldr	r3, [pc, #224]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d60:	8a9b      	ldrh	r3, [r3, #20]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d68:	fb03 f302 	mul.w	r3, r3, r2
 8003d6c:	4a34      	ldr	r2, [pc, #208]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d6e:	6193      	str	r3, [r2, #24]

	 BIPAP._IPAP_TIME                       = ((Receive_Graph_Packet->T_high));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7a9a      	ldrb	r2, [r3, #10]
 8003d74:	4b32      	ldr	r3, [pc, #200]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d76:	759a      	strb	r2, [r3, #22]
	 BIPAP.IPAP_TIME                        = (BIPAP._IPAP_TIME*100);
 8003d78:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d7a:	7d9b      	ldrb	r3, [r3, #22]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	2364      	movs	r3, #100	; 0x64
 8003d80:	fb03 f302 	mul.w	r3, r3, r2
 8003d84:	4a2e      	ldr	r2, [pc, #184]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d86:	61d3      	str	r3, [r2, #28]

	 BIPAP.RESPIRATORY_RATE_Val             = Receive_Graph_Packet->RR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	7a5a      	ldrb	r2, [r3, #9]
 8003d8c:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	 One_Breathe_time                       = (One_Minite_In_MS / BIPAP.RESPIRATORY_RATE_Val);
 8003d92:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003d94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

	 BIPAP.EPAP_TIME                        = (One_Breathe_time - BIPAP.IPAP_TIME );
 8003da4:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b23      	ldr	r3, [pc, #140]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003db2:	621a      	str	r2, [r3, #32]

	 BIPAP.BIPAP_O2_Val                     = Receive_Graph_Packet->FiO2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7a1b      	ldrb	r3, [r3, #8]
 8003db8:	461a      	mov	r2, r3
 8003dba:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003dbc:	635a      	str	r2, [r3, #52]	; 0x34

	 BIPAP.VENT_TYPE                        = ( 0x80 & (Receive_Graph_Packet->Vent_Type_Min_O2)) >> 7;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	7c5b      	ldrb	r3, [r3, #17]
 8003dc2:	09db      	lsrs	r3, r3, #7
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	 OOM202.offset_minimum                 =  ( 0x7F & (Receive_Graph_Packet->Vent_Type_Min_O2));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7c5b      	ldrb	r3, [r3, #17]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	4b1b      	ldr	r3, [pc, #108]	; (8003e48 <BIPAP_Mode_Packet_Data+0x15c>)
 8003dda:	805a      	strh	r2, [r3, #2]
	 OOM202.offset_maximum                 =  Receive_Graph_Packet->Max_O2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	7c9b      	ldrb	r3, [r3, #18]
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <BIPAP_Mode_Packet_Data+0x15c>)
 8003de4:	809a      	strh	r2, [r3, #4]


	 if(BIPAP.VENT_TYPE == 0)
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003de8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <BIPAP_Mode_Packet_Data+0x10c>
		 Vent_Type = ET_TUBE_MODE;
 8003df0:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <BIPAP_Mode_Packet_Data+0x160>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e007      	b.n	8003e08 <BIPAP_Mode_Packet_Data+0x11c>
	else if(BIPAP.VENT_TYPE == 1)
 8003df8:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d102      	bne.n	8003e08 <BIPAP_Mode_Packet_Data+0x11c>
		 Vent_Type = MASK_MODE;
 8003e02:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <BIPAP_Mode_Packet_Data+0x160>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]

	 if(BIPAP.TRIG_TYPE == 0)
 8003e08:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003e0a:	889b      	ldrh	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <BIPAP_Mode_Packet_Data+0x12c>
		Trigger_Type = Pressure_Trigger;
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <BIPAP_Mode_Packet_Data+0x164>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e006      	b.n	8003e26 <BIPAP_Mode_Packet_Data+0x13a>
	else if(BIPAP.TRIG_TYPE == 1)
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <BIPAP_Mode_Packet_Data+0x154>)
 8003e1a:	889b      	ldrh	r3, [r3, #4]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d102      	bne.n	8003e26 <BIPAP_Mode_Packet_Data+0x13a>
		Trigger_Type = Flow_Trigger;
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <BIPAP_Mode_Packet_Data+0x164>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	701a      	strb	r2, [r3, #0]
	 Mode_Initial_Flag_Set                  = OPEN;
 8003e26:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <BIPAP_Mode_Packet_Data+0x168>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
	 vTaskResume(Mode_initial_Flag_Set_Handler);
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <BIPAP_Mode_Packet_Data+0x16c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f017 fa03 	bl	801b23c <vTaskResume>

}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20012484 	.word	0x20012484
 8003e44:	cccccccd 	.word	0xcccccccd
 8003e48:	20012224 	.word	0x20012224
 8003e4c:	200129f4 	.word	0x200129f4
 8003e50:	20012244 	.word	0x20012244
 8003e54:	20012cb1 	.word	0x20012cb1
 8003e58:	200129ac 	.word	0x200129ac

08003e5c <BIPAP_Task>:




void BIPAP_Task(void *argument)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(BIPAP.APNEA_COUNTER > 0)
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <BIPAP_Task+0x50>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	dd02      	ble.n	8003e72 <BIPAP_Task+0x16>
		{
			BIBAP_CONTROL();
 8003e6c:	f000 f92e 	bl	80040cc <BIBAP_CONTROL>
 8003e70:	e018      	b.n	8003ea4 <BIPAP_Task+0x48>
		}
		else
		{

			BREATH_STATE                    = EXPIRATION_CYCLE;
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <BIPAP_Task+0x54>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(BIPAP_PID_Handler);
 8003e78:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <BIPAP_Task+0x58>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f017 f919 	bl	801b0b4 <vTaskSuspend>
			BIPAP.EPAP_COUNTER              = 0;
 8003e82:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <BIPAP_Task+0x50>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c
			BIPAP_Control._INSPIRATION_TIME = 0;
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <BIPAP_Task+0x5c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
			RESET_FLAGS();
 8003e8e:	f000 fb5d 	bl	800454c <RESET_FLAGS>
			Blower_Signal(0);
 8003e92:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <BIPAP_Task+0x60>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
			 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <BIPAP_Task+0x64>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <BIPAP_Task+0x48>
			 {
				 BACKUP_PC_CMV_START();
 8003ea0:	f000 fc10 	bl	80046c4 <BACKUP_PC_CMV_START>
			 }
		}
		vTaskDelay(Two_Millisecond_Delay);
 8003ea4:	2002      	movs	r0, #2
 8003ea6:	f017 f8d1 	bl	801b04c <vTaskDelay>
		if(BIPAP.APNEA_COUNTER > 0)
 8003eaa:	e7db      	b.n	8003e64 <BIPAP_Task+0x8>
 8003eac:	20012484 	.word	0x20012484
 8003eb0:	20012a3c 	.word	0x20012a3c
 8003eb4:	20012b04 	.word	0x20012b04
 8003eb8:	20012990 	.word	0x20012990
 8003ebc:	40007400 	.word	0x40007400
 8003ec0:	20012846 	.word	0x20012846

08003ec4 <BIPAP_PID_Task>:




void BIPAP_PID_Task(void *argument)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	while(1)
	{

	if(BIPAP.APNEA_COUNTER > 0)
 8003ecc:	4b6b      	ldr	r3, [pc, #428]	; (800407c <BIPAP_PID_Task+0x1b8>)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f340 80c2 	ble.w	800405a <BIPAP_PID_Task+0x196>
	{
		if(BIPAP_Control._INSPIRATION_TIME > 0)
 8003ed6:	4b6a      	ldr	r3, [pc, #424]	; (8004080 <BIPAP_PID_Task+0x1bc>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	dd5c      	ble.n	8003f98 <BIPAP_PID_Task+0xd4>
		{
			BREATH_STATE                                          = PATIENT_TRIGGER_INSPIRATION;
 8003ede:	4b69      	ldr	r3, [pc, #420]	; (8004084 <BIPAP_PID_Task+0x1c0>)
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	701a      	strb	r2, [r3, #0]
			PIP_Control(BIPAP.IPAP_Val );
 8003ee4:	4b65      	ldr	r3, [pc, #404]	; (800407c <BIPAP_PID_Task+0x1b8>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	4618      	mov	r0, r3
 8003eec:	f00a f858 	bl	800dfa0 <PIP_Control>
			Blower_Signal(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 8003ef0:	4b65      	ldr	r3, [pc, #404]	; (8004088 <BIPAP_PID_Task+0x1c4>)
 8003ef2:	881a      	ldrh	r2, [r3, #0]
 8003ef4:	4b65      	ldr	r3, [pc, #404]	; (800408c <BIPAP_PID_Task+0x1c8>)
 8003ef6:	609a      	str	r2, [r3, #8]
			BIPAP_Flow_Cummulative_val = BIPAP_Flow_Cummulative_val+GRAPH_VALUES.flow;
 8003ef8:	4b65      	ldr	r3, [pc, #404]	; (8004090 <BIPAP_PID_Task+0x1cc>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fc facb 	bl	8000498 <__aeabi_f2d>
 8003f02:	4b64      	ldr	r3, [pc, #400]	; (8004094 <BIPAP_PID_Task+0x1d0>)
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f7fc f968 	bl	80001dc <__adddf3>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4960      	ldr	r1, [pc, #384]	; (8004094 <BIPAP_PID_Task+0x1d0>)
 8003f12:	e9c1 2300 	strd	r2, r3, [r1]
			BIPAP_Flow_Sensor_Count++;
 8003f16:	4b60      	ldr	r3, [pc, #384]	; (8004098 <BIPAP_PID_Task+0x1d4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	4a5e      	ldr	r2, [pc, #376]	; (8004098 <BIPAP_PID_Task+0x1d4>)
 8003f1e:	6013      	str	r3, [r2, #0]

			if(BIPAP_Control._INSPIRATION_TIME < 100)
 8003f20:	4b57      	ldr	r3, [pc, #348]	; (8004080 <BIPAP_PID_Task+0x1bc>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b63      	cmp	r3, #99	; 0x63
 8003f26:	dc0b      	bgt.n	8003f40 <BIPAP_PID_Task+0x7c>
			   {
				   BIPAP_Pip_average.IPAP_Cumulative_Val += GRAPH_VALUES.pressure;
 8003f28:	4b5c      	ldr	r3, [pc, #368]	; (800409c <BIPAP_PID_Task+0x1d8>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <BIPAP_PID_Task+0x1cc>)
 8003f2e:	7812      	ldrb	r2, [r2, #0]
 8003f30:	4413      	add	r3, r2
 8003f32:	4a5a      	ldr	r2, [pc, #360]	; (800409c <BIPAP_PID_Task+0x1d8>)
 8003f34:	6053      	str	r3, [r2, #4]
				   BIPAP_Pip_average.IPAP_Event_Count++;
 8003f36:	4b59      	ldr	r3, [pc, #356]	; (800409c <BIPAP_PID_Task+0x1d8>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	4a57      	ldr	r2, [pc, #348]	; (800409c <BIPAP_PID_Task+0x1d8>)
 8003f3e:	6093      	str	r3, [r2, #8]
			   }

			   Inspiration_Trigger_Check();
 8003f40:	f000 fe74 	bl	8004c2c <Inspiration_Trigger_Check>

				if(BIPAP.BIPAP_O2_Val > 21)
 8003f44:	4b4d      	ldr	r3, [pc, #308]	; (800407c <BIPAP_PID_Task+0x1b8>)
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	2b15      	cmp	r3, #21
 8003f4a:	dd0d      	ble.n	8003f68 <BIPAP_PID_Task+0xa4>
				{
					if(GRAPH_VALUES.pressure >= BIPAP.IPAP_Val )
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <BIPAP_PID_Task+0x1cc>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	4b4a      	ldr	r3, [pc, #296]	; (800407c <BIPAP_PID_Task+0x1b8>)
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d306      	bcc.n	8003f68 <BIPAP_PID_Task+0xa4>
					{
						if(Vent_Type == MASK_MODE)
 8003f5a:	4b51      	ldr	r3, [pc, #324]	; (80040a0 <BIPAP_PID_Task+0x1dc>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d002      	beq.n	8003f68 <BIPAP_PID_Task+0xa4>
						{

						}
						else
						{
							Parkar_valve_Signal(0);
 8003f62:	4b4a      	ldr	r3, [pc, #296]	; (800408c <BIPAP_PID_Task+0x1c8>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	615a      	str	r2, [r3, #20]
						}

					}

				}
				if(GRAPH_VALUES.flow > BIPAP_Max_Flow)
 8003f68:	4b49      	ldr	r3, [pc, #292]	; (8004090 <BIPAP_PID_Task+0x1cc>)
 8003f6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f6e:	4b4d      	ldr	r3, [pc, #308]	; (80040a4 <BIPAP_PID_Task+0x1e0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	dd77      	ble.n	8004074 <BIPAP_PID_Task+0x1b0>
				{
					BIPAP_Max_Flow = GRAPH_VALUES.flow;
 8003f84:	4b42      	ldr	r3, [pc, #264]	; (8004090 <BIPAP_PID_Task+0x1cc>)
 8003f86:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f8e:	ee17 2a90 	vmov	r2, s15
 8003f92:	4b44      	ldr	r3, [pc, #272]	; (80040a4 <BIPAP_PID_Task+0x1e0>)
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	e06d      	b.n	8004074 <BIPAP_PID_Task+0x1b0>
				}
		}
		else if(BIPAP_Control._INSPIRATION_TIME == 0)
 8003f98:	4b39      	ldr	r3, [pc, #228]	; (8004080 <BIPAP_PID_Task+0x1bc>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d169      	bne.n	8004074 <BIPAP_PID_Task+0x1b0>
		{
				if(BIPAP.BIPAP_O2_Val > 21)
 8003fa0:	4b36      	ldr	r3, [pc, #216]	; (800407c <BIPAP_PID_Task+0x1b8>)
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	2b15      	cmp	r3, #21
 8003fa6:	dd1d      	ble.n	8003fe4 <BIPAP_PID_Task+0x120>
				{
					//Apnea_O2_control();
					Check_O2_Supply_Alert_in_Apnea_Once(BIPAP.BIPAP_O2_Val);
 8003fa8:	4b34      	ldr	r3, [pc, #208]	; (800407c <BIPAP_PID_Task+0x1b8>)
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	4618      	mov	r0, r3
 8003fae:	f003 f9e9 	bl	8007384 <Check_O2_Supply_Alert_in_Apnea_Once>
					GRAPH_VALUES.Maximum_oxygen_flow = 0;
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <BIPAP_PID_Task+0x1cc>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	829a      	strh	r2, [r3, #20]
					if(O2_Control_Bipap >= 6)
 8003fb8:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <BIPAP_PID_Task+0x1e4>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	d90e      	bls.n	8003fde <BIPAP_PID_Task+0x11a>
					{
						Tune_O2_BIPAP(BIPAP.BIPAP_O2_Val,Oxygen_Parameter.Achieved_Oxygen);
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	; (800407c <BIPAP_PID_Task+0x1b8>)
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	4a39      	ldr	r2, [pc, #228]	; (80040ac <BIPAP_PID_Task+0x1e8>)
 8003fc8:	7a12      	ldrb	r2, [r2, #8]
 8003fca:	4611      	mov	r1, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 ffa3 	bl	8004f18 <Tune_O2_BIPAP>
						Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 8003fd2:	4b2f      	ldr	r3, [pc, #188]	; (8004090 <BIPAP_PID_Task+0x1cc>)
 8003fd4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	4b34      	ldr	r3, [pc, #208]	; (80040ac <BIPAP_PID_Task+0x1e8>)
 8003fdc:	721a      	strb	r2, [r3, #8]
					}

					BIPAP_Max_Flow = 0;
 8003fde:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <BIPAP_PID_Task+0x1e0>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
				}

				ExpValve_OPEN();
 8003fe4:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <BIPAP_PID_Task+0x1ec>)
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	4a31      	ldr	r2, [pc, #196]	; (80040b0 <BIPAP_PID_Task+0x1ec>)
 8003fea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fee:	6153      	str	r3, [r2, #20]
				BIPAP.EPAP_COUNTER                                   = BIPAP.EPAP_TIME;
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <BIPAP_PID_Task+0x1b8>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	4a21      	ldr	r2, [pc, #132]	; (800407c <BIPAP_PID_Task+0x1b8>)
 8003ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
				BIPAP_Control.Trigger_Check_Wait_Time                = 500+ BIPAP.TRIG_TIME ;
 8003ff8:	4b20      	ldr	r3, [pc, #128]	; (800407c <BIPAP_PID_Task+0x1b8>)
 8003ffa:	899b      	ldrh	r3, [r3, #12]
 8003ffc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004000:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <BIPAP_PID_Task+0x1bc>)
 8004002:	6093      	str	r3, [r2, #8]

					Wait_Time                                       = 10;
 8004004:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <BIPAP_PID_Task+0x1f0>)
 8004006:	220a      	movs	r2, #10
 8004008:	601a      	str	r2, [r3, #0]
					if(BIPAP.BIPAP_O2_Val == 21)
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <BIPAP_PID_Task+0x1b8>)
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	2b15      	cmp	r3, #21
 8004010:	d105      	bne.n	800401e <BIPAP_PID_Task+0x15a>
					{
						Parkar_valve_Signal(0);
 8004012:	4b1e      	ldr	r3, [pc, #120]	; (800408c <BIPAP_PID_Task+0x1c8>)
 8004014:	2200      	movs	r2, #0
 8004016:	615a      	str	r2, [r3, #20]
						Blower_Signal(0);
 8004018:	4b1c      	ldr	r3, [pc, #112]	; (800408c <BIPAP_PID_Task+0x1c8>)
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
					}

				Send_Frame                                         = First_Frame;
 800401e:	4b26      	ldr	r3, [pc, #152]	; (80040b8 <BIPAP_PID_Task+0x1f4>)
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
				Send_Bluetooth_Data_Farme                          = SEND_SAMPLED_PARAMETER_FRAME;
 8004024:	4b25      	ldr	r3, [pc, #148]	; (80040bc <BIPAP_PID_Task+0x1f8>)
 8004026:	2203      	movs	r2, #3
 8004028:	701a      	strb	r2, [r3, #0]
				ADJUST_PEEP();
 800402a:	f000 fde7 	bl	8004bfc <ADJUST_PEEP>
				BREATH_STATE                                       = EXPIRATION_CYCLE;
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <BIPAP_PID_Task+0x1c0>)
 8004030:	2201      	movs	r2, #1
 8004032:	701a      	strb	r2, [r3, #0]
				Patient_Trigger                                    = NO_PATIENT_TRIGGER;
 8004034:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <BIPAP_PID_Task+0x1fc>)
 8004036:	2200      	movs	r2, #0
 8004038:	701a      	strb	r2, [r3, #0]
				BREATH_STATE                                       = PATIENT_TRIGGER_EXPIRATION;
 800403a:	4b12      	ldr	r3, [pc, #72]	; (8004084 <BIPAP_PID_Task+0x1c0>)
 800403c:	2203      	movs	r2, #3
 800403e:	701a      	strb	r2, [r3, #0]
				BIBAP_IPAP_AVERAGE();
 8004040:	f000 fcd0 	bl	80049e4 <BIBAP_IPAP_AVERAGE>
				vTaskResume(BIPAP_Handler);
 8004044:	4b1f      	ldr	r3, [pc, #124]	; (80040c4 <BIPAP_PID_Task+0x200>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f017 f8f7 	bl	801b23c <vTaskResume>
				vTaskSuspend(BIPAP_PID_Handler);
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <BIPAP_PID_Task+0x204>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f017 f82e 	bl	801b0b4 <vTaskSuspend>
 8004058:	e00c      	b.n	8004074 <BIPAP_PID_Task+0x1b0>

		}
	}
	else
	{
		Blower_Signal(0);
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <BIPAP_PID_Task+0x1c8>)
 800405c:	2200      	movs	r2, #0
 800405e:	609a      	str	r2, [r3, #8]
		vTaskResume(BIPAP_Handler);
 8004060:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <BIPAP_PID_Task+0x200>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f017 f8e9 	bl	801b23c <vTaskResume>
		vTaskSuspend(BIPAP_PID_Handler);
 800406a:	4b17      	ldr	r3, [pc, #92]	; (80040c8 <BIPAP_PID_Task+0x204>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f017 f820 	bl	801b0b4 <vTaskSuspend>
	}
		vTaskDelay(Ten_Millisecond_Delay);
 8004074:	200a      	movs	r0, #10
 8004076:	f016 ffe9 	bl	801b04c <vTaskDelay>
	if(BIPAP.APNEA_COUNTER > 0)
 800407a:	e727      	b.n	8003ecc <BIPAP_PID_Task+0x8>
 800407c:	20012484 	.word	0x20012484
 8004080:	20012990 	.word	0x20012990
 8004084:	20012a3c 	.word	0x20012a3c
 8004088:	20012978 	.word	0x20012978
 800408c:	40007400 	.word	0x40007400
 8004090:	200125f8 	.word	0x200125f8
 8004094:	20012618 	.word	0x20012618
 8004098:	20012cdc 	.word	0x20012cdc
 800409c:	20012b08 	.word	0x20012b08
 80040a0:	200129f4 	.word	0x200129f4
 80040a4:	200125d0 	.word	0x200125d0
 80040a8:	200122d8 	.word	0x200122d8
 80040ac:	200129d4 	.word	0x200129d4
 80040b0:	40020400 	.word	0x40020400
 80040b4:	20012698 	.word	0x20012698
 80040b8:	20012770 	.word	0x20012770
 80040bc:	2001269d 	.word	0x2001269d
 80040c0:	2001263d 	.word	0x2001263d
 80040c4:	20012364 	.word	0x20012364
 80040c8:	20012b04 	.word	0x20012b04

080040cc <BIBAP_CONTROL>:
	}
}


static void BIBAP_CONTROL()
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
	    BREATH_STATE                              = EXPIRATION_CYCLE;
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <BIBAP_CONTROL+0x44>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
	    if(Wait_Time > 0 )
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <BIBAP_CONTROL+0x48>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	dd10      	ble.n	8004100 <BIBAP_CONTROL+0x34>
	    {
	    	Blower_Signal(0);
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <BIBAP_CONTROL+0x4c>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	609a      	str	r2, [r3, #8]
	    	if(GRAPH_VALUES.pressure <= 3)
 80040e4:	4b0d      	ldr	r3, [pc, #52]	; (800411c <BIBAP_CONTROL+0x50>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d80f      	bhi.n	800410c <BIBAP_CONTROL+0x40>
	    	{
	    		ExpValve_CLOSE();
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <BIBAP_CONTROL+0x54>)
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	4a0b      	ldr	r2, [pc, #44]	; (8004120 <BIBAP_CONTROL+0x54>)
 80040f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040f6:	6153      	str	r3, [r2, #20]
	    		Wait_Time                               = 0;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <BIBAP_CONTROL+0x48>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
				EPAP_TIME_CONTROL();
			}


	    }
}
 80040fe:	e005      	b.n	800410c <BIBAP_CONTROL+0x40>
			if(BIPAP.EPAP_COUNTER > 0)
 8004100:	4b08      	ldr	r3, [pc, #32]	; (8004124 <BIBAP_CONTROL+0x58>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	2b00      	cmp	r3, #0
 8004106:	dd01      	ble.n	800410c <BIBAP_CONTROL+0x40>
				EPAP_TIME_CONTROL();
 8004108:	f000 fd26 	bl	8004b58 <EPAP_TIME_CONTROL>
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20012a3c 	.word	0x20012a3c
 8004114:	20012698 	.word	0x20012698
 8004118:	40007400 	.word	0x40007400
 800411c:	200125f8 	.word	0x200125f8
 8004120:	40020400 	.word	0x40020400
 8004124:	20012484 	.word	0x20012484

08004128 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER>:



static void RUN_BIPAP_EPAP_MAINTAIN_BLOWER()
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
	ExpValve_CLOSE();
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x24>)
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	4a06      	ldr	r2, [pc, #24]	; (800414c <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x24>)
 8004132:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004136:	6153      	str	r3, [r2, #20]
	Blower_Signal( BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL);
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x28>)
 800413a:	88da      	ldrh	r2, [r3, #6]
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER+0x2c>)
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40020400 	.word	0x40020400
 8004150:	200126a4 	.word	0x200126a4
 8004154:	40007400 	.word	0x40007400

08004158 <STOP_BLOWER_IF_FLOW_SENSE>:


static void STOP_BLOWER_IF_FLOW_SENSE()
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
		if (Trigger_Type == Pressure_Trigger)
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <STOP_BLOWER_IF_FLOW_SENSE+0x2c>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <STOP_BLOWER_IF_FLOW_SENSE+0x14>
		{
			BIPAP_Control.Blower_Wait_Time_Milli_Second = 0;
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <STOP_BLOWER_IF_FLOW_SENSE+0x30>)
 8004166:	2200      	movs	r2, #0
 8004168:	605a      	str	r2, [r3, #4]
		}
		else if (Trigger_Type == Flow_Trigger)
		{
			BIPAP_Control.Blower_Wait_Time_Milli_Second = 100;
		}
}
 800416a:	e006      	b.n	800417a <STOP_BLOWER_IF_FLOW_SENSE+0x22>
		else if (Trigger_Type == Flow_Trigger)
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <STOP_BLOWER_IF_FLOW_SENSE+0x2c>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d102      	bne.n	800417a <STOP_BLOWER_IF_FLOW_SENSE+0x22>
			BIPAP_Control.Blower_Wait_Time_Milli_Second = 100;
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <STOP_BLOWER_IF_FLOW_SENSE+0x30>)
 8004176:	2264      	movs	r2, #100	; 0x64
 8004178:	605a      	str	r2, [r3, #4]
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	20012244 	.word	0x20012244
 8004188:	20012990 	.word	0x20012990

0800418c <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
	if (( GRAPH_VALUES.pressure < (Pressure_Trigger_Offset - BIPAP.TRIG_LMT )))
 8004190:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <CHECK_PRESSURE_TRIGGER+0x70>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800419c:	4b18      	ldr	r3, [pc, #96]	; (8004200 <CHECK_PRESSURE_TRIGGER+0x74>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80041a8:	4b16      	ldr	r3, [pc, #88]	; (8004204 <CHECK_PRESSURE_TRIGGER+0x78>)
 80041aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80041ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80041b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ba:	d400      	bmi.n	80041be <CHECK_PRESSURE_TRIGGER+0x32>
		Patient_Trigger                              = PATIENT_TRIGGER_HAPPEN;
		BIPAP_Control.Blower_Wait_Time_Milli_Second = 200;
		BIPAP_Control.Trigger_Check_Wait_Time       = 300;
		BIPAP.APNEA_COUNTER                         = (1000*BIPAP.APNEA_TIME) ;
	}
}
 80041bc:	e018      	b.n	80041f0 <CHECK_PRESSURE_TRIGGER+0x64>
		BREATH_STATE                                 = INSPIRATION_CYCLE;
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <CHECK_PRESSURE_TRIGGER+0x7c>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
		Breath_Count                                 = Count_The_Breath;
 80041c4:	4b11      	ldr	r3, [pc, #68]	; (800420c <CHECK_PRESSURE_TRIGGER+0x80>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
		Patient_Trigger                              = PATIENT_TRIGGER_HAPPEN;
 80041ca:	4b11      	ldr	r3, [pc, #68]	; (8004210 <CHECK_PRESSURE_TRIGGER+0x84>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	701a      	strb	r2, [r3, #0]
		BIPAP_Control.Blower_Wait_Time_Milli_Second = 200;
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <CHECK_PRESSURE_TRIGGER+0x88>)
 80041d2:	22c8      	movs	r2, #200	; 0xc8
 80041d4:	605a      	str	r2, [r3, #4]
		BIPAP_Control.Trigger_Check_Wait_Time       = 300;
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <CHECK_PRESSURE_TRIGGER+0x88>)
 80041d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041dc:	609a      	str	r2, [r3, #8]
		BIPAP.APNEA_COUNTER                         = (1000*BIPAP.APNEA_TIME) ;
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <CHECK_PRESSURE_TRIGGER+0x78>)
 80041e0:	8a9b      	ldrh	r3, [r3, #20]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041e8:	fb03 f302 	mul.w	r3, r3, r2
 80041ec:	4a05      	ldr	r2, [pc, #20]	; (8004204 <CHECK_PRESSURE_TRIGGER+0x78>)
 80041ee:	6193      	str	r3, [r2, #24]
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	200125f8 	.word	0x200125f8
 8004200:	2001296c 	.word	0x2001296c
 8004204:	20012484 	.word	0x20012484
 8004208:	20012a3c 	.word	0x20012a3c
 800420c:	200122a8 	.word	0x200122a8
 8004210:	2001263d 	.word	0x2001263d
 8004214:	20012990 	.word	0x20012990

08004218 <CHECK_FLOW_TRIGGER>:

static void CHECK_FLOW_TRIGGER()
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
	if ((GRAPH_VALUES.flow > (Flow_Trigger_Offset+BIPAP.TRIG_LMT )))
 800421c:	4b1a      	ldr	r3, [pc, #104]	; (8004288 <CHECK_FLOW_TRIGGER+0x70>)
 800421e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004222:	4b1a      	ldr	r3, [pc, #104]	; (800428c <CHECK_FLOW_TRIGGER+0x74>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800422e:	4b18      	ldr	r3, [pc, #96]	; (8004290 <CHECK_FLOW_TRIGGER+0x78>)
 8004230:	edd3 7a02 	vldr	s15, [r3, #8]
 8004234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	dc00      	bgt.n	8004244 <CHECK_FLOW_TRIGGER+0x2c>
		Patient_Trigger  							= PATIENT_TRIGGER_HAPPEN;
		BIPAP_Control.Blower_Wait_Time_Milli_Second = 200;
		BIPAP_Control.Trigger_Check_Wait_Time       = 300;
		BIPAP.APNEA_COUNTER                         = (1000*BIPAP.APNEA_TIME) ;
	}
}
 8004242:	e01c      	b.n	800427e <CHECK_FLOW_TRIGGER+0x66>
		BREATH_STATE                                 = INSPIRATION_CYCLE;
 8004244:	4b13      	ldr	r3, [pc, #76]	; (8004294 <CHECK_FLOW_TRIGGER+0x7c>)
 8004246:	2200      	movs	r2, #0
 8004248:	701a      	strb	r2, [r3, #0]
		Breath_Count                                 = Count_The_Breath;
 800424a:	4b13      	ldr	r3, [pc, #76]	; (8004298 <CHECK_FLOW_TRIGGER+0x80>)
 800424c:	2201      	movs	r2, #1
 800424e:	701a      	strb	r2, [r3, #0]
		LAST_FLOW_TRIGGER 							= FLOW_TRIGGER;
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <CHECK_FLOW_TRIGGER+0x84>)
 8004252:	781a      	ldrb	r2, [r3, #0]
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <CHECK_FLOW_TRIGGER+0x88>)
 8004256:	701a      	strb	r2, [r3, #0]
		Patient_Trigger  							= PATIENT_TRIGGER_HAPPEN;
 8004258:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <CHECK_FLOW_TRIGGER+0x8c>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
		BIPAP_Control.Blower_Wait_Time_Milli_Second = 200;
 800425e:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <CHECK_FLOW_TRIGGER+0x90>)
 8004260:	22c8      	movs	r2, #200	; 0xc8
 8004262:	605a      	str	r2, [r3, #4]
		BIPAP_Control.Trigger_Check_Wait_Time       = 300;
 8004264:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <CHECK_FLOW_TRIGGER+0x90>)
 8004266:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800426a:	609a      	str	r2, [r3, #8]
		BIPAP.APNEA_COUNTER                         = (1000*BIPAP.APNEA_TIME) ;
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <CHECK_FLOW_TRIGGER+0x78>)
 800426e:	8a9b      	ldrh	r3, [r3, #20]
 8004270:	461a      	mov	r2, r3
 8004272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004276:	fb03 f302 	mul.w	r3, r3, r2
 800427a:	4a05      	ldr	r2, [pc, #20]	; (8004290 <CHECK_FLOW_TRIGGER+0x78>)
 800427c:	6193      	str	r3, [r2, #24]
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	200125f8 	.word	0x200125f8
 800428c:	20012900 	.word	0x20012900
 8004290:	20012484 	.word	0x20012484
 8004294:	20012a3c 	.word	0x20012a3c
 8004298:	200122a8 	.word	0x200122a8
 800429c:	200129aa 	.word	0x200129aa
 80042a0:	20012b70 	.word	0x20012b70
 80042a4:	2001263d 	.word	0x2001263d
 80042a8:	20012990 	.word	0x20012990

080042ac <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
	if(GRAPH_VALUES.flow>=0)
 80042b0:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <CHECK_TRIGGER_OFFSET+0x44>)
 80042b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80042b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042be:	da00      	bge.n	80042c2 <CHECK_TRIGGER_OFFSET+0x16>
	{
		FLOW_TRIGGER             = 0;
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
	}
}
 80042c0:	e010      	b.n	80042e4 <CHECK_TRIGGER_OFFSET+0x38>
		FLOW_TRIGGER             = 0;
 80042c2:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <CHECK_TRIGGER_OFFSET+0x48>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 80042c8:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <CHECK_TRIGGER_OFFSET+0x44>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <CHECK_TRIGGER_OFFSET+0x4c>)
 80042d0:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <CHECK_TRIGGER_OFFSET+0x44>)
 80042d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80042d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042dc:	ee17 2a90 	vmov	r2, s15
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <CHECK_TRIGGER_OFFSET+0x50>)
 80042e2:	601a      	str	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200125f8 	.word	0x200125f8
 80042f4:	200129aa 	.word	0x200129aa
 80042f8:	2001296c 	.word	0x2001296c
 80042fc:	20012900 	.word	0x20012900

08004300 <BIPAP_EPAP_AVERAGE>:




static void BIPAP_EPAP_AVERAGE()
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
	if((BIPAP_Peep_Average.EPAP_Cumulative_Val == 0) || (BIPAP_Peep_Average.EPAP_Event_Count == 0))
 8004304:	4b16      	ldr	r3, [pc, #88]	; (8004360 <BIPAP_EPAP_AVERAGE+0x60>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <BIPAP_EPAP_AVERAGE+0x14>
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <BIPAP_EPAP_AVERAGE+0x60>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d105      	bne.n	8004320 <BIPAP_EPAP_AVERAGE+0x20>
	{
		BIPAP_Peep_Average.EPAP_Cumulative_Val = 1;
 8004314:	4b12      	ldr	r3, [pc, #72]	; (8004360 <BIPAP_EPAP_AVERAGE+0x60>)
 8004316:	2201      	movs	r2, #1
 8004318:	601a      	str	r2, [r3, #0]
		BIPAP_Peep_Average.EPAP_Event_Count    = 1;
 800431a:	4b11      	ldr	r3, [pc, #68]	; (8004360 <BIPAP_EPAP_AVERAGE+0x60>)
 800431c:	2201      	movs	r2, #1
 800431e:	605a      	str	r2, [r3, #4]
	}
	BIPAP_Peep_Average.EPAP_AVG_VAL        = (uint32_t)(BIPAP_Peep_Average.EPAP_Cumulative_Val/ BIPAP_Peep_Average.EPAP_Event_Count);
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <BIPAP_EPAP_AVERAGE+0x60>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <BIPAP_EPAP_AVERAGE+0x60>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <BIPAP_EPAP_AVERAGE+0x60>)
 8004330:	721a      	strb	r2, [r3, #8]
	BIPAP_Peep_Average.EPAP_Cumulative_Val = RESET;
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <BIPAP_EPAP_AVERAGE+0x60>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
	BIPAP_Peep_Average.EPAP_Event_Count    = RESET;
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <BIPAP_EPAP_AVERAGE+0x60>)
 800433a:	2200      	movs	r2, #0
 800433c:	605a      	str	r2, [r3, #4]

	if(BIPAP_Peep_Average.EPAP_AVG_VAL  == BIPAP.EPAP_Val)
 800433e:	4b08      	ldr	r3, [pc, #32]	; (8004360 <BIPAP_EPAP_AVERAGE+0x60>)
 8004340:	7a1a      	ldrb	r2, [r3, #8]
 8004342:	4b08      	ldr	r3, [pc, #32]	; (8004364 <BIPAP_EPAP_AVERAGE+0x64>)
 8004344:	789b      	ldrb	r3, [r3, #2]
 8004346:	429a      	cmp	r2, r3
 8004348:	d107      	bne.n	800435a <BIPAP_EPAP_AVERAGE+0x5a>
	{
		Change_CPAP_DAC_Values_INVASIVE(BIPAP.EPAP_Val,BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL);
 800434a:	4b06      	ldr	r3, [pc, #24]	; (8004364 <BIPAP_EPAP_AVERAGE+0x64>)
 800434c:	789b      	ldrb	r3, [r3, #2]
 800434e:	4a06      	ldr	r2, [pc, #24]	; (8004368 <BIPAP_EPAP_AVERAGE+0x68>)
 8004350:	8912      	ldrh	r2, [r2, #8]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f005 fb11 	bl	800997c <Change_CPAP_DAC_Values_INVASIVE>
	}
}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	200122bc 	.word	0x200122bc
 8004364:	20012484 	.word	0x20012484
 8004368:	200126a4 	.word	0x200126a4

0800436c <BIPAP_TUNE_EPAP_BLOWER>:



static uint16_t BIPAP_TUNE_EPAP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PEEP)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
	if(  ( BIPAP_Peep_Average.EPAP_AVG_VAL)  > ( Set_PEEP ) && (BIPAP_Peep_Average.EPAP_AVG_VAL  < (Set_PEEP + 2) ) )
 8004378:	4b37      	ldr	r3, [pc, #220]	; (8004458 <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 800437a:	7a1b      	ldrb	r3, [r3, #8]
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	429a      	cmp	r2, r3
 8004380:	d20c      	bcs.n	800439c <BIPAP_TUNE_EPAP_BLOWER+0x30>
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	3301      	adds	r3, #1
 8004386:	4a34      	ldr	r2, [pc, #208]	; (8004458 <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 8004388:	7a12      	ldrb	r2, [r2, #8]
 800438a:	4293      	cmp	r3, r2
 800438c:	db06      	blt.n	800439c <BIPAP_TUNE_EPAP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	3b0a      	subs	r3, #10
 8004394:	b29a      	uxth	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	801a      	strh	r2, [r3, #0]
 800439a:	e055      	b.n	8004448 <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else if(  ( BIPAP_Peep_Average.EPAP_AVG_VAL)  >= ( Set_PEEP + 2 ) && (BIPAP_Peep_Average.EPAP_AVG_VAL  < (Set_PEEP + 4) ) )
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	3301      	adds	r3, #1
 80043a0:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 80043a2:	7a12      	ldrb	r2, [r2, #8]
 80043a4:	4293      	cmp	r3, r2
 80043a6:	da0c      	bge.n	80043c2 <BIPAP_TUNE_EPAP_BLOWER+0x56>
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	3303      	adds	r3, #3
 80043ac:	4a2a      	ldr	r2, [pc, #168]	; (8004458 <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 80043ae:	7a12      	ldrb	r2, [r2, #8]
 80043b0:	4293      	cmp	r3, r2
 80043b2:	db06      	blt.n	80043c2 <BIPAP_TUNE_EPAP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	3b14      	subs	r3, #20
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	801a      	strh	r2, [r3, #0]
 80043c0:	e042      	b.n	8004448 <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else if(  ( BIPAP_Peep_Average.EPAP_AVG_VAL)  >= ( Set_PEEP + 4 )  )
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	3303      	adds	r3, #3
 80043c6:	4a24      	ldr	r2, [pc, #144]	; (8004458 <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 80043c8:	7a12      	ldrb	r2, [r2, #8]
 80043ca:	4293      	cmp	r3, r2
 80043cc:	da06      	bge.n	80043dc <BIPAP_TUNE_EPAP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	3b28      	subs	r3, #40	; 0x28
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	e035      	b.n	8004448 <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else if( (BIPAP_Peep_Average.EPAP_AVG_VAL  < Set_PEEP) && (BIPAP_Peep_Average.EPAP_AVG_VAL  > (Set_PEEP -2) ) )
 80043dc:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 80043de:	7a1b      	ldrb	r3, [r3, #8]
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d90c      	bls.n	8004400 <BIPAP_TUNE_EPAP_BLOWER+0x94>
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 80043ec:	7a12      	ldrb	r2, [r2, #8]
 80043ee:	4293      	cmp	r3, r2
 80043f0:	dc06      	bgt.n	8004400 <BIPAP_TUNE_EPAP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	330a      	adds	r3, #10
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	801a      	strh	r2, [r3, #0]
 80043fe:	e023      	b.n	8004448 <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else if(  (BIPAP_Peep_Average.EPAP_AVG_VAL  <= (Set_PEEP-2) ) && (BIPAP_Peep_Average.EPAP_AVG_VAL  >  (Set_PEEP-4) ) )
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	3b01      	subs	r3, #1
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 8004406:	7a12      	ldrb	r2, [r2, #8]
 8004408:	4293      	cmp	r3, r2
 800440a:	dd0c      	ble.n	8004426 <BIPAP_TUNE_EPAP_BLOWER+0xba>
 800440c:	78fb      	ldrb	r3, [r7, #3]
 800440e:	3b03      	subs	r3, #3
 8004410:	4a11      	ldr	r2, [pc, #68]	; (8004458 <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 8004412:	7a12      	ldrb	r2, [r2, #8]
 8004414:	4293      	cmp	r3, r2
 8004416:	dc06      	bgt.n	8004426 <BIPAP_TUNE_EPAP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	e010      	b.n	8004448 <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else if(  (BIPAP_Peep_Average.EPAP_AVG_VAL  <= (Set_PEEP-4) )  )
 8004426:	78fb      	ldrb	r3, [r7, #3]
 8004428:	3b03      	subs	r3, #3
 800442a:	4a0b      	ldr	r2, [pc, #44]	; (8004458 <BIPAP_TUNE_EPAP_BLOWER+0xec>)
 800442c:	7a12      	ldrb	r2, [r2, #8]
 800442e:	4293      	cmp	r3, r2
 8004430:	dd06      	ble.n	8004440 <BIPAP_TUNE_EPAP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	3328      	adds	r3, #40	; 0x28
 8004438:	b29a      	uxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	e003      	b.n	8004448 <BIPAP_TUNE_EPAP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	881a      	ldrh	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	881b      	ldrh	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	200122bc 	.word	0x200122bc

0800445c <BIBAP_TUNE_IPAP_BLOWER>:



static uint16_t BIBAP_TUNE_IPAP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PIP)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
	if(  ( BIPAP_Pip_average.IPAP_AVG_VAL)  > ( Set_PIP ) && (BIPAP_Pip_average.IPAP_AVG_VAL  < (Set_PIP + 2) ) )
 8004468:	4b37      	ldr	r3, [pc, #220]	; (8004548 <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 800446a:	7b1b      	ldrb	r3, [r3, #12]
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	429a      	cmp	r2, r3
 8004470:	d20c      	bcs.n	800448c <BIBAP_TUNE_IPAP_BLOWER+0x30>
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	3301      	adds	r3, #1
 8004476:	4a34      	ldr	r2, [pc, #208]	; (8004548 <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 8004478:	7b12      	ldrb	r2, [r2, #12]
 800447a:	4293      	cmp	r3, r2
 800447c:	db06      	blt.n	800448c <BIBAP_TUNE_IPAP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	3b0a      	subs	r3, #10
 8004484:	b29a      	uxth	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	801a      	strh	r2, [r3, #0]
 800448a:	e055      	b.n	8004538 <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else if(  ( BIPAP_Pip_average.IPAP_AVG_VAL)  >= ( Set_PIP + 2 ) && (BIPAP_Pip_average.IPAP_AVG_VAL  < (Set_PIP + 4) ) )
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	3301      	adds	r3, #1
 8004490:	4a2d      	ldr	r2, [pc, #180]	; (8004548 <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 8004492:	7b12      	ldrb	r2, [r2, #12]
 8004494:	4293      	cmp	r3, r2
 8004496:	da0c      	bge.n	80044b2 <BIBAP_TUNE_IPAP_BLOWER+0x56>
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	3303      	adds	r3, #3
 800449c:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 800449e:	7b12      	ldrb	r2, [r2, #12]
 80044a0:	4293      	cmp	r3, r2
 80044a2:	db06      	blt.n	80044b2 <BIBAP_TUNE_IPAP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	3b14      	subs	r3, #20
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	801a      	strh	r2, [r3, #0]
 80044b0:	e042      	b.n	8004538 <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else if(  ( BIPAP_Pip_average.IPAP_AVG_VAL)  >= ( Set_PIP + 4 )  )
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	3303      	adds	r3, #3
 80044b6:	4a24      	ldr	r2, [pc, #144]	; (8004548 <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 80044b8:	7b12      	ldrb	r2, [r2, #12]
 80044ba:	4293      	cmp	r3, r2
 80044bc:	da06      	bge.n	80044cc <BIBAP_TUNE_IPAP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	3b28      	subs	r3, #40	; 0x28
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	e035      	b.n	8004538 <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else if( (BIPAP_Pip_average.IPAP_AVG_VAL  < Set_PIP) && (BIPAP_Pip_average.IPAP_AVG_VAL  > (Set_PIP -2) ) )
 80044cc:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 80044ce:	7b1b      	ldrb	r3, [r3, #12]
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d90c      	bls.n	80044f0 <BIBAP_TUNE_IPAP_BLOWER+0x94>
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	3b01      	subs	r3, #1
 80044da:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 80044dc:	7b12      	ldrb	r2, [r2, #12]
 80044de:	4293      	cmp	r3, r2
 80044e0:	dc06      	bgt.n	80044f0 <BIBAP_TUNE_IPAP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	330a      	adds	r3, #10
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	e023      	b.n	8004538 <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else if(  (BIPAP_Pip_average.IPAP_AVG_VAL  <= (Set_PIP-2) ) && (BIPAP_Pip_average.IPAP_AVG_VAL  >  (Set_PIP-4) ) )
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	4a14      	ldr	r2, [pc, #80]	; (8004548 <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 80044f6:	7b12      	ldrb	r2, [r2, #12]
 80044f8:	4293      	cmp	r3, r2
 80044fa:	dd0c      	ble.n	8004516 <BIBAP_TUNE_IPAP_BLOWER+0xba>
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	3b03      	subs	r3, #3
 8004500:	4a11      	ldr	r2, [pc, #68]	; (8004548 <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 8004502:	7b12      	ldrb	r2, [r2, #12]
 8004504:	4293      	cmp	r3, r2
 8004506:	dc06      	bgt.n	8004516 <BIBAP_TUNE_IPAP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	3314      	adds	r3, #20
 800450e:	b29a      	uxth	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	e010      	b.n	8004538 <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else if(  (BIPAP_Pip_average.IPAP_AVG_VAL  <= (Set_PIP-4) )  )
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	3b03      	subs	r3, #3
 800451a:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <BIBAP_TUNE_IPAP_BLOWER+0xec>)
 800451c:	7b12      	ldrb	r2, [r2, #12]
 800451e:	4293      	cmp	r3, r2
 8004520:	dd06      	ble.n	8004530 <BIBAP_TUNE_IPAP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	3328      	adds	r3, #40	; 0x28
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	e003      	b.n	8004538 <BIBAP_TUNE_IPAP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	881a      	ldrh	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	881b      	ldrh	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20012b08 	.word	0x20012b08

0800454c <RESET_FLAGS>:



static void RESET_FLAGS()
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
	Apnea_Mode                                  = OFF;
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <RESET_FLAGS+0x44>)
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
	Blower_Signal(0);
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <RESET_FLAGS+0x48>)
 8004558:	2200      	movs	r2, #0
 800455a:	609a      	str	r2, [r3, #8]
	Peep_Status                   				= PEEP_NOT_ACHEIVED;
 800455c:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <RESET_FLAGS+0x4c>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			    = OPENED;
 8004562:	4b0e      	ldr	r3, [pc, #56]	; (800459c <RESET_FLAGS+0x50>)
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
	Clear_All_Alert_Bits();
 8004568:	f7fc fd04 	bl	8000f74 <Clear_All_Alert_Bits>
	Send_Bluetooth_Data_Farme                   = SEND_ALERT_FRAME;
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <RESET_FLAGS+0x54>)
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
	Apnea_Alert                                 = APNEA_ALERT_HAPPEN;
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <RESET_FLAGS+0x58>)
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
	Alert_Status                                = ALERT_HAPPEN;
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <RESET_FLAGS+0x5c>)
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]
	SET_ALERT_BIT(SECOND_FRAME_UN,_ALERT_APNEA);
 800457e:	4a0b      	ldr	r2, [pc, #44]	; (80045ac <RESET_FLAGS+0x60>)
 8004580:	7913      	ldrb	r3, [r2, #4]
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	7113      	strb	r3, [r2, #4]
	LED_Alert();
 8004588:	f7fd fb1c 	bl	8001bc4 <LED_Alert>

}
 800458c:	bf00      	nop
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20012aa1 	.word	0x20012aa1
 8004594:	40007400 	.word	0x40007400
 8004598:	20012a37 	.word	0x20012a37
 800459c:	20012a34 	.word	0x20012a34
 80045a0:	2001269d 	.word	0x2001269d
 80045a4:	200129f5 	.word	0x200129f5
 80045a8:	2001287c 	.word	0x2001287c
 80045ac:	20012408 	.word	0x20012408

080045b0 <INSPIRATION_PROCESS_BIPAP>:


void INSPIRATION_PROCESS_BIPAP()
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
	//Breath_Count                                          = Count_The_Breath;

	O2_Control_Bipap++;
 80045b4:	4b32      	ldr	r3, [pc, #200]	; (8004680 <INSPIRATION_PROCESS_BIPAP+0xd0>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	4b30      	ldr	r3, [pc, #192]	; (8004680 <INSPIRATION_PROCESS_BIPAP+0xd0>)
 80045be:	701a      	strb	r2, [r3, #0]
	if(O2_Control_Bipap > 6)
 80045c0:	4b2f      	ldr	r3, [pc, #188]	; (8004680 <INSPIRATION_PROCESS_BIPAP+0xd0>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b06      	cmp	r3, #6
 80045c6:	d902      	bls.n	80045ce <INSPIRATION_PROCESS_BIPAP+0x1e>
		O2_Control_Bipap=6;
 80045c8:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <INSPIRATION_PROCESS_BIPAP+0xd0>)
 80045ca:	2206      	movs	r2, #6
 80045cc:	701a      	strb	r2, [r3, #0]
	BIPAP_Control._INSPIRATION_TIME                       = BIPAP.IPAP_TIME;
 80045ce:	4b2d      	ldr	r3, [pc, #180]	; (8004684 <INSPIRATION_PROCESS_BIPAP+0xd4>)
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	4a2d      	ldr	r2, [pc, #180]	; (8004688 <INSPIRATION_PROCESS_BIPAP+0xd8>)
 80045d4:	60d3      	str	r3, [r2, #12]

		Pressure_Mode_blower_control.BLOWER_DAC_VAL           = APNEA_DAC_VAL(BIPAP.EPAP_Val);
 80045d6:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <INSPIRATION_PROCESS_BIPAP+0xd4>)
 80045d8:	789b      	ldrb	r3, [r3, #2]
 80045da:	4618      	mov	r0, r3
 80045dc:	f005 f8da 	bl	8009794 <APNEA_DAC_VAL>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b29      	ldr	r3, [pc, #164]	; (800468c <INSPIRATION_PROCESS_BIPAP+0xdc>)
 80045e6:	801a      	strh	r2, [r3, #0]
		if(BIPAP.BIPAP_O2_Val > 21)
 80045e8:	4b26      	ldr	r3, [pc, #152]	; (8004684 <INSPIRATION_PROCESS_BIPAP+0xd4>)
 80045ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ec:	2b15      	cmp	r3, #21
 80045ee:	dd05      	ble.n	80045fc <INSPIRATION_PROCESS_BIPAP+0x4c>
		{
				Parkar_valve_Signal((Oxygen_Parameter.BIPAP_O2_DAC+100));
 80045f0:	4b27      	ldr	r3, [pc, #156]	; (8004690 <INSPIRATION_PROCESS_BIPAP+0xe0>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80045f8:	4b26      	ldr	r3, [pc, #152]	; (8004694 <INSPIRATION_PROCESS_BIPAP+0xe4>)
 80045fa:	615a      	str	r2, [r3, #20]
		}

		PIP_control_Task.PIP_Control_Task_Delay               = 10;
 80045fc:	4b26      	ldr	r3, [pc, #152]	; (8004698 <INSPIRATION_PROCESS_BIPAP+0xe8>)
 80045fe:	220a      	movs	r2, #10
 8004600:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = 30;
 8004602:	4b25      	ldr	r3, [pc, #148]	; (8004698 <INSPIRATION_PROCESS_BIPAP+0xe8>)
 8004604:	221e      	movs	r2, #30
 8004606:	80da      	strh	r2, [r3, #6]
		PIP_Status                    				          = PIP_NOT_ACHEIVED;
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <INSPIRATION_PROCESS_BIPAP+0xec>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]


	Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL      = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800460e:	4b1f      	ldr	r3, [pc, #124]	; (800468c <INSPIRATION_PROCESS_BIPAP+0xdc>)
 8004610:	881a      	ldrh	r2, [r3, #0]
 8004612:	4b1e      	ldr	r3, [pc, #120]	; (800468c <INSPIRATION_PROCESS_BIPAP+0xdc>)
 8004614:	805a      	strh	r2, [r3, #2]
	Set_PIP_Status                                        = SET_PIP_VALUE_NOT_ACHEIVED;
 8004616:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <INSPIRATION_PROCESS_BIPAP+0xf0>)
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
	Read_Time_vs_Pressure                                 = READ_TIME_OPEN;
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <INSPIRATION_PROCESS_BIPAP+0xf4>)
 800461e:	2200      	movs	r2, #0
 8004620:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.PIP_Control_Event_Occured            = RESET;
 8004622:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <INSPIRATION_PROCESS_BIPAP+0xe8>)
 8004624:	2200      	movs	r2, #0
 8004626:	805a      	strh	r2, [r3, #2]
	PIP_Average_Parameter.Maximum_PIP_Acheived            = RESET;
 8004628:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <INSPIRATION_PROCESS_BIPAP+0xf8>)
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = BIBAP_TUNE_IPAP_BLOWER(&Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL,
			                                                                      BIPAP.IPAP_Val );
 800462e:	4b15      	ldr	r3, [pc, #84]	; (8004684 <INSPIRATION_PROCESS_BIPAP+0xd4>)
 8004630:	881b      	ldrh	r3, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = BIBAP_TUNE_IPAP_BLOWER(&Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL,
 8004632:	b2db      	uxtb	r3, r3
 8004634:	4619      	mov	r1, r3
 8004636:	481d      	ldr	r0, [pc, #116]	; (80046ac <INSPIRATION_PROCESS_BIPAP+0xfc>)
 8004638:	f7ff ff10 	bl	800445c <BIBAP_TUNE_IPAP_BLOWER>
 800463c:	4603      	mov	r3, r0
 800463e:	461a      	mov	r2, r3
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <INSPIRATION_PROCESS_BIPAP+0xdc>)
 8004642:	811a      	strh	r2, [r3, #8]
	BREATH_STATE                                          = INSPIRATION_CYCLE;
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <INSPIRATION_PROCESS_BIPAP+0x100>)
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
	GRAPH_VALUES.volume                                   = RESET;
 800464a:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <INSPIRATION_PROCESS_BIPAP+0x104>)
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
	Volume_max                                            = RESET;
 8004652:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <INSPIRATION_PROCESS_BIPAP+0x108>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
	BIPAP_EPAP_AVERAGE();
 8004658:	f7ff fe52 	bl	8004300 <BIPAP_EPAP_AVERAGE>
	BIPAP_Control.Trigger_Check_Wait_Time                = 500+BIPAP.TRIG_TIME;
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <INSPIRATION_PROCESS_BIPAP+0xd4>)
 800465e:	899b      	ldrh	r3, [r3, #12]
 8004660:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004664:	4a08      	ldr	r2, [pc, #32]	; (8004688 <INSPIRATION_PROCESS_BIPAP+0xd8>)
 8004666:	6093      	str	r3, [r2, #8]

	vTaskResume(BIPAP_PID_Handler);
 8004668:	4b14      	ldr	r3, [pc, #80]	; (80046bc <INSPIRATION_PROCESS_BIPAP+0x10c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f016 fde5 	bl	801b23c <vTaskResume>
	vTaskSuspend(BIPAP_Handler);
 8004672:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <INSPIRATION_PROCESS_BIPAP+0x110>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f016 fd1c 	bl	801b0b4 <vTaskSuspend>

}
 800467c:	bf00      	nop
 800467e:	bd80      	pop	{r7, pc}
 8004680:	200122d8 	.word	0x200122d8
 8004684:	20012484 	.word	0x20012484
 8004688:	20012990 	.word	0x20012990
 800468c:	20012978 	.word	0x20012978
 8004690:	200129d4 	.word	0x200129d4
 8004694:	40007400 	.word	0x40007400
 8004698:	200123d0 	.word	0x200123d0
 800469c:	200129f7 	.word	0x200129f7
 80046a0:	20012b34 	.word	0x20012b34
 80046a4:	20012d34 	.word	0x20012d34
 80046a8:	200124bc 	.word	0x200124bc
 80046ac:	20012980 	.word	0x20012980
 80046b0:	20012a3c 	.word	0x20012a3c
 80046b4:	200125f8 	.word	0x200125f8
 80046b8:	20012c70 	.word	0x20012c70
 80046bc:	20012b04 	.word	0x20012b04
 80046c0:	20012364 	.word	0x20012364

080046c4 <BACKUP_PC_CMV_START>:




static void BACKUP_PC_CMV_START()
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
	if(Backup_PC_CMV_SET_VALUE == CHANGE_HAPPEN)
 80046c8:	4ba0      	ldr	r3, [pc, #640]	; (800494c <BACKUP_PC_CMV_START+0x288>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	f040 80e5 	bne.w	800489c <BACKUP_PC_CMV_START+0x1d8>
	{
			Mode                                                  = Backup_Pccmv;
 80046d2:	4b9f      	ldr	r3, [pc, #636]	; (8004950 <BACKUP_PC_CMV_START+0x28c>)
 80046d4:	2215      	movs	r2, #21
 80046d6:	701a      	strb	r2, [r3, #0]
			Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 80046d8:	4b9e      	ldr	r3, [pc, #632]	; (8004954 <BACKUP_PC_CMV_START+0x290>)
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]
			Expiratory_Valve_Lock_Delay   			              = OPENED;
 80046de:	4b9e      	ldr	r3, [pc, #632]	; (8004958 <BACKUP_PC_CMV_START+0x294>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
			Oxygen_Parameter.O2_DAC=1700;
 80046e4:	4b9d      	ldr	r3, [pc, #628]	; (800495c <BACKUP_PC_CMV_START+0x298>)
 80046e6:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80046ea:	60da      	str	r2, [r3, #12]

				Maximum_Limit=3;
 80046ec:	4b9c      	ldr	r3, [pc, #624]	; (8004960 <BACKUP_PC_CMV_START+0x29c>)
 80046ee:	2203      	movs	r2, #3
 80046f0:	701a      	strb	r2, [r3, #0]
				if(Common_Mode_Parameter._FIO2_Val == 100)
 80046f2:	4b9c      	ldr	r3, [pc, #624]	; (8004964 <BACKUP_PC_CMV_START+0x2a0>)
 80046f4:	78db      	ldrb	r3, [r3, #3]
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d10f      	bne.n	800471a <BACKUP_PC_CMV_START+0x56>
				{
					Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = APNEA_DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 80046fa:	4b9b      	ldr	r3, [pc, #620]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f005 f848 	bl	8009794 <APNEA_DAC_VAL>
 8004704:	4603      	mov	r3, r0
 8004706:	461a      	mov	r2, r3
 8004708:	4b98      	ldr	r3, [pc, #608]	; (800496c <BACKUP_PC_CMV_START+0x2a8>)
 800470a:	811a      	strh	r2, [r3, #8]
					Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL  = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL -200;
 800470c:	4b97      	ldr	r3, [pc, #604]	; (800496c <BACKUP_PC_CMV_START+0x2a8>)
 800470e:	891b      	ldrh	r3, [r3, #8]
 8004710:	3bc8      	subs	r3, #200	; 0xc8
 8004712:	b29a      	uxth	r2, r3
 8004714:	4b95      	ldr	r3, [pc, #596]	; (800496c <BACKUP_PC_CMV_START+0x2a8>)
 8004716:	811a      	strh	r2, [r3, #8]
 8004718:	e008      	b.n	800472c <BACKUP_PC_CMV_START+0x68>
				}
				else
				{
					Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = APNEA_DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 800471a:	4b93      	ldr	r3, [pc, #588]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f005 f838 	bl	8009794 <APNEA_DAC_VAL>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	4b90      	ldr	r3, [pc, #576]	; (800496c <BACKUP_PC_CMV_START+0x2a8>)
 800472a:	811a      	strh	r2, [r3, #8]
				}


		    	PIP_control_Task.PIP_Control_Task_Delay           = 10;                               //new
 800472c:	4b90      	ldr	r3, [pc, #576]	; (8004970 <BACKUP_PC_CMV_START+0x2ac>)
 800472e:	220a      	movs	r2, #10
 8004730:	801a      	strh	r2, [r3, #0]
		    	PIP_control_Task.Increase_Each_DAC_SET_CONST      = 30;                               //new
 8004732:	4b8f      	ldr	r3, [pc, #572]	; (8004970 <BACKUP_PC_CMV_START+0x2ac>)
 8004734:	221e      	movs	r2, #30
 8004736:	80da      	strh	r2, [r3, #6]
		    	BACKUP_PC_CMV.RISE_TIME_MS_Val                    = (BACKUP_PC_CMV.Rise_Time *100);
 8004738:	4b8b      	ldr	r3, [pc, #556]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 800473a:	7c9b      	ldrb	r3, [r3, #18]
 800473c:	461a      	mov	r2, r3
 800473e:	2364      	movs	r3, #100	; 0x64
 8004740:	fb03 f302 	mul.w	r3, r3, r2
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800474c:	4b86      	ldr	r3, [pc, #536]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 800474e:	edc3 7a01 	vstr	s15, [r3, #4]

		    	if(BACKUP_PC_CMV.RISE_TIME_MS_Val >= BACKUP_PC_CMV.INSPIRATION_TIME)                  //new
 8004752:	4b85      	ldr	r3, [pc, #532]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 8004754:	ed93 7a01 	vldr	s14, [r3, #4]
 8004758:	4b83      	ldr	r3, [pc, #524]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	ee07 3a90 	vmov	s15, r3
 8004760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476c:	db08      	blt.n	8004780 <BACKUP_PC_CMV_START+0xbc>
		    	{
		    		BACKUP_PC_CMV.RISE_TIME_MS_Val =BACKUP_PC_CMV.INSPIRATION_TIME;
 800476e:	4b7e      	ldr	r3, [pc, #504]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 800477c:	edc3 7a01 	vstr	s15, [r3, #4]
		    	}
		    	if(BACKUP_PC_CMV.RISE_TIME_MS_Val <=600)
 8004780:	4b79      	ldr	r3, [pc, #484]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 8004782:	edd3 7a01 	vldr	s15, [r3, #4]
 8004786:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8004974 <BACKUP_PC_CMV_START+0x2b0>
 800478a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	d802      	bhi.n	800479a <BACKUP_PC_CMV_START+0xd6>
		    	{
		    		BACKUP_PC_CMV.RISE_TIME_MS_Val =600;
 8004794:	4b74      	ldr	r3, [pc, #464]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 8004796:	4a78      	ldr	r2, [pc, #480]	; (8004978 <BACKUP_PC_CMV_START+0x2b4>)
 8004798:	605a      	str	r2, [r3, #4]
		    	}
		    	BACKUP_PC_CMV.Rise_Time_percentage   = ((float)BACKUP_PC_CMV.RISE_TIME_MS_Val /BACKUP_PC_CMV.INSPIRATION_TIME) * 100.00;     //new
 800479a:	4b73      	ldr	r3, [pc, #460]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 800479c:	ed93 7a01 	vldr	s14, [r3, #4]
 80047a0:	4b71      	ldr	r3, [pc, #452]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80047b0:	ee16 0a90 	vmov	r0, s13
 80047b4:	f7fb fe70 	bl	8000498 <__aeabi_f2d>
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	4b6f      	ldr	r3, [pc, #444]	; (800497c <BACKUP_PC_CMV_START+0x2b8>)
 80047be:	f7fb fec3 	bl	8000548 <__aeabi_dmul>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	f7fc f97f 	bl	8000acc <__aeabi_d2uiz>
 80047ce:	4603      	mov	r3, r0
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4b65      	ldr	r3, [pc, #404]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 80047d4:	74da      	strb	r2, [r3, #19]
		    	PIP_control_Task.PIP_Acheived_Time_Ms      	 =  (BACKUP_PC_CMV.RISE_TIME_MS_Val * 2);
 80047d6:	4b64      	ldr	r3, [pc, #400]	; (8004968 <BACKUP_PC_CMV_START+0x2a4>)
 80047d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80047dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047e4:	ee17 3a90 	vmov	r3, s15
 80047e8:	b21a      	sxth	r2, r3
 80047ea:	4b61      	ldr	r3, [pc, #388]	; (8004970 <BACKUP_PC_CMV_START+0x2ac>)
 80047ec:	809a      	strh	r2, [r3, #4]



				Smooth_Ramp_Time_Val_Count = 0;
 80047ee:	4b64      	ldr	r3, [pc, #400]	; (8004980 <BACKUP_PC_CMV_START+0x2bc>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
				Smooth_Ramp_Time_Val       = 15;
 80047f4:	4b63      	ldr	r3, [pc, #396]	; (8004984 <BACKUP_PC_CMV_START+0x2c0>)
 80047f6:	220f      	movs	r2, #15
 80047f8:	701a      	strb	r2, [r3, #0]
				if(Common_Mode_Parameter._PEEP_Val >= 15)
 80047fa:	4b5a      	ldr	r3, [pc, #360]	; (8004964 <BACKUP_PC_CMV_START+0x2a0>)
 80047fc:	785b      	ldrb	r3, [r3, #1]
 80047fe:	2b0e      	cmp	r3, #14
 8004800:	d903      	bls.n	800480a <BACKUP_PC_CMV_START+0x146>
				{
				  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 8004802:	4b61      	ldr	r3, [pc, #388]	; (8004988 <BACKUP_PC_CMV_START+0x2c4>)
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e00e      	b.n	8004828 <BACKUP_PC_CMV_START+0x164>
				}
				else if( (Common_Mode_Parameter._PEEP_Val < 15) && (Common_Mode_Parameter._PEEP_Val >= 9))
 800480a:	4b56      	ldr	r3, [pc, #344]	; (8004964 <BACKUP_PC_CMV_START+0x2a0>)
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	2b0e      	cmp	r3, #14
 8004810:	d807      	bhi.n	8004822 <BACKUP_PC_CMV_START+0x15e>
 8004812:	4b54      	ldr	r3, [pc, #336]	; (8004964 <BACKUP_PC_CMV_START+0x2a0>)
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	2b08      	cmp	r3, #8
 8004818:	d903      	bls.n	8004822 <BACKUP_PC_CMV_START+0x15e>
				{
				  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Pending;
 800481a:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <BACKUP_PC_CMV_START+0x2c4>)
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e002      	b.n	8004828 <BACKUP_PC_CMV_START+0x164>
				}
				else
				{
					Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 8004822:	4b59      	ldr	r3, [pc, #356]	; (8004988 <BACKUP_PC_CMV_START+0x2c4>)
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]
				}

				controlsys_Init(&Parker_valve_tune);          //parker
 8004828:	4858      	ldr	r0, [pc, #352]	; (800498c <BACKUP_PC_CMV_START+0x2c8>)
 800482a:	f00b fe15 	bl	8010458 <controlsys_Init>
				Avg_Flow                                                   = 1;
 800482e:	4b58      	ldr	r3, [pc, #352]	; (8004990 <BACKUP_PC_CMV_START+0x2cc>)
 8004830:	2201      	movs	r2, #1
 8004832:	801a      	strh	r2, [r3, #0]
				Flow_Count                                                 = 0;
 8004834:	4b57      	ldr	r3, [pc, #348]	; (8004994 <BACKUP_PC_CMV_START+0x2d0>)
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
				Flow_Cummulative_Val                                       = 0;
 800483c:	4b56      	ldr	r3, [pc, #344]	; (8004998 <BACKUP_PC_CMV_START+0x2d4>)
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
				Check_Oxygen_Count                                         = 0;        //new
 8004844:	4b55      	ldr	r3, [pc, #340]	; (800499c <BACKUP_PC_CMV_START+0x2d8>)
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]
				Temp_Dac                                                   = 1400;     //new
 800484a:	4b55      	ldr	r3, [pc, #340]	; (80049a0 <BACKUP_PC_CMV_START+0x2dc>)
 800484c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8004850:	801a      	strh	r2, [r3, #0]
				inc_dac                                                    = 2;        //new
 8004852:	4b54      	ldr	r3, [pc, #336]	; (80049a4 <BACKUP_PC_CMV_START+0x2e0>)
 8004854:	2202      	movs	r2, #2
 8004856:	801a      	strh	r2, [r3, #0]
				Oxygen_Blending_Status                                     = OXYGEN_NOT_ACHIEVED;  //new
 8004858:	4b53      	ldr	r3, [pc, #332]	; (80049a8 <BACKUP_PC_CMV_START+0x2e4>)
 800485a:	2201      	movs	r2, #1
 800485c:	701a      	strb	r2, [r3, #0]


			PIP_Average_Parameter.PIP_Cumulative_Val              = 1;
 800485e:	4b53      	ldr	r3, [pc, #332]	; (80049ac <BACKUP_PC_CMV_START+0x2e8>)
 8004860:	2201      	movs	r2, #1
 8004862:	605a      	str	r2, [r3, #4]
			PIP_Average_Parameter.PIP_Event_Count                 = 1;
 8004864:	4b51      	ldr	r3, [pc, #324]	; (80049ac <BACKUP_PC_CMV_START+0x2e8>)
 8004866:	2201      	movs	r2, #1
 8004868:	609a      	str	r2, [r3, #8]
			PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 800486a:	4b51      	ldr	r3, [pc, #324]	; (80049b0 <BACKUP_PC_CMV_START+0x2ec>)
 800486c:	2201      	movs	r2, #1
 800486e:	609a      	str	r2, [r3, #8]
			PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 8004870:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <BACKUP_PC_CMV_START+0x2ec>)
 8004872:	2201      	movs	r2, #1
 8004874:	60da      	str	r2, [r3, #12]
			Need_PID_Task_Delay                                   = NO;
 8004876:	4b4f      	ldr	r3, [pc, #316]	; (80049b4 <BACKUP_PC_CMV_START+0x2f0>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
			Tune_PID_Task_Delay                                   = T_OPEN;
 800487c:	4b4e      	ldr	r3, [pc, #312]	; (80049b8 <BACKUP_PC_CMV_START+0x2f4>)
 800487e:	2200      	movs	r2, #0
 8004880:	701a      	strb	r2, [r3, #0]
			PIP_control_Task.Low_PIP_Count                        = RESET;
 8004882:	4b3b      	ldr	r3, [pc, #236]	; (8004970 <BACKUP_PC_CMV_START+0x2ac>)
 8004884:	2200      	movs	r2, #0
 8004886:	729a      	strb	r2, [r3, #10]
			PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = RESET;
 8004888:	4b39      	ldr	r3, [pc, #228]	; (8004970 <BACKUP_PC_CMV_START+0x2ac>)
 800488a:	2200      	movs	r2, #0
 800488c:	725a      	strb	r2, [r3, #9]
			Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 800488e:	4b4b      	ldr	r3, [pc, #300]	; (80049bc <BACKUP_PC_CMV_START+0x2f8>)
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]
			Backup_PC_CMV_SET_VALUE = NO_CHANGES;
 8004894:	4b2d      	ldr	r3, [pc, #180]	; (800494c <BACKUP_PC_CMV_START+0x288>)
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e025      	b.n	80048e8 <BACKUP_PC_CMV_START+0x224>
	}
	else if(Backup_PC_CMV_SET_VALUE == NO_CHANGES)
 800489c:	4b2b      	ldr	r3, [pc, #172]	; (800494c <BACKUP_PC_CMV_START+0x288>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d121      	bne.n	80048e8 <BACKUP_PC_CMV_START+0x224>
	{
		Mode                                                  = Backup_Pccmv;
 80048a4:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <BACKUP_PC_CMV_START+0x28c>)
 80048a6:	2215      	movs	r2, #21
 80048a8:	701a      	strb	r2, [r3, #0]
		Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 80048aa:	4b2a      	ldr	r3, [pc, #168]	; (8004954 <BACKUP_PC_CMV_START+0x290>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			              = OPENED;
 80048b0:	4b29      	ldr	r3, [pc, #164]	; (8004958 <BACKUP_PC_CMV_START+0x294>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = OLD.LAST_BLOWER_ENDING_DAC_SIGNAL;;
 80048b6:	4b42      	ldr	r3, [pc, #264]	; (80049c0 <BACKUP_PC_CMV_START+0x2fc>)
 80048b8:	8a9a      	ldrh	r2, [r3, #20]
 80048ba:	4b2c      	ldr	r3, [pc, #176]	; (800496c <BACKUP_PC_CMV_START+0x2a8>)
 80048bc:	811a      	strh	r2, [r3, #8]
		PIP_control_Task.PIP_Control_Task_Delay               = OLD.LAST_PIP_Control_Task_Delay;
 80048be:	4b40      	ldr	r3, [pc, #256]	; (80049c0 <BACKUP_PC_CMV_START+0x2fc>)
 80048c0:	8adb      	ldrh	r3, [r3, #22]
 80048c2:	b21a      	sxth	r2, r3
 80048c4:	4b2a      	ldr	r3, [pc, #168]	; (8004970 <BACKUP_PC_CMV_START+0x2ac>)
 80048c6:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = OLD.LAST_Increase_Each_DAC_SET_CONST;
 80048c8:	4b3d      	ldr	r3, [pc, #244]	; (80049c0 <BACKUP_PC_CMV_START+0x2fc>)
 80048ca:	8b1b      	ldrh	r3, [r3, #24]
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	4b28      	ldr	r3, [pc, #160]	; (8004970 <BACKUP_PC_CMV_START+0x2ac>)
 80048d0:	80da      	strh	r2, [r3, #6]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = PEEP_Maintain_Parameter.PEEP_AVG_VAL;
 80048d2:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <BACKUP_PC_CMV_START+0x2ec>)
 80048d4:	7c1b      	ldrb	r3, [r3, #16]
 80048d6:	461a      	mov	r2, r3
 80048d8:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <BACKUP_PC_CMV_START+0x2ec>)
 80048da:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 80048dc:	4b34      	ldr	r3, [pc, #208]	; (80049b0 <BACKUP_PC_CMV_START+0x2ec>)
 80048de:	2201      	movs	r2, #1
 80048e0:	60da      	str	r2, [r3, #12]
		Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 80048e2:	4b36      	ldr	r3, [pc, #216]	; (80049bc <BACKUP_PC_CMV_START+0x2f8>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]

	}
	Alert_Check = 5;
 80048e8:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <BACKUP_PC_CMV_START+0x300>)
 80048ea:	2205      	movs	r2, #5
 80048ec:	701a      	strb	r2, [r3, #0]
	vTaskResume(One_Time_Handler);
 80048ee:	4b36      	ldr	r3, [pc, #216]	; (80049c8 <BACKUP_PC_CMV_START+0x304>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f016 fca2 	bl	801b23c <vTaskResume>
	vTaskResume(BACKUP_PC_Handler);
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <BACKUP_PC_CMV_START+0x308>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f016 fc9d 	bl	801b23c <vTaskResume>
	vTaskResume(PIP_Control_Task_Handler);
 8004902:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <BACKUP_PC_CMV_START+0x30c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f016 fc98 	bl	801b23c <vTaskResume>
	vTaskResume(Alert_Handler);
 800490c:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <BACKUP_PC_CMV_START+0x310>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f016 fc93 	bl	801b23c <vTaskResume>
	if(Common_Mode_Parameter._FIO2_Val > 21)
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <BACKUP_PC_CMV_START+0x2a0>)
 8004918:	78db      	ldrb	r3, [r3, #3]
 800491a:	2b15      	cmp	r3, #21
 800491c:	d905      	bls.n	800492a <BACKUP_PC_CMV_START+0x266>
	{
		vTaskResume(Oxygen_Blending_Handler);
 800491e:	4b2e      	ldr	r3, [pc, #184]	; (80049d8 <BACKUP_PC_CMV_START+0x314>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f016 fc8a 	bl	801b23c <vTaskResume>
 8004928:	e004      	b.n	8004934 <BACKUP_PC_CMV_START+0x270>
	}
	else
	{
		vTaskSuspend(Oxygen_Blending_Handler);
 800492a:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <BACKUP_PC_CMV_START+0x314>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f016 fbc0 	bl	801b0b4 <vTaskSuspend>
	}

	vTaskSuspend(BIPAP_PID_Handler);
 8004934:	4b29      	ldr	r3, [pc, #164]	; (80049dc <BACKUP_PC_CMV_START+0x318>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f016 fbbb 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800493e:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <BACKUP_PC_CMV_START+0x31c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f016 fbb6 	bl	801b0b4 <vTaskSuspend>
}
 8004948:	bf00      	nop
 800494a:	bd80      	pop	{r7, pc}
 800494c:	20012594 	.word	0x20012594
 8004950:	200126ba 	.word	0x200126ba
 8004954:	20012a37 	.word	0x20012a37
 8004958:	20012a34 	.word	0x20012a34
 800495c:	200129d4 	.word	0x200129d4
 8004960:	20012a35 	.word	0x20012a35
 8004964:	200124f0 	.word	0x200124f0
 8004968:	200121b8 	.word	0x200121b8
 800496c:	20012978 	.word	0x20012978
 8004970:	200123d0 	.word	0x200123d0
 8004974:	44160000 	.word	0x44160000
 8004978:	44160000 	.word	0x44160000
 800497c:	40590000 	.word	0x40590000
 8004980:	200129f6 	.word	0x200129f6
 8004984:	200129a1 	.word	0x200129a1
 8004988:	200124ce 	.word	0x200124ce
 800498c:	2000001c 	.word	0x2000001c
 8004990:	2001283c 	.word	0x2001283c
 8004994:	200128a0 	.word	0x200128a0
 8004998:	200122f8 	.word	0x200122f8
 800499c:	20012a0a 	.word	0x20012a0a
 80049a0:	20012474 	.word	0x20012474
 80049a4:	200123ce 	.word	0x200123ce
 80049a8:	20012b71 	.word	0x20012b71
 80049ac:	200124bc 	.word	0x200124bc
 80049b0:	20012c74 	.word	0x20012c74
 80049b4:	20012a38 	.word	0x20012a38
 80049b8:	20012620 	.word	0x20012620
 80049bc:	2001269e 	.word	0x2001269e
 80049c0:	20012c08 	.word	0x20012c08
 80049c4:	20012aa0 	.word	0x20012aa0
 80049c8:	200129cc 	.word	0x200129cc
 80049cc:	20012500 	.word	0x20012500
 80049d0:	200124ec 	.word	0x200124ec
 80049d4:	20012968 	.word	0x20012968
 80049d8:	200127ac 	.word	0x200127ac
 80049dc:	20012b04 	.word	0x20012b04
 80049e0:	20012364 	.word	0x20012364

080049e4 <BIBAP_IPAP_AVERAGE>:




static void BIBAP_IPAP_AVERAGE()
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
	if((BIPAP_Pip_average.IPAP_Cumulative_Val == 0) || (BIPAP_Pip_average.IPAP_Event_Count == 0))
 80049e8:	4b17      	ldr	r3, [pc, #92]	; (8004a48 <BIBAP_IPAP_AVERAGE+0x64>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <BIBAP_IPAP_AVERAGE+0x14>
 80049f0:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <BIBAP_IPAP_AVERAGE+0x64>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <BIBAP_IPAP_AVERAGE+0x20>
	{
		BIPAP_Pip_average.IPAP_Cumulative_Val = 1;
 80049f8:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <BIBAP_IPAP_AVERAGE+0x64>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	605a      	str	r2, [r3, #4]
		BIPAP_Pip_average.IPAP_Event_Count    = 1;
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <BIBAP_IPAP_AVERAGE+0x64>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	609a      	str	r2, [r3, #8]
	}
	BIPAP_Pip_average.IPAP_AVG_VAL        = (uint32_t)(BIPAP_Pip_average.IPAP_Cumulative_Val/ BIPAP_Pip_average.IPAP_Event_Count);
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <BIBAP_IPAP_AVERAGE+0x64>)
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	4b0f      	ldr	r3, [pc, #60]	; (8004a48 <BIBAP_IPAP_AVERAGE+0x64>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <BIBAP_IPAP_AVERAGE+0x64>)
 8004a14:	731a      	strb	r2, [r3, #12]
	BIPAP_Pip_average.IPAP_Cumulative_Val = RESET;
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <BIBAP_IPAP_AVERAGE+0x64>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	605a      	str	r2, [r3, #4]
	BIPAP_Pip_average.IPAP_Event_Count    = RESET;
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <BIBAP_IPAP_AVERAGE+0x64>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
	if(BIPAP_Pip_average.IPAP_AVG_VAL == BIPAP.IPAP_Val)
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <BIBAP_IPAP_AVERAGE+0x64>)
 8004a24:	7b1b      	ldrb	r3, [r3, #12]
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <BIBAP_IPAP_AVERAGE+0x68>)
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d108      	bne.n	8004a42 <BIBAP_IPAP_AVERAGE+0x5e>
	{
		Change_CPAP_DAC_Values_INVASIVE(BIPAP.IPAP_Val,Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL);
 8004a30:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <BIBAP_IPAP_AVERAGE+0x68>)
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <BIBAP_IPAP_AVERAGE+0x6c>)
 8004a38:	8912      	ldrh	r2, [r2, #8]
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f004 ff9d 	bl	800997c <Change_CPAP_DAC_Values_INVASIVE>
	}
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20012b08 	.word	0x20012b08
 8004a4c:	20012484 	.word	0x20012484
 8004a50:	20012978 	.word	0x20012978

08004a54 <Patient_Circuit_Disconnected_Alert_BIBAP>:



static void Patient_Circuit_Disconnected_Alert_BIBAP()
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
	if(  (GRAPH_VALUES.pressure<=3) && (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2 || ( (GRAPH_VALUES.flow>= 80) && (GRAPH_VALUES.pressure<=3) ) ) )
 8004a58:	4b34      	ldr	r3, [pc, #208]	; (8004b2c <Patient_Circuit_Disconnected_Alert_BIBAP+0xd8>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d863      	bhi.n	8004b28 <Patient_Circuit_Disconnected_Alert_BIBAP+0xd4>
 8004a60:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <Patient_Circuit_Disconnected_Alert_BIBAP+0xd8>)
 8004a62:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6e:	d022      	beq.n	8004ab6 <Patient_Circuit_Disconnected_Alert_BIBAP+0x62>
 8004a70:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <Patient_Circuit_Disconnected_Alert_BIBAP+0xd8>)
 8004a72:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a76:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004a7a:	eef4 7a47 	vcmp.f32	s15, s14
 8004a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a82:	d018      	beq.n	8004ab6 <Patient_Circuit_Disconnected_Alert_BIBAP+0x62>
 8004a84:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <Patient_Circuit_Disconnected_Alert_BIBAP+0xd8>)
 8004a86:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a8a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004a8e:	eef4 7a47 	vcmp.f32	s15, s14
 8004a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a96:	d00e      	beq.n	8004ab6 <Patient_Circuit_Disconnected_Alert_BIBAP+0x62>
 8004a98:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <Patient_Circuit_Disconnected_Alert_BIBAP+0xd8>)
 8004a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a9e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004b30 <Patient_Circuit_Disconnected_Alert_BIBAP+0xdc>
 8004aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aaa:	da00      	bge.n	8004aae <Patient_Circuit_Disconnected_Alert_BIBAP+0x5a>

						}
				}
			}
	}
}
 8004aac:	e03c      	b.n	8004b28 <Patient_Circuit_Disconnected_Alert_BIBAP+0xd4>
	if(  (GRAPH_VALUES.pressure<=3) && (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2 || ( (GRAPH_VALUES.flow>= 80) && (GRAPH_VALUES.pressure<=3) ) ) )
 8004aae:	4b1f      	ldr	r3, [pc, #124]	; (8004b2c <Patient_Circuit_Disconnected_Alert_BIBAP+0xd8>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d838      	bhi.n	8004b28 <Patient_Circuit_Disconnected_Alert_BIBAP+0xd4>
			if((DAC1->DHR12R1)>=400)
 8004ab6:	4b1f      	ldr	r3, [pc, #124]	; (8004b34 <Patient_Circuit_Disconnected_Alert_BIBAP+0xe0>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004abe:	d333      	bcc.n	8004b28 <Patient_Circuit_Disconnected_Alert_BIBAP+0xd4>
				if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 8004ac0:	4b1d      	ldr	r3, [pc, #116]	; (8004b38 <Patient_Circuit_Disconnected_Alert_BIBAP+0xe4>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d12f      	bne.n	8004b28 <Patient_Circuit_Disconnected_Alert_BIBAP+0xd4>
					Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 8004ac8:	4b1c      	ldr	r3, [pc, #112]	; (8004b3c <Patient_Circuit_Disconnected_Alert_BIBAP+0xe8>)
 8004aca:	88db      	ldrh	r3, [r3, #6]
 8004acc:	3301      	adds	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <Patient_Circuit_Disconnected_Alert_BIBAP+0xe8>)
 8004ad2:	80da      	strh	r2, [r3, #6]
						if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 500)
 8004ad4:	4b19      	ldr	r3, [pc, #100]	; (8004b3c <Patient_Circuit_Disconnected_Alert_BIBAP+0xe8>)
 8004ad6:	88db      	ldrh	r3, [r3, #6]
 8004ad8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004adc:	d324      	bcc.n	8004b28 <Patient_Circuit_Disconnected_Alert_BIBAP+0xd4>
							Clear_All_Alert_Bits();
 8004ade:	f7fc fa49 	bl	8000f74 <Clear_All_Alert_Bits>
							Alert_Status = ALERT_HAPPEN;
 8004ae2:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <Patient_Circuit_Disconnected_Alert_BIBAP+0xec>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
							SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8004ae8:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <Patient_Circuit_Disconnected_Alert_BIBAP+0xf0>)
 8004aea:	78d3      	ldrb	r3, [r2, #3]
 8004aec:	f043 0310 	orr.w	r3, r3, #16
 8004af0:	70d3      	strb	r3, [r2, #3]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <Patient_Circuit_Disconnected_Alert_BIBAP+0xe4>)
 8004af4:	2201      	movs	r2, #1
 8004af6:	701a      	strb	r2, [r3, #0]
							Send_Bluetooth_Data_Farme                = SEND_ALERT_FRAME;
 8004af8:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <Patient_Circuit_Disconnected_Alert_BIBAP+0xf4>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
							Apnea_Alert                              = APNEA_ALERT_HAPPEN;
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <Patient_Circuit_Disconnected_Alert_BIBAP+0xf8>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <Patient_Circuit_Disconnected_Alert_BIBAP+0xe4>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
							LED_Alert();
 8004b0a:	f7fd f85b 	bl	8001bc4 <LED_Alert>
							BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL           = APNEA_DAC_VAL(BIPAP.EPAP_Val );
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <Patient_Circuit_Disconnected_Alert_BIBAP+0xfc>)
 8004b10:	789b      	ldrb	r3, [r3, #2]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f004 fe3e 	bl	8009794 <APNEA_DAC_VAL>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <Patient_Circuit_Disconnected_Alert_BIBAP+0x100>)
 8004b1e:	80da      	strh	r2, [r3, #6]
							BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL      = BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL;
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <Patient_Circuit_Disconnected_Alert_BIBAP+0x100>)
 8004b22:	88da      	ldrh	r2, [r3, #6]
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <Patient_Circuit_Disconnected_Alert_BIBAP+0x100>)
 8004b26:	811a      	strh	r2, [r3, #8]
}
 8004b28:	bf00      	nop
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	200125f8 	.word	0x200125f8
 8004b30:	42a00000 	.word	0x42a00000
 8004b34:	40007400 	.word	0x40007400
 8004b38:	20012349 	.word	0x20012349
 8004b3c:	20012b98 	.word	0x20012b98
 8004b40:	2001287c 	.word	0x2001287c
 8004b44:	20012408 	.word	0x20012408
 8004b48:	2001269d 	.word	0x2001269d
 8004b4c:	200129f5 	.word	0x200129f5
 8004b50:	20012484 	.word	0x20012484
 8004b54:	200126a4 	.word	0x200126a4

08004b58 <EPAP_TIME_CONTROL>:


void EPAP_TIME_CONTROL()
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
	Apnea_Mode  = ON;
 8004b5c:	4b17      	ldr	r3, [pc, #92]	; (8004bbc <EPAP_TIME_CONTROL+0x64>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
    if(BIPAP_Control.Blower_Wait_Time_Milli_Second == 0)
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <EPAP_TIME_CONTROL+0x68>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <EPAP_TIME_CONTROL+0x16>
    {
    	RUN_BIPAP_EPAP_MAINTAIN_BLOWER();
 8004b6a:	f7ff fadd 	bl	8004128 <RUN_BIPAP_EPAP_MAINTAIN_BLOWER>
    }

	Patient_Circuit_Disconnected_Alert_BIBAP();
 8004b6e:	f7ff ff71 	bl	8004a54 <Patient_Circuit_Disconnected_Alert_BIBAP>
    Apnea_O2_control();
 8004b72:	f000 f885 	bl	8004c80 <Apnea_O2_control>

    if(BIPAP_Control.Trigger_Check_Wait_Time == 0)
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <EPAP_TIME_CONTROL+0x68>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11a      	bne.n	8004bb4 <EPAP_TIME_CONTROL+0x5c>
	{
		if(GRAPH_VALUES.flow > 0)
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <EPAP_TIME_CONTROL+0x6c>)
 8004b80:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8c:	dc00      	bgt.n	8004b90 <EPAP_TIME_CONTROL+0x38>
		CHECK_TRIGGER_OFFSET();
	}



}
 8004b8e:	e013      	b.n	8004bb8 <EPAP_TIME_CONTROL+0x60>
			STOP_BLOWER_IF_FLOW_SENSE();
 8004b90:	f7ff fae2 	bl	8004158 <STOP_BLOWER_IF_FLOW_SENSE>
				if (Trigger_Type == Pressure_Trigger)
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <EPAP_TIME_CONTROL+0x70>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <EPAP_TIME_CONTROL+0x4a>
					CHECK_PRESSURE_TRIGGER();
 8004b9c:	f7ff faf6 	bl	800418c <CHECK_PRESSURE_TRIGGER>
 8004ba0:	e005      	b.n	8004bae <EPAP_TIME_CONTROL+0x56>
				else if (Trigger_Type == Flow_Trigger)
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <EPAP_TIME_CONTROL+0x70>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <EPAP_TIME_CONTROL+0x56>
					CHECK_FLOW_TRIGGER();
 8004baa:	f7ff fb35 	bl	8004218 <CHECK_FLOW_TRIGGER>
				Cummulate_PEEP();
 8004bae:	f000 f80d 	bl	8004bcc <Cummulate_PEEP>
}
 8004bb2:	e001      	b.n	8004bb8 <EPAP_TIME_CONTROL+0x60>
		CHECK_TRIGGER_OFFSET();
 8004bb4:	f7ff fb7a 	bl	80042ac <CHECK_TRIGGER_OFFSET>
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20012aa1 	.word	0x20012aa1
 8004bc0:	20012990 	.word	0x20012990
 8004bc4:	200125f8 	.word	0x200125f8
 8004bc8:	20012244 	.word	0x20012244

08004bcc <Cummulate_PEEP>:

void Cummulate_PEEP()
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
	BIPAP_Peep_Average.EPAP_Cumulative_Val += GRAPH_VALUES.pressure;
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <Cummulate_PEEP+0x28>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <Cummulate_PEEP+0x2c>)
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	4413      	add	r3, r2
 8004bda:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <Cummulate_PEEP+0x28>)
 8004bdc:	6013      	str	r3, [r2, #0]
	BIPAP_Peep_Average.EPAP_Event_Count++;
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <Cummulate_PEEP+0x28>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	3301      	adds	r3, #1
 8004be4:	4a03      	ldr	r2, [pc, #12]	; (8004bf4 <Cummulate_PEEP+0x28>)
 8004be6:	6053      	str	r3, [r2, #4]
}
 8004be8:	bf00      	nop
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	200122bc 	.word	0x200122bc
 8004bf8:	200125f8 	.word	0x200125f8

08004bfc <ADJUST_PEEP>:

void ADJUST_PEEP()
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
	//Reset_Patient_Circuit_Diconnceted_Alert_Flags();
	BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL    = BIPAP_TUNE_EPAP_BLOWER(&BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL,
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <ADJUST_PEEP+0x24>)
 8004c02:	789b      	ldrb	r3, [r3, #2]
 8004c04:	4619      	mov	r1, r3
 8004c06:	4807      	ldr	r0, [pc, #28]	; (8004c24 <ADJUST_PEEP+0x28>)
 8004c08:	f7ff fbb0 	bl	800436c <BIPAP_TUNE_EPAP_BLOWER>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <ADJUST_PEEP+0x2c>)
 8004c12:	811a      	strh	r2, [r3, #8]
			                                                                       BIPAP.EPAP_Val );
	BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL         = BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL;
 8004c14:	4b04      	ldr	r3, [pc, #16]	; (8004c28 <ADJUST_PEEP+0x2c>)
 8004c16:	891a      	ldrh	r2, [r3, #8]
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <ADJUST_PEEP+0x2c>)
 8004c1a:	80da      	strh	r2, [r3, #6]
}
 8004c1c:	bf00      	nop
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20012484 	.word	0x20012484
 8004c24:	200126ac 	.word	0x200126ac
 8004c28:	200126a4 	.word	0x200126a4

08004c2c <Inspiration_Trigger_Check>:


void Inspiration_Trigger_Check()
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
    if(BIPAP_Control.Blower_Wait_Time_Milli_Second == 0)
    {

    }

    if(BIPAP_Control.Trigger_Check_Wait_Time == 0)
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <Inspiration_Trigger_Check+0x48>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d118      	bne.n	8004c6a <Inspiration_Trigger_Check+0x3e>
	{
		if(GRAPH_VALUES.flow > 0)
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <Inspiration_Trigger_Check+0x4c>)
 8004c3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	dc00      	bgt.n	8004c4a <Inspiration_Trigger_Check+0x1e>

	else
	{
		CHECK_TRIGGER_OFFSET();
	}
}
 8004c48:	e011      	b.n	8004c6e <Inspiration_Trigger_Check+0x42>
			STOP_BLOWER_IF_FLOW_SENSE();
 8004c4a:	f7ff fa85 	bl	8004158 <STOP_BLOWER_IF_FLOW_SENSE>
				if (Trigger_Type == Pressure_Trigger)
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <Inspiration_Trigger_Check+0x50>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <Inspiration_Trigger_Check+0x30>
					CHECK_PRESSURE_TRIGGER();
 8004c56:	f7ff fa99 	bl	800418c <CHECK_PRESSURE_TRIGGER>
}
 8004c5a:	e008      	b.n	8004c6e <Inspiration_Trigger_Check+0x42>
				else if (Trigger_Type == Flow_Trigger)
 8004c5c:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <Inspiration_Trigger_Check+0x50>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d104      	bne.n	8004c6e <Inspiration_Trigger_Check+0x42>
					CHECK_FLOW_TRIGGER();
 8004c64:	f7ff fad8 	bl	8004218 <CHECK_FLOW_TRIGGER>
}
 8004c68:	e001      	b.n	8004c6e <Inspiration_Trigger_Check+0x42>
		CHECK_TRIGGER_OFFSET();
 8004c6a:	f7ff fb1f 	bl	80042ac <CHECK_TRIGGER_OFFSET>
}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20012990 	.word	0x20012990
 8004c78:	200125f8 	.word	0x200125f8
 8004c7c:	20012244 	.word	0x20012244

08004c80 <Apnea_O2_control>:

static void Apnea_O2_control()
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
	if(BIPAP.BIPAP_O2_Val > 21)
 8004c84:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <Apnea_O2_control+0x14>)
 8004c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c88:	2b15      	cmp	r3, #21
 8004c8a:	dd01      	ble.n	8004c90 <Apnea_O2_control+0x10>
	{
		Oxygen_epap();
 8004c8c:	f000 f804 	bl	8004c98 <Oxygen_epap>
	}
}
 8004c90:	bf00      	nop
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20012484 	.word	0x20012484

08004c98 <Oxygen_epap>:


void Oxygen_epap()
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0

	if(O2_Control_Bipap < 6)
 8004c9e:	4b41      	ldr	r3, [pc, #260]	; (8004da4 <Oxygen_epap+0x10c>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	d873      	bhi.n	8004d8e <Oxygen_epap+0xf6>
	{
		O2_Flow_Rate   = ( GRAPH_VALUES.flow* ( (float)( BIPAP.BIPAP_O2_Val - 21) / 100) );
 8004ca6:	4b40      	ldr	r3, [pc, #256]	; (8004da8 <Oxygen_epap+0x110>)
 8004ca8:	ed93 7a01 	vldr	s14, [r3, #4]
 8004cac:	4b3f      	ldr	r3, [pc, #252]	; (8004dac <Oxygen_epap+0x114>)
 8004cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb0:	3b15      	subs	r3, #21
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cba:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 8004db0 <Oxygen_epap+0x118>
 8004cbe:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cca:	edc7 7a01 	vstr	s15, [r7, #4]
 8004cce:	793b      	ldrb	r3, [r7, #4]
 8004cd0:	b25a      	sxtb	r2, r3
 8004cd2:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <Oxygen_epap+0x11c>)
 8004cd4:	701a      	strb	r2, [r3, #0]
		if(O2_Flow_Rate <=8)
 8004cd6:	4b37      	ldr	r3, [pc, #220]	; (8004db4 <Oxygen_epap+0x11c>)
 8004cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	dc02      	bgt.n	8004ce6 <Oxygen_epap+0x4e>
		{
			O2_Flow_Rate = 8;
 8004ce0:	4b34      	ldr	r3, [pc, #208]	; (8004db4 <Oxygen_epap+0x11c>)
 8004ce2:	2208      	movs	r2, #8
 8004ce4:	701a      	strb	r2, [r3, #0]
		}
		if(GRAPH_VALUES.oxygen_flow <= O2_Flow_Rate)
 8004ce6:	4b30      	ldr	r3, [pc, #192]	; (8004da8 <Oxygen_epap+0x110>)
 8004ce8:	ed93 7a04 	vldr	s14, [r3, #16]
 8004cec:	4b31      	ldr	r3, [pc, #196]	; (8004db4 <Oxygen_epap+0x11c>)
 8004cee:	f993 3000 	ldrsb.w	r3, [r3]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d02:	d81d      	bhi.n	8004d40 <Oxygen_epap+0xa8>
		{
			Oxygen_Parameter.BIPAP_O2_DAC=controlsys_Update(&Parker_valve_tune, O2_Flow_Rate , GRAPH_VALUES.oxygen_flow);
 8004d04:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <Oxygen_epap+0x11c>)
 8004d06:	f993 3000 	ldrsb.w	r3, [r3]
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d12:	4b25      	ldr	r3, [pc, #148]	; (8004da8 <Oxygen_epap+0x110>)
 8004d14:	ed93 7a04 	vldr	s14, [r3, #16]
 8004d18:	eef0 0a47 	vmov.f32	s1, s14
 8004d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d20:	4825      	ldr	r0, [pc, #148]	; (8004db8 <Oxygen_epap+0x120>)
 8004d22:	f00b fbb9 	bl	8010498 <controlsys_Update>
 8004d26:	eef0 7a40 	vmov.f32	s15, s0
 8004d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d2e:	ee17 2a90 	vmov	r2, s15
 8004d32:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <Oxygen_epap+0x124>)
 8004d34:	619a      	str	r2, [r3, #24]
			Parkar_valve_Signal(Oxygen_Parameter.BIPAP_O2_DAC);
 8004d36:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <Oxygen_epap+0x124>)
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	4b21      	ldr	r3, [pc, #132]	; (8004dc0 <Oxygen_epap+0x128>)
 8004d3c:	615a      	str	r2, [r3, #20]
 8004d3e:	e01c      	b.n	8004d7a <Oxygen_epap+0xe2>
		}
		else
		{
			Oxygen_Parameter.BIPAP_O2_DAC=controlsys_Update(&Parker_valve_tune, O2_Flow_Rate , GRAPH_VALUES.oxygen_flow);
 8004d40:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <Oxygen_epap+0x11c>)
 8004d42:	f993 3000 	ldrsb.w	r3, [r3]
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d4e:	4b16      	ldr	r3, [pc, #88]	; (8004da8 <Oxygen_epap+0x110>)
 8004d50:	ed93 7a04 	vldr	s14, [r3, #16]
 8004d54:	eef0 0a47 	vmov.f32	s1, s14
 8004d58:	eeb0 0a67 	vmov.f32	s0, s15
 8004d5c:	4816      	ldr	r0, [pc, #88]	; (8004db8 <Oxygen_epap+0x120>)
 8004d5e:	f00b fb9b 	bl	8010498 <controlsys_Update>
 8004d62:	eef0 7a40 	vmov.f32	s15, s0
 8004d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d6a:	ee17 2a90 	vmov	r2, s15
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <Oxygen_epap+0x124>)
 8004d70:	619a      	str	r2, [r3, #24]
			Parkar_valve_Signal(Oxygen_Parameter.BIPAP_O2_DAC);
 8004d72:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <Oxygen_epap+0x124>)
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <Oxygen_epap+0x128>)
 8004d78:	615a      	str	r2, [r3, #20]
		}
		Parkar_valve_Signal(Oxygen_Parameter.BIPAP_O2_DAC);
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <Oxygen_epap+0x124>)
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <Oxygen_epap+0x128>)
 8004d80:	615a      	str	r2, [r3, #20]
		Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 8004d82:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <Oxygen_epap+0x110>)
 8004d84:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <Oxygen_epap+0x124>)
 8004d8c:	721a      	strb	r2, [r3, #8]
	}


	Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 8004d8e:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <Oxygen_epap+0x110>)
 8004d90:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <Oxygen_epap+0x124>)
 8004d98:	721a      	strb	r2, [r3, #8]
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	200122d8 	.word	0x200122d8
 8004da8:	200125f8 	.word	0x200125f8
 8004dac:	20012484 	.word	0x20012484
 8004db0:	42c80000 	.word	0x42c80000
 8004db4:	200122e1 	.word	0x200122e1
 8004db8:	2000001c 	.word	0x2000001c
 8004dbc:	200129d4 	.word	0x200129d4
 8004dc0:	40007400 	.word	0x40007400

08004dc4 <Low_Oxygen_Achieved_BIPAP>:




void Low_Oxygen_Achieved_BIPAP(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460a      	mov	r2, r1
 8004dce:	71fb      	strb	r3, [r7, #7]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71bb      	strb	r3, [r7, #6]


		if(  ( Achieved_Oxygen)  < ( FIO2_Val) && (Achieved_Oxygen  >= (FIO2_Val - 2) ) )
 8004dd4:	79ba      	ldrb	r2, [r7, #6]
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d20c      	bcs.n	8004df6 <Low_Oxygen_Achieved_BIPAP+0x32>
 8004ddc:	79ba      	ldrb	r2, [r7, #6]
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	3b02      	subs	r3, #2
 8004de2:	429a      	cmp	r2, r3
 8004de4:	db07      	blt.n	8004df6 <Low_Oxygen_Achieved_BIPAP+0x32>
		{
			Oxygen_Parameter.BIPAP_O2_DAC = (Oxygen_Parameter.BIPAP_O2_DAC+ET_O2_Envitec_Tune_Value1);
 8004de6:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <Low_Oxygen_Achieved_BIPAP+0x98>)
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <Low_Oxygen_Achieved_BIPAP+0x9c>)
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	4413      	add	r3, r2
 8004df0:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <Low_Oxygen_Achieved_BIPAP+0x98>)
 8004df2:	6193      	str	r3, [r2, #24]
 8004df4:	e01d      	b.n	8004e32 <Low_Oxygen_Achieved_BIPAP+0x6e>
		}
		else if(  ( Achieved_Oxygen)  < ( FIO2_Val - 2 ) && (Achieved_Oxygen  > (FIO2_Val - 5) ) )
 8004df6:	79ba      	ldrb	r2, [r7, #6]
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	3b02      	subs	r3, #2
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	da0c      	bge.n	8004e1a <Low_Oxygen_Achieved_BIPAP+0x56>
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	1f1a      	subs	r2, r3, #4
 8004e04:	79bb      	ldrb	r3, [r7, #6]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	dc07      	bgt.n	8004e1a <Low_Oxygen_Achieved_BIPAP+0x56>
		{
			Oxygen_Parameter.BIPAP_O2_DAC = (Oxygen_Parameter.BIPAP_O2_DAC+ET_O2_Envitec_Tune_Value2);
 8004e0a:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <Low_Oxygen_Achieved_BIPAP+0x98>)
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <Low_Oxygen_Achieved_BIPAP+0xa0>)
 8004e10:	7812      	ldrb	r2, [r2, #0]
 8004e12:	4413      	add	r3, r2
 8004e14:	4a11      	ldr	r2, [pc, #68]	; (8004e5c <Low_Oxygen_Achieved_BIPAP+0x98>)
 8004e16:	6193      	str	r3, [r2, #24]
 8004e18:	e00b      	b.n	8004e32 <Low_Oxygen_Achieved_BIPAP+0x6e>
		}
		else if(  ( Achieved_Oxygen)  <= ( FIO2_Val - 5 )  )
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	1f1a      	subs	r2, r3, #4
 8004e1e:	79bb      	ldrb	r3, [r7, #6]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	dd06      	ble.n	8004e32 <Low_Oxygen_Achieved_BIPAP+0x6e>
		{
			Oxygen_Parameter.BIPAP_O2_DAC = (Oxygen_Parameter.BIPAP_O2_DAC+ET_O2_Envitec_Tune_Value3);
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <Low_Oxygen_Achieved_BIPAP+0x98>)
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	4a0f      	ldr	r2, [pc, #60]	; (8004e68 <Low_Oxygen_Achieved_BIPAP+0xa4>)
 8004e2a:	7812      	ldrb	r2, [r2, #0]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	4a0b      	ldr	r2, [pc, #44]	; (8004e5c <Low_Oxygen_Achieved_BIPAP+0x98>)
 8004e30:	6193      	str	r3, [r2, #24]
		}

		if(Oxygen_Parameter.BIPAP_O2_DAC>=3000)
 8004e32:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <Low_Oxygen_Achieved_BIPAP+0x98>)
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	dd03      	ble.n	8004e46 <Low_Oxygen_Achieved_BIPAP+0x82>
		{
			Oxygen_Parameter.BIPAP_O2_DAC=3000;
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <Low_Oxygen_Achieved_BIPAP+0x98>)
 8004e40:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004e44:	619a      	str	r2, [r3, #24]
		}
		Parkar_valve_Signal(Oxygen_Parameter.BIPAP_O2_DAC);
 8004e46:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <Low_Oxygen_Achieved_BIPAP+0x98>)
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <Low_Oxygen_Achieved_BIPAP+0xa8>)
 8004e4c:	615a      	str	r2, [r3, #20]
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	200129d4 	.word	0x200129d4
 8004e60:	20012508 	.word	0x20012508
 8004e64:	20012220 	.word	0x20012220
 8004e68:	20012a36 	.word	0x20012a36
 8004e6c:	40007400 	.word	0x40007400

08004e70 <High_Oxygen_Achieved_BIPAP>:
  * This function used to reduce the Proportional valve when high O2 Achieved.
  */


void High_Oxygen_Achieved_BIPAP(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	460a      	mov	r2, r1
 8004e7a:	71fb      	strb	r3, [r7, #7]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	71bb      	strb	r3, [r7, #6]

		if(  ( Achieved_Oxygen)  > ( FIO2_Val ) && (Achieved_Oxygen  <= (FIO2_Val + 2) ) )
 8004e80:	79ba      	ldrb	r2, [r7, #6]
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d90c      	bls.n	8004ea2 <High_Oxygen_Achieved_BIPAP+0x32>
 8004e88:	79ba      	ldrb	r2, [r7, #6]
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	dc07      	bgt.n	8004ea2 <High_Oxygen_Achieved_BIPAP+0x32>
		{
			Oxygen_Parameter.BIPAP_O2_DAC = (Oxygen_Parameter.BIPAP_O2_DAC-ET_O2_Envitec_Tune_Value1);
 8004e92:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <High_Oxygen_Achieved_BIPAP+0x94>)
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	; (8004f08 <High_Oxygen_Achieved_BIPAP+0x98>)
 8004e98:	7812      	ldrb	r2, [r2, #0]
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <High_Oxygen_Achieved_BIPAP+0x94>)
 8004e9e:	6193      	str	r3, [r2, #24]
 8004ea0:	e01d      	b.n	8004ede <High_Oxygen_Achieved_BIPAP+0x6e>
		}
		else if(  ( Achieved_Oxygen)  > ( FIO2_Val + 2 ) && (Achieved_Oxygen  < (FIO2_Val + 5) ) )
 8004ea2:	79ba      	ldrb	r2, [r7, #6]
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	dd0c      	ble.n	8004ec6 <High_Oxygen_Achieved_BIPAP+0x56>
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	1d1a      	adds	r2, r3, #4
 8004eb0:	79bb      	ldrb	r3, [r7, #6]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	db07      	blt.n	8004ec6 <High_Oxygen_Achieved_BIPAP+0x56>
		{
			Oxygen_Parameter.BIPAP_O2_DAC = (Oxygen_Parameter.BIPAP_O2_DAC-ET_O2_Envitec_Tune_Value2);
 8004eb6:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <High_Oxygen_Achieved_BIPAP+0x94>)
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <High_Oxygen_Achieved_BIPAP+0x9c>)
 8004ebc:	7812      	ldrb	r2, [r2, #0]
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	4a10      	ldr	r2, [pc, #64]	; (8004f04 <High_Oxygen_Achieved_BIPAP+0x94>)
 8004ec2:	6193      	str	r3, [r2, #24]
 8004ec4:	e00b      	b.n	8004ede <High_Oxygen_Achieved_BIPAP+0x6e>
		}
		else if(  ( Achieved_Oxygen)  >= ( FIO2_Val + 5 )  )
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	1d1a      	adds	r2, r3, #4
 8004eca:	79bb      	ldrb	r3, [r7, #6]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	da06      	bge.n	8004ede <High_Oxygen_Achieved_BIPAP+0x6e>
		{
			Oxygen_Parameter.BIPAP_O2_DAC = (Oxygen_Parameter.BIPAP_O2_DAC-ET_O2_Envitec_Tune_Value3);
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <High_Oxygen_Achieved_BIPAP+0x94>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	4a0e      	ldr	r2, [pc, #56]	; (8004f10 <High_Oxygen_Achieved_BIPAP+0xa0>)
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	4a0a      	ldr	r2, [pc, #40]	; (8004f04 <High_Oxygen_Achieved_BIPAP+0x94>)
 8004edc:	6193      	str	r3, [r2, #24]
		}


		if(Oxygen_Parameter.BIPAP_O2_DAC<=1400)
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <High_Oxygen_Achieved_BIPAP+0x94>)
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8004ee6:	dc03      	bgt.n	8004ef0 <High_Oxygen_Achieved_BIPAP+0x80>
		{
			Oxygen_Parameter.BIPAP_O2_DAC=1400;
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <High_Oxygen_Achieved_BIPAP+0x94>)
 8004eea:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8004eee:	619a      	str	r2, [r3, #24]
		}
	    Parkar_valve_Signal(Oxygen_Parameter.BIPAP_O2_DAC);
 8004ef0:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <High_Oxygen_Achieved_BIPAP+0x94>)
 8004ef2:	699a      	ldr	r2, [r3, #24]
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <High_Oxygen_Achieved_BIPAP+0xa4>)
 8004ef6:	615a      	str	r2, [r3, #20]
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	200129d4 	.word	0x200129d4
 8004f08:	20012508 	.word	0x20012508
 8004f0c:	20012220 	.word	0x20012220
 8004f10:	20012a36 	.word	0x20012a36
 8004f14:	40007400 	.word	0x40007400

08004f18 <Tune_O2_BIPAP>:
/**
  * This function check Achieved O2 high or low
  */

void Tune_O2_BIPAP(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	4603      	mov	r3, r0
 8004f20:	460a      	mov	r2, r1
 8004f22:	71fb      	strb	r3, [r7, #7]
 8004f24:	4613      	mov	r3, r2
 8004f26:	71bb      	strb	r3, [r7, #6]
	   if (Achieved_Oxygen < (FIO2_Val-1))
 8004f28:	79ba      	ldrb	r2, [r7, #6]
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	da06      	bge.n	8004f40 <Tune_O2_BIPAP+0x28>
		{
			Low_Oxygen_Achieved_BIPAP(FIO2_Val,Achieved_Oxygen);
 8004f32:	79ba      	ldrb	r2, [r7, #6]
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff ff43 	bl	8004dc4 <Low_Oxygen_Achieved_BIPAP>
 8004f3e:	e00e      	b.n	8004f5e <Tune_O2_BIPAP+0x46>
		}
		else if (Achieved_Oxygen > (FIO2_Val))
 8004f40:	79ba      	ldrb	r2, [r7, #6]
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d906      	bls.n	8004f56 <Tune_O2_BIPAP+0x3e>
		{
			High_Oxygen_Achieved_BIPAP(FIO2_Val,Achieved_Oxygen);
 8004f48:	79ba      	ldrb	r2, [r7, #6]
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff ff8e 	bl	8004e70 <High_Oxygen_Achieved_BIPAP>
 8004f54:	e003      	b.n	8004f5e <Tune_O2_BIPAP+0x46>
		}
		else
			Parkar_valve_Signal(Oxygen_Parameter.BIPAP_O2_DAC);
 8004f56:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <Tune_O2_BIPAP+0x60>)
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <Tune_O2_BIPAP+0x64>)
 8004f5c:	615a      	str	r2, [r3, #20]
		Last_O2_Dac_Val = Oxygen_Parameter.BIPAP_O2_DAC;
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <Tune_O2_BIPAP+0x60>)
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <Tune_O2_BIPAP+0x68>)
 8004f66:	801a      	strh	r2, [r3, #0]
		Parkar_valve_Signal(Oxygen_Parameter.BIPAP_O2_DAC);
 8004f68:	4b03      	ldr	r3, [pc, #12]	; (8004f78 <Tune_O2_BIPAP+0x60>)
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <Tune_O2_BIPAP+0x64>)
 8004f6e:	615a      	str	r2, [r3, #20]
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	200129d4 	.word	0x200129d4
 8004f7c:	40007400 	.word	0x40007400
 8004f80:	20012a08 	.word	0x20012a08

08004f84 <Split_Mode_Parameter_Packets>:

extern SENSOR MPX7002;


void Split_Mode_Parameter_Packets(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

	    uint8_t BackupMode;
	    Mode_Val         =  ( 0x0F & (Receive_Graph_Packet->Control_Byte) ) ;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	78db      	ldrb	r3, [r3, #3]
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	4bb3      	ldr	r3, [pc, #716]	; (8005264 <Split_Mode_Parameter_Packets+0x2e0>)
 8004f98:	701a      	strb	r2, [r3, #0]
	    BackupMode       =  ( 0x20 & (Receive_Graph_Packet->Control_Byte) ) >>5;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	78db      	ldrb	r3, [r3, #3]
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]

	    if(BackupMode == Backup_PCCMV_Mode)
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d103      	bne.n	8004fb6 <Split_Mode_Parameter_Packets+0x32>
	    {
	    	Mode = Backup_Pccmv;
 8004fae:	4bae      	ldr	r3, [pc, #696]	; (8005268 <Split_Mode_Parameter_Packets+0x2e4>)
 8004fb0:	2215      	movs	r2, #21
 8004fb2:	701a      	strb	r2, [r3, #0]
 8004fb4:	e003      	b.n	8004fbe <Split_Mode_Parameter_Packets+0x3a>
	    }
	    else
	    {
	    	Mode= Mode_Val;
 8004fb6:	4bab      	ldr	r3, [pc, #684]	; (8005264 <Split_Mode_Parameter_Packets+0x2e0>)
 8004fb8:	781a      	ldrb	r2, [r3, #0]
 8004fba:	4bab      	ldr	r3, [pc, #684]	; (8005268 <Split_Mode_Parameter_Packets+0x2e4>)
 8004fbc:	701a      	strb	r2, [r3, #0]
	    }

	    Device_Control   =  (0x10 & (Receive_Graph_Packet->Control_Byte))>>4;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	78db      	ldrb	r3, [r3, #3]
 8004fc2:	091b      	lsrs	r3, r3, #4
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	4ba7      	ldr	r3, [pc, #668]	; (800526c <Split_Mode_Parameter_Packets+0x2e8>)
 8004fce:	701a      	strb	r2, [r3, #0]
	    if(Device_Control == PAUSE)
 8004fd0:	4ba6      	ldr	r3, [pc, #664]	; (800526c <Split_Mode_Parameter_Packets+0x2e8>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	f040 809e 	bne.w	8005116 <Split_Mode_Parameter_Packets+0x192>
	    {

	    	Running_Mode   = Idle;
 8004fda:	4ba5      	ldr	r3, [pc, #660]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
	    	Run_Current_Breathe_State = No_Run_State;
 8004fe0:	4ba4      	ldr	r3, [pc, #656]	; (8005274 <Split_Mode_Parameter_Packets+0x2f0>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
	    	vTaskSuspend(Vc_Cmv_Handler);
 8004fe6:	4ba4      	ldr	r3, [pc, #656]	; (8005278 <Split_Mode_Parameter_Packets+0x2f4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f016 f862 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(Volume_Control_Task_Handler);
 8004ff0:	4ba2      	ldr	r3, [pc, #648]	; (800527c <Split_Mode_Parameter_Packets+0x2f8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f016 f85d 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(One_Time_Handler);
 8004ffa:	4ba1      	ldr	r3, [pc, #644]	; (8005280 <Split_Mode_Parameter_Packets+0x2fc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f016 f858 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(Oxygen_Blending_Handler);
 8005004:	4b9f      	ldr	r3, [pc, #636]	; (8005284 <Split_Mode_Parameter_Packets+0x300>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f016 f853 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(Pc_Cmv_Handler);
 800500e:	4b9e      	ldr	r3, [pc, #632]	; (8005288 <Split_Mode_Parameter_Packets+0x304>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f016 f84e 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(PIP_Control_Task_Handler);
 8005018:	4b9c      	ldr	r3, [pc, #624]	; (800528c <Split_Mode_Parameter_Packets+0x308>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f016 f849 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 8005022:	4b9b      	ldr	r3, [pc, #620]	; (8005290 <Split_Mode_Parameter_Packets+0x30c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f016 f844 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800502c:	4b99      	ldr	r3, [pc, #612]	; (8005294 <Split_Mode_Parameter_Packets+0x310>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f016 f83f 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 8005036:	4b98      	ldr	r3, [pc, #608]	; (8005298 <Split_Mode_Parameter_Packets+0x314>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f016 f83a 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 8005040:	4b96      	ldr	r3, [pc, #600]	; (800529c <Split_Mode_Parameter_Packets+0x318>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f016 f835 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(BACKUP_PC_Handler);
 800504a:	4b95      	ldr	r3, [pc, #596]	; (80052a0 <Split_Mode_Parameter_Packets+0x31c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f016 f830 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(PSV_Handler);
 8005054:	4b93      	ldr	r3, [pc, #588]	; (80052a4 <Split_Mode_Parameter_Packets+0x320>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f016 f82b 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(PSV_PID_Handler);
 800505e:	4b92      	ldr	r3, [pc, #584]	; (80052a8 <Split_Mode_Parameter_Packets+0x324>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f016 f826 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(CPAP_Handler);
 8005068:	4b90      	ldr	r3, [pc, #576]	; (80052ac <Split_Mode_Parameter_Packets+0x328>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f016 f821 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(BIPAP_Handler);
 8005072:	4b8f      	ldr	r3, [pc, #572]	; (80052b0 <Split_Mode_Parameter_Packets+0x32c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f016 f81c 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(BIPAP_PID_Handler);
 800507c:	4b8d      	ldr	r3, [pc, #564]	; (80052b4 <Split_Mode_Parameter_Packets+0x330>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f016 f817 	bl	801b0b4 <vTaskSuspend>
			vTaskSuspend(APRV_Handler);
 8005086:	4b8c      	ldr	r3, [pc, #560]	; (80052b8 <Split_Mode_Parameter_Packets+0x334>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f016 f812 	bl	801b0b4 <vTaskSuspend>
		    vTaskSuspend(APRV_ONE_TIME_Handler);
 8005090:	4b8a      	ldr	r3, [pc, #552]	; (80052bc <Split_Mode_Parameter_Packets+0x338>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f016 f80d 	bl	801b0b4 <vTaskSuspend>
		    vTaskSuspend(Nebuliser_Handler);
 800509a:	4b89      	ldr	r3, [pc, #548]	; (80052c0 <Split_Mode_Parameter_Packets+0x33c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f016 f808 	bl	801b0b4 <vTaskSuspend>
		    vTaskSuspend(Suction_Handler);
 80050a4:	4b87      	ldr	r3, [pc, #540]	; (80052c4 <Split_Mode_Parameter_Packets+0x340>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f016 f803 	bl	801b0b4 <vTaskSuspend>
		    vTaskSuspend(HFNC_Handler);
 80050ae:	4b86      	ldr	r3, [pc, #536]	; (80052c8 <Split_Mode_Parameter_Packets+0x344>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f015 fffe 	bl	801b0b4 <vTaskSuspend>
			ExpValve_OPEN();
 80050b8:	4b84      	ldr	r3, [pc, #528]	; (80052cc <Split_Mode_Parameter_Packets+0x348>)
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	4a83      	ldr	r2, [pc, #524]	; (80052cc <Split_Mode_Parameter_Packets+0x348>)
 80050be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050c2:	6153      	str	r3, [r2, #20]
			Blower_Signal( 0);
 80050c4:	4b82      	ldr	r3, [pc, #520]	; (80052d0 <Split_Mode_Parameter_Packets+0x34c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
			Parkar_valve_Signal(0);
 80050ca:	4b81      	ldr	r3, [pc, #516]	; (80052d0 <Split_Mode_Parameter_Packets+0x34c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	615a      	str	r2, [r3, #20]
			Nebuliser_OFF();
 80050d0:	4b7e      	ldr	r3, [pc, #504]	; (80052cc <Split_Mode_Parameter_Packets+0x348>)
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	4a7d      	ldr	r2, [pc, #500]	; (80052cc <Split_Mode_Parameter_Packets+0x348>)
 80050d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050da:	6153      	str	r3, [r2, #20]
			Volume_max            = RESET;
 80050dc:	4b7d      	ldr	r3, [pc, #500]	; (80052d4 <Split_Mode_Parameter_Packets+0x350>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
			GRAPH_VALUES.volume   = RESET;
 80050e2:	4b7d      	ldr	r3, [pc, #500]	; (80052d8 <Split_Mode_Parameter_Packets+0x354>)
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	609a      	str	r2, [r3, #8]
		    Blue_Led_ON();
 80050ea:	4b7c      	ldr	r3, [pc, #496]	; (80052dc <Split_Mode_Parameter_Packets+0x358>)
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	4a7b      	ldr	r2, [pc, #492]	; (80052dc <Split_Mode_Parameter_Packets+0x358>)
 80050f0:	f043 0308 	orr.w	r3, r3, #8
 80050f4:	6153      	str	r3, [r2, #20]
		    Red_Led_OFF();
 80050f6:	4b79      	ldr	r3, [pc, #484]	; (80052dc <Split_Mode_Parameter_Packets+0x358>)
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	4a78      	ldr	r2, [pc, #480]	; (80052dc <Split_Mode_Parameter_Packets+0x358>)
 80050fc:	f023 0310 	bic.w	r3, r3, #16
 8005100:	6153      	str	r3, [r2, #20]
		    Green_Led_OFF();
 8005102:	4b76      	ldr	r3, [pc, #472]	; (80052dc <Split_Mode_Parameter_Packets+0x358>)
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	4a75      	ldr	r2, [pc, #468]	; (80052dc <Split_Mode_Parameter_Packets+0x358>)
 8005108:	f023 0320 	bic.w	r3, r3, #32
 800510c:	6153      	str	r3, [r2, #20]
		    OLD.last_vent_type = NO_MODE;
 800510e:	4b74      	ldr	r3, [pc, #464]	; (80052e0 <Split_Mode_Parameter_Packets+0x35c>)
 8005110:	2202      	movs	r2, #2
 8005112:	779a      	strb	r2, [r3, #30]
					default:
				    break;
				}
	    }

}
 8005114:	e0a1      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
	    else if(Device_Control == RESUME)
 8005116:	4b55      	ldr	r3, [pc, #340]	; (800526c <Split_Mode_Parameter_Packets+0x2e8>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 809a 	bne.w	8005254 <Split_Mode_Parameter_Packets+0x2d0>
	    	if(Running_Mode  == Idle)
 8005120:	4b53      	ldr	r3, [pc, #332]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d103      	bne.n	8005130 <Split_Mode_Parameter_Packets+0x1ac>
	    		MPX7002.offset      = MPX7002.current_reading;
 8005128:	4b6e      	ldr	r3, [pc, #440]	; (80052e4 <Split_Mode_Parameter_Packets+0x360>)
 800512a:	899a      	ldrh	r2, [r3, #12]
 800512c:	4b6d      	ldr	r3, [pc, #436]	; (80052e4 <Split_Mode_Parameter_Packets+0x360>)
 800512e:	801a      	strh	r2, [r3, #0]
				switch(Mode)
 8005130:	4b4d      	ldr	r3, [pc, #308]	; (8005268 <Split_Mode_Parameter_Packets+0x2e4>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	3b01      	subs	r3, #1
 8005136:	2b14      	cmp	r3, #20
 8005138:	f200 808e 	bhi.w	8005258 <Split_Mode_Parameter_Packets+0x2d4>
 800513c:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <Split_Mode_Parameter_Packets+0x1c0>)
 800513e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005142:	bf00      	nop
 8005144:	08005199 	.word	0x08005199
 8005148:	080051ad 	.word	0x080051ad
 800514c:	08005259 	.word	0x08005259
 8005150:	08005213 	.word	0x08005213
 8005154:	080051c1 	.word	0x080051c1
 8005158:	080051d5 	.word	0x080051d5
 800515c:	080051e9 	.word	0x080051e9
 8005160:	08005259 	.word	0x08005259
 8005164:	08005259 	.word	0x08005259
 8005168:	08005259 	.word	0x08005259
 800516c:	080051f7 	.word	0x080051f7
 8005170:	08005205 	.word	0x08005205
 8005174:	0800522f 	.word	0x0800522f
 8005178:	08005259 	.word	0x08005259
 800517c:	08005243 	.word	0x08005243
 8005180:	08005259 	.word	0x08005259
 8005184:	08005259 	.word	0x08005259
 8005188:	08005259 	.word	0x08005259
 800518c:	08005259 	.word	0x08005259
 8005190:	08005259 	.word	0x08005259
 8005194:	08005221 	.word	0x08005221
						Running_Mode        = Pccmv;
 8005198:	4b35      	ldr	r3, [pc, #212]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 800519a:	2201      	movs	r2, #1
 800519c:	701a      	strb	r2, [r3, #0]
						Current_Backup_Mode = No_Backup_Mode;
 800519e:	4b52      	ldr	r3, [pc, #328]	; (80052e8 <Split_Mode_Parameter_Packets+0x364>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
						Pc_Cmv_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f008 fc15 	bl	800d9d4 <Pc_Cmv_Mode_Packet_Data>
					break;
 80051aa:	e056      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
						Running_Mode        = Vccmv;
 80051ac:	4b30      	ldr	r3, [pc, #192]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 80051ae:	2202      	movs	r2, #2
 80051b0:	701a      	strb	r2, [r3, #0]
						Current_Backup_Mode = No_Backup_Mode;
 80051b2:	4b4d      	ldr	r3, [pc, #308]	; (80052e8 <Split_Mode_Parameter_Packets+0x364>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]
						Vc_Cmv_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f00e fa93 	bl	80136e4 <Vc_Cmv_Mode_Packet_Data>
					break;
 80051be:	e04c      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
						Running_Mode        = Pcsimv;
 80051c0:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 80051c2:	2205      	movs	r2, #5
 80051c4:	701a      	strb	r2, [r3, #0]
						Current_Backup_Mode = No_Backup_Mode;
 80051c6:	4b48      	ldr	r3, [pc, #288]	; (80052e8 <Split_Mode_Parameter_Packets+0x364>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
						Pc_Simv_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f007 ffd7 	bl	800d180 <Pc_Simv_Mode_Packet_Data>
					break;
 80051d2:	e042      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
						Running_Mode        = Vcsimv;
 80051d4:	4b26      	ldr	r3, [pc, #152]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 80051d6:	2206      	movs	r2, #6
 80051d8:	701a      	strb	r2, [r3, #0]
						Current_Backup_Mode = No_Backup_Mode;
 80051da:	4b43      	ldr	r3, [pc, #268]	; (80052e8 <Split_Mode_Parameter_Packets+0x364>)
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
						Vc_Simv_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f00d fd7d 	bl	8012ce0 <Vc_Simv_Mode_Packet_Data>
					break;
 80051e6:	e038      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
						Running_Mode        = Psv;
 80051e8:	4b21      	ldr	r3, [pc, #132]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 80051ea:	2207      	movs	r2, #7
 80051ec:	701a      	strb	r2, [r3, #0]
						PSV_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f009 fab8 	bl	800e764 <PSV_Mode_Packet_Data>
					break;
 80051f4:	e031      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
						Running_Mode        = Cpap;
 80051f6:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 80051f8:	220b      	movs	r2, #11
 80051fa:	701a      	strb	r2, [r3, #0]
						CPAP_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f001 f917 	bl	8006430 <CPAP_Mode_Packet_Data>
					break;
 8005202:	e02a      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
						BIPAP_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7fe fd71 	bl	8003cec <BIPAP_Mode_Packet_Data>
						Running_Mode        = BiPap;
 800520a:	4b19      	ldr	r3, [pc, #100]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 800520c:	220c      	movs	r2, #12
 800520e:	701a      	strb	r2, [r3, #0]
					break;
 8005210:	e023      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
						Running_Mode        = Aprv;
 8005212:	4b17      	ldr	r3, [pc, #92]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 8005214:	2204      	movs	r2, #4
 8005216:	701a      	strb	r2, [r3, #0]
						APRV_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7fc ff4b 	bl	80020b4 <APRV_Mode_Packet_Data>
					break;
 800521e:	e01c      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
						Current_Backup_Mode  = Backup_PCCMV_Mode;
 8005220:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <Split_Mode_Parameter_Packets+0x364>)
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]
						Backup_Pc_Cmv_Mode_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fd fcf2 	bl	8002c10 <Backup_Pc_Cmv_Mode_Packet_Data>
					break;
 800522c:	e015      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
						Running_Mode        = Hfnc;
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 8005230:	220d      	movs	r2, #13
 8005232:	701a      	strb	r2, [r3, #0]
						Current_Backup_Mode = No_Backup_Mode;
 8005234:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <Split_Mode_Parameter_Packets+0x364>)
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
						 HFNC_Packet_Data((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f003 fa28 	bl	8008690 <HFNC_Packet_Data>
					break;
 8005240:	e00b      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
						 Running_Mode        = Suction;
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <Split_Mode_Parameter_Packets+0x2ec>)
 8005244:	220f      	movs	r2, #15
 8005246:	701a      	strb	r2, [r3, #0]
						 Current_Backup_Mode = No_Backup_Mode;
 8005248:	4b27      	ldr	r3, [pc, #156]	; (80052e8 <Split_Mode_Parameter_Packets+0x364>)
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
						 SUCTION_Packet_Data();
 800524e:	f00c fc2f 	bl	8011ab0 <SUCTION_Packet_Data>
					break;
 8005252:	e002      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
	    }
 8005254:	bf00      	nop
 8005256:	e000      	b.n	800525a <Split_Mode_Parameter_Packets+0x2d6>
				    break;
 8005258:	bf00      	nop
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200126a0 	.word	0x200126a0
 8005268:	200126ba 	.word	0x200126ba
 800526c:	200126bb 	.word	0x200126bb
 8005270:	20012b68 	.word	0x20012b68
 8005274:	20012870 	.word	0x20012870
 8005278:	20012c68 	.word	0x20012c68
 800527c:	20012248 	.word	0x20012248
 8005280:	200129cc 	.word	0x200129cc
 8005284:	200127ac 	.word	0x200127ac
 8005288:	20012874 	.word	0x20012874
 800528c:	200124ec 	.word	0x200124ec
 8005290:	20012638 	.word	0x20012638
 8005294:	20012cb4 	.word	0x20012cb4
 8005298:	20012824 	.word	0x20012824
 800529c:	20012c50 	.word	0x20012c50
 80052a0:	20012500 	.word	0x20012500
 80052a4:	200128a8 	.word	0x200128a8
 80052a8:	200127a8 	.word	0x200127a8
 80052ac:	20012d38 	.word	0x20012d38
 80052b0:	20012364 	.word	0x20012364
 80052b4:	20012b04 	.word	0x20012b04
 80052b8:	20012810 	.word	0x20012810
 80052bc:	20012a84 	.word	0x20012a84
 80052c0:	20012504 	.word	0x20012504
 80052c4:	20012b6c 	.word	0x20012b6c
 80052c8:	2001234c 	.word	0x2001234c
 80052cc:	40020400 	.word	0x40020400
 80052d0:	40007400 	.word	0x40007400
 80052d4:	20012c70 	.word	0x20012c70
 80052d8:	200125f8 	.word	0x200125f8
 80052dc:	40020c00 	.word	0x40020c00
 80052e0:	20012c08 	.word	0x20012c08
 80052e4:	20012dc4 	.word	0x20012dc4
 80052e8:	20012846 	.word	0x20012846

080052ec <chksum8_2>:


uint8_t chksum8_2(const unsigned char *buff, size_t len)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
    unsigned int sum;
    for ( sum = 0 ; len != 0 ; len-- )
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e00a      	b.n	8005312 <chksum8_2+0x26>
        sum += *(buff++);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4413      	add	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
    for ( sum = 0 ; len != 0 ; len-- )
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	3b01      	subs	r3, #1
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f1      	bne.n	80052fc <chksum8_2+0x10>
    return (uint8_t)sum;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	b2db      	uxtb	r3, r3
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <Bluetooth_Packet_Data_Split>:


void Bluetooth_Packet_Data_Split(RECEIVE_GRAPH_PACKET  *Receive_Graph_Packet)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]

	uint8_t RX_CRC8;
	RX_CRC8 = chksum8_2(&(Receive_Graph_Packet-> Control_Byte),( 16 ));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3303      	adds	r3, #3
 8005334:	2110      	movs	r1, #16
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff ffd8 	bl	80052ec <chksum8_2>
 800533c:	4603      	mov	r3, r0
 800533e:	73fb      	strb	r3, [r7, #15]
	if(RX_CRC8 == (Receive_Graph_Packet ->CRC8) )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7cdb      	ldrb	r3, [r3, #19]
 8005344:	7bfa      	ldrb	r2, [r7, #15]
 8005346:	429a      	cmp	r2, r3
 8005348:	d136      	bne.n	80053b8 <Bluetooth_Packet_Data_Split+0x90>
	{
		switch(Receive_Graph_Packet->header)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	f245 422c 	movw	r2, #21548	; 0x542c
 8005352:	4293      	cmp	r3, r2
 8005354:	d028      	beq.n	80053a8 <Bluetooth_Packet_Data_Split+0x80>
 8005356:	f245 422c 	movw	r2, #21548	; 0x542c
 800535a:	4293      	cmp	r3, r2
 800535c:	dc2e      	bgt.n	80053bc <Bluetooth_Packet_Data_Split+0x94>
 800535e:	f245 322c 	movw	r2, #21292	; 0x532c
 8005362:	4293      	cmp	r3, r2
 8005364:	d024      	beq.n	80053b0 <Bluetooth_Packet_Data_Split+0x88>
 8005366:	f245 322c 	movw	r2, #21292	; 0x532c
 800536a:	4293      	cmp	r3, r2
 800536c:	dc26      	bgt.n	80053bc <Bluetooth_Packet_Data_Split+0x94>
 800536e:	f644 522b 	movw	r2, #19755	; 0x4d2b
 8005372:	4293      	cmp	r3, r2
 8005374:	d00c      	beq.n	8005390 <Bluetooth_Packet_Data_Split+0x68>
 8005376:	f644 522b 	movw	r2, #19755	; 0x4d2b
 800537a:	4293      	cmp	r3, r2
 800537c:	dc1e      	bgt.n	80053bc <Bluetooth_Packet_Data_Split+0x94>
 800537e:	f244 122b 	movw	r2, #16683	; 0x412b
 8005382:	4293      	cmp	r3, r2
 8005384:	d008      	beq.n	8005398 <Bluetooth_Packet_Data_Split+0x70>
 8005386:	f244 622b 	movw	r2, #17963	; 0x462b
 800538a:	4293      	cmp	r3, r2
 800538c:	d008      	beq.n	80053a0 <Bluetooth_Packet_Data_Split+0x78>
			break;
			case Receive_Service_Header:
				Split_Service_Packets((SERVICE_PACKET*) (Receive_Graph_Packet));
			break;
			default:
			break;
 800538e:	e015      	b.n	80053bc <Bluetooth_Packet_Data_Split+0x94>
				Split_Mode_Parameter_Packets((RECEIVE_GRAPH_PACKET*) (Receive_Graph_Packet));
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fdf7 	bl	8004f84 <Split_Mode_Parameter_Packets>
			break;
 8005396:	e012      	b.n	80053be <Bluetooth_Packet_Data_Split+0x96>
				Split_Alert_Parameter_Packets((ALERT_RANGE_PACKET*) (Receive_Graph_Packet));
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fb fd83 	bl	8000ea4 <Split_Alert_Parameter_Packets>
			break;
 800539e:	e00e      	b.n	80053be <Bluetooth_Packet_Data_Split+0x96>
				Split_Nebuliser_Packets((NEBULISER_PACKET*) (Receive_Graph_Packet));
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f003 fb35 	bl	8008a10 <Split_Nebuliser_Packets>
			break;
 80053a6:	e00a      	b.n	80053be <Bluetooth_Packet_Data_Split+0x96>
				Split_Calibration_Packets((CALIBRATION_PACKET*) (Receive_Graph_Packet));
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f9df 	bl	800576c <Split_Calibration_Packets>
			break;
 80053ae:	e006      	b.n	80053be <Bluetooth_Packet_Data_Split+0x96>
				Split_Service_Packets((SERVICE_PACKET*) (Receive_Graph_Packet));
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f00c f9eb 	bl	801178c <Split_Service_Packets>
			break;
 80053b6:	e002      	b.n	80053be <Bluetooth_Packet_Data_Split+0x96>
		}
	}
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <Bluetooth_Packet_Data_Split+0x96>
			break;
 80053bc:	bf00      	nop
//			break;
//		}
//	}


}
 80053be:	bf00      	nop
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <Bluetooth_Task>:
 * */

uint8_t Check_Mode;

void Bluetooth_Task(void *argument)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		 switch(Bluetooth_Status)
 80053d0:	4b15      	ldr	r3, [pc, #84]	; (8005428 <Bluetooth_Task+0x60>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d01c      	beq.n	8005412 <Bluetooth_Task+0x4a>
 80053d8:	2b02      	cmp	r3, #2
 80053da:	dc1d      	bgt.n	8005418 <Bluetooth_Task+0x50>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <Bluetooth_Task+0x1e>
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d00a      	beq.n	80053fa <Bluetooth_Task+0x32>
			  break;
		      case Bluetooth_Status_Send_Data:
		    	  Bluetooth_Data_Send();
			  break;
		      default:
		      break;
 80053e4:	e018      	b.n	8005418 <Bluetooth_Task+0x50>
		    	  UART6_Init();
 80053e6:	f000 f827 	bl	8005438 <UART6_Init>
		    	  Bluetooth_Status=Bluetooth_Status_Init;
 80053ea:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <Bluetooth_Task+0x60>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
		    	  Bluetooth_Parameter.Bluetooth_Transmit_Delay=Four_Second_Delay;
 80053f0:	4b0e      	ldr	r3, [pc, #56]	; (800542c <Bluetooth_Task+0x64>)
 80053f2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80053f6:	801a      	strh	r2, [r3, #0]
		      break;
 80053f8:	e00f      	b.n	800541a <Bluetooth_Task+0x52>
		    	  HAL_UART_Receive_IT(&huart6,(uint8_t *) Bluetooth_Parameter.Bluetooth_RX_BUF, sizeof( Bluetooth_Parameter.Bluetooth_RX_BUF));
 80053fa:	2214      	movs	r2, #20
 80053fc:	490c      	ldr	r1, [pc, #48]	; (8005430 <Bluetooth_Task+0x68>)
 80053fe:	480d      	ldr	r0, [pc, #52]	; (8005434 <Bluetooth_Task+0x6c>)
 8005400:	f013 fe1d 	bl	801903e <HAL_UART_Receive_IT>
		    	  Bluetooth_Status                             = Bluetooth_Status_Send_Data;
 8005404:	4b08      	ldr	r3, [pc, #32]	; (8005428 <Bluetooth_Task+0x60>)
 8005406:	2202      	movs	r2, #2
 8005408:	701a      	strb	r2, [r3, #0]
		    	  Bluetooth_Parameter.Bluetooth_Transmit_Delay = Twenty_MilliSecond_Delay;
 800540a:	4b08      	ldr	r3, [pc, #32]	; (800542c <Bluetooth_Task+0x64>)
 800540c:	2214      	movs	r2, #20
 800540e:	801a      	strh	r2, [r3, #0]
			  break;
 8005410:	e003      	b.n	800541a <Bluetooth_Task+0x52>
		    	  Bluetooth_Data_Send();
 8005412:	f000 f8dd 	bl	80055d0 <Bluetooth_Data_Send>
			  break;
 8005416:	e000      	b.n	800541a <Bluetooth_Task+0x52>
		      break;
 8005418:	bf00      	nop
		 }

		 vTaskDelay(Bluetooth_Parameter.Bluetooth_Transmit_Delay);
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <Bluetooth_Task+0x64>)
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f015 fe14 	bl	801b04c <vTaskDelay>
		 switch(Bluetooth_Status)
 8005424:	e7d4      	b.n	80053d0 <Bluetooth_Task+0x8>
 8005426:	bf00      	nop
 8005428:	20012805 	.word	0x20012805
 800542c:	200121e4 	.word	0x200121e4
 8005430:	200121e6 	.word	0x200121e6
 8005434:	20012a40 	.word	0x20012a40

08005438 <UART6_Init>:
 * This Function initialise the uart 6 peripheral.
 * @param None.
 * */

void UART6_Init()
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
	huart6.Instance             = USART6;
 800543c:	4b11      	ldr	r3, [pc, #68]	; (8005484 <UART6_Init+0x4c>)
 800543e:	4a12      	ldr	r2, [pc, #72]	; (8005488 <UART6_Init+0x50>)
 8005440:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate        = 57600;
 8005442:	4b10      	ldr	r3, [pc, #64]	; (8005484 <UART6_Init+0x4c>)
 8005444:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005448:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength      = UART_WORDLENGTH_8B;
 800544a:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <UART6_Init+0x4c>)
 800544c:	2200      	movs	r2, #0
 800544e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits        = UART_STOPBITS_1;
 8005450:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <UART6_Init+0x4c>)
 8005452:	2200      	movs	r2, #0
 8005454:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity          = UART_PARITY_NONE;
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <UART6_Init+0x4c>)
 8005458:	2200      	movs	r2, #0
 800545a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode            = UART_MODE_TX_RX;
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <UART6_Init+0x4c>)
 800545e:	220c      	movs	r2, #12
 8005460:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl       = UART_HWCONTROL_NONE;
 8005462:	4b08      	ldr	r3, [pc, #32]	; (8005484 <UART6_Init+0x4c>)
 8005464:	2200      	movs	r2, #0
 8005466:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling    = UART_OVERSAMPLING_16;
 8005468:	4b06      	ldr	r3, [pc, #24]	; (8005484 <UART6_Init+0x4c>)
 800546a:	2200      	movs	r2, #0
 800546c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 800546e:	4805      	ldr	r0, [pc, #20]	; (8005484 <UART6_Init+0x4c>)
 8005470:	f013 fcc1 	bl	8018df6 <HAL_UART_Init>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <UART6_Init+0x46>
	{
		Error_Handler();
 800547a:	f00f fb33 	bl	8014ae4 <Error_Handler>
	}
}
 800547e:	bf00      	nop
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20012a40 	.word	0x20012a40
 8005488:	40011400 	.word	0x40011400

0800548c <chksum8>:
 * This function is used to identify a data error.
 * */


uint8_t chksum8(const unsigned char *buff, size_t len)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
    unsigned int sum;
    for ( sum = 0 ; len != 0 ; len-- )
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	e00a      	b.n	80054b2 <chksum8+0x26>
        sum += *(buff++);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
    for ( sum = 0 ; len != 0 ; len-- )
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f1      	bne.n	800549c <chksum8+0x10>
    return (uint8_t)sum;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	b2db      	uxtb	r3, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <Bluetooth_Graph_Data_Send>:
 * This Function send the mode graph data.
 * @param None.
 * */

void Bluetooth_Graph_Data_Send()
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
	if( ( !(Device_Control == RESUME))   )
 80054cc:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <Bluetooth_Graph_Data_Send+0xe0>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <Bluetooth_Graph_Data_Send+0x1a>
	{
		GRAPH_VALUES.volume       = RESET;
 80054d4:	4b35      	ldr	r3, [pc, #212]	; (80055ac <Bluetooth_Graph_Data_Send+0xe4>)
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	609a      	str	r2, [r3, #8]
		Volume_max                = RESET;
 80054dc:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <Bluetooth_Graph_Data_Send+0xe8>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
	}
	if(LAST_FLOW_TRIGGER != 0)
 80054e2:	4b34      	ldr	r3, [pc, #208]	; (80055b4 <Bluetooth_Graph_Data_Send+0xec>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <Bluetooth_Graph_Data_Send+0x36>
	{
		GRAPH_VALUES.flow=(int)LAST_FLOW_TRIGGER;
 80054ea:	4b32      	ldr	r3, [pc, #200]	; (80055b4 <Bluetooth_Graph_Data_Send+0xec>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054f6:	4b2d      	ldr	r3, [pc, #180]	; (80055ac <Bluetooth_Graph_Data_Send+0xe4>)
 80054f8:	edc3 7a01 	vstr	s15, [r3, #4]
 80054fc:	e009      	b.n	8005512 <Bluetooth_Graph_Data_Send+0x4a>
	}
	else
	{
		GRAPH_VALUES.flow=(int)GRAPH_VALUES.flow;
 80054fe:	4b2b      	ldr	r3, [pc, #172]	; (80055ac <Bluetooth_Graph_Data_Send+0xe4>)
 8005500:	edd3 7a01 	vldr	s15, [r3, #4]
 8005504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800550c:	4b27      	ldr	r3, [pc, #156]	; (80055ac <Bluetooth_Graph_Data_Send+0xe4>)
 800550e:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	Graph_Data._header          = Send_BlueTooth_Graph_Header;
 8005512:	4b29      	ldr	r3, [pc, #164]	; (80055b8 <Bluetooth_Graph_Data_Send+0xf0>)
 8005514:	f644 422a 	movw	r2, #19498	; 0x4c2a
 8005518:	801a      	strh	r2, [r3, #0]
	Graph_Data._length          = sizeof(Graph_Data)-3 ;
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <Bluetooth_Graph_Data_Send+0xf0>)
 800551c:	2207      	movs	r2, #7
 800551e:	709a      	strb	r2, [r3, #2]
	Graph_Data._Pressure_Val    = GRAPH_VALUES.pressure;
 8005520:	4b22      	ldr	r3, [pc, #136]	; (80055ac <Bluetooth_Graph_Data_Send+0xe4>)
 8005522:	781a      	ldrb	r2, [r3, #0]
 8005524:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <Bluetooth_Graph_Data_Send+0xf0>)
 8005526:	70da      	strb	r2, [r3, #3]
	Graph_Data._Flow_Val        = GRAPH_VALUES.flow;
 8005528:	4b20      	ldr	r3, [pc, #128]	; (80055ac <Bluetooth_Graph_Data_Send+0xe4>)
 800552a:	edd3 7a01 	vldr	s15, [r3, #4]
 800552e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005532:	ee17 3a90 	vmov	r3, s15
 8005536:	b21a      	sxth	r2, r3
 8005538:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <Bluetooth_Graph_Data_Send+0xf0>)
 800553a:	809a      	strh	r2, [r3, #4]
	Graph_Data._Volume_Val      = GRAPH_VALUES.volume;
 800553c:	4b1b      	ldr	r3, [pc, #108]	; (80055ac <Bluetooth_Graph_Data_Send+0xe4>)
 800553e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005546:	ee17 3a90 	vmov	r3, s15
 800554a:	b21a      	sxth	r2, r3
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <Bluetooth_Graph_Data_Send+0xf0>)
 800554e:	80da      	strh	r2, [r3, #6]

	Check_Mode                  = Mode_Val<<4;
 8005550:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <Bluetooth_Graph_Data_Send+0xf4>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	b2da      	uxtb	r2, r3
 8005558:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <Bluetooth_Graph_Data_Send+0xf8>)
 800555a:	701a      	strb	r2, [r3, #0]
	Graph_Data._Status          = Check_Mode|(Device_Control<<3)|BREATH_STATE;
 800555c:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <Bluetooth_Graph_Data_Send+0xe0>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	b25a      	sxtb	r2, r3
 8005564:	4b16      	ldr	r3, [pc, #88]	; (80055c0 <Bluetooth_Graph_Data_Send+0xf8>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	b25b      	sxtb	r3, r3
 800556a:	4313      	orrs	r3, r2
 800556c:	b25a      	sxtb	r2, r3
 800556e:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <Bluetooth_Graph_Data_Send+0xfc>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	b25b      	sxtb	r3, r3
 8005574:	4313      	orrs	r3, r2
 8005576:	b25b      	sxtb	r3, r3
 8005578:	b2da      	uxtb	r2, r3
 800557a:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <Bluetooth_Graph_Data_Send+0xf0>)
 800557c:	721a      	strb	r2, [r3, #8]
	//Graph_Data._Status          = BREATH_STATE;

	Graph_Data._CRC8            = chksum8(&Graph_Data._Pressure_Val,(Graph_Data._length - 1));
 800557e:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <Bluetooth_Graph_Data_Send+0xf0>)
 8005580:	789b      	ldrb	r3, [r3, #2]
 8005582:	3b01      	subs	r3, #1
 8005584:	4619      	mov	r1, r3
 8005586:	4810      	ldr	r0, [pc, #64]	; (80055c8 <Bluetooth_Graph_Data_Send+0x100>)
 8005588:	f7ff ff80 	bl	800548c <chksum8>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	4b09      	ldr	r3, [pc, #36]	; (80055b8 <Bluetooth_Graph_Data_Send+0xf0>)
 8005592:	725a      	strb	r2, [r3, #9]
	LAST_FLOW_TRIGGER           = 0;
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <Bluetooth_Graph_Data_Send+0xec>)
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit_IT(&huart6,(uint8_t*)&Graph_Data,sizeof(Graph_Data));
 800559a:	220a      	movs	r2, #10
 800559c:	4906      	ldr	r1, [pc, #24]	; (80055b8 <Bluetooth_Graph_Data_Send+0xf0>)
 800559e:	480b      	ldr	r0, [pc, #44]	; (80055cc <Bluetooth_Graph_Data_Send+0x104>)
 80055a0:	f013 fd08 	bl	8018fb4 <HAL_UART_Transmit_IT>

}
 80055a4:	bf00      	nop
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	200126bb 	.word	0x200126bb
 80055ac:	200125f8 	.word	0x200125f8
 80055b0:	20012c70 	.word	0x20012c70
 80055b4:	20012b70 	.word	0x20012b70
 80055b8:	20012478 	.word	0x20012478
 80055bc:	200126a0 	.word	0x200126a0
 80055c0:	20012d3c 	.word	0x20012d3c
 80055c4:	20012a3c 	.word	0x20012a3c
 80055c8:	2001247b 	.word	0x2001247b
 80055cc:	20012a40 	.word	0x20012a40

080055d0 <Bluetooth_Data_Send>:
 * This function controls the type of Bluetooth data that needs to be sent at a time.
 * @param None.
 * */

void Bluetooth_Data_Send()
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0


	switch (Send_Bluetooth_Data_Farme)
 80055d4:	4b2f      	ldr	r3, [pc, #188]	; (8005694 <Bluetooth_Data_Send+0xc4>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d858      	bhi.n	800568e <Bluetooth_Data_Send+0xbe>
 80055dc:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <Bluetooth_Data_Send+0x14>)
 80055de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e2:	bf00      	nop
 80055e4:	08005687 	.word	0x08005687
 80055e8:	0800562d 	.word	0x0800562d
 80055ec:	08005621 	.word	0x08005621
 80055f0:	080055f9 	.word	0x080055f9
 80055f4:	08005627 	.word	0x08005627
	{
        case SEND_SAMPLED_PARAMETER_FRAME:
        		switch (Send_Frame)
 80055f8:	4b27      	ldr	r3, [pc, #156]	; (8005698 <Bluetooth_Data_Send+0xc8>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d10d      	bne.n	800561c <Bluetooth_Data_Send+0x4c>
			    {
        		    case First_Frame:
        		    	Sampled_Parameter_List_1_Transmit();
 8005600:	f00c fb06 	bl	8011c10 <Sampled_Parameter_List_1_Transmit>
        		    	if(Running_Mode != Hfnc)
 8005604:	4b25      	ldr	r3, [pc, #148]	; (800569c <Bluetooth_Data_Send+0xcc>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b0d      	cmp	r3, #13
 800560a:	d003      	beq.n	8005614 <Bluetooth_Data_Send+0x44>
        		    		Send_Bluetooth_Data_Farme = SEND_ALERT_FRAME;
 800560c:	4b21      	ldr	r3, [pc, #132]	; (8005694 <Bluetooth_Data_Send+0xc4>)
 800560e:	2201      	movs	r2, #1
 8005610:	701a      	strb	r2, [r3, #0]
        		    	else
        		    		Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
        		    break;
 8005612:	e004      	b.n	800561e <Bluetooth_Data_Send+0x4e>
        		    		Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 8005614:	4b1f      	ldr	r3, [pc, #124]	; (8005694 <Bluetooth_Data_Send+0xc4>)
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
        		    break;
 800561a:	e000      	b.n	800561e <Bluetooth_Data_Send+0x4e>
        		    default:
        		    break;
 800561c:	bf00      	nop

			    }

        break;
 800561e:	e036      	b.n	800568e <Bluetooth_Data_Send+0xbe>
		case SEND_CALIBRATION_FRAME:
			Send_Calibrated_Packet();
 8005620:	f000 f910 	bl	8005844 <Send_Calibrated_Packet>
		break;
 8005624:	e033      	b.n	800568e <Bluetooth_Data_Send+0xbe>
		case SEND_SERVICE_FRAME:
			Send_Serviced_Packet();
 8005626:	f00c f911 	bl	801184c <Send_Serviced_Packet>
		break;
 800562a:	e030      	b.n	800568e <Bluetooth_Data_Send+0xbe>
		case SEND_ALERT_FRAME:
			switch (Apnea_Alert)
 800562c:	4b1c      	ldr	r3, [pc, #112]	; (80056a0 <Bluetooth_Data_Send+0xd0>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d014      	beq.n	800565e <Bluetooth_Data_Send+0x8e>
 8005634:	2b01      	cmp	r3, #1
 8005636:	d129      	bne.n	800568c <Bluetooth_Data_Send+0xbc>
			{

				  case APNEA_ALERT_HAPPEN:
					  SEND_ALERT_PACKET();
 8005638:	f7fb fc76 	bl	8000f28 <SEND_ALERT_PACKET>
					  CLEAR_ALERT_BIT(SECOND_FRAME_UN,_ALERT_APNEA);
 800563c:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <Bluetooth_Data_Send+0xd4>)
 800563e:	7913      	ldrb	r3, [r2, #4]
 8005640:	f36f 0300 	bfc	r3, #0, #1
 8005644:	7113      	strb	r3, [r2, #4]
					  CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8005646:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <Bluetooth_Data_Send+0xd4>)
 8005648:	78d3      	ldrb	r3, [r2, #3]
 800564a:	f36f 1304 	bfc	r3, #4, #1
 800564e:	70d3      	strb	r3, [r2, #3]
					  Apnea_Alert               = NO_APNEA_ALERT_HAPPEN;
 8005650:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <Bluetooth_Data_Send+0xd0>)
 8005652:	2200      	movs	r2, #0
 8005654:	701a      	strb	r2, [r3, #0]
					  Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 8005656:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <Bluetooth_Data_Send+0xc4>)
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
				  break;
 800565c:	e012      	b.n	8005684 <Bluetooth_Data_Send+0xb4>
				  case NO_APNEA_ALERT_HAPPEN:
					switch (Mode)
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <Bluetooth_Data_Send+0xd8>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d105      	bne.n	8005672 <Bluetooth_Data_Send+0xa2>
					{
						case Idle:
							SEND_ALERT_PACKET();
 8005666:	f7fb fc5f 	bl	8000f28 <SEND_ALERT_PACKET>
							Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 800566a:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <Bluetooth_Data_Send+0xc4>)
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
						break;
 8005670:	e007      	b.n	8005682 <Bluetooth_Data_Send+0xb2>
						default:
							SEND_ALERT_PACKET();
 8005672:	f7fb fc59 	bl	8000f28 <SEND_ALERT_PACKET>
							Clear_All_Alert_Bits();
 8005676:	f7fb fc7d 	bl	8000f74 <Clear_All_Alert_Bits>
							//Send_Bluetooth_Data_Farme = SEND_SAMPLED_PARAMETER_FRAME;       //new
							Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <Bluetooth_Data_Send+0xc4>)
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
						break;
 8005680:	bf00      	nop

					}
				  break;
 8005682:	bf00      	nop
			 }


		break;
 8005684:	e002      	b.n	800568c <Bluetooth_Data_Send+0xbc>
		case SEND_GRAPH_FRAME:
			Bluetooth_Graph_Data_Send();
 8005686:	f7ff ff1f 	bl	80054c8 <Bluetooth_Graph_Data_Send>
		break;
 800568a:	e000      	b.n	800568e <Bluetooth_Data_Send+0xbe>
		break;
 800568c:	bf00      	nop
	}
}
 800568e:	bf00      	nop
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	2001269d 	.word	0x2001269d
 8005698:	20012770 	.word	0x20012770
 800569c:	20012b68 	.word	0x20012b68
 80056a0:	200129f5 	.word	0x200129f5
 80056a4:	20012408 	.word	0x20012408
 80056a8:	200126ba 	.word	0x200126ba

080056ac <BlueTooth_Receiver_Task>:
 * @post this function resume the Bluetooth_data_split_Task.
 * */


void BlueTooth_Receiver_Task(void *argument)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xQueueReceive(Bluetooth_Receive, &(Bluetooth_Parameter.Bluetooth_RX_BUF), portMAX_DELAY) == pdTRUE)
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <BlueTooth_Receiver_Task+0x38>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f04f 32ff 	mov.w	r2, #4294967295
 80056bc:	490a      	ldr	r1, [pc, #40]	; (80056e8 <BlueTooth_Receiver_Task+0x3c>)
 80056be:	4618      	mov	r0, r3
 80056c0:	f014 ff2e 	bl	801a520 <xQueueReceive>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d1f4      	bne.n	80056b4 <BlueTooth_Receiver_Task+0x8>
		{
			Uart_Receive_Debug_Toggle_Led();
 80056ca:	4b08      	ldr	r3, [pc, #32]	; (80056ec <BlueTooth_Receiver_Task+0x40>)
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	4a07      	ldr	r2, [pc, #28]	; (80056ec <BlueTooth_Receiver_Task+0x40>)
 80056d0:	f083 0302 	eor.w	r3, r3, #2
 80056d4:	6153      	str	r3, [r2, #20]
			vTaskResume(Bluetooth_data_Split_Handler);
 80056d6:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <BlueTooth_Receiver_Task+0x44>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f015 fdae 	bl	801b23c <vTaskResume>
		if (xQueueReceive(Bluetooth_Receive, &(Bluetooth_Parameter.Bluetooth_RX_BUF), portMAX_DELAY) == pdTRUE)
 80056e0:	e7e8      	b.n	80056b4 <BlueTooth_Receiver_Task+0x8>
 80056e2:	bf00      	nop
 80056e4:	200123c0 	.word	0x200123c0
 80056e8:	200121e6 	.word	0x200121e6
 80056ec:	40020c00 	.word	0x40020c00
 80056f0:	20012848 	.word	0x20012848

080056f4 <Bluetooth_data_split_Task>:
 * This function calls from the BlueTooth_Receiver_Task.
 * @post it split the data after the function call.
 * */

void Bluetooth_data_split_Task (void *argument)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	while (1)
	{
		Bluetooth_Packet_Data_Split((RECEIVE_GRAPH_PACKET*) (Bluetooth_Parameter.Bluetooth_RX_BUF));
 80056fc:	4804      	ldr	r0, [pc, #16]	; (8005710 <Bluetooth_data_split_Task+0x1c>)
 80056fe:	f7ff fe13 	bl	8005328 <Bluetooth_Packet_Data_Split>
		vTaskSuspend(Bluetooth_data_Split_Handler);
 8005702:	4b04      	ldr	r3, [pc, #16]	; (8005714 <Bluetooth_data_split_Task+0x20>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f015 fcd4 	bl	801b0b4 <vTaskSuspend>
		Bluetooth_Packet_Data_Split((RECEIVE_GRAPH_PACKET*) (Bluetooth_Parameter.Bluetooth_RX_BUF));
 800570c:	e7f6      	b.n	80056fc <Bluetooth_data_split_Task+0x8>
 800570e:	bf00      	nop
 8005710:	200121e6 	.word	0x200121e6
 8005714:	20012848 	.word	0x20012848

08005718 <HAL_UART_RxCpltCallback>:
 * @brief HAL_UART_RxCpltCallback.
 * This is an interrupt function call from UART6..
 * @param uart6.
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart6,(uint8_t *) (Bluetooth_Parameter.Bluetooth_RX_BUF), sizeof( Bluetooth_Parameter.Bluetooth_RX_BUF));
 8005720:	2214      	movs	r2, #20
 8005722:	490e      	ldr	r1, [pc, #56]	; (800575c <HAL_UART_RxCpltCallback+0x44>)
 8005724:	480e      	ldr	r0, [pc, #56]	; (8005760 <HAL_UART_RxCpltCallback+0x48>)
 8005726:	f013 fc8a 	bl	801903e <HAL_UART_Receive_IT>
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
	xQueueSendToFrontFromISR(Bluetooth_Receive, &(Bluetooth_Parameter.Bluetooth_RX_BUF), &xHigherPriorityTaskWoken);
 800572e:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <HAL_UART_RxCpltCallback+0x4c>)
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	f107 020c 	add.w	r2, r7, #12
 8005736:	2301      	movs	r3, #1
 8005738:	4908      	ldr	r1, [pc, #32]	; (800575c <HAL_UART_RxCpltCallback+0x44>)
 800573a:	f014 fe55 	bl	801a3e8 <xQueueGenericSendFromISR>
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <HAL_UART_RxCpltCallback+0x3c>
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <HAL_UART_RxCpltCallback+0x50>)
 8005746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	f3bf 8f6f 	isb	sy
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	200121e6 	.word	0x200121e6
 8005760:	20012a40 	.word	0x20012a40
 8005764:	200123c0 	.word	0x200123c0
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <Split_Calibration_Packets>:
uint16_t Old_offset;



void Split_Calibration_Packets(CALIBRATION_PACKET * Receive_Graph_Packet)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	CALIBRARTION.BLOWER                  =  (Receive_Graph_Packet->BLOWER_CALIBRATION);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	78da      	ldrb	r2, [r3, #3]
 8005778:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <Split_Calibration_Packets+0x84>)
 800577a:	701a      	strb	r2, [r3, #0]
	CALIBRARTION.PRESSURE_SENSOR         =  (Receive_Graph_Packet->PRESSURE_SENSOR_CALIBRATION);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	791a      	ldrb	r2, [r3, #4]
 8005780:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <Split_Calibration_Packets+0x84>)
 8005782:	705a      	strb	r2, [r3, #1]
	CALIBRARTION.FLOW_SENSOR_7002        =  (Receive_Graph_Packet->FLOW_SENSOR_7002_CALIBRATION);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	795a      	ldrb	r2, [r3, #5]
 8005788:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <Split_Calibration_Packets+0x84>)
 800578a:	709a      	strb	r2, [r3, #2]
	CALIBRARTION.VALVE_LEAK_TEST         =  (Receive_Graph_Packet->VALVE_LEAK_TEST_CALIBRATION);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	799a      	ldrb	r2, [r3, #6]
 8005790:	4b17      	ldr	r3, [pc, #92]	; (80057f0 <Split_Calibration_Packets+0x84>)
 8005792:	70da      	strb	r2, [r3, #3]
	CALIBRARTION.O2_CHECK                =  (Receive_Graph_Packet->O2_CHECK_CALIBRATION);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	79da      	ldrb	r2, [r3, #7]
 8005798:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <Split_Calibration_Packets+0x84>)
 800579a:	711a      	strb	r2, [r3, #4]
	CALIBRARTION.ALARAM_TEST             =  (Receive_Graph_Packet->LED_ALARAM_CALIBRATION);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	7a1a      	ldrb	r2, [r3, #8]
 80057a0:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <Split_Calibration_Packets+0x84>)
 80057a2:	715a      	strb	r2, [r3, #5]
	CALIBRARTION.BATTERY_TEST            =  (Receive_Graph_Packet->BATTERY_CALIBRATION);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	7a5a      	ldrb	r2, [r3, #9]
 80057a8:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <Split_Calibration_Packets+0x84>)
 80057aa:	719a      	strb	r2, [r3, #6]
	CALIBRARTION.SENSOR_OFFSET_TEST      =  (Receive_Graph_Packet->SENSOR_OFFSET_CALIBRATION);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	7a9a      	ldrb	r2, [r3, #10]
 80057b0:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <Split_Calibration_Packets+0x84>)
 80057b2:	71da      	strb	r2, [r3, #7]
	CALIBRARTION.O2_SENSOR_100_PER_TEST  =  (Receive_Graph_Packet->O2_SENSOR_100_PER_CALIBRATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	7ada      	ldrb	r2, [r3, #11]
 80057b8:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <Split_Calibration_Packets+0x84>)
 80057ba:	721a      	strb	r2, [r3, #8]
    Device_Monitoring                    =  YES;
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <Split_Calibration_Packets+0x88>)
 80057be:	2201      	movs	r2, #1
 80057c0:	701a      	strb	r2, [r3, #0]

	Max_Flow = 0;
 80057c2:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <Split_Calibration_Packets+0x8c>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
	Min_Flow = 0;
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <Split_Calibration_Packets+0x90>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

	 if(CALIBRARTION.O2_CHECK == 1)
 80057ce:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <Split_Calibration_Packets+0x84>)
 80057d0:	791b      	ldrb	r3, [r3, #4]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d102      	bne.n	80057dc <Split_Calibration_Packets+0x70>
	 {
		 Step=1;
 80057d6:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <Split_Calibration_Packets+0x94>)
 80057d8:	2201      	movs	r2, #1
 80057da:	701a      	strb	r2, [r3, #0]

	 }
	vTaskResume(Calibration_Handler);
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <Split_Calibration_Packets+0x98>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f015 fd2b 	bl	801b23c <vTaskResume>
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200126bc 	.word	0x200126bc
 80057f4:	20012640 	.word	0x20012640
 80057f8:	200129a4 	.word	0x200129a4
 80057fc:	200129c8 	.word	0x200129c8
 8005800:	20000006 	.word	0x20000006
 8005804:	2001298c 	.word	0x2001298c

08005808 <chksum8_cal>:



uint8_t chksum8_cal(const unsigned char *buff, size_t len)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
    unsigned int sum;
    for ( sum = 0 ; len != 0 ; len-- )
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e00a      	b.n	800582e <chksum8_cal+0x26>
        sum += *(buff++);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	607a      	str	r2, [r7, #4]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
    for ( sum = 0 ; len != 0 ; len-- )
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	3b01      	subs	r3, #1
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1f1      	bne.n	8005818 <chksum8_cal+0x10>
    return (uint8_t)sum;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	b2db      	uxtb	r3, r3
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <Send_Calibrated_Packet>:


void Send_Calibrated_Packet()
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0

	SEND_CALIBRATION_PACKET._header = Send_BlueTooth_Calibration_Header;
 8005848:	4b10      	ldr	r3, [pc, #64]	; (800588c <Send_Calibrated_Packet+0x48>)
 800584a:	2200      	movs	r2, #0
 800584c:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	2200      	movs	r2, #0
 8005854:	f042 0254 	orr.w	r2, r2, #84	; 0x54
 8005858:	705a      	strb	r2, [r3, #1]
	SEND_CALIBRATION_PACKET._length = 7;
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <Send_Calibrated_Packet+0x48>)
 800585c:	2207      	movs	r2, #7
 800585e:	709a      	strb	r2, [r3, #2]
	SEND_CALIBRATION_PACKET._CRC8   = chksum8_cal((unsigned char*)&SEND_CALIBRATION_PACKET.PASS_FAIL,(SEND_CALIBRATION_PACKET._length-1));
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <Send_Calibrated_Packet+0x48>)
 8005862:	789b      	ldrb	r3, [r3, #2]
 8005864:	3b01      	subs	r3, #1
 8005866:	4619      	mov	r1, r3
 8005868:	4809      	ldr	r0, [pc, #36]	; (8005890 <Send_Calibrated_Packet+0x4c>)
 800586a:	f7ff ffcd 	bl	8005808 <chksum8_cal>
 800586e:	4603      	mov	r3, r0
 8005870:	461a      	mov	r2, r3
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <Send_Calibrated_Packet+0x48>)
 8005874:	725a      	strb	r2, [r3, #9]
	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&SEND_CALIBRATION_PACKET,sizeof(SEND_CALIBRATION_PACKET));
 8005876:	220a      	movs	r2, #10
 8005878:	4904      	ldr	r1, [pc, #16]	; (800588c <Send_Calibrated_Packet+0x48>)
 800587a:	4806      	ldr	r0, [pc, #24]	; (8005894 <Send_Calibrated_Packet+0x50>)
 800587c:	f013 fb9a 	bl	8018fb4 <HAL_UART_Transmit_IT>
	Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <Send_Calibrated_Packet+0x54>)
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]

}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	200122ac 	.word	0x200122ac
 8005890:	200122af 	.word	0x200122af
 8005894:	20012a40 	.word	0x20012a40
 8005898:	2001269d 	.word	0x2001269d

0800589c <CALIBRATION_Task>:

void CALIBRATION_Task(void *argument)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

	while(1)
	{

		if(CALIBRARTION.BLOWER  == START )
 80058a4:	4b22      	ldr	r3, [pc, #136]	; (8005930 <CALIBRATION_Task+0x94>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d102      	bne.n	80058b2 <CALIBRATION_Task+0x16>
		{
			Blower_Calibration();
 80058ac:	f000 f844 	bl	8005938 <Blower_Calibration>
 80058b0:	e039      	b.n	8005926 <CALIBRATION_Task+0x8a>
		}
		else if(CALIBRARTION.PRESSURE_SENSOR == START)
 80058b2:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <CALIBRATION_Task+0x94>)
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d102      	bne.n	80058c0 <CALIBRATION_Task+0x24>
		{
			Pressure_Sensor_Calibration();
 80058ba:	f000 f8d3 	bl	8005a64 <Pressure_Sensor_Calibration>
 80058be:	e032      	b.n	8005926 <CALIBRATION_Task+0x8a>
		}
		else if(CALIBRARTION.FLOW_SENSOR_7002 == START)
 80058c0:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <CALIBRATION_Task+0x94>)
 80058c2:	789b      	ldrb	r3, [r3, #2]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d102      	bne.n	80058ce <CALIBRATION_Task+0x32>
		{
			Flow_Sensor_7002_Calibration();
 80058c8:	f000 f96a 	bl	8005ba0 <Flow_Sensor_7002_Calibration>
 80058cc:	e02b      	b.n	8005926 <CALIBRATION_Task+0x8a>
		}
		else if(CALIBRARTION.VALVE_LEAK_TEST == START)
 80058ce:	4b18      	ldr	r3, [pc, #96]	; (8005930 <CALIBRATION_Task+0x94>)
 80058d0:	78db      	ldrb	r3, [r3, #3]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d102      	bne.n	80058dc <CALIBRATION_Task+0x40>
		{
			Expiratory_Valve_Leak_Calibration();
 80058d6:	f000 fa07 	bl	8005ce8 <Expiratory_Valve_Leak_Calibration>
 80058da:	e024      	b.n	8005926 <CALIBRATION_Task+0x8a>
		}
		else if(CALIBRARTION.O2_CHECK == START)
 80058dc:	4b14      	ldr	r3, [pc, #80]	; (8005930 <CALIBRATION_Task+0x94>)
 80058de:	791b      	ldrb	r3, [r3, #4]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d102      	bne.n	80058ea <CALIBRATION_Task+0x4e>
		{
			Oxygen_blending_Calibration();
 80058e4:	f000 fc3c 	bl	8006160 <Oxygen_blending_Calibration>
 80058e8:	e01d      	b.n	8005926 <CALIBRATION_Task+0x8a>
		}
		else if(CALIBRARTION.ALARAM_TEST == START)
 80058ea:	4b11      	ldr	r3, [pc, #68]	; (8005930 <CALIBRATION_Task+0x94>)
 80058ec:	795b      	ldrb	r3, [r3, #5]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d102      	bne.n	80058f8 <CALIBRATION_Task+0x5c>
		{
			Led_Buzzer_Calibration();
 80058f2:	f000 faf3 	bl	8005edc <Led_Buzzer_Calibration>
 80058f6:	e016      	b.n	8005926 <CALIBRATION_Task+0x8a>
		}
		else if(CALIBRARTION.BATTERY_TEST == START)
 80058f8:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <CALIBRATION_Task+0x94>)
 80058fa:	799b      	ldrb	r3, [r3, #6]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d102      	bne.n	8005906 <CALIBRATION_Task+0x6a>
		{
			Battery_Calibration();
 8005900:	f000 fb8e 	bl	8006020 <Battery_Calibration>
 8005904:	e00f      	b.n	8005926 <CALIBRATION_Task+0x8a>
		}
		else if(CALIBRARTION.SENSOR_OFFSET_TEST == START)
 8005906:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <CALIBRATION_Task+0x94>)
 8005908:	79db      	ldrb	r3, [r3, #7]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d102      	bne.n	8005914 <CALIBRATION_Task+0x78>
		{
			Sensor_Voltage_Transmit();
 800590e:	f000 fbe3 	bl	80060d8 <Sensor_Voltage_Transmit>
 8005912:	e008      	b.n	8005926 <CALIBRATION_Task+0x8a>
		}
		else if(CALIBRARTION.O2_SENSOR_100_PER_TEST == START)
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <CALIBRATION_Task+0x94>)
 8005916:	7a1b      	ldrb	r3, [r3, #8]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d104      	bne.n	8005926 <CALIBRATION_Task+0x8a>
		{
			 vTaskResume(O2_Calibration_Handler);
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <CALIBRATION_Task+0x98>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f015 fc8b 	bl	801b23c <vTaskResume>
		}


		vTaskDelay(2);
 8005926:	2002      	movs	r0, #2
 8005928:	f015 fb90 	bl	801b04c <vTaskDelay>
		if(CALIBRARTION.BLOWER  == START )
 800592c:	e7ba      	b.n	80058a4 <CALIBRATION_Task+0x8>
 800592e:	bf00      	nop
 8005930:	200126bc 	.word	0x200126bc
 8005934:	20012774 	.word	0x20012774

08005938 <Blower_Calibration>:
}



void Blower_Calibration()
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0

	Count++;
 800593c:	4b3e      	ldr	r3, [pc, #248]	; (8005a38 <Blower_Calibration+0x100>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	4a3d      	ldr	r2, [pc, #244]	; (8005a38 <Blower_Calibration+0x100>)
 8005944:	6013      	str	r3, [r2, #0]
    Blower_ON();
 8005946:	4b3d      	ldr	r3, [pc, #244]	; (8005a3c <Blower_Calibration+0x104>)
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	4a3c      	ldr	r2, [pc, #240]	; (8005a3c <Blower_Calibration+0x104>)
 800594c:	f043 0320 	orr.w	r3, r3, #32
 8005950:	6153      	str	r3, [r2, #20]
    ExpValve_CLOSE();
 8005952:	4b3b      	ldr	r3, [pc, #236]	; (8005a40 <Blower_Calibration+0x108>)
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	4a3a      	ldr	r2, [pc, #232]	; (8005a40 <Blower_Calibration+0x108>)
 8005958:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800595c:	6153      	str	r3, [r2, #20]
	Blower_Signal(4095);
 800595e:	4b39      	ldr	r3, [pc, #228]	; (8005a44 <Blower_Calibration+0x10c>)
 8005960:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005964:	609a      	str	r2, [r3, #8]
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);             // start blower Rpm
 8005966:	2100      	movs	r1, #0
 8005968:	4837      	ldr	r0, [pc, #220]	; (8005a48 <Blower_Calibration+0x110>)
 800596a:	f012 fe65 	bl	8018638 <HAL_TIM_IC_Start_IT>
	SEND_CALIBRATION_PACKET.RESULT              = GRAPH_VALUES.pressure;
 800596e:	4b37      	ldr	r3, [pc, #220]	; (8005a4c <Blower_Calibration+0x114>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	b29a      	uxth	r2, r3
 8005974:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <Blower_Calibration+0x118>)
 8005976:	80da      	strh	r2, [r3, #6]
	 if(Count > 1500)
 8005978:	4b2f      	ldr	r3, [pc, #188]	; (8005a38 <Blower_Calibration+0x100>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005980:	4293      	cmp	r3, r2
 8005982:	dd56      	ble.n	8005a32 <Blower_Calibration+0xfa>
				vTaskDelay(Twenty_MilliSecond_Delay);
				Count                                       = RESET;
				CALIBRARTION.BLOWER                         = STOP;
				vTaskSuspend(Calibration_Handler);
		 }*/
		 if ((GRAPH_VALUES.pressure >=60)  )
 8005984:	4b31      	ldr	r3, [pc, #196]	; (8005a4c <Blower_Calibration+0x114>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b3b      	cmp	r3, #59	; 0x3b
 800598a:	d929      	bls.n	80059e0 <Blower_Calibration+0xa8>
		 {
				SEND_CALIBRATION_PACKET.RESULT              = GRAPH_VALUES.pressure ;
 800598c:	4b2f      	ldr	r3, [pc, #188]	; (8005a4c <Blower_Calibration+0x114>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b29a      	uxth	r2, r3
 8005992:	4b2f      	ldr	r3, [pc, #188]	; (8005a50 <Blower_Calibration+0x118>)
 8005994:	80da      	strh	r2, [r3, #6]
				Blower_Signal(0);
 8005996:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <Blower_Calibration+0x10c>)
 8005998:	2200      	movs	r2, #0
 800599a:	609a      	str	r2, [r3, #8]
				ExpValve_OPEN();
 800599c:	4b28      	ldr	r3, [pc, #160]	; (8005a40 <Blower_Calibration+0x108>)
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	4a27      	ldr	r2, [pc, #156]	; (8005a40 <Blower_Calibration+0x108>)
 80059a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059a6:	6153      	str	r3, [r2, #20]
				vTaskDelay(2000);
 80059a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059ac:	f015 fb4e 	bl	801b04c <vTaskDelay>
				SEND_CALIBRATION_PACKET.PASS_FAIL              = CALIBRATION_PASS ;
 80059b0:	4b27      	ldr	r3, [pc, #156]	; (8005a50 <Blower_Calibration+0x118>)
 80059b2:	22ff      	movs	r2, #255	; 0xff
 80059b4:	70da      	strb	r2, [r3, #3]
				Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 80059b6:	4b27      	ldr	r3, [pc, #156]	; (8005a54 <Blower_Calibration+0x11c>)
 80059b8:	2202      	movs	r2, #2
 80059ba:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Twenty_MilliSecond_Delay);
 80059bc:	2014      	movs	r0, #20
 80059be:	f015 fb45 	bl	801b04c <vTaskDelay>
				Count                                       = RESET;
 80059c2:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <Blower_Calibration+0x100>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
				CALIBRARTION.BLOWER                         = STOP;
 80059c8:	4b23      	ldr	r3, [pc, #140]	; (8005a58 <Blower_Calibration+0x120>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
				Device_Monitoring                           =  NO;
 80059ce:	4b23      	ldr	r3, [pc, #140]	; (8005a5c <Blower_Calibration+0x124>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
				vTaskSuspend(Calibration_Handler);
 80059d4:	4b22      	ldr	r3, [pc, #136]	; (8005a60 <Blower_Calibration+0x128>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f015 fb6b 	bl	801b0b4 <vTaskSuspend>
				Device_Monitoring                           =  NO;
				vTaskSuspend(Calibration_Handler);
		 }

	  }
}
 80059de:	e028      	b.n	8005a32 <Blower_Calibration+0xfa>
				SEND_CALIBRATION_PACKET.RESULT              = GRAPH_VALUES.pressure ;
 80059e0:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <Blower_Calibration+0x114>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <Blower_Calibration+0x118>)
 80059e8:	80da      	strh	r2, [r3, #6]
				Blower_Signal(0);
 80059ea:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <Blower_Calibration+0x10c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	609a      	str	r2, [r3, #8]
				ExpValve_OPEN();
 80059f0:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <Blower_Calibration+0x108>)
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	4a12      	ldr	r2, [pc, #72]	; (8005a40 <Blower_Calibration+0x108>)
 80059f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059fa:	6153      	str	r3, [r2, #20]
				vTaskDelay(2000);
 80059fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005a00:	f015 fb24 	bl	801b04c <vTaskDelay>
				SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 8005a04:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <Blower_Calibration+0x118>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	70da      	strb	r2, [r3, #3]
				Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <Blower_Calibration+0x11c>)
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Twenty_MilliSecond_Delay);
 8005a10:	2014      	movs	r0, #20
 8005a12:	f015 fb1b 	bl	801b04c <vTaskDelay>
				Count                                       = RESET;
 8005a16:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <Blower_Calibration+0x100>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
				CALIBRARTION.BLOWER                         = STOP;
 8005a1c:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <Blower_Calibration+0x120>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
				Device_Monitoring                           =  NO;
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <Blower_Calibration+0x124>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
				vTaskSuspend(Calibration_Handler);
 8005a28:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <Blower_Calibration+0x128>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f015 fb41 	bl	801b0b4 <vTaskSuspend>
}
 8005a32:	bf00      	nop
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	200000a4 	.word	0x200000a4
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	40020400 	.word	0x40020400
 8005a44:	40007400 	.word	0x40007400
 8005a48:	20012644 	.word	0x20012644
 8005a4c:	200125f8 	.word	0x200125f8
 8005a50:	200122ac 	.word	0x200122ac
 8005a54:	2001269d 	.word	0x2001269d
 8005a58:	200126bc 	.word	0x200126bc
 8005a5c:	20012640 	.word	0x20012640
 8005a60:	2001298c 	.word	0x2001298c

08005a64 <Pressure_Sensor_Calibration>:



void Pressure_Sensor_Calibration()
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
	if(GRAPH_VALUES.pressure<60)
 8005a68:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <Pressure_Sensor_Calibration+0x110>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b3b      	cmp	r3, #59	; 0x3b
 8005a6e:	d81a      	bhi.n	8005aa6 <Pressure_Sensor_Calibration+0x42>
	{
		Count++;
 8005a70:	4b41      	ldr	r3, [pc, #260]	; (8005b78 <Pressure_Sensor_Calibration+0x114>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a40      	ldr	r2, [pc, #256]	; (8005b78 <Pressure_Sensor_Calibration+0x114>)
 8005a78:	6013      	str	r3, [r2, #0]
		Blower_ON();
 8005a7a:	4b40      	ldr	r3, [pc, #256]	; (8005b7c <Pressure_Sensor_Calibration+0x118>)
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	4a3f      	ldr	r2, [pc, #252]	; (8005b7c <Pressure_Sensor_Calibration+0x118>)
 8005a80:	f043 0320 	orr.w	r3, r3, #32
 8005a84:	6153      	str	r3, [r2, #20]
		ExpValve_CLOSE();
 8005a86:	4b3e      	ldr	r3, [pc, #248]	; (8005b80 <Pressure_Sensor_Calibration+0x11c>)
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	4a3d      	ldr	r2, [pc, #244]	; (8005b80 <Pressure_Sensor_Calibration+0x11c>)
 8005a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a90:	6153      	str	r3, [r2, #20]
		Blower_Signal(4095);
 8005a92:	4b3c      	ldr	r3, [pc, #240]	; (8005b84 <Pressure_Sensor_Calibration+0x120>)
 8005a94:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005a98:	609a      	str	r2, [r3, #8]
		SEND_CALIBRATION_PACKET.RESULT              = GRAPH_VALUES.pressure;
 8005a9a:	4b36      	ldr	r3, [pc, #216]	; (8005b74 <Pressure_Sensor_Calibration+0x110>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	4b39      	ldr	r3, [pc, #228]	; (8005b88 <Pressure_Sensor_Calibration+0x124>)
 8005aa2:	80da      	strh	r2, [r3, #6]
 8005aa4:	e030      	b.n	8005b08 <Pressure_Sensor_Calibration+0xa4>
	}
	else
	{
		if ((GRAPH_VALUES.pressure >=60) )
 8005aa6:	4b33      	ldr	r3, [pc, #204]	; (8005b74 <Pressure_Sensor_Calibration+0x110>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b3b      	cmp	r3, #59	; 0x3b
 8005aac:	d92c      	bls.n	8005b08 <Pressure_Sensor_Calibration+0xa4>
		{
		       HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);             // stop blower Rpm
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4836      	ldr	r0, [pc, #216]	; (8005b8c <Pressure_Sensor_Calibration+0x128>)
 8005ab2:	f012 fee9 	bl	8018888 <HAL_TIM_IC_Stop_IT>
				SEND_CALIBRATION_PACKET.RESULT              = GRAPH_VALUES.pressure ;
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <Pressure_Sensor_Calibration+0x110>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	4b32      	ldr	r3, [pc, #200]	; (8005b88 <Pressure_Sensor_Calibration+0x124>)
 8005abe:	80da      	strh	r2, [r3, #6]
				Blower_Signal(0);
 8005ac0:	4b30      	ldr	r3, [pc, #192]	; (8005b84 <Pressure_Sensor_Calibration+0x120>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	609a      	str	r2, [r3, #8]
				ExpValve_OPEN();
 8005ac6:	4b2e      	ldr	r3, [pc, #184]	; (8005b80 <Pressure_Sensor_Calibration+0x11c>)
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	4a2d      	ldr	r2, [pc, #180]	; (8005b80 <Pressure_Sensor_Calibration+0x11c>)
 8005acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ad0:	6153      	str	r3, [r2, #20]
				vTaskDelay(2000);
 8005ad2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005ad6:	f015 fab9 	bl	801b04c <vTaskDelay>
				SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 8005ada:	4b2b      	ldr	r3, [pc, #172]	; (8005b88 <Pressure_Sensor_Calibration+0x124>)
 8005adc:	22ff      	movs	r2, #255	; 0xff
 8005ade:	70da      	strb	r2, [r3, #3]
				Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <Pressure_Sensor_Calibration+0x12c>)
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Twenty_MilliSecond_Delay);
 8005ae6:	2014      	movs	r0, #20
 8005ae8:	f015 fab0 	bl	801b04c <vTaskDelay>
				Count                                       = RESET;
 8005aec:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <Pressure_Sensor_Calibration+0x114>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
				CALIBRARTION.PRESSURE_SENSOR                = STOP;
 8005af2:	4b28      	ldr	r3, [pc, #160]	; (8005b94 <Pressure_Sensor_Calibration+0x130>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	705a      	strb	r2, [r3, #1]
				Device_Monitoring                           =  NO;
 8005af8:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <Pressure_Sensor_Calibration+0x134>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	701a      	strb	r2, [r3, #0]
				vTaskSuspend(Calibration_Handler);
 8005afe:	4b27      	ldr	r3, [pc, #156]	; (8005b9c <Pressure_Sensor_Calibration+0x138>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f015 fad6 	bl	801b0b4 <vTaskSuspend>
			Count                                       = RESET;
			CALIBRARTION.PRESSURE_SENSOR                = STOP;
			vTaskSuspend(Calibration_Handler);
		}*/
	 }
	 if(Count > 1500)
 8005b08:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <Pressure_Sensor_Calibration+0x114>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005b10:	4293      	cmp	r3, r2
 8005b12:	dd2c      	ble.n	8005b6e <Pressure_Sensor_Calibration+0x10a>
	 {
		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);             // stop blower Rpm
 8005b14:	2100      	movs	r1, #0
 8005b16:	481d      	ldr	r0, [pc, #116]	; (8005b8c <Pressure_Sensor_Calibration+0x128>)
 8005b18:	f012 feb6 	bl	8018888 <HAL_TIM_IC_Stop_IT>
		SEND_CALIBRATION_PACKET.RESULT              = GRAPH_VALUES.pressure ;
 8005b1c:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <Pressure_Sensor_Calibration+0x110>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <Pressure_Sensor_Calibration+0x124>)
 8005b24:	80da      	strh	r2, [r3, #6]
		Blower_Signal(0);
 8005b26:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <Pressure_Sensor_Calibration+0x120>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	609a      	str	r2, [r3, #8]
		ExpValve_OPEN();
 8005b2c:	4b14      	ldr	r3, [pc, #80]	; (8005b80 <Pressure_Sensor_Calibration+0x11c>)
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <Pressure_Sensor_Calibration+0x11c>)
 8005b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b36:	6153      	str	r3, [r2, #20]
		vTaskDelay(2000);
 8005b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005b3c:	f015 fa86 	bl	801b04c <vTaskDelay>
		SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 8005b40:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <Pressure_Sensor_Calibration+0x124>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	70da      	strb	r2, [r3, #3]
		Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <Pressure_Sensor_Calibration+0x12c>)
 8005b48:	2202      	movs	r2, #2
 8005b4a:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 8005b4c:	2014      	movs	r0, #20
 8005b4e:	f015 fa7d 	bl	801b04c <vTaskDelay>
		Count                                       = RESET;
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <Pressure_Sensor_Calibration+0x114>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
		CALIBRARTION.PRESSURE_SENSOR                = STOP;
 8005b58:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <Pressure_Sensor_Calibration+0x130>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	705a      	strb	r2, [r3, #1]
		Device_Monitoring                           =  NO;
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <Pressure_Sensor_Calibration+0x134>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	701a      	strb	r2, [r3, #0]
		vTaskSuspend(Calibration_Handler);
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <Pressure_Sensor_Calibration+0x138>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f015 faa3 	bl	801b0b4 <vTaskSuspend>
	  }
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200125f8 	.word	0x200125f8
 8005b78:	200000a4 	.word	0x200000a4
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	40020400 	.word	0x40020400
 8005b84:	40007400 	.word	0x40007400
 8005b88:	200122ac 	.word	0x200122ac
 8005b8c:	20012644 	.word	0x20012644
 8005b90:	2001269d 	.word	0x2001269d
 8005b94:	200126bc 	.word	0x200126bc
 8005b98:	20012640 	.word	0x20012640
 8005b9c:	2001298c 	.word	0x2001298c

08005ba0 <Flow_Sensor_7002_Calibration>:


void Flow_Sensor_7002_Calibration()
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
	  if (GRAPH_VALUES.flow < 20  )
 8005ba4:	4b46      	ldr	r3, [pc, #280]	; (8005cc0 <Flow_Sensor_7002_Calibration+0x120>)
 8005ba6:	edd3 7a01 	vldr	s15, [r3, #4]
 8005baa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb6:	d51f      	bpl.n	8005bf8 <Flow_Sensor_7002_Calibration+0x58>
	  {
		  Count++;
 8005bb8:	4b42      	ldr	r3, [pc, #264]	; (8005cc4 <Flow_Sensor_7002_Calibration+0x124>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4a41      	ldr	r2, [pc, #260]	; (8005cc4 <Flow_Sensor_7002_Calibration+0x124>)
 8005bc0:	6013      	str	r3, [r2, #0]
		  Blower_ON();
 8005bc2:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <Flow_Sensor_7002_Calibration+0x128>)
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	4a40      	ldr	r2, [pc, #256]	; (8005cc8 <Flow_Sensor_7002_Calibration+0x128>)
 8005bc8:	f043 0320 	orr.w	r3, r3, #32
 8005bcc:	6153      	str	r3, [r2, #20]
		  ExpValve_OPEN();
 8005bce:	4b3f      	ldr	r3, [pc, #252]	; (8005ccc <Flow_Sensor_7002_Calibration+0x12c>)
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	4a3e      	ldr	r2, [pc, #248]	; (8005ccc <Flow_Sensor_7002_Calibration+0x12c>)
 8005bd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bd8:	6153      	str	r3, [r2, #20]
		  Blower_Signal(2000);
 8005bda:	4b3d      	ldr	r3, [pc, #244]	; (8005cd0 <Flow_Sensor_7002_Calibration+0x130>)
 8005bdc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005be0:	609a      	str	r2, [r3, #8]
		  SEND_CALIBRATION_PACKET.RESULT              = GRAPH_VALUES.flow ;
 8005be2:	4b37      	ldr	r3, [pc, #220]	; (8005cc0 <Flow_Sensor_7002_Calibration+0x120>)
 8005be4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bec:	ee17 3a90 	vmov	r3, s15
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	4b38      	ldr	r3, [pc, #224]	; (8005cd4 <Flow_Sensor_7002_Calibration+0x134>)
 8005bf4:	80da      	strh	r2, [r3, #6]
 8005bf6:	e02d      	b.n	8005c54 <Flow_Sensor_7002_Calibration+0xb4>
	  }
	  else
	  {
		   SEND_CALIBRATION_PACKET.RESULT              = GRAPH_VALUES.flow ;
 8005bf8:	4b31      	ldr	r3, [pc, #196]	; (8005cc0 <Flow_Sensor_7002_Calibration+0x120>)
 8005bfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8005bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c02:	ee17 3a90 	vmov	r3, s15
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	4b32      	ldr	r3, [pc, #200]	; (8005cd4 <Flow_Sensor_7002_Calibration+0x134>)
 8005c0a:	80da      	strh	r2, [r3, #6]
		   Blower_Signal(0);
 8005c0c:	4b30      	ldr	r3, [pc, #192]	; (8005cd0 <Flow_Sensor_7002_Calibration+0x130>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
		   ExpValve_OPEN();
 8005c12:	4b2e      	ldr	r3, [pc, #184]	; (8005ccc <Flow_Sensor_7002_Calibration+0x12c>)
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	4a2d      	ldr	r2, [pc, #180]	; (8005ccc <Flow_Sensor_7002_Calibration+0x12c>)
 8005c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c1c:	6153      	str	r3, [r2, #20]
		   vTaskDelay(2000);
 8005c1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005c22:	f015 fa13 	bl	801b04c <vTaskDelay>
		   SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 8005c26:	4b2b      	ldr	r3, [pc, #172]	; (8005cd4 <Flow_Sensor_7002_Calibration+0x134>)
 8005c28:	22ff      	movs	r2, #255	; 0xff
 8005c2a:	70da      	strb	r2, [r3, #3]
		   Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8005c2c:	4b2a      	ldr	r3, [pc, #168]	; (8005cd8 <Flow_Sensor_7002_Calibration+0x138>)
 8005c2e:	2202      	movs	r2, #2
 8005c30:	701a      	strb	r2, [r3, #0]
		   vTaskDelay(Twenty_MilliSecond_Delay);
 8005c32:	2014      	movs	r0, #20
 8005c34:	f015 fa0a 	bl	801b04c <vTaskDelay>
		   Count                                       = RESET;
 8005c38:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <Flow_Sensor_7002_Calibration+0x124>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
		   CALIBRARTION.FLOW_SENSOR_7002               = STOP;
 8005c3e:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <Flow_Sensor_7002_Calibration+0x13c>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	709a      	strb	r2, [r3, #2]
		   Device_Monitoring                           =  NO;
 8005c44:	4b26      	ldr	r3, [pc, #152]	; (8005ce0 <Flow_Sensor_7002_Calibration+0x140>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	701a      	strb	r2, [r3, #0]
		   vTaskSuspend(Calibration_Handler);
 8005c4a:	4b26      	ldr	r3, [pc, #152]	; (8005ce4 <Flow_Sensor_7002_Calibration+0x144>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f015 fa30 	bl	801b0b4 <vTaskSuspend>
	   }
	   if (Count > 4000)
 8005c54:	4b1b      	ldr	r3, [pc, #108]	; (8005cc4 <Flow_Sensor_7002_Calibration+0x124>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005c5c:	dd2d      	ble.n	8005cba <Flow_Sensor_7002_Calibration+0x11a>
	   {
			SEND_CALIBRATION_PACKET.RESULT                = GRAPH_VALUES.flow ;
 8005c5e:	4b18      	ldr	r3, [pc, #96]	; (8005cc0 <Flow_Sensor_7002_Calibration+0x120>)
 8005c60:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c68:	ee17 3a90 	vmov	r3, s15
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	4b19      	ldr	r3, [pc, #100]	; (8005cd4 <Flow_Sensor_7002_Calibration+0x134>)
 8005c70:	80da      	strh	r2, [r3, #6]
			Blower_Signal(0);
 8005c72:	4b17      	ldr	r3, [pc, #92]	; (8005cd0 <Flow_Sensor_7002_Calibration+0x130>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	609a      	str	r2, [r3, #8]
			ExpValve_OPEN();
 8005c78:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <Flow_Sensor_7002_Calibration+0x12c>)
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <Flow_Sensor_7002_Calibration+0x12c>)
 8005c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c82:	6153      	str	r3, [r2, #20]
			vTaskDelay(2000);
 8005c84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005c88:	f015 f9e0 	bl	801b04c <vTaskDelay>
			SEND_CALIBRATION_PACKET.PASS_FAIL  = CALIBRATION_FAIL ;
 8005c8c:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <Flow_Sensor_7002_Calibration+0x134>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	70da      	strb	r2, [r3, #3]
			Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8005c92:	4b11      	ldr	r3, [pc, #68]	; (8005cd8 <Flow_Sensor_7002_Calibration+0x138>)
 8005c94:	2202      	movs	r2, #2
 8005c96:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Twenty_MilliSecond_Delay);
 8005c98:	2014      	movs	r0, #20
 8005c9a:	f015 f9d7 	bl	801b04c <vTaskDelay>
			Count                                       = RESET;
 8005c9e:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <Flow_Sensor_7002_Calibration+0x124>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]
			CALIBRARTION.FLOW_SENSOR_7002               = STOP;
 8005ca4:	4b0d      	ldr	r3, [pc, #52]	; (8005cdc <Flow_Sensor_7002_Calibration+0x13c>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	709a      	strb	r2, [r3, #2]
			Device_Monitoring                           =  NO;
 8005caa:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <Flow_Sensor_7002_Calibration+0x140>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(Calibration_Handler);
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <Flow_Sensor_7002_Calibration+0x144>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f015 f9fd 	bl	801b0b4 <vTaskSuspend>
		}
}
 8005cba:	bf00      	nop
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	200125f8 	.word	0x200125f8
 8005cc4:	200000a4 	.word	0x200000a4
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40020400 	.word	0x40020400
 8005cd0:	40007400 	.word	0x40007400
 8005cd4:	200122ac 	.word	0x200122ac
 8005cd8:	2001269d 	.word	0x2001269d
 8005cdc:	200126bc 	.word	0x200126bc
 8005ce0:	20012640 	.word	0x20012640
 8005ce4:	2001298c 	.word	0x2001298c

08005ce8 <Expiratory_Valve_Leak_Calibration>:



void Expiratory_Valve_Leak_Calibration()
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0

	Blower_ON();
 8005cec:	4b6e      	ldr	r3, [pc, #440]	; (8005ea8 <Expiratory_Valve_Leak_Calibration+0x1c0>)
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	4a6d      	ldr	r2, [pc, #436]	; (8005ea8 <Expiratory_Valve_Leak_Calibration+0x1c0>)
 8005cf2:	f043 0320 	orr.w	r3, r3, #32
 8005cf6:	6153      	str	r3, [r2, #20]
	ExpValve_CLOSE();
 8005cf8:	4b6c      	ldr	r3, [pc, #432]	; (8005eac <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	4a6b      	ldr	r2, [pc, #428]	; (8005eac <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8005cfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d02:	6153      	str	r3, [r2, #20]
	Blower_Signal(DAC_SIGNALS.DAC_VALUE_20 );
 8005d04:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <Expiratory_Valve_Leak_Calibration+0x1c8>)
 8005d06:	8bda      	ldrh	r2, [r3, #30]
 8005d08:	4b6a      	ldr	r3, [pc, #424]	; (8005eb4 <Expiratory_Valve_Leak_Calibration+0x1cc>)
 8005d0a:	609a      	str	r2, [r3, #8]

	vTaskDelay(4000);
 8005d0c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8005d10:	f015 f99c 	bl	801b04c <vTaskDelay>
	Blower_Signal(0);
 8005d14:	4b67      	ldr	r3, [pc, #412]	; (8005eb4 <Expiratory_Valve_Leak_Calibration+0x1cc>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	609a      	str	r2, [r3, #8]
	vTaskDelay(2000);
 8005d1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005d1e:	f015 f995 	bl	801b04c <vTaskDelay>
	Temp_Pressure_Val_1 =  GRAPH_VALUES.pressure;
 8005d22:	4b65      	ldr	r3, [pc, #404]	; (8005eb8 <Expiratory_Valve_Leak_Calibration+0x1d0>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2e:	4b63      	ldr	r3, [pc, #396]	; (8005ebc <Expiratory_Valve_Leak_Calibration+0x1d4>)
 8005d30:	edc3 7a00 	vstr	s15, [r3]

	Blower_Signal(0);
 8005d34:	4b5f      	ldr	r3, [pc, #380]	; (8005eb4 <Expiratory_Valve_Leak_Calibration+0x1cc>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	609a      	str	r2, [r3, #8]
	vTaskDelay(8000);
 8005d3a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8005d3e:	f015 f985 	bl	801b04c <vTaskDelay>
	Temp_Pressure_Val_2 =GRAPH_VALUES.pressure;
 8005d42:	4b5d      	ldr	r3, [pc, #372]	; (8005eb8 <Expiratory_Valve_Leak_Calibration+0x1d0>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	4b5c      	ldr	r3, [pc, #368]	; (8005ec0 <Expiratory_Valve_Leak_Calibration+0x1d8>)
 8005d50:	edc3 7a00 	vstr	s15, [r3]
	ExpValve_OPEN();
 8005d54:	4b55      	ldr	r3, [pc, #340]	; (8005eac <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	4a54      	ldr	r2, [pc, #336]	; (8005eac <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8005d5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d5e:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 8005d60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005d64:	f015 f972 	bl	801b04c <vTaskDelay>

	if(Temp_Pressure_Val_1 < Temp_Pressure_Val_2)
 8005d68:	4b54      	ldr	r3, [pc, #336]	; (8005ebc <Expiratory_Valve_Leak_Calibration+0x1d4>)
 8005d6a:	ed93 7a00 	vldr	s14, [r3]
 8005d6e:	4b54      	ldr	r3, [pc, #336]	; (8005ec0 <Expiratory_Valve_Leak_Calibration+0x1d8>)
 8005d70:	edd3 7a00 	vldr	s15, [r3]
 8005d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7c:	d504      	bpl.n	8005d88 <Expiratory_Valve_Leak_Calibration+0xa0>
	{
		Temp_Pressure_Val_2=Temp_Pressure_Val_1;
 8005d7e:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <Expiratory_Valve_Leak_Calibration+0x1d4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a4f      	ldr	r2, [pc, #316]	; (8005ec0 <Expiratory_Valve_Leak_Calibration+0x1d8>)
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e00a      	b.n	8005d9e <Expiratory_Valve_Leak_Calibration+0xb6>

	}
	else
	{
		Total_temp_Pressure_Val = (Temp_Pressure_Val_1-Temp_Pressure_Val_2);
 8005d88:	4b4c      	ldr	r3, [pc, #304]	; (8005ebc <Expiratory_Valve_Leak_Calibration+0x1d4>)
 8005d8a:	ed93 7a00 	vldr	s14, [r3]
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <Expiratory_Valve_Leak_Calibration+0x1d8>)
 8005d90:	edd3 7a00 	vldr	s15, [r3]
 8005d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d98:	4b4a      	ldr	r3, [pc, #296]	; (8005ec4 <Expiratory_Valve_Leak_Calibration+0x1dc>)
 8005d9a:	edc3 7a00 	vstr	s15, [r3]
	}


	if(Total_temp_Pressure_Val<=5)
 8005d9e:	4b49      	ldr	r3, [pc, #292]	; (8005ec4 <Expiratory_Valve_Leak_Calibration+0x1dc>)
 8005da0:	edd3 7a00 	vldr	s15, [r3]
 8005da4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db0:	d853      	bhi.n	8005e5a <Expiratory_Valve_Leak_Calibration+0x172>
	{
		if(Temp_Pressure_Val_1 > 5)
 8005db2:	4b42      	ldr	r3, [pc, #264]	; (8005ebc <Expiratory_Valve_Leak_Calibration+0x1d4>)
 8005db4:	edd3 7a00 	vldr	s15, [r3]
 8005db8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc4:	dd24      	ble.n	8005e10 <Expiratory_Valve_Leak_Calibration+0x128>
		{
			SEND_CALIBRATION_PACKET.PASS_FAIL          = CALIBRATION_PASS ;
 8005dc6:	4b40      	ldr	r3, [pc, #256]	; (8005ec8 <Expiratory_Valve_Leak_Calibration+0x1e0>)
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	70da      	strb	r2, [r3, #3]
			SEND_CALIBRATION_PACKET.RESULT             = Total_temp_Pressure_Val ;
 8005dcc:	4b3d      	ldr	r3, [pc, #244]	; (8005ec4 <Expiratory_Valve_Leak_Calibration+0x1dc>)
 8005dce:	edd3 7a00 	vldr	s15, [r3]
 8005dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd6:	ee17 3a90 	vmov	r3, s15
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	4b3a      	ldr	r3, [pc, #232]	; (8005ec8 <Expiratory_Valve_Leak_Calibration+0x1e0>)
 8005dde:	80da      	strh	r2, [r3, #6]
			Send_Bluetooth_Data_Farme                  = SEND_CALIBRATION_FRAME;
 8005de0:	4b3a      	ldr	r3, [pc, #232]	; (8005ecc <Expiratory_Valve_Leak_Calibration+0x1e4>)
 8005de2:	2202      	movs	r2, #2
 8005de4:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Twenty_MilliSecond_Delay);
 8005de6:	2014      	movs	r0, #20
 8005de8:	f015 f930 	bl	801b04c <vTaskDelay>
			CALIBRARTION.VALVE_LEAK_TEST               = STOP;
 8005dec:	4b38      	ldr	r3, [pc, #224]	; (8005ed0 <Expiratory_Valve_Leak_Calibration+0x1e8>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	70da      	strb	r2, [r3, #3]
			ExpValve_OPEN();
 8005df2:	4b2e      	ldr	r3, [pc, #184]	; (8005eac <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	4a2d      	ldr	r2, [pc, #180]	; (8005eac <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8005df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfc:	6153      	str	r3, [r2, #20]
			Device_Monitoring                           =  NO;
 8005dfe:	4b35      	ldr	r3, [pc, #212]	; (8005ed4 <Expiratory_Valve_Leak_Calibration+0x1ec>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(Calibration_Handler);
 8005e04:	4b34      	ldr	r3, [pc, #208]	; (8005ed8 <Expiratory_Valve_Leak_Calibration+0x1f0>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f015 f953 	bl	801b0b4 <vTaskSuspend>
		CALIBRARTION.VALVE_LEAK_TEST                = STOP;
		ExpValve_OPEN();
		Device_Monitoring                           =  NO;
		vTaskSuspend(Calibration_Handler);
	}
}
 8005e0e:	e048      	b.n	8005ea2 <Expiratory_Valve_Leak_Calibration+0x1ba>
			SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 8005e10:	4b2d      	ldr	r3, [pc, #180]	; (8005ec8 <Expiratory_Valve_Leak_Calibration+0x1e0>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	70da      	strb	r2, [r3, #3]
			SEND_CALIBRATION_PACKET.RESULT              = Total_temp_Pressure_Val ;
 8005e16:	4b2b      	ldr	r3, [pc, #172]	; (8005ec4 <Expiratory_Valve_Leak_Calibration+0x1dc>)
 8005e18:	edd3 7a00 	vldr	s15, [r3]
 8005e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e20:	ee17 3a90 	vmov	r3, s15
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	4b28      	ldr	r3, [pc, #160]	; (8005ec8 <Expiratory_Valve_Leak_Calibration+0x1e0>)
 8005e28:	80da      	strh	r2, [r3, #6]
			Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8005e2a:	4b28      	ldr	r3, [pc, #160]	; (8005ecc <Expiratory_Valve_Leak_Calibration+0x1e4>)
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Twenty_MilliSecond_Delay);
 8005e30:	2014      	movs	r0, #20
 8005e32:	f015 f90b 	bl	801b04c <vTaskDelay>
			CALIBRARTION.VALVE_LEAK_TEST                = STOP;
 8005e36:	4b26      	ldr	r3, [pc, #152]	; (8005ed0 <Expiratory_Valve_Leak_Calibration+0x1e8>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	70da      	strb	r2, [r3, #3]
			ExpValve_OPEN();
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	4a1a      	ldr	r2, [pc, #104]	; (8005eac <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8005e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e46:	6153      	str	r3, [r2, #20]
			Device_Monitoring                           =  NO;
 8005e48:	4b22      	ldr	r3, [pc, #136]	; (8005ed4 <Expiratory_Valve_Leak_Calibration+0x1ec>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(Calibration_Handler);
 8005e4e:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <Expiratory_Valve_Leak_Calibration+0x1f0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f015 f92e 	bl	801b0b4 <vTaskSuspend>
}
 8005e58:	e023      	b.n	8005ea2 <Expiratory_Valve_Leak_Calibration+0x1ba>
		SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <Expiratory_Valve_Leak_Calibration+0x1e0>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	70da      	strb	r2, [r3, #3]
		SEND_CALIBRATION_PACKET.RESULT              = Total_temp_Pressure_Val ;
 8005e60:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <Expiratory_Valve_Leak_Calibration+0x1dc>)
 8005e62:	edd3 7a00 	vldr	s15, [r3]
 8005e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e6a:	ee17 3a90 	vmov	r3, s15
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <Expiratory_Valve_Leak_Calibration+0x1e0>)
 8005e72:	80da      	strh	r2, [r3, #6]
		Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8005e74:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <Expiratory_Valve_Leak_Calibration+0x1e4>)
 8005e76:	2202      	movs	r2, #2
 8005e78:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 8005e7a:	2014      	movs	r0, #20
 8005e7c:	f015 f8e6 	bl	801b04c <vTaskDelay>
		CALIBRARTION.VALVE_LEAK_TEST                = STOP;
 8005e80:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <Expiratory_Valve_Leak_Calibration+0x1e8>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	70da      	strb	r2, [r3, #3]
		ExpValve_OPEN();
 8005e86:	4b09      	ldr	r3, [pc, #36]	; (8005eac <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	4a08      	ldr	r2, [pc, #32]	; (8005eac <Expiratory_Valve_Leak_Calibration+0x1c4>)
 8005e8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e90:	6153      	str	r3, [r2, #20]
		Device_Monitoring                           =  NO;
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <Expiratory_Valve_Leak_Calibration+0x1ec>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
		vTaskSuspend(Calibration_Handler);
 8005e98:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <Expiratory_Valve_Leak_Calibration+0x1f0>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f015 f909 	bl	801b0b4 <vTaskSuspend>
}
 8005ea2:	bf00      	nop
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	40020400 	.word	0x40020400
 8005eb0:	20012524 	.word	0x20012524
 8005eb4:	40007400 	.word	0x40007400
 8005eb8:	200125f8 	.word	0x200125f8
 8005ebc:	20012d4c 	.word	0x20012d4c
 8005ec0:	20012d48 	.word	0x20012d48
 8005ec4:	20012d50 	.word	0x20012d50
 8005ec8:	200122ac 	.word	0x200122ac
 8005ecc:	2001269d 	.word	0x2001269d
 8005ed0:	200126bc 	.word	0x200126bc
 8005ed4:	20012640 	.word	0x20012640
 8005ed8:	2001298c 	.word	0x2001298c

08005edc <Led_Buzzer_Calibration>:




void Led_Buzzer_Calibration()
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0

	Oxygen_Parameter.Achieved_Oxygen = 21;
 8005ee0:	4b48      	ldr	r3, [pc, #288]	; (8006004 <Led_Buzzer_Calibration+0x128>)
 8005ee2:	2215      	movs	r2, #21
 8005ee4:	721a      	strb	r2, [r3, #8]
		Red_Led_ON();
 8005ee6:	4b48      	ldr	r3, [pc, #288]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	4a47      	ldr	r2, [pc, #284]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005eec:	f043 0310 	orr.w	r3, r3, #16
 8005ef0:	6153      	str	r3, [r2, #20]
		Blue_Led_OFF();
 8005ef2:	4b45      	ldr	r3, [pc, #276]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	4a44      	ldr	r2, [pc, #272]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005ef8:	f023 0308 	bic.w	r3, r3, #8
 8005efc:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 8005efe:	4b42      	ldr	r3, [pc, #264]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	4a41      	ldr	r2, [pc, #260]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f04:	f023 0320 	bic.w	r3, r3, #32
 8005f08:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 8005f0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005f0e:	f015 f89d 	bl	801b04c <vTaskDelay>
	    Red_Led_OFF();
 8005f12:	4b3d      	ldr	r3, [pc, #244]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4a3c      	ldr	r2, [pc, #240]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f18:	f023 0310 	bic.w	r3, r3, #16
 8005f1c:	6153      	str	r3, [r2, #20]
		Blue_Led_ON();
 8005f1e:	4b3a      	ldr	r3, [pc, #232]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	4a39      	ldr	r2, [pc, #228]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f24:	f043 0308 	orr.w	r3, r3, #8
 8005f28:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 8005f2a:	4b37      	ldr	r3, [pc, #220]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	4a36      	ldr	r2, [pc, #216]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f30:	f023 0320 	bic.w	r3, r3, #32
 8005f34:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 8005f36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005f3a:	f015 f887 	bl	801b04c <vTaskDelay>
	    Red_Led_OFF();
 8005f3e:	4b32      	ldr	r3, [pc, #200]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	4a31      	ldr	r2, [pc, #196]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f44:	f023 0310 	bic.w	r3, r3, #16
 8005f48:	6153      	str	r3, [r2, #20]
	 	Blue_Led_OFF();
 8005f4a:	4b2f      	ldr	r3, [pc, #188]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	4a2e      	ldr	r2, [pc, #184]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f50:	f023 0308 	bic.w	r3, r3, #8
 8005f54:	6153      	str	r3, [r2, #20]
	 	Green_Led_ON();
 8005f56:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	4a2b      	ldr	r2, [pc, #172]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f5c:	f043 0320 	orr.w	r3, r3, #32
 8005f60:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 8005f62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005f66:	f015 f871 	bl	801b04c <vTaskDelay>
	    Buzzer1_ON();
 8005f6a:	4b27      	ldr	r3, [pc, #156]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	4a26      	ldr	r2, [pc, #152]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f74:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 8005f76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005f7a:	f015 f867 	bl	801b04c <vTaskDelay>
	    Buzzer1_ON();
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	4a21      	ldr	r2, [pc, #132]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f88:	6153      	str	r3, [r2, #20]
	vTaskDelay(2000);
 8005f8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005f8e:	f015 f85d 	bl	801b04c <vTaskDelay>
	    Red_Led_OFF();
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005f98:	f023 0310 	bic.w	r3, r3, #16
 8005f9c:	6153      	str	r3, [r2, #20]
		Blue_Led_OFF();
 8005f9e:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	4a19      	ldr	r2, [pc, #100]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005fa4:	f023 0308 	bic.w	r3, r3, #8
 8005fa8:	6153      	str	r3, [r2, #20]
		Green_Led_OFF();
 8005faa:	4b17      	ldr	r3, [pc, #92]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	4a16      	ldr	r2, [pc, #88]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005fb0:	f023 0320 	bic.w	r3, r3, #32
 8005fb4:	6153      	str	r3, [r2, #20]
		Buzzer1_OFF();
 8005fb6:	4b14      	ldr	r3, [pc, #80]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	4a13      	ldr	r2, [pc, #76]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc0:	6153      	str	r3, [r2, #20]
		Buzzer2_OFF();
 8005fc2:	4b11      	ldr	r3, [pc, #68]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	4a10      	ldr	r2, [pc, #64]	; (8006008 <Led_Buzzer_Calibration+0x12c>)
 8005fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fcc:	6153      	str	r3, [r2, #20]
	vTaskDelay(400);
 8005fce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005fd2:	f015 f83b 	bl	801b04c <vTaskDelay>

    	SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <Led_Buzzer_Calibration+0x130>)
 8005fd8:	22ff      	movs	r2, #255	; 0xff
 8005fda:	70da      	strb	r2, [r3, #3]
		Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <Led_Buzzer_Calibration+0x134>)
 8005fde:	2202      	movs	r2, #2
 8005fe0:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 8005fe2:	2014      	movs	r0, #20
 8005fe4:	f015 f832 	bl	801b04c <vTaskDelay>
		CALIBRARTION.ALARAM_TEST                    = STOP;
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <Led_Buzzer_Calibration+0x138>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	715a      	strb	r2, [r3, #5]
		Device_Monitoring                           =  NO;
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <Led_Buzzer_Calibration+0x13c>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
	    vTaskSuspend(Calibration_Handler);
 8005ff4:	4b09      	ldr	r3, [pc, #36]	; (800601c <Led_Buzzer_Calibration+0x140>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f015 f85b 	bl	801b0b4 <vTaskSuspend>

}
 8005ffe:	bf00      	nop
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	200129d4 	.word	0x200129d4
 8006008:	40020c00 	.word	0x40020c00
 800600c:	200122ac 	.word	0x200122ac
 8006010:	2001269d 	.word	0x2001269d
 8006014:	200126bc 	.word	0x200126bc
 8006018:	20012640 	.word	0x20012640
 800601c:	2001298c 	.word	0x2001298c

08006020 <Battery_Calibration>:



void Battery_Calibration()
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
	if(Battery_Voltage > 50)
 8006024:	4b25      	ldr	r3, [pc, #148]	; (80060bc <Battery_Calibration+0x9c>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b32      	cmp	r3, #50	; 0x32
 800602a:	d91d      	bls.n	8006068 <Battery_Calibration+0x48>
	{
		vTaskDelay(2000);
 800602c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006030:	f015 f80c 	bl	801b04c <vTaskDelay>
		SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 8006034:	4b22      	ldr	r3, [pc, #136]	; (80060c0 <Battery_Calibration+0xa0>)
 8006036:	22ff      	movs	r2, #255	; 0xff
 8006038:	70da      	strb	r2, [r3, #3]
		SEND_CALIBRATION_PACKET.RESULT              = Battery_Voltage;
 800603a:	4b20      	ldr	r3, [pc, #128]	; (80060bc <Battery_Calibration+0x9c>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	b29a      	uxth	r2, r3
 8006040:	4b1f      	ldr	r3, [pc, #124]	; (80060c0 <Battery_Calibration+0xa0>)
 8006042:	80da      	strh	r2, [r3, #6]
		Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8006044:	4b1f      	ldr	r3, [pc, #124]	; (80060c4 <Battery_Calibration+0xa4>)
 8006046:	2202      	movs	r2, #2
 8006048:	701a      	strb	r2, [r3, #0]
		vTaskDelay(Twenty_MilliSecond_Delay);
 800604a:	2014      	movs	r0, #20
 800604c:	f014 fffe 	bl	801b04c <vTaskDelay>
		CALIBRARTION.BATTERY_TEST                   = STOP;
 8006050:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <Battery_Calibration+0xa8>)
 8006052:	2200      	movs	r2, #0
 8006054:	719a      	strb	r2, [r3, #6]
		Device_Monitoring                           =  NO;
 8006056:	4b1d      	ldr	r3, [pc, #116]	; (80060cc <Battery_Calibration+0xac>)
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
		vTaskSuspend(Calibration_Handler);
 800605c:	4b1c      	ldr	r3, [pc, #112]	; (80060d0 <Battery_Calibration+0xb0>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f015 f827 	bl	801b0b4 <vTaskSuspend>
			Device_Monitoring                           =  NO;
			vTaskSuspend(Calibration_Handler);

		}
	}
}
 8006066:	e026      	b.n	80060b6 <Battery_Calibration+0x96>
		Count++;
 8006068:	4b1a      	ldr	r3, [pc, #104]	; (80060d4 <Battery_Calibration+0xb4>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3301      	adds	r3, #1
 800606e:	4a19      	ldr	r2, [pc, #100]	; (80060d4 <Battery_Calibration+0xb4>)
 8006070:	6013      	str	r3, [r2, #0]
		if(Count>2500)
 8006072:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <Battery_Calibration+0xb4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800607a:	4293      	cmp	r3, r2
 800607c:	dd1b      	ble.n	80060b6 <Battery_Calibration+0x96>
			Count=0;
 800607e:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <Battery_Calibration+0xb4>)
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]
			SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 8006084:	4b0e      	ldr	r3, [pc, #56]	; (80060c0 <Battery_Calibration+0xa0>)
 8006086:	2200      	movs	r2, #0
 8006088:	70da      	strb	r2, [r3, #3]
			SEND_CALIBRATION_PACKET.RESULT              = Battery_Voltage;
 800608a:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <Battery_Calibration+0x9c>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	b29a      	uxth	r2, r3
 8006090:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <Battery_Calibration+0xa0>)
 8006092:	80da      	strh	r2, [r3, #6]
			Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 8006094:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <Battery_Calibration+0xa4>)
 8006096:	2202      	movs	r2, #2
 8006098:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Twenty_MilliSecond_Delay);
 800609a:	2014      	movs	r0, #20
 800609c:	f014 ffd6 	bl	801b04c <vTaskDelay>
			CALIBRARTION.BATTERY_TEST                   = STOP;
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <Battery_Calibration+0xa8>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	719a      	strb	r2, [r3, #6]
			Device_Monitoring                           =  NO;
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <Battery_Calibration+0xac>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(Calibration_Handler);
 80060ac:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <Battery_Calibration+0xb0>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f014 ffff 	bl	801b0b4 <vTaskSuspend>
}
 80060b6:	bf00      	nop
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20012621 	.word	0x20012621
 80060c0:	200122ac 	.word	0x200122ac
 80060c4:	2001269d 	.word	0x2001269d
 80060c8:	200126bc 	.word	0x200126bc
 80060cc:	20012640 	.word	0x20012640
 80060d0:	2001298c 	.word	0x2001298c
 80060d4:	200000a4 	.word	0x200000a4

080060d8 <Sensor_Voltage_Transmit>:


void Sensor_Voltage_Transmit()
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
	MPX7002.offset                               = MPX7002.current_reading;
 80060dc:	4b16      	ldr	r3, [pc, #88]	; (8006138 <Sensor_Voltage_Transmit+0x60>)
 80060de:	899a      	ldrh	r2, [r3, #12]
 80060e0:	4b15      	ldr	r3, [pc, #84]	; (8006138 <Sensor_Voltage_Transmit+0x60>)
 80060e2:	801a      	strh	r2, [r3, #0]
	MPX5010.offset                               = MPX5010.current_reading;
 80060e4:	4b15      	ldr	r3, [pc, #84]	; (800613c <Sensor_Voltage_Transmit+0x64>)
 80060e6:	899a      	ldrh	r2, [r3, #12]
 80060e8:	4b14      	ldr	r3, [pc, #80]	; (800613c <Sensor_Voltage_Transmit+0x64>)
 80060ea:	801a      	strh	r2, [r3, #0]


	SEND_CALIBRATION_PACKET.ERROR_CODE           = MPX5010.current_reading;
 80060ec:	4b13      	ldr	r3, [pc, #76]	; (800613c <Sensor_Voltage_Transmit+0x64>)
 80060ee:	899b      	ldrh	r3, [r3, #12]
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	4b13      	ldr	r3, [pc, #76]	; (8006140 <Sensor_Voltage_Transmit+0x68>)
 80060f4:	711a      	strb	r2, [r3, #4]
	if(MPX5010.current_reading >=255)
 80060f6:	4b11      	ldr	r3, [pc, #68]	; (800613c <Sensor_Voltage_Transmit+0x64>)
 80060f8:	899b      	ldrh	r3, [r3, #12]
 80060fa:	2bfe      	cmp	r3, #254	; 0xfe
 80060fc:	d902      	bls.n	8006104 <Sensor_Voltage_Transmit+0x2c>
		SEND_CALIBRATION_PACKET.ERROR_CODE =255;
 80060fe:	4b10      	ldr	r3, [pc, #64]	; (8006140 <Sensor_Voltage_Transmit+0x68>)
 8006100:	22ff      	movs	r2, #255	; 0xff
 8006102:	711a      	strb	r2, [r3, #4]
	SEND_CALIBRATION_PACKET.RESULT               = MPX7002.current_reading;
 8006104:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <Sensor_Voltage_Transmit+0x60>)
 8006106:	899a      	ldrh	r2, [r3, #12]
 8006108:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <Sensor_Voltage_Transmit+0x68>)
 800610a:	80da      	strh	r2, [r3, #6]
	SEND_CALIBRATION_PACKET.PASS_FAIL            = CALIBRATION_PASS ;
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <Sensor_Voltage_Transmit+0x68>)
 800610e:	22ff      	movs	r2, #255	; 0xff
 8006110:	70da      	strb	r2, [r3, #3]
	Send_Bluetooth_Data_Farme                    = SEND_CALIBRATION_FRAME;
 8006112:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <Sensor_Voltage_Transmit+0x6c>)
 8006114:	2202      	movs	r2, #2
 8006116:	701a      	strb	r2, [r3, #0]
	vTaskDelay(Twenty_MilliSecond_Delay);
 8006118:	2014      	movs	r0, #20
 800611a:	f014 ff97 	bl	801b04c <vTaskDelay>
	CALIBRARTION.SENSOR_OFFSET_TEST              = STOP;
 800611e:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <Sensor_Voltage_Transmit+0x70>)
 8006120:	2200      	movs	r2, #0
 8006122:	71da      	strb	r2, [r3, #7]
	Device_Monitoring                           =  NO;
 8006124:	4b09      	ldr	r3, [pc, #36]	; (800614c <Sensor_Voltage_Transmit+0x74>)
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Calibration_Handler);
 800612a:	4b09      	ldr	r3, [pc, #36]	; (8006150 <Sensor_Voltage_Transmit+0x78>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f014 ffc0 	bl	801b0b4 <vTaskSuspend>
}
 8006134:	bf00      	nop
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20012dc4 	.word	0x20012dc4
 800613c:	20012d84 	.word	0x20012d84
 8006140:	200122ac 	.word	0x200122ac
 8006144:	2001269d 	.word	0x2001269d
 8006148:	200126bc 	.word	0x200126bc
 800614c:	20012640 	.word	0x20012640
 8006150:	2001298c 	.word	0x2001298c

08006154 <O2_Calibration_Task>:




void O2_Calibration_Task(void *argument)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

	while(1)
 800615c:	e7fe      	b.n	800615c <O2_Calibration_Task+0x8>
	...

08006160 <Oxygen_blending_Calibration>:
}



void Oxygen_blending_Calibration()
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
	if(Step == 1)
 8006164:	4ba2      	ldr	r3, [pc, #648]	; (80063f0 <Oxygen_blending_Calibration+0x290>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d138      	bne.n	80061de <Oxygen_blending_Calibration+0x7e>
	{

		Old_offset = OOM202.offset_maximum;
 800616c:	4ba1      	ldr	r3, [pc, #644]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 800616e:	889a      	ldrh	r2, [r3, #4]
 8006170:	4ba1      	ldr	r3, [pc, #644]	; (80063f8 <Oxygen_blending_Calibration+0x298>)
 8006172:	801a      	strh	r2, [r3, #0]
		GRAPH_VALUES.Maximum_oxygen_flow  =  0;
 8006174:	4ba1      	ldr	r3, [pc, #644]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 8006176:	2200      	movs	r2, #0
 8006178:	829a      	strh	r2, [r3, #20]
		ExpValve_CLOSE();
 800617a:	4ba1      	ldr	r3, [pc, #644]	; (8006400 <Oxygen_blending_Calibration+0x2a0>)
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	4aa0      	ldr	r2, [pc, #640]	; (8006400 <Oxygen_blending_Calibration+0x2a0>)
 8006180:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006184:	6153      	str	r3, [r2, #20]
		Count++;
 8006186:	4b9f      	ldr	r3, [pc, #636]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3301      	adds	r3, #1
 800618c:	4a9d      	ldr	r2, [pc, #628]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 800618e:	6013      	str	r3, [r2, #0]
		Blower_Signal(Calibration_Blower_Dac);
 8006190:	4b9d      	ldr	r3, [pc, #628]	; (8006408 <Oxygen_blending_Calibration+0x2a8>)
 8006192:	881a      	ldrh	r2, [r3, #0]
 8006194:	4b9d      	ldr	r3, [pc, #628]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 8006196:	609a      	str	r2, [r3, #8]
		Parkar_valve_Signal(0);
 8006198:	4b9c      	ldr	r3, [pc, #624]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 800619a:	2200      	movs	r2, #0
 800619c:	615a      	str	r2, [r3, #20]
		OOM202.offset_minimum = OOM202.current_reading;
 800619e:	4b95      	ldr	r3, [pc, #596]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80061a0:	899a      	ldrh	r2, [r3, #12]
 80061a2:	4b94      	ldr	r3, [pc, #592]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80061a4:	805a      	strh	r2, [r3, #2]
		if(Count > 10000)
 80061a6:	4b97      	ldr	r3, [pc, #604]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80061ae:	4293      	cmp	r3, r2
 80061b0:	f340 8118 	ble.w	80063e4 <Oxygen_blending_Calibration+0x284>
		{
			OOM202.offset_minimum = OOM202.current_reading;
 80061b4:	4b8f      	ldr	r3, [pc, #572]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80061b6:	899a      	ldrh	r2, [r3, #12]
 80061b8:	4b8e      	ldr	r3, [pc, #568]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80061ba:	805a      	strh	r2, [r3, #2]
			controlsys_Init(&Parker_valve_tune);          //parker
 80061bc:	4894      	ldr	r0, [pc, #592]	; (8006410 <Oxygen_blending_Calibration+0x2b0>)
 80061be:	f00a f94b 	bl	8010458 <controlsys_Init>
			Count = 0;
 80061c2:	4b90      	ldr	r3, [pc, #576]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
			Blower_Signal(Calibration_Blower_Dac);
 80061c8:	4b8f      	ldr	r3, [pc, #572]	; (8006408 <Oxygen_blending_Calibration+0x2a8>)
 80061ca:	881a      	ldrh	r2, [r3, #0]
 80061cc:	4b8f      	ldr	r3, [pc, #572]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 80061ce:	609a      	str	r2, [r3, #8]
			Step = 2;
 80061d0:	4b87      	ldr	r3, [pc, #540]	; (80063f0 <Oxygen_blending_Calibration+0x290>)
 80061d2:	2202      	movs	r2, #2
 80061d4:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Two_Millisecond_Delay);
 80061d6:	2002      	movs	r0, #2
 80061d8:	f014 ff38 	bl	801b04c <vTaskDelay>
 80061dc:	e102      	b.n	80063e4 <Oxygen_blending_Calibration+0x284>

		}
	}
	else if(Step == 2)
 80061de:	4b84      	ldr	r3, [pc, #528]	; (80063f0 <Oxygen_blending_Calibration+0x290>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	f040 80a8 	bne.w	8006338 <Oxygen_blending_Calibration+0x1d8>
	{
		ExpValve_CLOSE();
 80061e8:	4b85      	ldr	r3, [pc, #532]	; (8006400 <Oxygen_blending_Calibration+0x2a0>)
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	4a84      	ldr	r2, [pc, #528]	; (8006400 <Oxygen_blending_Calibration+0x2a0>)
 80061ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061f2:	6153      	str	r3, [r2, #20]
		Count++;
 80061f4:	4b83      	ldr	r3, [pc, #524]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3301      	adds	r3, #1
 80061fa:	4a82      	ldr	r2, [pc, #520]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 80061fc:	6013      	str	r3, [r2, #0]
		Blower_Signal(Calibration_Blower_Dac);
 80061fe:	4b82      	ldr	r3, [pc, #520]	; (8006408 <Oxygen_blending_Calibration+0x2a8>)
 8006200:	881a      	ldrh	r2, [r3, #0]
 8006202:	4b82      	ldr	r3, [pc, #520]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 8006204:	609a      	str	r2, [r3, #8]

		if(  (GRAPH_VALUES.oxygen_flow < (GRAPH_VALUES.flow + 20)) )
 8006206:	4b7d      	ldr	r3, [pc, #500]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 8006208:	ed93 7a04 	vldr	s14, [r3, #16]
 800620c:	4b7b      	ldr	r3, [pc, #492]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 800620e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006212:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800621e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006222:	d51e      	bpl.n	8006262 <Oxygen_blending_Calibration+0x102>
		{
			Calibration_Proportional_valve_Dac=controlsys_Update(&Parker_valve_tune, (GRAPH_VALUES.flow + 20),GRAPH_VALUES.oxygen_flow);
 8006224:	4b75      	ldr	r3, [pc, #468]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 8006226:	edd3 7a01 	vldr	s15, [r3, #4]
 800622a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800622e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006232:	4b72      	ldr	r3, [pc, #456]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 8006234:	ed93 7a04 	vldr	s14, [r3, #16]
 8006238:	eef0 0a47 	vmov.f32	s1, s14
 800623c:	eeb0 0a67 	vmov.f32	s0, s15
 8006240:	4873      	ldr	r0, [pc, #460]	; (8006410 <Oxygen_blending_Calibration+0x2b0>)
 8006242:	f00a f929 	bl	8010498 <controlsys_Update>
 8006246:	eef0 7a40 	vmov.f32	s15, s0
 800624a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800624e:	ee17 3a90 	vmov	r3, s15
 8006252:	b29a      	uxth	r2, r3
 8006254:	4b6f      	ldr	r3, [pc, #444]	; (8006414 <Oxygen_blending_Calibration+0x2b4>)
 8006256:	801a      	strh	r2, [r3, #0]
			Parkar_valve_Signal(Calibration_Proportional_valve_Dac);
 8006258:	4b6e      	ldr	r3, [pc, #440]	; (8006414 <Oxygen_blending_Calibration+0x2b4>)
 800625a:	881a      	ldrh	r2, [r3, #0]
 800625c:	4b6b      	ldr	r3, [pc, #428]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 800625e:	615a      	str	r2, [r3, #20]
 8006260:	e01d      	b.n	800629e <Oxygen_blending_Calibration+0x13e>
		}
		else
		{
			Calibration_Proportional_valve_Dac=controlsys_Update(&Parker_valve_tune, (GRAPH_VALUES.flow + 20),GRAPH_VALUES.oxygen_flow);
 8006262:	4b66      	ldr	r3, [pc, #408]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 8006264:	edd3 7a01 	vldr	s15, [r3, #4]
 8006268:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800626c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006270:	4b62      	ldr	r3, [pc, #392]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 8006272:	ed93 7a04 	vldr	s14, [r3, #16]
 8006276:	eef0 0a47 	vmov.f32	s1, s14
 800627a:	eeb0 0a67 	vmov.f32	s0, s15
 800627e:	4864      	ldr	r0, [pc, #400]	; (8006410 <Oxygen_blending_Calibration+0x2b0>)
 8006280:	f00a f90a 	bl	8010498 <controlsys_Update>
 8006284:	eef0 7a40 	vmov.f32	s15, s0
 8006288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628c:	ee17 3a90 	vmov	r3, s15
 8006290:	b29a      	uxth	r2, r3
 8006292:	4b60      	ldr	r3, [pc, #384]	; (8006414 <Oxygen_blending_Calibration+0x2b4>)
 8006294:	801a      	strh	r2, [r3, #0]
			Parkar_valve_Signal(Calibration_Proportional_valve_Dac);
 8006296:	4b5f      	ldr	r3, [pc, #380]	; (8006414 <Oxygen_blending_Calibration+0x2b4>)
 8006298:	881a      	ldrh	r2, [r3, #0]
 800629a:	4b5c      	ldr	r3, [pc, #368]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 800629c:	615a      	str	r2, [r3, #20]
		}

		Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 800629e:	4b57      	ldr	r3, [pc, #348]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 80062a0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	4b5c      	ldr	r3, [pc, #368]	; (8006418 <Oxygen_blending_Calibration+0x2b8>)
 80062a8:	721a      	strb	r2, [r3, #8]
		OOM202.offset_maximum = OOM202.current_reading;
 80062aa:	4b52      	ldr	r3, [pc, #328]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80062ac:	899a      	ldrh	r2, [r3, #12]
 80062ae:	4b51      	ldr	r3, [pc, #324]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80062b0:	809a      	strh	r2, [r3, #4]
		if(Count > 10000)
 80062b2:	4b54      	ldr	r3, [pc, #336]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80062ba:	4293      	cmp	r3, r2
 80062bc:	f340 8092 	ble.w	80063e4 <Oxygen_blending_Calibration+0x284>
		{

			OOM202.offset_maximum = OOM202.current_reading;
 80062c0:	4b4c      	ldr	r3, [pc, #304]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80062c2:	899a      	ldrh	r2, [r3, #12]
 80062c4:	4b4b      	ldr	r3, [pc, #300]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80062c6:	809a      	strh	r2, [r3, #4]

			if(GRAPH_VALUES.Maximum_oxygen_flow  <10)
 80062c8:	4b4c      	ldr	r3, [pc, #304]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 80062ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80062ce:	2b09      	cmp	r3, #9
 80062d0:	dc03      	bgt.n	80062da <Oxygen_blending_Calibration+0x17a>
			{
				OOM202.offset_maximum = Old_offset;
 80062d2:	4b49      	ldr	r3, [pc, #292]	; (80063f8 <Oxygen_blending_Calibration+0x298>)
 80062d4:	881a      	ldrh	r2, [r3, #0]
 80062d6:	4b47      	ldr	r3, [pc, #284]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80062d8:	809a      	strh	r2, [r3, #4]
			}

			Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 80062da:	4b48      	ldr	r3, [pc, #288]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 80062dc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	4b4d      	ldr	r3, [pc, #308]	; (8006418 <Oxygen_blending_Calibration+0x2b8>)
 80062e4:	721a      	strb	r2, [r3, #8]
			if(Oxygen_Parameter.Achieved_Oxygen >=100)
 80062e6:	4b4c      	ldr	r3, [pc, #304]	; (8006418 <Oxygen_blending_Calibration+0x2b8>)
 80062e8:	7a1b      	ldrb	r3, [r3, #8]
 80062ea:	2b63      	cmp	r3, #99	; 0x63
 80062ec:	d902      	bls.n	80062f4 <Oxygen_blending_Calibration+0x194>
			    Oxygen_Parameter.Achieved_Oxygen = 100;
 80062ee:	4b4a      	ldr	r3, [pc, #296]	; (8006418 <Oxygen_blending_Calibration+0x2b8>)
 80062f0:	2264      	movs	r2, #100	; 0x64
 80062f2:	721a      	strb	r2, [r3, #8]
			if(Oxygen_Parameter.Achieved_Oxygen<=20)
 80062f4:	4b48      	ldr	r3, [pc, #288]	; (8006418 <Oxygen_blending_Calibration+0x2b8>)
 80062f6:	7a1b      	ldrb	r3, [r3, #8]
 80062f8:	2b14      	cmp	r3, #20
 80062fa:	d802      	bhi.n	8006302 <Oxygen_blending_Calibration+0x1a2>
				Oxygen_Parameter.Achieved_Oxygen = 20;
 80062fc:	4b46      	ldr	r3, [pc, #280]	; (8006418 <Oxygen_blending_Calibration+0x2b8>)
 80062fe:	2214      	movs	r2, #20
 8006300:	721a      	strb	r2, [r3, #8]


			if(Oxygen_Parameter.Achieved_Oxygen <90)
 8006302:	4b45      	ldr	r3, [pc, #276]	; (8006418 <Oxygen_blending_Calibration+0x2b8>)
 8006304:	7a1b      	ldrb	r3, [r3, #8]
 8006306:	2b59      	cmp	r3, #89	; 0x59
 8006308:	d803      	bhi.n	8006312 <Oxygen_blending_Calibration+0x1b2>
			{
			    SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_FAIL ;
 800630a:	4b44      	ldr	r3, [pc, #272]	; (800641c <Oxygen_blending_Calibration+0x2bc>)
 800630c:	2200      	movs	r2, #0
 800630e:	70da      	strb	r2, [r3, #3]
 8006310:	e002      	b.n	8006318 <Oxygen_blending_Calibration+0x1b8>
			}
			else
			{
				SEND_CALIBRATION_PACKET.PASS_FAIL           = CALIBRATION_PASS ;
 8006312:	4b42      	ldr	r3, [pc, #264]	; (800641c <Oxygen_blending_Calibration+0x2bc>)
 8006314:	22ff      	movs	r2, #255	; 0xff
 8006316:	70da      	strb	r2, [r3, #3]
			}
			Count = 0;
 8006318:	4b3a      	ldr	r3, [pc, #232]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
			Blower_Signal(0);
 800631e:	4b3b      	ldr	r3, [pc, #236]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 8006320:	2200      	movs	r2, #0
 8006322:	609a      	str	r2, [r3, #8]
			Parkar_valve_Signal(0);
 8006324:	4b39      	ldr	r3, [pc, #228]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 8006326:	2200      	movs	r2, #0
 8006328:	615a      	str	r2, [r3, #20]
			Step = 3;
 800632a:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <Oxygen_blending_Calibration+0x290>)
 800632c:	2203      	movs	r2, #3
 800632e:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Two_Millisecond_Delay);
 8006330:	2002      	movs	r0, #2
 8006332:	f014 fe8b 	bl	801b04c <vTaskDelay>
 8006336:	e055      	b.n	80063e4 <Oxygen_blending_Calibration+0x284>


		}

	}
	else if(Step == 3)
 8006338:	4b2d      	ldr	r3, [pc, #180]	; (80063f0 <Oxygen_blending_Calibration+0x290>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b03      	cmp	r3, #3
 800633e:	d151      	bne.n	80063e4 <Oxygen_blending_Calibration+0x284>
	{
		Blower_Signal(Calibration_Blower_Dac);
 8006340:	4b31      	ldr	r3, [pc, #196]	; (8006408 <Oxygen_blending_Calibration+0x2a8>)
 8006342:	881a      	ldrh	r2, [r3, #0]
 8006344:	4b31      	ldr	r3, [pc, #196]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 8006346:	609a      	str	r2, [r3, #8]
		ExpValve_CLOSE();
 8006348:	4b2d      	ldr	r3, [pc, #180]	; (8006400 <Oxygen_blending_Calibration+0x2a0>)
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	4a2c      	ldr	r2, [pc, #176]	; (8006400 <Oxygen_blending_Calibration+0x2a0>)
 800634e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006352:	6153      	str	r3, [r2, #20]
		Count++;
 8006354:	4b2b      	ldr	r3, [pc, #172]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3301      	adds	r3, #1
 800635a:	4a2a      	ldr	r2, [pc, #168]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 800635c:	6013      	str	r3, [r2, #0]
		OOM202.offset_minimum = OOM202.current_reading;
 800635e:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 8006360:	899a      	ldrh	r2, [r3, #12]
 8006362:	4b24      	ldr	r3, [pc, #144]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 8006364:	805a      	strh	r2, [r3, #2]
		if(Count > 10000)
 8006366:	4b27      	ldr	r3, [pc, #156]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f242 7210 	movw	r2, #10000	; 0x2710
 800636e:	4293      	cmp	r3, r2
 8006370:	dd38      	ble.n	80063e4 <Oxygen_blending_Calibration+0x284>
		{
			OOM202.offset_minimum = OOM202.current_reading;
 8006372:	4b20      	ldr	r3, [pc, #128]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 8006374:	899a      	ldrh	r2, [r3, #12]
 8006376:	4b1f      	ldr	r3, [pc, #124]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 8006378:	805a      	strh	r2, [r3, #2]
			Blower_Signal(0);
 800637a:	4b24      	ldr	r3, [pc, #144]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 800637c:	2200      	movs	r2, #0
 800637e:	609a      	str	r2, [r3, #8]
			Parkar_valve_Signal(0);
 8006380:	4b22      	ldr	r3, [pc, #136]	; (800640c <Oxygen_blending_Calibration+0x2ac>)
 8006382:	2200      	movs	r2, #0
 8006384:	615a      	str	r2, [r3, #20]
			ExpValve_OPEN();
 8006386:	4b1e      	ldr	r3, [pc, #120]	; (8006400 <Oxygen_blending_Calibration+0x2a0>)
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	4a1d      	ldr	r2, [pc, #116]	; (8006400 <Oxygen_blending_Calibration+0x2a0>)
 800638c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006390:	6153      	str	r3, [r2, #20]
			Count=0;
 8006392:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <Oxygen_blending_Calibration+0x2a4>)
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
			Step=4;
 8006398:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <Oxygen_blending_Calibration+0x290>)
 800639a:	2204      	movs	r2, #4
 800639c:	701a      	strb	r2, [r3, #0]

			SEND_CALIBRATION_PACKET.RESULT              = Oxygen_Parameter.Achieved_Oxygen ;
 800639e:	4b1e      	ldr	r3, [pc, #120]	; (8006418 <Oxygen_blending_Calibration+0x2b8>)
 80063a0:	7a1b      	ldrb	r3, [r3, #8]
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	4b1d      	ldr	r3, [pc, #116]	; (800641c <Oxygen_blending_Calibration+0x2bc>)
 80063a6:	80da      	strh	r2, [r3, #6]
			SEND_CALIBRATION_PACKET.ERROR_CODE          = OOM202.offset_minimum;
 80063a8:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80063aa:	885b      	ldrh	r3, [r3, #2]
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <Oxygen_blending_Calibration+0x2bc>)
 80063b0:	711a      	strb	r2, [r3, #4]
			SEND_CALIBRATION_PACKET.STAGE               = OOM202.offset_maximum;
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <Oxygen_blending_Calibration+0x294>)
 80063b4:	889b      	ldrh	r3, [r3, #4]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	4b18      	ldr	r3, [pc, #96]	; (800641c <Oxygen_blending_Calibration+0x2bc>)
 80063ba:	715a      	strb	r2, [r3, #5]

			Send_Bluetooth_Data_Farme                   = SEND_CALIBRATION_FRAME;
 80063bc:	4b18      	ldr	r3, [pc, #96]	; (8006420 <Oxygen_blending_Calibration+0x2c0>)
 80063be:	2202      	movs	r2, #2
 80063c0:	701a      	strb	r2, [r3, #0]
			vTaskDelay(Twenty_MilliSecond_Delay);
 80063c2:	2014      	movs	r0, #20
 80063c4:	f014 fe42 	bl	801b04c <vTaskDelay>
			CALIBRARTION.O2_CHECK                       = STOP;
 80063c8:	4b16      	ldr	r3, [pc, #88]	; (8006424 <Oxygen_blending_Calibration+0x2c4>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	711a      	strb	r2, [r3, #4]
			GRAPH_VALUES.Maximum_oxygen_flow            = 0;
 80063ce:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <Oxygen_blending_Calibration+0x29c>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	829a      	strh	r2, [r3, #20]
			Device_Monitoring                           =  NO;
 80063d4:	4b14      	ldr	r3, [pc, #80]	; (8006428 <Oxygen_blending_Calibration+0x2c8>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(Calibration_Handler);
 80063da:	4b14      	ldr	r3, [pc, #80]	; (800642c <Oxygen_blending_Calibration+0x2cc>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f014 fe68 	bl	801b0b4 <vTaskSuspend>
		}
	}

	vTaskDelay(Two_Millisecond_Delay);
 80063e4:	2002      	movs	r0, #2
 80063e6:	f014 fe31 	bl	801b04c <vTaskDelay>
}
 80063ea:	bf00      	nop
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000006 	.word	0x20000006
 80063f4:	20012224 	.word	0x20012224
 80063f8:	20012d60 	.word	0x20012d60
 80063fc:	200125f8 	.word	0x200125f8
 8006400:	40020400 	.word	0x40020400
 8006404:	200000a4 	.word	0x200000a4
 8006408:	20000002 	.word	0x20000002
 800640c:	40007400 	.word	0x40007400
 8006410:	2000001c 	.word	0x2000001c
 8006414:	20000004 	.word	0x20000004
 8006418:	200129d4 	.word	0x200129d4
 800641c:	200122ac 	.word	0x200122ac
 8006420:	2001269d 	.word	0x2001269d
 8006424:	200126bc 	.word	0x200126bc
 8006428:	20012640 	.word	0x20012640
 800642c:	2001298c 	.word	0x2001298c

08006430 <CPAP_Mode_Packet_Data>:




void CPAP_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	 CPAP.CPAP_Val                         = Receive_Graph_Packet->PEEP_CPAP_Plow;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	795a      	ldrb	r2, [r3, #5]
 800643c:	4b3c      	ldr	r3, [pc, #240]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 800643e:	701a      	strb	r2, [r3, #0]
	 CPAP.TRIG_TYPE                        = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	78db      	ldrb	r3, [r3, #3]
 8006444:	099b      	lsrs	r3, r3, #6
 8006446:	b2db      	uxtb	r3, r3
 8006448:	b29b      	uxth	r3, r3
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	4b37      	ldr	r3, [pc, #220]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 8006452:	805a      	strh	r2, [r3, #2]
	 CPAP.TRIG_LMT                         = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	7c1b      	ldrb	r3, [r3, #16]
 8006458:	4a36      	ldr	r2, [pc, #216]	; (8006534 <CPAP_Mode_Packet_Data+0x104>)
 800645a:	fba2 2303 	umull	r2, r3, r2, r3
 800645e:	08db      	lsrs	r3, r3, #3
 8006460:	b2db      	uxtb	r3, r3
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800646a:	4b31      	ldr	r3, [pc, #196]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 800646c:	edc3 7a01 	vstr	s15, [r3, #4]
	 CPAP.TRIG_TIME                        = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	7bdb      	ldrb	r3, [r3, #15]
 8006474:	b29b      	uxth	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	0092      	lsls	r2, r2, #2
 800647a:	4413      	add	r3, r2
 800647c:	461a      	mov	r2, r3
 800647e:	0091      	lsls	r1, r2, #2
 8006480:	461a      	mov	r2, r3
 8006482:	460b      	mov	r3, r1
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	b29a      	uxth	r2, r3
 800648a:	4b29      	ldr	r3, [pc, #164]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 800648c:	811a      	strh	r2, [r3, #8]
	 CPAP.APNEA_TIME                       = Receive_Graph_Packet->Apnea_Time;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	7b9b      	ldrb	r3, [r3, #14]
 8006492:	b29a      	uxth	r2, r3
 8006494:	4b26      	ldr	r3, [pc, #152]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 8006496:	821a      	strh	r2, [r3, #16]
	 CPAP.APNEA_COUNTER                    = (1000*CPAP.APNEA_TIME) ;
 8006498:	4b25      	ldr	r3, [pc, #148]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 800649a:	8a1b      	ldrh	r3, [r3, #16]
 800649c:	461a      	mov	r2, r3
 800649e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064a2:	fb03 f302 	mul.w	r3, r3, r2
 80064a6:	4a22      	ldr	r2, [pc, #136]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 80064a8:	6153      	str	r3, [r2, #20]
	 CPAP.CPAP_O2_Val                      = Receive_Graph_Packet->FiO2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	7a1b      	ldrb	r3, [r3, #8]
 80064ae:	461a      	mov	r2, r3
 80064b0:	4b1f      	ldr	r3, [pc, #124]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 80064b2:	619a      	str	r2, [r3, #24]
	 CPAP.VENT_TYPE                        = ( 0x80 & (Receive_Graph_Packet->Vent_Type_Min_O2)) >> 7;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	7c5b      	ldrb	r3, [r3, #17]
 80064b8:	09db      	lsrs	r3, r3, #7
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	4b1c      	ldr	r3, [pc, #112]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 80064be:	771a      	strb	r2, [r3, #28]

	 OOM202.offset_minimum                 =  ( 0x7F & (Receive_Graph_Packet->Vent_Type_Min_O2));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7c5b      	ldrb	r3, [r3, #17]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	4b1a      	ldr	r3, [pc, #104]	; (8006538 <CPAP_Mode_Packet_Data+0x108>)
 80064ce:	805a      	strh	r2, [r3, #2]
	 OOM202.offset_maximum                 =  Receive_Graph_Packet->Max_O2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	7c9b      	ldrb	r3, [r3, #18]
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	4b18      	ldr	r3, [pc, #96]	; (8006538 <CPAP_Mode_Packet_Data+0x108>)
 80064d8:	809a      	strh	r2, [r3, #4]
	 if(CPAP.VENT_TYPE == 0)
 80064da:	4b15      	ldr	r3, [pc, #84]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 80064dc:	7f1b      	ldrb	r3, [r3, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <CPAP_Mode_Packet_Data+0xba>
		 Vent_Type = ET_TUBE_MODE;
 80064e2:	4b16      	ldr	r3, [pc, #88]	; (800653c <CPAP_Mode_Packet_Data+0x10c>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e006      	b.n	80064f8 <CPAP_Mode_Packet_Data+0xc8>
	 else if(CPAP.VENT_TYPE == 1)
 80064ea:	4b11      	ldr	r3, [pc, #68]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 80064ec:	7f1b      	ldrb	r3, [r3, #28]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d102      	bne.n	80064f8 <CPAP_Mode_Packet_Data+0xc8>
		 Vent_Type = MASK_MODE;
 80064f2:	4b12      	ldr	r3, [pc, #72]	; (800653c <CPAP_Mode_Packet_Data+0x10c>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	701a      	strb	r2, [r3, #0]
	 if(CPAP.TRIG_TYPE == 0)
 80064f8:	4b0d      	ldr	r3, [pc, #52]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 80064fa:	885b      	ldrh	r3, [r3, #2]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <CPAP_Mode_Packet_Data+0xd8>
		Trigger_Type = Pressure_Trigger;
 8006500:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <CPAP_Mode_Packet_Data+0x110>)
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	e006      	b.n	8006516 <CPAP_Mode_Packet_Data+0xe6>
	 else if(CPAP.TRIG_TYPE == 1)
 8006508:	4b09      	ldr	r3, [pc, #36]	; (8006530 <CPAP_Mode_Packet_Data+0x100>)
 800650a:	885b      	ldrh	r3, [r3, #2]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d102      	bne.n	8006516 <CPAP_Mode_Packet_Data+0xe6>
		Trigger_Type = Flow_Trigger;
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <CPAP_Mode_Packet_Data+0x110>)
 8006512:	2201      	movs	r2, #1
 8006514:	701a      	strb	r2, [r3, #0]
	 Mode_Initial_Flag_Set                  = OPEN;
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <CPAP_Mode_Packet_Data+0x114>)
 8006518:	2201      	movs	r2, #1
 800651a:	701a      	strb	r2, [r3, #0]
	 vTaskResume(Mode_initial_Flag_Set_Handler);
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <CPAP_Mode_Packet_Data+0x118>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4618      	mov	r0, r3
 8006522:	f014 fe8b 	bl	801b23c <vTaskResume>

}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	200123e0 	.word	0x200123e0
 8006534:	cccccccd 	.word	0xcccccccd
 8006538:	20012224 	.word	0x20012224
 800653c:	200129f4 	.word	0x200129f4
 8006540:	20012244 	.word	0x20012244
 8006544:	20012cb1 	.word	0x20012cb1
 8006548:	200129ac 	.word	0x200129ac

0800654c <CPAP_Task>:


void CPAP_Task(void *argument)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(CPAP.APNEA_COUNTER > 0)
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <CPAP_Task+0x30>)
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	dd02      	ble.n	8006562 <CPAP_Task+0x16>
		{
			CPAP_CONTROL();
 800655c:	f000 f812 	bl	8006584 <CPAP_CONTROL>
 8006560:	e007      	b.n	8006572 <CPAP_Task+0x26>
		}
		else
		{
			RESET_FLAGS();
 8006562:	f000 fad5 	bl	8006b10 <RESET_FLAGS>
			 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 8006566:	4b06      	ldr	r3, [pc, #24]	; (8006580 <CPAP_Task+0x34>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d101      	bne.n	8006572 <CPAP_Task+0x26>
			 {
				 BACKUP_PC_CMV_START();
 800656e:	f000 fb07 	bl	8006b80 <BACKUP_PC_CMV_START>
			 }

		}
		vTaskDelay(Two_Millisecond_Delay);
 8006572:	2002      	movs	r0, #2
 8006574:	f014 fd6a 	bl	801b04c <vTaskDelay>
		if(CPAP.APNEA_COUNTER > 0)
 8006578:	e7ec      	b.n	8006554 <CPAP_Task+0x8>
 800657a:	bf00      	nop
 800657c:	200123e0 	.word	0x200123e0
 8006580:	20012846 	.word	0x20012846

08006584 <CPAP_CONTROL>:
}



static void CPAP_CONTROL()
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
	        Apnea_Mode  = ON;
 8006588:	4b54      	ldr	r3, [pc, #336]	; (80066dc <CPAP_CONTROL+0x158>)
 800658a:	2200      	movs	r2, #0
 800658c:	701a      	strb	r2, [r3, #0]

				if(CPAP_Control.Blower_Wait_Time_Milli_Second == 0)
 800658e:	4b54      	ldr	r3, [pc, #336]	; (80066e0 <CPAP_CONTROL+0x15c>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <CPAP_CONTROL+0x16>
				{
					RUN_CPAP_MAINTAIN_BLOWER();
 8006596:	f000 f8bd 	bl	8006714 <RUN_CPAP_MAINTAIN_BLOWER>
				}
				if(CPAP_Control.CPAP_Settle_Time == 0 )
 800659a:	4b51      	ldr	r3, [pc, #324]	; (80066e0 <CPAP_CONTROL+0x15c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 8095 	bne.w	80066ce <CPAP_CONTROL+0x14a>
				{

					CPAP_O2_Control();
 80065a4:	f000 fcf2 	bl	8006f8c <CPAP_O2_Control>
					BREATH_STATE    = EXPIRATION_CYCLE;
 80065a8:	4b4e      	ldr	r3, [pc, #312]	; (80066e4 <CPAP_CONTROL+0x160>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]

					Patient_Circuit_Disconnected_Alert_CPAP();
 80065ae:	f000 fc6b 	bl	8006e88 <Patient_Circuit_Disconnected_Alert_CPAP>
					Check_O2_Supply_Alert_in_Apnea(CPAP.CPAP_O2_Val,Patient_Trigger_Count);
 80065b2:	4b4d      	ldr	r3, [pc, #308]	; (80066e8 <CPAP_CONTROL+0x164>)
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	4a4d      	ldr	r2, [pc, #308]	; (80066ec <CPAP_CONTROL+0x168>)
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	4611      	mov	r1, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 fe87 	bl	80072d0 <Check_O2_Supply_Alert_in_Apnea>
					GRAPH_VALUES.Maximum_oxygen_flow = 0;
 80065c2:	4b4b      	ldr	r3, [pc, #300]	; (80066f0 <CPAP_CONTROL+0x16c>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	829a      	strh	r2, [r3, #20]



					if( (CPAP_Control.Trigger_Check_Wait_Time == 0) && ( GRAPH_VALUES.pressure <(Pressure_Trigger_Offset) ) )
 80065c8:	4b45      	ldr	r3, [pc, #276]	; (80066e0 <CPAP_CONTROL+0x15c>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d116      	bne.n	80065fe <CPAP_CONTROL+0x7a>
 80065d0:	4b47      	ldr	r3, [pc, #284]	; (80066f0 <CPAP_CONTROL+0x16c>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	4b47      	ldr	r3, [pc, #284]	; (80066f4 <CPAP_CONTROL+0x170>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	da0f      	bge.n	80065fe <CPAP_CONTROL+0x7a>
					{
						STOP_BLOWER_IF_FLOW_SENSE();
 80065de:	f000 f8b1 	bl	8006744 <STOP_BLOWER_IF_FLOW_SENSE>

							if (Trigger_Type == Pressure_Trigger)
 80065e2:	4b45      	ldr	r3, [pc, #276]	; (80066f8 <CPAP_CONTROL+0x174>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <CPAP_CONTROL+0x6c>
							{
								CHECK_PRESSURE_TRIGGER();
 80065ea:	f000 f8c7 	bl	800677c <CHECK_PRESSURE_TRIGGER>
							if (Trigger_Type == Pressure_Trigger)
 80065ee:	e071      	b.n	80066d4 <CPAP_CONTROL+0x150>
							}
							else if (Trigger_Type == Flow_Trigger)
 80065f0:	4b41      	ldr	r3, [pc, #260]	; (80066f8 <CPAP_CONTROL+0x174>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d16d      	bne.n	80066d4 <CPAP_CONTROL+0x150>
							{
								CHECK_FLOW_TRIGGER();
 80065f8:	f000 f934 	bl	8006864 <CHECK_FLOW_TRIGGER>
							if (Trigger_Type == Pressure_Trigger)
 80065fc:	e06a      	b.n	80066d4 <CPAP_CONTROL+0x150>
							}
					}
					else
					{
						CPAP_Average.CPAP_Cumulative_Val += GRAPH_VALUES.pressure;
 80065fe:	4b3f      	ldr	r3, [pc, #252]	; (80066fc <CPAP_CONTROL+0x178>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a3b      	ldr	r2, [pc, #236]	; (80066f0 <CPAP_CONTROL+0x16c>)
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	4413      	add	r3, r2
 8006608:	4a3c      	ldr	r2, [pc, #240]	; (80066fc <CPAP_CONTROL+0x178>)
 800660a:	6013      	str	r3, [r2, #0]
						CPAP_Average.CPAP_Event_Count++;
 800660c:	4b3b      	ldr	r3, [pc, #236]	; (80066fc <CPAP_CONTROL+0x178>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	3301      	adds	r3, #1
 8006612:	4a3a      	ldr	r2, [pc, #232]	; (80066fc <CPAP_CONTROL+0x178>)
 8006614:	6053      	str	r3, [r2, #4]

						Cpap_Flow_Cummulative_val = Cpap_Flow_Cummulative_val+GRAPH_VALUES.flow;
 8006616:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <CPAP_CONTROL+0x16c>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	4618      	mov	r0, r3
 800661c:	f7f9 ff3c 	bl	8000498 <__aeabi_f2d>
 8006620:	4b37      	ldr	r3, [pc, #220]	; (8006700 <CPAP_CONTROL+0x17c>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7f9 fdd9 	bl	80001dc <__adddf3>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4934      	ldr	r1, [pc, #208]	; (8006700 <CPAP_CONTROL+0x17c>)
 8006630:	e9c1 2300 	strd	r2, r3, [r1]
						Flow_Sensor_Count++;
 8006634:	4b33      	ldr	r3, [pc, #204]	; (8006704 <CPAP_CONTROL+0x180>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	4a32      	ldr	r2, [pc, #200]	; (8006704 <CPAP_CONTROL+0x180>)
 800663c:	6013      	str	r3, [r2, #0]

						if(CPAP_Average.CPAP_Event_Count >600)
 800663e:	4b2f      	ldr	r3, [pc, #188]	; (80066fc <CPAP_CONTROL+0x178>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006646:	d92a      	bls.n	800669e <CPAP_CONTROL+0x11a>
						{
							Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 8006648:	f004 ffbc 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
							CPAP_AVERAGE();
 800664c:	f000 f9ac 	bl	80069a8 <CPAP_AVERAGE>
							CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL    = TUNE_CPAP_BLOWER(&CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL ,
 8006650:	4b25      	ldr	r3, [pc, #148]	; (80066e8 <CPAP_CONTROL+0x164>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	4619      	mov	r1, r3
 8006656:	482c      	ldr	r0, [pc, #176]	; (8006708 <CPAP_CONTROL+0x184>)
 8006658:	f000 f9e2 	bl	8006a20 <TUNE_CPAP_BLOWER>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	4b2a      	ldr	r3, [pc, #168]	; (800670c <CPAP_CONTROL+0x188>)
 8006662:	809a      	strh	r2, [r3, #4]
									                                                                CPAP.CPAP_Val );
							CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL         = CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL;
 8006664:	4b29      	ldr	r3, [pc, #164]	; (800670c <CPAP_CONTROL+0x188>)
 8006666:	889a      	ldrh	r2, [r3, #4]
 8006668:	4b28      	ldr	r3, [pc, #160]	; (800670c <CPAP_CONTROL+0x188>)
 800666a:	805a      	strh	r2, [r3, #2]

							if(CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL <= 500)
 800666c:	4b27      	ldr	r3, [pc, #156]	; (800670c <CPAP_CONTROL+0x188>)
 800666e:	889b      	ldrh	r3, [r3, #4]
 8006670:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006674:	d803      	bhi.n	800667e <CPAP_CONTROL+0xfa>
								CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL = 500;
 8006676:	4b25      	ldr	r3, [pc, #148]	; (800670c <CPAP_CONTROL+0x188>)
 8006678:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800667c:	809a      	strh	r2, [r3, #4]
							if(CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL >= 3500)
 800667e:	4b23      	ldr	r3, [pc, #140]	; (800670c <CPAP_CONTROL+0x188>)
 8006680:	889b      	ldrh	r3, [r3, #4]
 8006682:	f640 52ab 	movw	r2, #3499	; 0xdab
 8006686:	4293      	cmp	r3, r2
 8006688:	d903      	bls.n	8006692 <CPAP_CONTROL+0x10e>
								CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL = 3500;
 800668a:	4b20      	ldr	r3, [pc, #128]	; (800670c <CPAP_CONTROL+0x188>)
 800668c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006690:	809a      	strh	r2, [r3, #4]

							CPAP_Average.CPAP_Cumulative_Val = RESET;
 8006692:	4b1a      	ldr	r3, [pc, #104]	; (80066fc <CPAP_CONTROL+0x178>)
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
							CPAP_Average.CPAP_Event_Count    = RESET;
 8006698:	4b18      	ldr	r3, [pc, #96]	; (80066fc <CPAP_CONTROL+0x178>)
 800669a:	2200      	movs	r2, #0
 800669c:	605a      	str	r2, [r3, #4]
						}



						if(CPAP_Average.CPAP_Event_Count < 300)
 800669e:	4b17      	ldr	r3, [pc, #92]	; (80066fc <CPAP_CONTROL+0x178>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80066a6:	d216      	bcs.n	80066d6 <CPAP_CONTROL+0x152>
						{
							if( GRAPH_VALUES.flow  <= (Flow_Trigger_Offset + 2) )
 80066a8:	4b11      	ldr	r3, [pc, #68]	; (80066f0 <CPAP_CONTROL+0x16c>)
 80066aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80066ae:	4b18      	ldr	r3, [pc, #96]	; (8006710 <CPAP_CONTROL+0x18c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3302      	adds	r3, #2
 80066b4:	ee07 3a90 	vmov	s15, r3
 80066b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	d900      	bls.n	80066c8 <CPAP_CONTROL+0x144>
				else
				{
					CHECK_TRIGGER_OFFSET();
				}

}
 80066c6:	e006      	b.n	80066d6 <CPAP_CONTROL+0x152>
							   CHECK_TRIGGER_OFFSET();
 80066c8:	f000 f944 	bl	8006954 <CHECK_TRIGGER_OFFSET>
}
 80066cc:	e003      	b.n	80066d6 <CPAP_CONTROL+0x152>
					CHECK_TRIGGER_OFFSET();
 80066ce:	f000 f941 	bl	8006954 <CHECK_TRIGGER_OFFSET>
}
 80066d2:	e000      	b.n	80066d6 <CPAP_CONTROL+0x152>
							if (Trigger_Type == Pressure_Trigger)
 80066d4:	bf00      	nop
}
 80066d6:	bf00      	nop
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20012aa1 	.word	0x20012aa1
 80066e0:	20012628 	.word	0x20012628
 80066e4:	20012a3c 	.word	0x20012a3c
 80066e8:	200123e0 	.word	0x200123e0
 80066ec:	20012a0c 	.word	0x20012a0c
 80066f0:	200125f8 	.word	0x200125f8
 80066f4:	2001296c 	.word	0x2001296c
 80066f8:	20012244 	.word	0x20012244
 80066fc:	20012880 	.word	0x20012880
 8006700:	20012ac0 	.word	0x20012ac0
 8006704:	20012a04 	.word	0x20012a04
 8006708:	20012354 	.word	0x20012354
 800670c:	20012350 	.word	0x20012350
 8006710:	20012900 	.word	0x20012900

08006714 <RUN_CPAP_MAINTAIN_BLOWER>:



static void RUN_CPAP_MAINTAIN_BLOWER()
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
	ExpValve_CLOSE();
 8006718:	4b07      	ldr	r3, [pc, #28]	; (8006738 <RUN_CPAP_MAINTAIN_BLOWER+0x24>)
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	4a06      	ldr	r2, [pc, #24]	; (8006738 <RUN_CPAP_MAINTAIN_BLOWER+0x24>)
 800671e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006722:	6153      	str	r3, [r2, #20]
	Blower_Signal( CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL );
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <RUN_CPAP_MAINTAIN_BLOWER+0x28>)
 8006726:	885a      	ldrh	r2, [r3, #2]
 8006728:	4b05      	ldr	r3, [pc, #20]	; (8006740 <RUN_CPAP_MAINTAIN_BLOWER+0x2c>)
 800672a:	609a      	str	r2, [r3, #8]
}
 800672c:	bf00      	nop
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40020400 	.word	0x40020400
 800673c:	20012350 	.word	0x20012350
 8006740:	40007400 	.word	0x40007400

08006744 <STOP_BLOWER_IF_FLOW_SENSE>:


static void STOP_BLOWER_IF_FLOW_SENSE()
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
	if (Trigger_Type == Pressure_Trigger)
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <STOP_BLOWER_IF_FLOW_SENSE+0x30>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <STOP_BLOWER_IF_FLOW_SENSE+0x16>
	{
		CPAP_Control.Blower_Wait_Time_Milli_Second = 500;
 8006750:	4b09      	ldr	r3, [pc, #36]	; (8006778 <STOP_BLOWER_IF_FLOW_SENSE+0x34>)
 8006752:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006756:	605a      	str	r2, [r3, #4]
	}
	else if (Trigger_Type == Flow_Trigger)
	{
		CPAP_Control.Blower_Wait_Time_Milli_Second = 1000;
	}
}
 8006758:	e007      	b.n	800676a <STOP_BLOWER_IF_FLOW_SENSE+0x26>
	else if (Trigger_Type == Flow_Trigger)
 800675a:	4b06      	ldr	r3, [pc, #24]	; (8006774 <STOP_BLOWER_IF_FLOW_SENSE+0x30>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d103      	bne.n	800676a <STOP_BLOWER_IF_FLOW_SENSE+0x26>
		CPAP_Control.Blower_Wait_Time_Milli_Second = 1000;
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <STOP_BLOWER_IF_FLOW_SENSE+0x34>)
 8006764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006768:	605a      	str	r2, [r3, #4]
}
 800676a:	bf00      	nop
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	20012244 	.word	0x20012244
 8006778:	20012628 	.word	0x20012628

0800677c <CHECK_PRESSURE_TRIGGER>:




static void CHECK_PRESSURE_TRIGGER()
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
	if (( GRAPH_VALUES.pressure < (Pressure_Trigger_Offset - CPAP.TRIG_LMT )))
 8006780:	4b29      	ldr	r3, [pc, #164]	; (8006828 <CHECK_PRESSURE_TRIGGER+0xac>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800678c:	4b27      	ldr	r3, [pc, #156]	; (800682c <CHECK_PRESSURE_TRIGGER+0xb0>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	ee07 3a90 	vmov	s15, r3
 8006794:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006798:	4b25      	ldr	r3, [pc, #148]	; (8006830 <CHECK_PRESSURE_TRIGGER+0xb4>)
 800679a:	edd3 7a01 	vldr	s15, [r3, #4]
 800679e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80067a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067aa:	d400      	bmi.n	80067ae <CHECK_PRESSURE_TRIGGER+0x32>
		Send_Frame                                   = First_Frame;
		Send_Bluetooth_Data_Farme                    = SEND_SAMPLED_PARAMETER_FRAME;
		Cpap_Flow                                    = 0;

	}
}
 80067ac:	e039      	b.n	8006822 <CHECK_PRESSURE_TRIGGER+0xa6>
		BREATH_STATE                                 = INSPIRATION_CYCLE;
 80067ae:	4b21      	ldr	r3, [pc, #132]	; (8006834 <CHECK_PRESSURE_TRIGGER+0xb8>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
		Breath_Count                                 = Count_The_Breath;
 80067b4:	4b20      	ldr	r3, [pc, #128]	; (8006838 <CHECK_PRESSURE_TRIGGER+0xbc>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	701a      	strb	r2, [r3, #0]
		GRAPH_VALUES.volume                          = RESET;
 80067ba:	4b1b      	ldr	r3, [pc, #108]	; (8006828 <CHECK_PRESSURE_TRIGGER+0xac>)
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	609a      	str	r2, [r3, #8]
		Volume_max                                   = RESET;
 80067c2:	4b1e      	ldr	r3, [pc, #120]	; (800683c <CHECK_PRESSURE_TRIGGER+0xc0>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
		Alert_Status                                 = ALERT_HAPPEN;
 80067c8:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <CHECK_PRESSURE_TRIGGER+0xc4>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
		LED_Alert();
 80067ce:	f7fb f9f9 	bl	8001bc4 <LED_Alert>
		Patient_Trigger                              = PATIENT_TRIGGER_HAPPEN;
 80067d2:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <CHECK_PRESSURE_TRIGGER+0xc8>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
		Patient_Trigger_Count++;
 80067d8:	4b1b      	ldr	r3, [pc, #108]	; (8006848 <CHECK_PRESSURE_TRIGGER+0xcc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	4a1a      	ldr	r2, [pc, #104]	; (8006848 <CHECK_PRESSURE_TRIGGER+0xcc>)
 80067e0:	6013      	str	r3, [r2, #0]
		Blower_Signal( CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL);
 80067e2:	4b1a      	ldr	r3, [pc, #104]	; (800684c <CHECK_PRESSURE_TRIGGER+0xd0>)
 80067e4:	885a      	ldrh	r2, [r3, #2]
 80067e6:	4b1a      	ldr	r3, [pc, #104]	; (8006850 <CHECK_PRESSURE_TRIGGER+0xd4>)
 80067e8:	609a      	str	r2, [r3, #8]
		CPAP_Control.CPAP_Settle_Time                = (1000+CPAP.TRIG_TIME);
 80067ea:	4b11      	ldr	r3, [pc, #68]	; (8006830 <CHECK_PRESSURE_TRIGGER+0xb4>)
 80067ec:	891b      	ldrh	r3, [r3, #8]
 80067ee:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80067f2:	4a18      	ldr	r2, [pc, #96]	; (8006854 <CHECK_PRESSURE_TRIGGER+0xd8>)
 80067f4:	6013      	str	r3, [r2, #0]
		CPAP.APNEA_COUNTER                           = (1000*CPAP.APNEA_TIME) ;
 80067f6:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <CHECK_PRESSURE_TRIGGER+0xb4>)
 80067f8:	8a1b      	ldrh	r3, [r3, #16]
 80067fa:	461a      	mov	r2, r3
 80067fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006800:	fb03 f302 	mul.w	r3, r3, r2
 8006804:	4a0a      	ldr	r2, [pc, #40]	; (8006830 <CHECK_PRESSURE_TRIGGER+0xb4>)
 8006806:	6153      	str	r3, [r2, #20]
		Send_Frame                                   = First_Frame;
 8006808:	4b13      	ldr	r3, [pc, #76]	; (8006858 <CHECK_PRESSURE_TRIGGER+0xdc>)
 800680a:	2201      	movs	r2, #1
 800680c:	701a      	strb	r2, [r3, #0]
		Send_Bluetooth_Data_Farme                    = SEND_SAMPLED_PARAMETER_FRAME;
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <CHECK_PRESSURE_TRIGGER+0xe0>)
 8006810:	2203      	movs	r2, #3
 8006812:	701a      	strb	r2, [r3, #0]
		Cpap_Flow                                    = 0;
 8006814:	4912      	ldr	r1, [pc, #72]	; (8006860 <CHECK_PRESSURE_TRIGGER+0xe4>)
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006822:	bf00      	nop
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	200125f8 	.word	0x200125f8
 800682c:	2001296c 	.word	0x2001296c
 8006830:	200123e0 	.word	0x200123e0
 8006834:	20012a3c 	.word	0x20012a3c
 8006838:	200122a8 	.word	0x200122a8
 800683c:	20012c70 	.word	0x20012c70
 8006840:	2001287c 	.word	0x2001287c
 8006844:	2001263d 	.word	0x2001263d
 8006848:	20012a0c 	.word	0x20012a0c
 800684c:	20012350 	.word	0x20012350
 8006850:	40007400 	.word	0x40007400
 8006854:	20012628 	.word	0x20012628
 8006858:	20012770 	.word	0x20012770
 800685c:	2001269d 	.word	0x2001269d
 8006860:	20012218 	.word	0x20012218

08006864 <CHECK_FLOW_TRIGGER>:

static void CHECK_FLOW_TRIGGER()
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
	if ((GRAPH_VALUES.flow > (Flow_Trigger_Offset+CPAP.TRIG_LMT )))
 8006868:	4b29      	ldr	r3, [pc, #164]	; (8006910 <CHECK_FLOW_TRIGGER+0xac>)
 800686a:	ed93 7a01 	vldr	s14, [r3, #4]
 800686e:	4b29      	ldr	r3, [pc, #164]	; (8006914 <CHECK_FLOW_TRIGGER+0xb0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800687a:	4b27      	ldr	r3, [pc, #156]	; (8006918 <CHECK_FLOW_TRIGGER+0xb4>)
 800687c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688c:	dc00      	bgt.n	8006890 <CHECK_FLOW_TRIGGER+0x2c>
		Send_Bluetooth_Data_Farme                   = SEND_SAMPLED_PARAMETER_FRAME;
		Cpap_Flow                                    = 0;


	}
}
 800688e:	e03d      	b.n	800690c <CHECK_FLOW_TRIGGER+0xa8>
		BREATH_STATE                                = INSPIRATION_CYCLE;
 8006890:	4b22      	ldr	r3, [pc, #136]	; (800691c <CHECK_FLOW_TRIGGER+0xb8>)
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
		Breath_Count                                = Count_The_Breath;
 8006896:	4b22      	ldr	r3, [pc, #136]	; (8006920 <CHECK_FLOW_TRIGGER+0xbc>)
 8006898:	2201      	movs	r2, #1
 800689a:	701a      	strb	r2, [r3, #0]
		GRAPH_VALUES.volume                         = RESET;
 800689c:	4b1c      	ldr	r3, [pc, #112]	; (8006910 <CHECK_FLOW_TRIGGER+0xac>)
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	609a      	str	r2, [r3, #8]
		Volume_max                                  = RESET;
 80068a4:	4b1f      	ldr	r3, [pc, #124]	; (8006924 <CHECK_FLOW_TRIGGER+0xc0>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
		Alert_Status                                = ALERT_HAPPEN;
 80068aa:	4b1f      	ldr	r3, [pc, #124]	; (8006928 <CHECK_FLOW_TRIGGER+0xc4>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
		LED_Alert();
 80068b0:	f7fb f988 	bl	8001bc4 <LED_Alert>
		LAST_FLOW_TRIGGER 							= FLOW_TRIGGER;
 80068b4:	4b1d      	ldr	r3, [pc, #116]	; (800692c <CHECK_FLOW_TRIGGER+0xc8>)
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <CHECK_FLOW_TRIGGER+0xcc>)
 80068ba:	701a      	strb	r2, [r3, #0]
		Patient_Trigger  							= PATIENT_TRIGGER_HAPPEN;
 80068bc:	4b1d      	ldr	r3, [pc, #116]	; (8006934 <CHECK_FLOW_TRIGGER+0xd0>)
 80068be:	2201      	movs	r2, #1
 80068c0:	701a      	strb	r2, [r3, #0]
		Patient_Trigger_Count++;
 80068c2:	4b1d      	ldr	r3, [pc, #116]	; (8006938 <CHECK_FLOW_TRIGGER+0xd4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	4a1b      	ldr	r2, [pc, #108]	; (8006938 <CHECK_FLOW_TRIGGER+0xd4>)
 80068ca:	6013      	str	r3, [r2, #0]
		Blower_Signal( CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL);
 80068cc:	4b1b      	ldr	r3, [pc, #108]	; (800693c <CHECK_FLOW_TRIGGER+0xd8>)
 80068ce:	885a      	ldrh	r2, [r3, #2]
 80068d0:	4b1b      	ldr	r3, [pc, #108]	; (8006940 <CHECK_FLOW_TRIGGER+0xdc>)
 80068d2:	609a      	str	r2, [r3, #8]
		CPAP_Control.CPAP_Settle_Time               = (1000 + CPAP.TRIG_TIME);
 80068d4:	4b10      	ldr	r3, [pc, #64]	; (8006918 <CHECK_FLOW_TRIGGER+0xb4>)
 80068d6:	891b      	ldrh	r3, [r3, #8]
 80068d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80068dc:	4a19      	ldr	r2, [pc, #100]	; (8006944 <CHECK_FLOW_TRIGGER+0xe0>)
 80068de:	6013      	str	r3, [r2, #0]
		CPAP.APNEA_COUNTER                          = (1000*CPAP.APNEA_TIME) ;
 80068e0:	4b0d      	ldr	r3, [pc, #52]	; (8006918 <CHECK_FLOW_TRIGGER+0xb4>)
 80068e2:	8a1b      	ldrh	r3, [r3, #16]
 80068e4:	461a      	mov	r2, r3
 80068e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068ea:	fb03 f302 	mul.w	r3, r3, r2
 80068ee:	4a0a      	ldr	r2, [pc, #40]	; (8006918 <CHECK_FLOW_TRIGGER+0xb4>)
 80068f0:	6153      	str	r3, [r2, #20]
		Send_Frame                                  = First_Frame;
 80068f2:	4b15      	ldr	r3, [pc, #84]	; (8006948 <CHECK_FLOW_TRIGGER+0xe4>)
 80068f4:	2201      	movs	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
		Send_Bluetooth_Data_Farme                   = SEND_SAMPLED_PARAMETER_FRAME;
 80068f8:	4b14      	ldr	r3, [pc, #80]	; (800694c <CHECK_FLOW_TRIGGER+0xe8>)
 80068fa:	2203      	movs	r2, #3
 80068fc:	701a      	strb	r2, [r3, #0]
		Cpap_Flow                                    = 0;
 80068fe:	4914      	ldr	r1, [pc, #80]	; (8006950 <CHECK_FLOW_TRIGGER+0xec>)
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	e9c1 2300 	strd	r2, r3, [r1]
}
 800690c:	bf00      	nop
 800690e:	bd80      	pop	{r7, pc}
 8006910:	200125f8 	.word	0x200125f8
 8006914:	20012900 	.word	0x20012900
 8006918:	200123e0 	.word	0x200123e0
 800691c:	20012a3c 	.word	0x20012a3c
 8006920:	200122a8 	.word	0x200122a8
 8006924:	20012c70 	.word	0x20012c70
 8006928:	2001287c 	.word	0x2001287c
 800692c:	200129aa 	.word	0x200129aa
 8006930:	20012b70 	.word	0x20012b70
 8006934:	2001263d 	.word	0x2001263d
 8006938:	20012a0c 	.word	0x20012a0c
 800693c:	20012350 	.word	0x20012350
 8006940:	40007400 	.word	0x40007400
 8006944:	20012628 	.word	0x20012628
 8006948:	20012770 	.word	0x20012770
 800694c:	2001269d 	.word	0x2001269d
 8006950:	20012218 	.word	0x20012218

08006954 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
	if(GRAPH_VALUES.flow>=0)
 8006958:	4b0f      	ldr	r3, [pc, #60]	; (8006998 <CHECK_TRIGGER_OFFSET+0x44>)
 800695a:	edd3 7a01 	vldr	s15, [r3, #4]
 800695e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006966:	da00      	bge.n	800696a <CHECK_TRIGGER_OFFSET+0x16>
	{
		FLOW_TRIGGER             = 0;
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
	}
}
 8006968:	e010      	b.n	800698c <CHECK_TRIGGER_OFFSET+0x38>
		FLOW_TRIGGER             = 0;
 800696a:	4b0c      	ldr	r3, [pc, #48]	; (800699c <CHECK_TRIGGER_OFFSET+0x48>)
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 8006970:	4b09      	ldr	r3, [pc, #36]	; (8006998 <CHECK_TRIGGER_OFFSET+0x44>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <CHECK_TRIGGER_OFFSET+0x4c>)
 8006978:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 800697a:	4b07      	ldr	r3, [pc, #28]	; (8006998 <CHECK_TRIGGER_OFFSET+0x44>)
 800697c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006980:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006984:	ee17 2a90 	vmov	r2, s15
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <CHECK_TRIGGER_OFFSET+0x50>)
 800698a:	601a      	str	r2, [r3, #0]
}
 800698c:	bf00      	nop
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	200125f8 	.word	0x200125f8
 800699c:	200129aa 	.word	0x200129aa
 80069a0:	2001296c 	.word	0x2001296c
 80069a4:	20012900 	.word	0x20012900

080069a8 <CPAP_AVERAGE>:


static void CPAP_AVERAGE()
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
	if((CPAP_Average.CPAP_Cumulative_Val == 0) || (CPAP_Average.CPAP_Event_Count == 0))
 80069ac:	4b17      	ldr	r3, [pc, #92]	; (8006a0c <CPAP_AVERAGE+0x64>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <CPAP_AVERAGE+0x14>
 80069b4:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <CPAP_AVERAGE+0x64>)
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <CPAP_AVERAGE+0x20>
	{
		CPAP_Average.CPAP_Cumulative_Val = 1;
 80069bc:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <CPAP_AVERAGE+0x64>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
		CPAP_Average.CPAP_Event_Count    = 1;
 80069c2:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <CPAP_AVERAGE+0x64>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	605a      	str	r2, [r3, #4]
	}
	CPAP_Average.CPAP_AVG_VAL        = (uint32_t)(CPAP_Average.CPAP_Cumulative_Val/ CPAP_Average.CPAP_Event_Count);
 80069c8:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <CPAP_AVERAGE+0x64>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <CPAP_AVERAGE+0x64>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <CPAP_AVERAGE+0x64>)
 80069d8:	731a      	strb	r2, [r3, #12]
	if(CPAP_Average.CPAP_AVG_VAL   == CPAP.CPAP_Val)
 80069da:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <CPAP_AVERAGE+0x64>)
 80069dc:	7b1a      	ldrb	r2, [r3, #12]
 80069de:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <CPAP_AVERAGE+0x68>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d108      	bne.n	80069f8 <CPAP_AVERAGE+0x50>
	{
		Change_CPAP_DAC_Values_INVASIVE(CPAP.CPAP_Val,CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL );
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <CPAP_AVERAGE+0x68>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <CPAP_AVERAGE+0x6c>)
 80069ec:	8892      	ldrh	r2, [r2, #4]
 80069ee:	4611      	mov	r1, r2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f002 ffc3 	bl	800997c <Change_CPAP_DAC_Values_INVASIVE>
		{
			CPAP_Control.CPAP_Settle_Time   = 1000;
		}

	}
}
 80069f6:	e007      	b.n	8006a08 <CPAP_AVERAGE+0x60>
		if (Trigger_Type == Flow_Trigger)
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <CPAP_AVERAGE+0x70>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d103      	bne.n	8006a08 <CPAP_AVERAGE+0x60>
			CPAP_Control.CPAP_Settle_Time   = 1000;
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <CPAP_AVERAGE+0x74>)
 8006a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a06:	601a      	str	r2, [r3, #0]
}
 8006a08:	bf00      	nop
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20012880 	.word	0x20012880
 8006a10:	200123e0 	.word	0x200123e0
 8006a14:	20012350 	.word	0x20012350
 8006a18:	20012244 	.word	0x20012244
 8006a1c:	20012628 	.word	0x20012628

08006a20 <TUNE_CPAP_BLOWER>:



static uint16_t TUNE_CPAP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PEEP)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	70fb      	strb	r3, [r7, #3]
	if(  ( CPAP_Average.CPAP_AVG_VAL)  > ( Set_PEEP ) && (CPAP_Average.CPAP_AVG_VAL  < (Set_PEEP + 2) ) )
 8006a2c:	4b37      	ldr	r3, [pc, #220]	; (8006b0c <TUNE_CPAP_BLOWER+0xec>)
 8006a2e:	7b1b      	ldrb	r3, [r3, #12]
 8006a30:	78fa      	ldrb	r2, [r7, #3]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d20c      	bcs.n	8006a50 <TUNE_CPAP_BLOWER+0x30>
 8006a36:	78fb      	ldrb	r3, [r7, #3]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	4a34      	ldr	r2, [pc, #208]	; (8006b0c <TUNE_CPAP_BLOWER+0xec>)
 8006a3c:	7b12      	ldrb	r2, [r2, #12]
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	db06      	blt.n	8006a50 <TUNE_CPAP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	3b0a      	subs	r3, #10
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	801a      	strh	r2, [r3, #0]
 8006a4e:	e055      	b.n	8006afc <TUNE_CPAP_BLOWER+0xdc>
	}
	else if(  ( CPAP_Average.CPAP_AVG_VAL)  >= ( Set_PEEP + 2 ) && (CPAP_Average.CPAP_AVG_VAL  < (Set_PEEP + 4) ) )
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	3301      	adds	r3, #1
 8006a54:	4a2d      	ldr	r2, [pc, #180]	; (8006b0c <TUNE_CPAP_BLOWER+0xec>)
 8006a56:	7b12      	ldrb	r2, [r2, #12]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	da0c      	bge.n	8006a76 <TUNE_CPAP_BLOWER+0x56>
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	3303      	adds	r3, #3
 8006a60:	4a2a      	ldr	r2, [pc, #168]	; (8006b0c <TUNE_CPAP_BLOWER+0xec>)
 8006a62:	7b12      	ldrb	r2, [r2, #12]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	db06      	blt.n	8006a76 <TUNE_CPAP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	3b14      	subs	r3, #20
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	801a      	strh	r2, [r3, #0]
 8006a74:	e042      	b.n	8006afc <TUNE_CPAP_BLOWER+0xdc>
	}
	else if(  ( CPAP_Average.CPAP_AVG_VAL)  >= ( Set_PEEP + 4 )  )
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	3303      	adds	r3, #3
 8006a7a:	4a24      	ldr	r2, [pc, #144]	; (8006b0c <TUNE_CPAP_BLOWER+0xec>)
 8006a7c:	7b12      	ldrb	r2, [r2, #12]
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	da06      	bge.n	8006a90 <TUNE_CPAP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	3b28      	subs	r3, #40	; 0x28
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	801a      	strh	r2, [r3, #0]
 8006a8e:	e035      	b.n	8006afc <TUNE_CPAP_BLOWER+0xdc>
	}
	else if( (CPAP_Average.CPAP_AVG_VAL  < Set_PEEP) && (CPAP_Average.CPAP_AVG_VAL  > (Set_PEEP -2) ) )
 8006a90:	4b1e      	ldr	r3, [pc, #120]	; (8006b0c <TUNE_CPAP_BLOWER+0xec>)
 8006a92:	7b1b      	ldrb	r3, [r3, #12]
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d90c      	bls.n	8006ab4 <TUNE_CPAP_BLOWER+0x94>
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	4a1b      	ldr	r2, [pc, #108]	; (8006b0c <TUNE_CPAP_BLOWER+0xec>)
 8006aa0:	7b12      	ldrb	r2, [r2, #12]
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	dc06      	bgt.n	8006ab4 <TUNE_CPAP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	330a      	adds	r3, #10
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	801a      	strh	r2, [r3, #0]
 8006ab2:	e023      	b.n	8006afc <TUNE_CPAP_BLOWER+0xdc>
	}
	else if(  (CPAP_Average.CPAP_AVG_VAL  <= (Set_PEEP-2) ) && (CPAP_Average.CPAP_AVG_VAL  >  (Set_PEEP-4) ) )
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	4a14      	ldr	r2, [pc, #80]	; (8006b0c <TUNE_CPAP_BLOWER+0xec>)
 8006aba:	7b12      	ldrb	r2, [r2, #12]
 8006abc:	4293      	cmp	r3, r2
 8006abe:	dd0c      	ble.n	8006ada <TUNE_CPAP_BLOWER+0xba>
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	3b03      	subs	r3, #3
 8006ac4:	4a11      	ldr	r2, [pc, #68]	; (8006b0c <TUNE_CPAP_BLOWER+0xec>)
 8006ac6:	7b12      	ldrb	r2, [r2, #12]
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	dc06      	bgt.n	8006ada <TUNE_CPAP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	801a      	strh	r2, [r3, #0]
 8006ad8:	e010      	b.n	8006afc <TUNE_CPAP_BLOWER+0xdc>
	}
	else if(  (CPAP_Average.CPAP_AVG_VAL  <= (Set_PEEP-4) )  )
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	3b03      	subs	r3, #3
 8006ade:	4a0b      	ldr	r2, [pc, #44]	; (8006b0c <TUNE_CPAP_BLOWER+0xec>)
 8006ae0:	7b12      	ldrb	r2, [r2, #12]
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	dd06      	ble.n	8006af4 <TUNE_CPAP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	3328      	adds	r3, #40	; 0x28
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	e003      	b.n	8006afc <TUNE_CPAP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	881a      	ldrh	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	881b      	ldrh	r3, [r3, #0]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	20012880 	.word	0x20012880

08006b10 <RESET_FLAGS>:



static void RESET_FLAGS()
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
	Apnea_Mode                                  = OFF;
 8006b14:	4b11      	ldr	r3, [pc, #68]	; (8006b5c <RESET_FLAGS+0x4c>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	701a      	strb	r2, [r3, #0]
	Blower_Signal(0);
 8006b1a:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <RESET_FLAGS+0x50>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	609a      	str	r2, [r3, #8]
	Peep_Status                   				= PEEP_NOT_ACHEIVED;
 8006b20:	4b10      	ldr	r3, [pc, #64]	; (8006b64 <RESET_FLAGS+0x54>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			    = OPENED;
 8006b26:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <RESET_FLAGS+0x58>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	701a      	strb	r2, [r3, #0]
	Patient_Trigger_Count                       = 0;
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <RESET_FLAGS+0x5c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]
	Clear_All_Alert_Bits();
 8006b32:	f7fa fa1f 	bl	8000f74 <Clear_All_Alert_Bits>
	Send_Bluetooth_Data_Farme                   = SEND_ALERT_FRAME;
 8006b36:	4b0e      	ldr	r3, [pc, #56]	; (8006b70 <RESET_FLAGS+0x60>)
 8006b38:	2201      	movs	r2, #1
 8006b3a:	701a      	strb	r2, [r3, #0]
	Apnea_Alert                                 = APNEA_ALERT_HAPPEN;
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	; (8006b74 <RESET_FLAGS+0x64>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	701a      	strb	r2, [r3, #0]
	Alert_Status                                = ALERT_HAPPEN;
 8006b42:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <RESET_FLAGS+0x68>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	701a      	strb	r2, [r3, #0]
	SET_ALERT_BIT(SECOND_FRAME_UN,_ALERT_APNEA);
 8006b48:	4a0c      	ldr	r2, [pc, #48]	; (8006b7c <RESET_FLAGS+0x6c>)
 8006b4a:	7913      	ldrb	r3, [r2, #4]
 8006b4c:	f043 0301 	orr.w	r3, r3, #1
 8006b50:	7113      	strb	r3, [r2, #4]
	LED_Alert();
 8006b52:	f7fb f837 	bl	8001bc4 <LED_Alert>

}
 8006b56:	bf00      	nop
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20012aa1 	.word	0x20012aa1
 8006b60:	40007400 	.word	0x40007400
 8006b64:	20012a37 	.word	0x20012a37
 8006b68:	20012a34 	.word	0x20012a34
 8006b6c:	20012a0c 	.word	0x20012a0c
 8006b70:	2001269d 	.word	0x2001269d
 8006b74:	200129f5 	.word	0x200129f5
 8006b78:	2001287c 	.word	0x2001287c
 8006b7c:	20012408 	.word	0x20012408

08006b80 <BACKUP_PC_CMV_START>:



static void BACKUP_PC_CMV_START()
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0

	if(Backup_PC_CMV_SET_VALUE == CHANGE_HAPPEN)
 8006b84:	4b9c      	ldr	r3, [pc, #624]	; (8006df8 <BACKUP_PC_CMV_START+0x278>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	f040 80e2 	bne.w	8006d52 <BACKUP_PC_CMV_START+0x1d2>
	{
		Mode                                                  = Backup_Pccmv;
 8006b8e:	4b9b      	ldr	r3, [pc, #620]	; (8006dfc <BACKUP_PC_CMV_START+0x27c>)
 8006b90:	2215      	movs	r2, #21
 8006b92:	701a      	strb	r2, [r3, #0]
		Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 8006b94:	4b9a      	ldr	r3, [pc, #616]	; (8006e00 <BACKUP_PC_CMV_START+0x280>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			              = OPENED;
 8006b9a:	4b9a      	ldr	r3, [pc, #616]	; (8006e04 <BACKUP_PC_CMV_START+0x284>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
		Oxygen_Parameter.O2_DAC                               = 1700;
 8006ba0:	4b99      	ldr	r3, [pc, #612]	; (8006e08 <BACKUP_PC_CMV_START+0x288>)
 8006ba2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8006ba6:	60da      	str	r2, [r3, #12]

		if(Common_Mode_Parameter._FIO2_Val == 100)
 8006ba8:	4b98      	ldr	r3, [pc, #608]	; (8006e0c <BACKUP_PC_CMV_START+0x28c>)
 8006baa:	78db      	ldrb	r3, [r3, #3]
 8006bac:	2b64      	cmp	r3, #100	; 0x64
 8006bae:	d10f      	bne.n	8006bd0 <BACKUP_PC_CMV_START+0x50>
		{
			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = APNEA_DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 8006bb0:	4b97      	ldr	r3, [pc, #604]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f002 fded 	bl	8009794 <APNEA_DAC_VAL>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4b95      	ldr	r3, [pc, #596]	; (8006e14 <BACKUP_PC_CMV_START+0x294>)
 8006bc0:	811a      	strh	r2, [r3, #8]
			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL  = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL -200;
 8006bc2:	4b94      	ldr	r3, [pc, #592]	; (8006e14 <BACKUP_PC_CMV_START+0x294>)
 8006bc4:	891b      	ldrh	r3, [r3, #8]
 8006bc6:	3bc8      	subs	r3, #200	; 0xc8
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	4b92      	ldr	r3, [pc, #584]	; (8006e14 <BACKUP_PC_CMV_START+0x294>)
 8006bcc:	811a      	strh	r2, [r3, #8]
 8006bce:	e008      	b.n	8006be2 <BACKUP_PC_CMV_START+0x62>
		}
		else
		{
			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = APNEA_DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 8006bd0:	4b8f      	ldr	r3, [pc, #572]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f002 fddd 	bl	8009794 <APNEA_DAC_VAL>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	461a      	mov	r2, r3
 8006bde:	4b8d      	ldr	r3, [pc, #564]	; (8006e14 <BACKUP_PC_CMV_START+0x294>)
 8006be0:	811a      	strh	r2, [r3, #8]
		}



	    	PIP_control_Task.PIP_Control_Task_Delay           = 10;                               //new
 8006be2:	4b8d      	ldr	r3, [pc, #564]	; (8006e18 <BACKUP_PC_CMV_START+0x298>)
 8006be4:	220a      	movs	r2, #10
 8006be6:	801a      	strh	r2, [r3, #0]
	    	PIP_control_Task.Increase_Each_DAC_SET_CONST      = 30;                               //new
 8006be8:	4b8b      	ldr	r3, [pc, #556]	; (8006e18 <BACKUP_PC_CMV_START+0x298>)
 8006bea:	221e      	movs	r2, #30
 8006bec:	80da      	strh	r2, [r3, #6]
	    	BACKUP_PC_CMV.RISE_TIME_MS_Val                    = (BACKUP_PC_CMV.Rise_Time *100);
 8006bee:	4b88      	ldr	r3, [pc, #544]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006bf0:	7c9b      	ldrb	r3, [r3, #18]
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	2364      	movs	r3, #100	; 0x64
 8006bf6:	fb03 f302 	mul.w	r3, r3, r2
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c02:	4b83      	ldr	r3, [pc, #524]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c04:	edc3 7a01 	vstr	s15, [r3, #4]

	    	if(BACKUP_PC_CMV.RISE_TIME_MS_Val >= BACKUP_PC_CMV.INSPIRATION_TIME)                  //new
 8006c08:	4b81      	ldr	r3, [pc, #516]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8006c0e:	4b80      	ldr	r3, [pc, #512]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c22:	db08      	blt.n	8006c36 <BACKUP_PC_CMV_START+0xb6>
	    	{
	    		BACKUP_PC_CMV.RISE_TIME_MS_Val =BACKUP_PC_CMV.INSPIRATION_TIME;
 8006c24:	4b7a      	ldr	r3, [pc, #488]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	ee07 3a90 	vmov	s15, r3
 8006c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c30:	4b77      	ldr	r3, [pc, #476]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c32:	edc3 7a01 	vstr	s15, [r3, #4]
	    	}
	    	if(BACKUP_PC_CMV.RISE_TIME_MS_Val <=600)
 8006c36:	4b76      	ldr	r3, [pc, #472]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c38:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c3c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8006e1c <BACKUP_PC_CMV_START+0x29c>
 8006c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c48:	d802      	bhi.n	8006c50 <BACKUP_PC_CMV_START+0xd0>
	    	{
	    		BACKUP_PC_CMV.RISE_TIME_MS_Val =600;
 8006c4a:	4b71      	ldr	r3, [pc, #452]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c4c:	4a74      	ldr	r2, [pc, #464]	; (8006e20 <BACKUP_PC_CMV_START+0x2a0>)
 8006c4e:	605a      	str	r2, [r3, #4]
	    	}
	    	BACKUP_PC_CMV.Rise_Time_percentage   = ((float)BACKUP_PC_CMV.RISE_TIME_MS_Val /BACKUP_PC_CMV.INSPIRATION_TIME) * 100.00;     //new
 8006c50:	4b6f      	ldr	r3, [pc, #444]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c52:	ed93 7a01 	vldr	s14, [r3, #4]
 8006c56:	4b6e      	ldr	r3, [pc, #440]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006c66:	ee16 0a90 	vmov	r0, s13
 8006c6a:	f7f9 fc15 	bl	8000498 <__aeabi_f2d>
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	4b6c      	ldr	r3, [pc, #432]	; (8006e24 <BACKUP_PC_CMV_START+0x2a4>)
 8006c74:	f7f9 fc68 	bl	8000548 <__aeabi_dmul>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	4619      	mov	r1, r3
 8006c80:	f7f9 ff24 	bl	8000acc <__aeabi_d2uiz>
 8006c84:	4603      	mov	r3, r0
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	4b61      	ldr	r3, [pc, #388]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c8a:	74da      	strb	r2, [r3, #19]
	    	PIP_control_Task.PIP_Acheived_Time_Ms      	 =  (BACKUP_PC_CMV.RISE_TIME_MS_Val * 2);
 8006c8c:	4b60      	ldr	r3, [pc, #384]	; (8006e10 <BACKUP_PC_CMV_START+0x290>)
 8006c8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c9a:	ee17 3a90 	vmov	r3, s15
 8006c9e:	b21a      	sxth	r2, r3
 8006ca0:	4b5d      	ldr	r3, [pc, #372]	; (8006e18 <BACKUP_PC_CMV_START+0x298>)
 8006ca2:	809a      	strh	r2, [r3, #4]



			Smooth_Ramp_Time_Val_Count = 0;
 8006ca4:	4b60      	ldr	r3, [pc, #384]	; (8006e28 <BACKUP_PC_CMV_START+0x2a8>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	701a      	strb	r2, [r3, #0]
			Smooth_Ramp_Time_Val       = 15;
 8006caa:	4b60      	ldr	r3, [pc, #384]	; (8006e2c <BACKUP_PC_CMV_START+0x2ac>)
 8006cac:	220f      	movs	r2, #15
 8006cae:	701a      	strb	r2, [r3, #0]
			if(Common_Mode_Parameter._PEEP_Val >= 15)
 8006cb0:	4b56      	ldr	r3, [pc, #344]	; (8006e0c <BACKUP_PC_CMV_START+0x28c>)
 8006cb2:	785b      	ldrb	r3, [r3, #1]
 8006cb4:	2b0e      	cmp	r3, #14
 8006cb6:	d903      	bls.n	8006cc0 <BACKUP_PC_CMV_START+0x140>
			{
			  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 8006cb8:	4b5d      	ldr	r3, [pc, #372]	; (8006e30 <BACKUP_PC_CMV_START+0x2b0>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e00e      	b.n	8006cde <BACKUP_PC_CMV_START+0x15e>
			}
			else if( (Common_Mode_Parameter._PEEP_Val < 15) && (Common_Mode_Parameter._PEEP_Val >= 9))
 8006cc0:	4b52      	ldr	r3, [pc, #328]	; (8006e0c <BACKUP_PC_CMV_START+0x28c>)
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	2b0e      	cmp	r3, #14
 8006cc6:	d807      	bhi.n	8006cd8 <BACKUP_PC_CMV_START+0x158>
 8006cc8:	4b50      	ldr	r3, [pc, #320]	; (8006e0c <BACKUP_PC_CMV_START+0x28c>)
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d903      	bls.n	8006cd8 <BACKUP_PC_CMV_START+0x158>
			{
			  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Pending;
 8006cd0:	4b57      	ldr	r3, [pc, #348]	; (8006e30 <BACKUP_PC_CMV_START+0x2b0>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
 8006cd6:	e002      	b.n	8006cde <BACKUP_PC_CMV_START+0x15e>
			}
			else
			{
				Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 8006cd8:	4b55      	ldr	r3, [pc, #340]	; (8006e30 <BACKUP_PC_CMV_START+0x2b0>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	701a      	strb	r2, [r3, #0]
			}

		controlsys_Init(&Parker_valve_tune);          //parker
 8006cde:	4855      	ldr	r0, [pc, #340]	; (8006e34 <BACKUP_PC_CMV_START+0x2b4>)
 8006ce0:	f009 fbba 	bl	8010458 <controlsys_Init>
		Avg_Flow                                                   = 1;
 8006ce4:	4b54      	ldr	r3, [pc, #336]	; (8006e38 <BACKUP_PC_CMV_START+0x2b8>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	801a      	strh	r2, [r3, #0]
		Flow_Count                                                 = 0;
 8006cea:	4b54      	ldr	r3, [pc, #336]	; (8006e3c <BACKUP_PC_CMV_START+0x2bc>)
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
		Flow_Cummulative_Val                                       = 0;
 8006cf2:	4b53      	ldr	r3, [pc, #332]	; (8006e40 <BACKUP_PC_CMV_START+0x2c0>)
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	601a      	str	r2, [r3, #0]
		Check_Oxygen_Count                                         = 0;        //new
 8006cfa:	4b52      	ldr	r3, [pc, #328]	; (8006e44 <BACKUP_PC_CMV_START+0x2c4>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
		Temp_Dac                                                   = 1400;     //new
 8006d00:	4b51      	ldr	r3, [pc, #324]	; (8006e48 <BACKUP_PC_CMV_START+0x2c8>)
 8006d02:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8006d06:	801a      	strh	r2, [r3, #0]
		inc_dac                                                    = 2;        //new
 8006d08:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <BACKUP_PC_CMV_START+0x2cc>)
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	801a      	strh	r2, [r3, #0]
		Oxygen_Blending_Status                                     = OXYGEN_NOT_ACHIEVED;  //new
 8006d0e:	4b50      	ldr	r3, [pc, #320]	; (8006e50 <BACKUP_PC_CMV_START+0x2d0>)
 8006d10:	2201      	movs	r2, #1
 8006d12:	701a      	strb	r2, [r3, #0]
		PIP_Average_Parameter.PIP_Cumulative_Val                   = 1;
 8006d14:	4b4f      	ldr	r3, [pc, #316]	; (8006e54 <BACKUP_PC_CMV_START+0x2d4>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	605a      	str	r2, [r3, #4]
		PIP_Average_Parameter.PIP_Event_Count                      = 1;
 8006d1a:	4b4e      	ldr	r3, [pc, #312]	; (8006e54 <BACKUP_PC_CMV_START+0x2d4>)
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val                = 1;
 8006d20:	4b4d      	ldr	r3, [pc, #308]	; (8006e58 <BACKUP_PC_CMV_START+0x2d8>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count                   = 1;
 8006d26:	4b4c      	ldr	r3, [pc, #304]	; (8006e58 <BACKUP_PC_CMV_START+0x2d8>)
 8006d28:	2201      	movs	r2, #1
 8006d2a:	60da      	str	r2, [r3, #12]
		Need_PID_Task_Delay                                        = NO;
 8006d2c:	4b4b      	ldr	r3, [pc, #300]	; (8006e5c <BACKUP_PC_CMV_START+0x2dc>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
		Tune_PID_Task_Delay                                        = T_OPEN;
 8006d32:	4b4b      	ldr	r3, [pc, #300]	; (8006e60 <BACKUP_PC_CMV_START+0x2e0>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
		PIP_control_Task.Low_PIP_Count                             = RESET;
 8006d38:	4b37      	ldr	r3, [pc, #220]	; (8006e18 <BACKUP_PC_CMV_START+0x298>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	729a      	strb	r2, [r3, #10]
		PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = RESET;
 8006d3e:	4b36      	ldr	r3, [pc, #216]	; (8006e18 <BACKUP_PC_CMV_START+0x298>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	725a      	strb	r2, [r3, #9]
		Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 8006d44:	4b47      	ldr	r3, [pc, #284]	; (8006e64 <BACKUP_PC_CMV_START+0x2e4>)
 8006d46:	2201      	movs	r2, #1
 8006d48:	701a      	strb	r2, [r3, #0]
		Backup_PC_CMV_SET_VALUE                                    = NO_CHANGES;
 8006d4a:	4b2b      	ldr	r3, [pc, #172]	; (8006df8 <BACKUP_PC_CMV_START+0x278>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	e025      	b.n	8006d9e <BACKUP_PC_CMV_START+0x21e>
	}
	else if(Backup_PC_CMV_SET_VALUE == NO_CHANGES)
 8006d52:	4b29      	ldr	r3, [pc, #164]	; (8006df8 <BACKUP_PC_CMV_START+0x278>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d121      	bne.n	8006d9e <BACKUP_PC_CMV_START+0x21e>
	{
		Mode                                                  = Backup_Pccmv;
 8006d5a:	4b28      	ldr	r3, [pc, #160]	; (8006dfc <BACKUP_PC_CMV_START+0x27c>)
 8006d5c:	2215      	movs	r2, #21
 8006d5e:	701a      	strb	r2, [r3, #0]
		Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 8006d60:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <BACKUP_PC_CMV_START+0x280>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			              = OPENED;
 8006d66:	4b27      	ldr	r3, [pc, #156]	; (8006e04 <BACKUP_PC_CMV_START+0x284>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = OLD.LAST_BLOWER_ENDING_DAC_SIGNAL;;
 8006d6c:	4b3e      	ldr	r3, [pc, #248]	; (8006e68 <BACKUP_PC_CMV_START+0x2e8>)
 8006d6e:	8a9a      	ldrh	r2, [r3, #20]
 8006d70:	4b28      	ldr	r3, [pc, #160]	; (8006e14 <BACKUP_PC_CMV_START+0x294>)
 8006d72:	811a      	strh	r2, [r3, #8]
		PIP_control_Task.PIP_Control_Task_Delay               = OLD.LAST_PIP_Control_Task_Delay;
 8006d74:	4b3c      	ldr	r3, [pc, #240]	; (8006e68 <BACKUP_PC_CMV_START+0x2e8>)
 8006d76:	8adb      	ldrh	r3, [r3, #22]
 8006d78:	b21a      	sxth	r2, r3
 8006d7a:	4b27      	ldr	r3, [pc, #156]	; (8006e18 <BACKUP_PC_CMV_START+0x298>)
 8006d7c:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = OLD.LAST_Increase_Each_DAC_SET_CONST;
 8006d7e:	4b3a      	ldr	r3, [pc, #232]	; (8006e68 <BACKUP_PC_CMV_START+0x2e8>)
 8006d80:	8b1b      	ldrh	r3, [r3, #24]
 8006d82:	b21a      	sxth	r2, r3
 8006d84:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <BACKUP_PC_CMV_START+0x298>)
 8006d86:	80da      	strh	r2, [r3, #6]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = PEEP_Maintain_Parameter.PEEP_AVG_VAL;
 8006d88:	4b33      	ldr	r3, [pc, #204]	; (8006e58 <BACKUP_PC_CMV_START+0x2d8>)
 8006d8a:	7c1b      	ldrb	r3, [r3, #16]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4b32      	ldr	r3, [pc, #200]	; (8006e58 <BACKUP_PC_CMV_START+0x2d8>)
 8006d90:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 8006d92:	4b31      	ldr	r3, [pc, #196]	; (8006e58 <BACKUP_PC_CMV_START+0x2d8>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	60da      	str	r2, [r3, #12]
		Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 8006d98:	4b32      	ldr	r3, [pc, #200]	; (8006e64 <BACKUP_PC_CMV_START+0x2e4>)
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	701a      	strb	r2, [r3, #0]

	}
	Alert_Check = 5;
 8006d9e:	4b33      	ldr	r3, [pc, #204]	; (8006e6c <BACKUP_PC_CMV_START+0x2ec>)
 8006da0:	2205      	movs	r2, #5
 8006da2:	701a      	strb	r2, [r3, #0]
	vTaskResume(One_Time_Handler);
 8006da4:	4b32      	ldr	r3, [pc, #200]	; (8006e70 <BACKUP_PC_CMV_START+0x2f0>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f014 fa47 	bl	801b23c <vTaskResume>
	vTaskResume(BACKUP_PC_Handler);
 8006dae:	4b31      	ldr	r3, [pc, #196]	; (8006e74 <BACKUP_PC_CMV_START+0x2f4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f014 fa42 	bl	801b23c <vTaskResume>
	vTaskResume(PIP_Control_Task_Handler);
 8006db8:	4b2f      	ldr	r3, [pc, #188]	; (8006e78 <BACKUP_PC_CMV_START+0x2f8>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f014 fa3d 	bl	801b23c <vTaskResume>
	vTaskResume(Alert_Handler);
 8006dc2:	4b2e      	ldr	r3, [pc, #184]	; (8006e7c <BACKUP_PC_CMV_START+0x2fc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f014 fa38 	bl	801b23c <vTaskResume>
	if(Common_Mode_Parameter._FIO2_Val > 21)
 8006dcc:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <BACKUP_PC_CMV_START+0x28c>)
 8006dce:	78db      	ldrb	r3, [r3, #3]
 8006dd0:	2b15      	cmp	r3, #21
 8006dd2:	d905      	bls.n	8006de0 <BACKUP_PC_CMV_START+0x260>
	{
		vTaskResume(Oxygen_Blending_Handler);
 8006dd4:	4b2a      	ldr	r3, [pc, #168]	; (8006e80 <BACKUP_PC_CMV_START+0x300>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f014 fa2f 	bl	801b23c <vTaskResume>
 8006dde:	e004      	b.n	8006dea <BACKUP_PC_CMV_START+0x26a>
	}
	else
	{
		vTaskSuspend(Oxygen_Blending_Handler);
 8006de0:	4b27      	ldr	r3, [pc, #156]	; (8006e80 <BACKUP_PC_CMV_START+0x300>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f014 f965 	bl	801b0b4 <vTaskSuspend>
	}
	vTaskSuspend(CPAP_Handler);
 8006dea:	4b26      	ldr	r3, [pc, #152]	; (8006e84 <BACKUP_PC_CMV_START+0x304>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f014 f960 	bl	801b0b4 <vTaskSuspend>
}
 8006df4:	bf00      	nop
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20012594 	.word	0x20012594
 8006dfc:	200126ba 	.word	0x200126ba
 8006e00:	20012a37 	.word	0x20012a37
 8006e04:	20012a34 	.word	0x20012a34
 8006e08:	200129d4 	.word	0x200129d4
 8006e0c:	200124f0 	.word	0x200124f0
 8006e10:	200121b8 	.word	0x200121b8
 8006e14:	20012978 	.word	0x20012978
 8006e18:	200123d0 	.word	0x200123d0
 8006e1c:	44160000 	.word	0x44160000
 8006e20:	44160000 	.word	0x44160000
 8006e24:	40590000 	.word	0x40590000
 8006e28:	200129f6 	.word	0x200129f6
 8006e2c:	200129a1 	.word	0x200129a1
 8006e30:	200124ce 	.word	0x200124ce
 8006e34:	2000001c 	.word	0x2000001c
 8006e38:	2001283c 	.word	0x2001283c
 8006e3c:	200128a0 	.word	0x200128a0
 8006e40:	200122f8 	.word	0x200122f8
 8006e44:	20012a0a 	.word	0x20012a0a
 8006e48:	20012474 	.word	0x20012474
 8006e4c:	200123ce 	.word	0x200123ce
 8006e50:	20012b71 	.word	0x20012b71
 8006e54:	200124bc 	.word	0x200124bc
 8006e58:	20012c74 	.word	0x20012c74
 8006e5c:	20012a38 	.word	0x20012a38
 8006e60:	20012620 	.word	0x20012620
 8006e64:	2001269e 	.word	0x2001269e
 8006e68:	20012c08 	.word	0x20012c08
 8006e6c:	20012aa0 	.word	0x20012aa0
 8006e70:	200129cc 	.word	0x200129cc
 8006e74:	20012500 	.word	0x20012500
 8006e78:	200124ec 	.word	0x200124ec
 8006e7c:	20012968 	.word	0x20012968
 8006e80:	200127ac 	.word	0x200127ac
 8006e84:	20012d38 	.word	0x20012d38

08006e88 <Patient_Circuit_Disconnected_Alert_CPAP>:




static void Patient_Circuit_Disconnected_Alert_CPAP()
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
	if(  (GRAPH_VALUES.pressure<=3) && (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2 || ( (GRAPH_VALUES.flow>= 80) && (GRAPH_VALUES.pressure<=3) ) ) )
 8006e8c:	4b34      	ldr	r3, [pc, #208]	; (8006f60 <Patient_Circuit_Disconnected_Alert_CPAP+0xd8>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d863      	bhi.n	8006f5c <Patient_Circuit_Disconnected_Alert_CPAP+0xd4>
 8006e94:	4b32      	ldr	r3, [pc, #200]	; (8006f60 <Patient_Circuit_Disconnected_Alert_CPAP+0xd8>)
 8006e96:	edd3 7a01 	vldr	s15, [r3, #4]
 8006e9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ea2:	d022      	beq.n	8006eea <Patient_Circuit_Disconnected_Alert_CPAP+0x62>
 8006ea4:	4b2e      	ldr	r3, [pc, #184]	; (8006f60 <Patient_Circuit_Disconnected_Alert_CPAP+0xd8>)
 8006ea6:	edd3 7a01 	vldr	s15, [r3, #4]
 8006eaa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006eae:	eef4 7a47 	vcmp.f32	s15, s14
 8006eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb6:	d018      	beq.n	8006eea <Patient_Circuit_Disconnected_Alert_CPAP+0x62>
 8006eb8:	4b29      	ldr	r3, [pc, #164]	; (8006f60 <Patient_Circuit_Disconnected_Alert_CPAP+0xd8>)
 8006eba:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ebe:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8006ec2:	eef4 7a47 	vcmp.f32	s15, s14
 8006ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eca:	d00e      	beq.n	8006eea <Patient_Circuit_Disconnected_Alert_CPAP+0x62>
 8006ecc:	4b24      	ldr	r3, [pc, #144]	; (8006f60 <Patient_Circuit_Disconnected_Alert_CPAP+0xd8>)
 8006ece:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ed2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8006f64 <Patient_Circuit_Disconnected_Alert_CPAP+0xdc>
 8006ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ede:	da00      	bge.n	8006ee2 <Patient_Circuit_Disconnected_Alert_CPAP+0x5a>
						}
				}
			}
	}

}
 8006ee0:	e03c      	b.n	8006f5c <Patient_Circuit_Disconnected_Alert_CPAP+0xd4>
	if(  (GRAPH_VALUES.pressure<=3) && (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2 || ( (GRAPH_VALUES.flow>= 80) && (GRAPH_VALUES.pressure<=3) ) ) )
 8006ee2:	4b1f      	ldr	r3, [pc, #124]	; (8006f60 <Patient_Circuit_Disconnected_Alert_CPAP+0xd8>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d838      	bhi.n	8006f5c <Patient_Circuit_Disconnected_Alert_CPAP+0xd4>
			if((DAC1->DHR12R1)>=400)
 8006eea:	4b1f      	ldr	r3, [pc, #124]	; (8006f68 <Patient_Circuit_Disconnected_Alert_CPAP+0xe0>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006ef2:	d333      	bcc.n	8006f5c <Patient_Circuit_Disconnected_Alert_CPAP+0xd4>
				if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 8006ef4:	4b1d      	ldr	r3, [pc, #116]	; (8006f6c <Patient_Circuit_Disconnected_Alert_CPAP+0xe4>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d12f      	bne.n	8006f5c <Patient_Circuit_Disconnected_Alert_CPAP+0xd4>
					Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 8006efc:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <Patient_Circuit_Disconnected_Alert_CPAP+0xe8>)
 8006efe:	88db      	ldrh	r3, [r3, #6]
 8006f00:	3301      	adds	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <Patient_Circuit_Disconnected_Alert_CPAP+0xe8>)
 8006f06:	80da      	strh	r2, [r3, #6]
						if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 500)
 8006f08:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <Patient_Circuit_Disconnected_Alert_CPAP+0xe8>)
 8006f0a:	88db      	ldrh	r3, [r3, #6]
 8006f0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006f10:	d324      	bcc.n	8006f5c <Patient_Circuit_Disconnected_Alert_CPAP+0xd4>
							Clear_All_Alert_Bits();
 8006f12:	f7fa f82f 	bl	8000f74 <Clear_All_Alert_Bits>
							Alert_Status = ALERT_HAPPEN;
 8006f16:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <Patient_Circuit_Disconnected_Alert_CPAP+0xec>)
 8006f18:	2201      	movs	r2, #1
 8006f1a:	701a      	strb	r2, [r3, #0]
							SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 8006f1c:	4a16      	ldr	r2, [pc, #88]	; (8006f78 <Patient_Circuit_Disconnected_Alert_CPAP+0xf0>)
 8006f1e:	78d3      	ldrb	r3, [r2, #3]
 8006f20:	f043 0310 	orr.w	r3, r3, #16
 8006f24:	70d3      	strb	r3, [r2, #3]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8006f26:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <Patient_Circuit_Disconnected_Alert_CPAP+0xe4>)
 8006f28:	2201      	movs	r2, #1
 8006f2a:	701a      	strb	r2, [r3, #0]
							Send_Bluetooth_Data_Farme                = SEND_ALERT_FRAME;
 8006f2c:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <Patient_Circuit_Disconnected_Alert_CPAP+0xf4>)
 8006f2e:	2201      	movs	r2, #1
 8006f30:	701a      	strb	r2, [r3, #0]
							Apnea_Alert                              = APNEA_ALERT_HAPPEN;
 8006f32:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <Patient_Circuit_Disconnected_Alert_CPAP+0xf8>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	701a      	strb	r2, [r3, #0]
							PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 8006f38:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <Patient_Circuit_Disconnected_Alert_CPAP+0xe4>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	701a      	strb	r2, [r3, #0]
							LED_Alert();
 8006f3e:	f7fa fe41 	bl	8001bc4 <LED_Alert>
							CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL           = APNEA_DAC_VAL(CPAP.CPAP_Val );
 8006f42:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <Patient_Circuit_Disconnected_Alert_CPAP+0xfc>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f002 fc24 	bl	8009794 <APNEA_DAC_VAL>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <Patient_Circuit_Disconnected_Alert_CPAP+0x100>)
 8006f52:	805a      	strh	r2, [r3, #2]
							CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL      = CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL;
 8006f54:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <Patient_Circuit_Disconnected_Alert_CPAP+0x100>)
 8006f56:	885a      	ldrh	r2, [r3, #2]
 8006f58:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <Patient_Circuit_Disconnected_Alert_CPAP+0x100>)
 8006f5a:	809a      	strh	r2, [r3, #4]
}
 8006f5c:	bf00      	nop
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	200125f8 	.word	0x200125f8
 8006f64:	42a00000 	.word	0x42a00000
 8006f68:	40007400 	.word	0x40007400
 8006f6c:	20012349 	.word	0x20012349
 8006f70:	20012b98 	.word	0x20012b98
 8006f74:	2001287c 	.word	0x2001287c
 8006f78:	20012408 	.word	0x20012408
 8006f7c:	2001269d 	.word	0x2001269d
 8006f80:	200129f5 	.word	0x200129f5
 8006f84:	200123e0 	.word	0x200123e0
 8006f88:	20012350 	.word	0x20012350

08006f8c <CPAP_O2_Control>:




static void CPAP_O2_Control()
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
	if(CPAP.CPAP_O2_Val > 21)
 8006f92:	4b56      	ldr	r3, [pc, #344]	; (80070ec <CPAP_O2_Control+0x160>)
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	2b15      	cmp	r3, #21
 8006f98:	f340 809e 	ble.w	80070d8 <CPAP_O2_Control+0x14c>
	{
		if(Patient_Trigger_Count <=5)
 8006f9c:	4b54      	ldr	r3, [pc, #336]	; (80070f0 <CPAP_O2_Control+0x164>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b05      	cmp	r3, #5
 8006fa2:	d874      	bhi.n	800708e <CPAP_O2_Control+0x102>
		{
			O2_Flow_Rate   = ( GRAPH_VALUES.flow* ( (float)( CPAP.CPAP_O2_Val - 21) / 100) );
 8006fa4:	4b53      	ldr	r3, [pc, #332]	; (80070f4 <CPAP_O2_Control+0x168>)
 8006fa6:	ed93 7a01 	vldr	s14, [r3, #4]
 8006faa:	4b50      	ldr	r3, [pc, #320]	; (80070ec <CPAP_O2_Control+0x160>)
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	3b15      	subs	r3, #21
 8006fb0:	ee07 3a90 	vmov	s15, r3
 8006fb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006fb8:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80070f8 <CPAP_O2_Control+0x16c>
 8006fbc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8006fcc:	793b      	ldrb	r3, [r7, #4]
 8006fce:	b25a      	sxtb	r2, r3
 8006fd0:	4b4a      	ldr	r3, [pc, #296]	; (80070fc <CPAP_O2_Control+0x170>)
 8006fd2:	701a      	strb	r2, [r3, #0]
			if(O2_Flow_Rate <=8)
 8006fd4:	4b49      	ldr	r3, [pc, #292]	; (80070fc <CPAP_O2_Control+0x170>)
 8006fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	dc02      	bgt.n	8006fe4 <CPAP_O2_Control+0x58>
			{
				O2_Flow_Rate = 8;
 8006fde:	4b47      	ldr	r3, [pc, #284]	; (80070fc <CPAP_O2_Control+0x170>)
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	701a      	strb	r2, [r3, #0]
			}
			if(GRAPH_VALUES.oxygen_flow <= O2_Flow_Rate)
 8006fe4:	4b43      	ldr	r3, [pc, #268]	; (80070f4 <CPAP_O2_Control+0x168>)
 8006fe6:	ed93 7a04 	vldr	s14, [r3, #16]
 8006fea:	4b44      	ldr	r3, [pc, #272]	; (80070fc <CPAP_O2_Control+0x170>)
 8006fec:	f993 3000 	ldrsb.w	r3, [r3]
 8006ff0:	ee07 3a90 	vmov	s15, r3
 8006ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007000:	d81d      	bhi.n	800703e <CPAP_O2_Control+0xb2>
			{
				Oxygen_Parameter.CPAP_O2_DAC=controlsys_Update(&Parker_valve_tune, O2_Flow_Rate , GRAPH_VALUES.oxygen_flow);
 8007002:	4b3e      	ldr	r3, [pc, #248]	; (80070fc <CPAP_O2_Control+0x170>)
 8007004:	f993 3000 	ldrsb.w	r3, [r3]
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007010:	4b38      	ldr	r3, [pc, #224]	; (80070f4 <CPAP_O2_Control+0x168>)
 8007012:	ed93 7a04 	vldr	s14, [r3, #16]
 8007016:	eef0 0a47 	vmov.f32	s1, s14
 800701a:	eeb0 0a67 	vmov.f32	s0, s15
 800701e:	4838      	ldr	r0, [pc, #224]	; (8007100 <CPAP_O2_Control+0x174>)
 8007020:	f009 fa3a 	bl	8010498 <controlsys_Update>
 8007024:	eef0 7a40 	vmov.f32	s15, s0
 8007028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800702c:	ee17 2a90 	vmov	r2, s15
 8007030:	4b34      	ldr	r3, [pc, #208]	; (8007104 <CPAP_O2_Control+0x178>)
 8007032:	611a      	str	r2, [r3, #16]
				Parkar_valve_Signal(Oxygen_Parameter.CPAP_O2_DAC);
 8007034:	4b33      	ldr	r3, [pc, #204]	; (8007104 <CPAP_O2_Control+0x178>)
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	4b33      	ldr	r3, [pc, #204]	; (8007108 <CPAP_O2_Control+0x17c>)
 800703a:	615a      	str	r2, [r3, #20]
 800703c:	e01c      	b.n	8007078 <CPAP_O2_Control+0xec>
			}
			else
			{
				Oxygen_Parameter.CPAP_O2_DAC=controlsys_Update(&Parker_valve_tune, O2_Flow_Rate , GRAPH_VALUES.oxygen_flow);
 800703e:	4b2f      	ldr	r3, [pc, #188]	; (80070fc <CPAP_O2_Control+0x170>)
 8007040:	f993 3000 	ldrsb.w	r3, [r3]
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800704c:	4b29      	ldr	r3, [pc, #164]	; (80070f4 <CPAP_O2_Control+0x168>)
 800704e:	ed93 7a04 	vldr	s14, [r3, #16]
 8007052:	eef0 0a47 	vmov.f32	s1, s14
 8007056:	eeb0 0a67 	vmov.f32	s0, s15
 800705a:	4829      	ldr	r0, [pc, #164]	; (8007100 <CPAP_O2_Control+0x174>)
 800705c:	f009 fa1c 	bl	8010498 <controlsys_Update>
 8007060:	eef0 7a40 	vmov.f32	s15, s0
 8007064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007068:	ee17 2a90 	vmov	r2, s15
 800706c:	4b25      	ldr	r3, [pc, #148]	; (8007104 <CPAP_O2_Control+0x178>)
 800706e:	611a      	str	r2, [r3, #16]
				Parkar_valve_Signal(Oxygen_Parameter.CPAP_O2_DAC);
 8007070:	4b24      	ldr	r3, [pc, #144]	; (8007104 <CPAP_O2_Control+0x178>)
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	4b24      	ldr	r3, [pc, #144]	; (8007108 <CPAP_O2_Control+0x17c>)
 8007076:	615a      	str	r2, [r3, #20]
			}
			Parkar_valve_Signal(Oxygen_Parameter.CPAP_O2_DAC);
 8007078:	4b22      	ldr	r3, [pc, #136]	; (8007104 <CPAP_O2_Control+0x178>)
 800707a:	691a      	ldr	r2, [r3, #16]
 800707c:	4b22      	ldr	r3, [pc, #136]	; (8007108 <CPAP_O2_Control+0x17c>)
 800707e:	615a      	str	r2, [r3, #20]
			Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 8007080:	4b1c      	ldr	r3, [pc, #112]	; (80070f4 <CPAP_O2_Control+0x168>)
 8007082:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <CPAP_O2_Control+0x178>)
 800708a:	721a      	strb	r2, [r3, #8]
 800708c:	e01d      	b.n	80070ca <CPAP_O2_Control+0x13e>
		}
		else
		{
			CPAP_Average.CPAP_O2_Event_Count++;
 800708e:	4b1f      	ldr	r3, [pc, #124]	; (800710c <CPAP_O2_Control+0x180>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	3301      	adds	r3, #1
 8007094:	4a1d      	ldr	r2, [pc, #116]	; (800710c <CPAP_O2_Control+0x180>)
 8007096:	6093      	str	r3, [r2, #8]
			if(CPAP_Average.CPAP_O2_Event_Count>500)
 8007098:	4b1c      	ldr	r3, [pc, #112]	; (800710c <CPAP_O2_Control+0x180>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80070a0:	d913      	bls.n	80070ca <CPAP_O2_Control+0x13e>
			{
				Check_O2_Supply_Alert_in_Apnea_Once(CPAP.CPAP_O2_Val);
 80070a2:	4b12      	ldr	r3, [pc, #72]	; (80070ec <CPAP_O2_Control+0x160>)
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 f96c 	bl	8007384 <Check_O2_Supply_Alert_in_Apnea_Once>
				GRAPH_VALUES.Maximum_oxygen_flow = 0;
 80070ac:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <CPAP_O2_Control+0x168>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	829a      	strh	r2, [r3, #20]
				Tune_O2_CPAP(CPAP.CPAP_O2_Val,Oxygen_Parameter.Achieved_Oxygen);
 80070b2:	4b0e      	ldr	r3, [pc, #56]	; (80070ec <CPAP_O2_Control+0x160>)
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	4a12      	ldr	r2, [pc, #72]	; (8007104 <CPAP_O2_Control+0x178>)
 80070ba:	7a12      	ldrb	r2, [r2, #8]
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f8d0 	bl	8007264 <Tune_O2_CPAP>
				CPAP_Average.CPAP_O2_Event_Count = 0;
 80070c4:	4b11      	ldr	r3, [pc, #68]	; (800710c <CPAP_O2_Control+0x180>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	609a      	str	r2, [r3, #8]

			}
		}

		Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <CPAP_O2_Control+0x168>)
 80070cc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <CPAP_O2_Control+0x178>)
 80070d4:	721a      	strb	r2, [r3, #8]
	}
	else
	{
		Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
	}
}
 80070d6:	e005      	b.n	80070e4 <CPAP_O2_Control+0x158>
		Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <CPAP_O2_Control+0x168>)
 80070da:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <CPAP_O2_Control+0x178>)
 80070e2:	721a      	strb	r2, [r3, #8]
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	200123e0 	.word	0x200123e0
 80070f0:	20012a0c 	.word	0x20012a0c
 80070f4:	200125f8 	.word	0x200125f8
 80070f8:	42c80000 	.word	0x42c80000
 80070fc:	200122e1 	.word	0x200122e1
 8007100:	2000001c 	.word	0x2000001c
 8007104:	200129d4 	.word	0x200129d4
 8007108:	40007400 	.word	0x40007400
 800710c:	20012880 	.word	0x20012880

08007110 <Low_Oxygen_Achieved_CPAP>:



void Low_Oxygen_Achieved_CPAP(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	460a      	mov	r2, r1
 800711a:	71fb      	strb	r3, [r7, #7]
 800711c:	4613      	mov	r3, r2
 800711e:	71bb      	strb	r3, [r7, #6]


		if(  ( Achieved_Oxygen)  < ( FIO2_Val) && (Achieved_Oxygen  >= (FIO2_Val - 2) ) )
 8007120:	79ba      	ldrb	r2, [r7, #6]
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	429a      	cmp	r2, r3
 8007126:	d20c      	bcs.n	8007142 <Low_Oxygen_Achieved_CPAP+0x32>
 8007128:	79ba      	ldrb	r2, [r7, #6]
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	3b02      	subs	r3, #2
 800712e:	429a      	cmp	r2, r3
 8007130:	db07      	blt.n	8007142 <Low_Oxygen_Achieved_CPAP+0x32>
		{
			Oxygen_Parameter.CPAP_O2_DAC = (Oxygen_Parameter.CPAP_O2_DAC+ET_O2_Envitec_Tune_Value1);
 8007132:	4b1d      	ldr	r3, [pc, #116]	; (80071a8 <Low_Oxygen_Achieved_CPAP+0x98>)
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	4a1d      	ldr	r2, [pc, #116]	; (80071ac <Low_Oxygen_Achieved_CPAP+0x9c>)
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	4413      	add	r3, r2
 800713c:	4a1a      	ldr	r2, [pc, #104]	; (80071a8 <Low_Oxygen_Achieved_CPAP+0x98>)
 800713e:	6113      	str	r3, [r2, #16]
 8007140:	e01d      	b.n	800717e <Low_Oxygen_Achieved_CPAP+0x6e>
		}
		else if(  ( Achieved_Oxygen)  < ( FIO2_Val - 2 ) && (Achieved_Oxygen  > (FIO2_Val - 5) ) )
 8007142:	79ba      	ldrb	r2, [r7, #6]
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	3b02      	subs	r3, #2
 8007148:	429a      	cmp	r2, r3
 800714a:	da0c      	bge.n	8007166 <Low_Oxygen_Achieved_CPAP+0x56>
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	1f1a      	subs	r2, r3, #4
 8007150:	79bb      	ldrb	r3, [r7, #6]
 8007152:	429a      	cmp	r2, r3
 8007154:	dc07      	bgt.n	8007166 <Low_Oxygen_Achieved_CPAP+0x56>
		{
			Oxygen_Parameter.CPAP_O2_DAC = (Oxygen_Parameter.CPAP_O2_DAC+ET_O2_Envitec_Tune_Value2);
 8007156:	4b14      	ldr	r3, [pc, #80]	; (80071a8 <Low_Oxygen_Achieved_CPAP+0x98>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	4a15      	ldr	r2, [pc, #84]	; (80071b0 <Low_Oxygen_Achieved_CPAP+0xa0>)
 800715c:	7812      	ldrb	r2, [r2, #0]
 800715e:	4413      	add	r3, r2
 8007160:	4a11      	ldr	r2, [pc, #68]	; (80071a8 <Low_Oxygen_Achieved_CPAP+0x98>)
 8007162:	6113      	str	r3, [r2, #16]
 8007164:	e00b      	b.n	800717e <Low_Oxygen_Achieved_CPAP+0x6e>
		}
		else if(  ( Achieved_Oxygen)  <= ( FIO2_Val - 5 )  )
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	1f1a      	subs	r2, r3, #4
 800716a:	79bb      	ldrb	r3, [r7, #6]
 800716c:	429a      	cmp	r2, r3
 800716e:	dd06      	ble.n	800717e <Low_Oxygen_Achieved_CPAP+0x6e>
		{
			Oxygen_Parameter.CPAP_O2_DAC = (Oxygen_Parameter.CPAP_O2_DAC+ET_O2_Envitec_Tune_Value3);
 8007170:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <Low_Oxygen_Achieved_CPAP+0x98>)
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	4a0f      	ldr	r2, [pc, #60]	; (80071b4 <Low_Oxygen_Achieved_CPAP+0xa4>)
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	4413      	add	r3, r2
 800717a:	4a0b      	ldr	r2, [pc, #44]	; (80071a8 <Low_Oxygen_Achieved_CPAP+0x98>)
 800717c:	6113      	str	r3, [r2, #16]
		}

		if(Oxygen_Parameter.CPAP_O2_DAC>=3000)
 800717e:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <Low_Oxygen_Achieved_CPAP+0x98>)
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8007186:	4293      	cmp	r3, r2
 8007188:	dd03      	ble.n	8007192 <Low_Oxygen_Achieved_CPAP+0x82>
		{
			Oxygen_Parameter.CPAP_O2_DAC=3000;
 800718a:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <Low_Oxygen_Achieved_CPAP+0x98>)
 800718c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007190:	611a      	str	r2, [r3, #16]
		}
		Parkar_valve_Signal(Oxygen_Parameter.CPAP_O2_DAC);
 8007192:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <Low_Oxygen_Achieved_CPAP+0x98>)
 8007194:	691a      	ldr	r2, [r3, #16]
 8007196:	4b08      	ldr	r3, [pc, #32]	; (80071b8 <Low_Oxygen_Achieved_CPAP+0xa8>)
 8007198:	615a      	str	r2, [r3, #20]
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	200129d4 	.word	0x200129d4
 80071ac:	20012508 	.word	0x20012508
 80071b0:	20012220 	.word	0x20012220
 80071b4:	20012a36 	.word	0x20012a36
 80071b8:	40007400 	.word	0x40007400

080071bc <High_Oxygen_Achieved_CPAP>:
  * This function used to reduce the Proportional valve when high O2 Achieved.
  */


void High_Oxygen_Achieved_CPAP(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	460a      	mov	r2, r1
 80071c6:	71fb      	strb	r3, [r7, #7]
 80071c8:	4613      	mov	r3, r2
 80071ca:	71bb      	strb	r3, [r7, #6]

		if(  ( Achieved_Oxygen)  > ( FIO2_Val ) && (Achieved_Oxygen  <= (FIO2_Val + 2) ) )
 80071cc:	79ba      	ldrb	r2, [r7, #6]
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d90c      	bls.n	80071ee <High_Oxygen_Achieved_CPAP+0x32>
 80071d4:	79ba      	ldrb	r2, [r7, #6]
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	3302      	adds	r3, #2
 80071da:	429a      	cmp	r2, r3
 80071dc:	dc07      	bgt.n	80071ee <High_Oxygen_Achieved_CPAP+0x32>
		{
			Oxygen_Parameter.CPAP_O2_DAC = (Oxygen_Parameter.CPAP_O2_DAC-ET_O2_Envitec_Tune_Value1);
 80071de:	4b1c      	ldr	r3, [pc, #112]	; (8007250 <High_Oxygen_Achieved_CPAP+0x94>)
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	4a1c      	ldr	r2, [pc, #112]	; (8007254 <High_Oxygen_Achieved_CPAP+0x98>)
 80071e4:	7812      	ldrb	r2, [r2, #0]
 80071e6:	1a9b      	subs	r3, r3, r2
 80071e8:	4a19      	ldr	r2, [pc, #100]	; (8007250 <High_Oxygen_Achieved_CPAP+0x94>)
 80071ea:	6113      	str	r3, [r2, #16]
 80071ec:	e01d      	b.n	800722a <High_Oxygen_Achieved_CPAP+0x6e>
		}
		else if(  ( Achieved_Oxygen)  > ( FIO2_Val + 2 ) && (Achieved_Oxygen  < (FIO2_Val + 5) ) )
 80071ee:	79ba      	ldrb	r2, [r7, #6]
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	3302      	adds	r3, #2
 80071f4:	429a      	cmp	r2, r3
 80071f6:	dd0c      	ble.n	8007212 <High_Oxygen_Achieved_CPAP+0x56>
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	1d1a      	adds	r2, r3, #4
 80071fc:	79bb      	ldrb	r3, [r7, #6]
 80071fe:	429a      	cmp	r2, r3
 8007200:	db07      	blt.n	8007212 <High_Oxygen_Achieved_CPAP+0x56>
		{
			Oxygen_Parameter.CPAP_O2_DAC = (Oxygen_Parameter.CPAP_O2_DAC-ET_O2_Envitec_Tune_Value2);
 8007202:	4b13      	ldr	r3, [pc, #76]	; (8007250 <High_Oxygen_Achieved_CPAP+0x94>)
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	4a14      	ldr	r2, [pc, #80]	; (8007258 <High_Oxygen_Achieved_CPAP+0x9c>)
 8007208:	7812      	ldrb	r2, [r2, #0]
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	4a10      	ldr	r2, [pc, #64]	; (8007250 <High_Oxygen_Achieved_CPAP+0x94>)
 800720e:	6113      	str	r3, [r2, #16]
 8007210:	e00b      	b.n	800722a <High_Oxygen_Achieved_CPAP+0x6e>
		}
		else if(  ( Achieved_Oxygen)  >= ( FIO2_Val + 5 )  )
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	1d1a      	adds	r2, r3, #4
 8007216:	79bb      	ldrb	r3, [r7, #6]
 8007218:	429a      	cmp	r2, r3
 800721a:	da06      	bge.n	800722a <High_Oxygen_Achieved_CPAP+0x6e>
		{
			Oxygen_Parameter.CPAP_O2_DAC = (Oxygen_Parameter.CPAP_O2_DAC-ET_O2_Envitec_Tune_Value3);
 800721c:	4b0c      	ldr	r3, [pc, #48]	; (8007250 <High_Oxygen_Achieved_CPAP+0x94>)
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	4a0e      	ldr	r2, [pc, #56]	; (800725c <High_Oxygen_Achieved_CPAP+0xa0>)
 8007222:	7812      	ldrb	r2, [r2, #0]
 8007224:	1a9b      	subs	r3, r3, r2
 8007226:	4a0a      	ldr	r2, [pc, #40]	; (8007250 <High_Oxygen_Achieved_CPAP+0x94>)
 8007228:	6113      	str	r3, [r2, #16]
		}


		if(Oxygen_Parameter.CPAP_O2_DAC<=1400)
 800722a:	4b09      	ldr	r3, [pc, #36]	; (8007250 <High_Oxygen_Achieved_CPAP+0x94>)
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8007232:	dc03      	bgt.n	800723c <High_Oxygen_Achieved_CPAP+0x80>
		{
			Oxygen_Parameter.CPAP_O2_DAC=1400;
 8007234:	4b06      	ldr	r3, [pc, #24]	; (8007250 <High_Oxygen_Achieved_CPAP+0x94>)
 8007236:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800723a:	611a      	str	r2, [r3, #16]
		}
	    Parkar_valve_Signal(Oxygen_Parameter.CPAP_O2_DAC);
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <High_Oxygen_Achieved_CPAP+0x94>)
 800723e:	691a      	ldr	r2, [r3, #16]
 8007240:	4b07      	ldr	r3, [pc, #28]	; (8007260 <High_Oxygen_Achieved_CPAP+0xa4>)
 8007242:	615a      	str	r2, [r3, #20]
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	200129d4 	.word	0x200129d4
 8007254:	20012508 	.word	0x20012508
 8007258:	20012220 	.word	0x20012220
 800725c:	20012a36 	.word	0x20012a36
 8007260:	40007400 	.word	0x40007400

08007264 <Tune_O2_CPAP>:
/**
  * This function check Achieved O2 high or low
  */

void Tune_O2_CPAP(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	460a      	mov	r2, r1
 800726e:	71fb      	strb	r3, [r7, #7]
 8007270:	4613      	mov	r3, r2
 8007272:	71bb      	strb	r3, [r7, #6]
	   if (Achieved_Oxygen < (FIO2_Val-1))
 8007274:	79ba      	ldrb	r2, [r7, #6]
 8007276:	79fb      	ldrb	r3, [r7, #7]
 8007278:	3b01      	subs	r3, #1
 800727a:	429a      	cmp	r2, r3
 800727c:	da06      	bge.n	800728c <Tune_O2_CPAP+0x28>
		{
			Low_Oxygen_Achieved_CPAP(FIO2_Val,Achieved_Oxygen);
 800727e:	79ba      	ldrb	r2, [r7, #6]
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	4611      	mov	r1, r2
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff ff43 	bl	8007110 <Low_Oxygen_Achieved_CPAP>
 800728a:	e00e      	b.n	80072aa <Tune_O2_CPAP+0x46>
		}
		else if (Achieved_Oxygen > (FIO2_Val))
 800728c:	79ba      	ldrb	r2, [r7, #6]
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	429a      	cmp	r2, r3
 8007292:	d906      	bls.n	80072a2 <Tune_O2_CPAP+0x3e>
		{
			High_Oxygen_Achieved_CPAP(FIO2_Val,Achieved_Oxygen);
 8007294:	79ba      	ldrb	r2, [r7, #6]
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	4611      	mov	r1, r2
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff ff8e 	bl	80071bc <High_Oxygen_Achieved_CPAP>
 80072a0:	e003      	b.n	80072aa <Tune_O2_CPAP+0x46>
		}
		else
			Parkar_valve_Signal(Oxygen_Parameter.CPAP_O2_DAC);
 80072a2:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <Tune_O2_CPAP+0x60>)
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	4b08      	ldr	r3, [pc, #32]	; (80072c8 <Tune_O2_CPAP+0x64>)
 80072a8:	615a      	str	r2, [r3, #20]
		Last_O2_Dac_Val = Oxygen_Parameter.CPAP_O2_DAC;
 80072aa:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <Tune_O2_CPAP+0x60>)
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	4b06      	ldr	r3, [pc, #24]	; (80072cc <Tune_O2_CPAP+0x68>)
 80072b2:	801a      	strh	r2, [r3, #0]
		Parkar_valve_Signal(Oxygen_Parameter.CPAP_O2_DAC);
 80072b4:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <Tune_O2_CPAP+0x60>)
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	4b03      	ldr	r3, [pc, #12]	; (80072c8 <Tune_O2_CPAP+0x64>)
 80072ba:	615a      	str	r2, [r3, #20]
}
 80072bc:	bf00      	nop
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	200129d4 	.word	0x200129d4
 80072c8:	40007400 	.word	0x40007400
 80072cc:	20012a08 	.word	0x20012a08

080072d0 <Check_O2_Supply_Alert_in_Apnea>:



void Check_O2_Supply_Alert_in_Apnea(int Fio2_Val,uint32_t Patient_Trigger_Count)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
		if(Fio2_Val > 21)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b15      	cmp	r3, #21
 80072de:	dd3c      	ble.n	800735a <Check_O2_Supply_Alert_in_Apnea+0x8a>
		{
			if(Patient_Trigger_Count <=5)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b05      	cmp	r3, #5
 80072e4:	d839      	bhi.n	800735a <Check_O2_Supply_Alert_in_Apnea+0x8a>
			{
				Check_O2_Supply_Alert_Count_in_Apnea++;
 80072e6:	4b1f      	ldr	r3, [pc, #124]	; (8007364 <Check_O2_Supply_Alert_in_Apnea+0x94>)
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	3301      	adds	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <Check_O2_Supply_Alert_in_Apnea+0x94>)
 80072f0:	801a      	strh	r2, [r3, #0]
				if(Check_O2_Supply_Alert_Count_in_Apnea > 500)
 80072f2:	4b1c      	ldr	r3, [pc, #112]	; (8007364 <Check_O2_Supply_Alert_in_Apnea+0x94>)
 80072f4:	881b      	ldrh	r3, [r3, #0]
 80072f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80072fa:	d92e      	bls.n	800735a <Check_O2_Supply_Alert_in_Apnea+0x8a>
				{

					if(GRAPH_VALUES.Maximum_oxygen_flow <5)
 80072fc:	4b1a      	ldr	r3, [pc, #104]	; (8007368 <Check_O2_Supply_Alert_in_Apnea+0x98>)
 80072fe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007302:	2b04      	cmp	r3, #4
 8007304:	dc20      	bgt.n	8007348 <Check_O2_Supply_Alert_in_Apnea+0x78>
					{
							Alert_Count.FIO2_Supply_Alert_Count++;
 8007306:	4b19      	ldr	r3, [pc, #100]	; (800736c <Check_O2_Supply_Alert_in_Apnea+0x9c>)
 8007308:	78db      	ldrb	r3, [r3, #3]
 800730a:	3301      	adds	r3, #1
 800730c:	b2da      	uxtb	r2, r3
 800730e:	4b17      	ldr	r3, [pc, #92]	; (800736c <Check_O2_Supply_Alert_in_Apnea+0x9c>)
 8007310:	70da      	strb	r2, [r3, #3]
							if(Alert_Count.FIO2_Supply_Alert_Count>2)
 8007312:	4b16      	ldr	r3, [pc, #88]	; (800736c <Check_O2_Supply_Alert_in_Apnea+0x9c>)
 8007314:	78db      	ldrb	r3, [r3, #3]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d91c      	bls.n	8007354 <Check_O2_Supply_Alert_in_Apnea+0x84>
							{
								  SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 800731a:	4a15      	ldr	r2, [pc, #84]	; (8007370 <Check_O2_Supply_Alert_in_Apnea+0xa0>)
 800731c:	78d3      	ldrb	r3, [r2, #3]
 800731e:	f043 0308 	orr.w	r3, r3, #8
 8007322:	70d3      	strb	r3, [r2, #3]
								  Alert_Status                        = ALERT_HAPPEN;
 8007324:	4b13      	ldr	r3, [pc, #76]	; (8007374 <Check_O2_Supply_Alert_in_Apnea+0xa4>)
 8007326:	2201      	movs	r2, #1
 8007328:	701a      	strb	r2, [r3, #0]
								  Alert_Count.FIO2_Supply_Alert_Count = 0;
 800732a:	4b10      	ldr	r3, [pc, #64]	; (800736c <Check_O2_Supply_Alert_in_Apnea+0x9c>)
 800732c:	2200      	movs	r2, #0
 800732e:	70da      	strb	r2, [r3, #3]
								  Oxygen_Supply_Failed                = YES;
 8007330:	4b11      	ldr	r3, [pc, #68]	; (8007378 <Check_O2_Supply_Alert_in_Apnea+0xa8>)
 8007332:	2201      	movs	r2, #1
 8007334:	701a      	strb	r2, [r3, #0]


								 Send_Bluetooth_Data_Farme    = SEND_ALERT_FRAME;
 8007336:	4b11      	ldr	r3, [pc, #68]	; (800737c <Check_O2_Supply_Alert_in_Apnea+0xac>)
 8007338:	2201      	movs	r2, #1
 800733a:	701a      	strb	r2, [r3, #0]
								 Apnea_Alert                  = APNEA_ALERT_HAPPEN;
 800733c:	4b10      	ldr	r3, [pc, #64]	; (8007380 <Check_O2_Supply_Alert_in_Apnea+0xb0>)
 800733e:	2201      	movs	r2, #1
 8007340:	701a      	strb	r2, [r3, #0]
								 LED_Alert();
 8007342:	f7fa fc3f 	bl	8001bc4 <LED_Alert>
 8007346:	e005      	b.n	8007354 <Check_O2_Supply_Alert_in_Apnea+0x84>
							}
					}
					else
					{
						Alert_Count.FIO2_Supply_Alert_Count=0;
 8007348:	4b08      	ldr	r3, [pc, #32]	; (800736c <Check_O2_Supply_Alert_in_Apnea+0x9c>)
 800734a:	2200      	movs	r2, #0
 800734c:	70da      	strb	r2, [r3, #3]
						Oxygen_Supply_Failed = NO;
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <Check_O2_Supply_Alert_in_Apnea+0xa8>)
 8007350:	2200      	movs	r2, #0
 8007352:	701a      	strb	r2, [r3, #0]
					}

					Check_O2_Supply_Alert_Count_in_Apnea  = 0;
 8007354:	4b03      	ldr	r3, [pc, #12]	; (8007364 <Check_O2_Supply_Alert_in_Apnea+0x94>)
 8007356:	2200      	movs	r2, #0
 8007358:	801a      	strh	r2, [r3, #0]
				}
			}
		}
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20012b66 	.word	0x20012b66
 8007368:	200125f8 	.word	0x200125f8
 800736c:	20012b98 	.word	0x20012b98
 8007370:	20012408 	.word	0x20012408
 8007374:	2001287c 	.word	0x2001287c
 8007378:	2000009c 	.word	0x2000009c
 800737c:	2001269d 	.word	0x2001269d
 8007380:	200129f5 	.word	0x200129f5

08007384 <Check_O2_Supply_Alert_in_Apnea_Once>:




void Check_O2_Supply_Alert_in_Apnea_Once(int Fio2_Val)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
		if(Fio2_Val > 21)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b15      	cmp	r3, #21
 8007390:	dd2b      	ble.n	80073ea <Check_O2_Supply_Alert_in_Apnea_Once+0x66>
		{
				if(GRAPH_VALUES.Maximum_oxygen_flow <5)
 8007392:	4b18      	ldr	r3, [pc, #96]	; (80073f4 <Check_O2_Supply_Alert_in_Apnea_Once+0x70>)
 8007394:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007398:	2b04      	cmp	r3, #4
 800739a:	dc20      	bgt.n	80073de <Check_O2_Supply_Alert_in_Apnea_Once+0x5a>
				{
						Alert_Count.FIO2_Supply_Alert_Count++;
 800739c:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <Check_O2_Supply_Alert_in_Apnea_Once+0x74>)
 800739e:	78db      	ldrb	r3, [r3, #3]
 80073a0:	3301      	adds	r3, #1
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <Check_O2_Supply_Alert_in_Apnea_Once+0x74>)
 80073a6:	70da      	strb	r2, [r3, #3]
						if(Alert_Count.FIO2_Supply_Alert_Count>2)
 80073a8:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <Check_O2_Supply_Alert_in_Apnea_Once+0x74>)
 80073aa:	78db      	ldrb	r3, [r3, #3]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d91c      	bls.n	80073ea <Check_O2_Supply_Alert_in_Apnea_Once+0x66>
						{
							  SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 80073b0:	4a12      	ldr	r2, [pc, #72]	; (80073fc <Check_O2_Supply_Alert_in_Apnea_Once+0x78>)
 80073b2:	78d3      	ldrb	r3, [r2, #3]
 80073b4:	f043 0308 	orr.w	r3, r3, #8
 80073b8:	70d3      	strb	r3, [r2, #3]
							  Alert_Status                        = ALERT_HAPPEN;
 80073ba:	4b11      	ldr	r3, [pc, #68]	; (8007400 <Check_O2_Supply_Alert_in_Apnea_Once+0x7c>)
 80073bc:	2201      	movs	r2, #1
 80073be:	701a      	strb	r2, [r3, #0]
							  Alert_Count.FIO2_Supply_Alert_Count = 0;
 80073c0:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <Check_O2_Supply_Alert_in_Apnea_Once+0x74>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	70da      	strb	r2, [r3, #3]
							  Oxygen_Supply_Failed                = YES;
 80073c6:	4b0f      	ldr	r3, [pc, #60]	; (8007404 <Check_O2_Supply_Alert_in_Apnea_Once+0x80>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	701a      	strb	r2, [r3, #0]


							 Send_Bluetooth_Data_Farme    = SEND_ALERT_FRAME;
 80073cc:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <Check_O2_Supply_Alert_in_Apnea_Once+0x84>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	701a      	strb	r2, [r3, #0]
							 Apnea_Alert                  = APNEA_ALERT_HAPPEN;
 80073d2:	4b0e      	ldr	r3, [pc, #56]	; (800740c <Check_O2_Supply_Alert_in_Apnea_Once+0x88>)
 80073d4:	2201      	movs	r2, #1
 80073d6:	701a      	strb	r2, [r3, #0]
							 LED_Alert();
 80073d8:	f7fa fbf4 	bl	8001bc4 <LED_Alert>
				{
					Alert_Count.FIO2_Supply_Alert_Count=0;
					Oxygen_Supply_Failed = NO;
				}
		}
}
 80073dc:	e005      	b.n	80073ea <Check_O2_Supply_Alert_in_Apnea_Once+0x66>
					Alert_Count.FIO2_Supply_Alert_Count=0;
 80073de:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <Check_O2_Supply_Alert_in_Apnea_Once+0x74>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	70da      	strb	r2, [r3, #3]
					Oxygen_Supply_Failed = NO;
 80073e4:	4b07      	ldr	r3, [pc, #28]	; (8007404 <Check_O2_Supply_Alert_in_Apnea_Once+0x80>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	200125f8 	.word	0x200125f8
 80073f8:	20012b98 	.word	0x20012b98
 80073fc:	20012408 	.word	0x20012408
 8007400:	2001287c 	.word	0x2001287c
 8007404:	2000009c 	.word	0x2000009c
 8007408:	2001269d 	.word	0x2001269d
 800740c:	200129f5 	.word	0x200129f5

08007410 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode>:
 * @param Inspiration_Time_in_MS
 * @param Set_PEEP
 * @param Valve_Open_Time
 * */
uint16_t PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,uint8_t Set_PEEP,uint16_t Valve_Open_Time)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af02      	add	r7, sp, #8
 8007416:	603a      	str	r2, [r7, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	4603      	mov	r3, r0
 800741c:	71fb      	strb	r3, [r7, #7]
 800741e:	460b      	mov	r3, r1
 8007420:	71bb      	strb	r3, [r7, #6]
 8007422:	4613      	mov	r3, r2
 8007424:	717b      	strb	r3, [r7, #5]
	uint16_t Time;
	if(Set_Respiratory_Rate < 30)
 8007426:	79bb      	ldrb	r3, [r7, #6]
 8007428:	2b1d      	cmp	r3, #29
 800742a:	d80b      	bhi.n	8007444 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode+0x34>
	{
		Time = Below_30_RR_Control(Achieved_PEEP,Set_Respiratory_Rate,Inspiration_Time_in_MS,Set_PEEP,Valve_Open_Time);
 800742c:	797a      	ldrb	r2, [r7, #5]
 800742e:	79b9      	ldrb	r1, [r7, #6]
 8007430:	79f8      	ldrb	r0, [r7, #7]
 8007432:	8b3b      	ldrh	r3, [r7, #24]
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	4613      	mov	r3, r2
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	f000 f813 	bl	8007464 <Below_30_RR_Control>
 800743e:	4603      	mov	r3, r0
 8007440:	81fb      	strh	r3, [r7, #14]
 8007442:	e00a      	b.n	800745a <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode+0x4a>
	}
	else
	{
		Time = Above_30_RR_Control(Achieved_PEEP,Set_Respiratory_Rate,Inspiration_Time_in_MS,Set_PEEP,Valve_Open_Time);
 8007444:	797a      	ldrb	r2, [r7, #5]
 8007446:	79b9      	ldrb	r1, [r7, #6]
 8007448:	79f8      	ldrb	r0, [r7, #7]
 800744a:	8b3b      	ldrh	r3, [r7, #24]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	4613      	mov	r3, r2
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	f000 f9c7 	bl	80077e4 <Above_30_RR_Control>
 8007456:	4603      	mov	r3, r0
 8007458:	81fb      	strh	r3, [r7, #14]
	}
	return Time;
 800745a:	89fb      	ldrh	r3, [r7, #14]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <Below_30_RR_Control>:
 * @param Inspiration_Time_in_MS
 * @param Set_PEEP
 * @param Valve_Open_Time
 * */
static uint16_t Below_30_RR_Control(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,uint8_t Set_PEEP,uint16_t Valve_Open_Time)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	603a      	str	r2, [r7, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	4603      	mov	r3, r0
 8007470:	71fb      	strb	r3, [r7, #7]
 8007472:	460b      	mov	r3, r1
 8007474:	71bb      	strb	r3, [r7, #6]
 8007476:	4613      	mov	r3, r2
 8007478:	717b      	strb	r3, [r7, #5]
	static uint8_t Wait_Count_1,Wait_Count_2;
	if (Achieved_PEEP >  (Set_PEEP+8) )
 800747a:	79fa      	ldrb	r2, [r7, #7]
 800747c:	797b      	ldrb	r3, [r7, #5]
 800747e:	3308      	adds	r3, #8
 8007480:	429a      	cmp	r2, r3
 8007482:	dd2f      	ble.n	80074e4 <Below_30_RR_Control+0x80>
	{
		Wait_Count_1++;
 8007484:	4bac      	ldr	r3, [pc, #688]	; (8007738 <Below_30_RR_Control+0x2d4>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	3301      	adds	r3, #1
 800748a:	b2da      	uxtb	r2, r3
 800748c:	4baa      	ldr	r3, [pc, #680]	; (8007738 <Below_30_RR_Control+0x2d4>)
 800748e:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8007490:	4ba9      	ldr	r3, [pc, #676]	; (8007738 <Below_30_RR_Control+0x2d4>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d016      	beq.n	80074c6 <Below_30_RR_Control+0x62>
		{
			Valve_Open_Time = (Valve_Open_Time + 100);
 8007498:	8a3b      	ldrh	r3, [r7, #16]
 800749a:	3364      	adds	r3, #100	; 0x64
 800749c:	823b      	strh	r3, [r7, #16]
			Wait_Count_1    = RESET;
 800749e:	4ba6      	ldr	r3, [pc, #664]	; (8007738 <Below_30_RR_Control+0x2d4>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 80074a4:	8a3b      	ldrh	r3, [r7, #16]
 80074a6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80074aa:	d30c      	bcc.n	80074c6 <Below_30_RR_Control+0x62>
				{
					Valve_Open_Time                   = 700;
 80074ac:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80074b0:	823b      	strh	r3, [r7, #16]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 80074b2:	4ba2      	ldr	r3, [pc, #648]	; (800773c <Below_30_RR_Control+0x2d8>)
 80074b4:	edd3 7a00 	vldr	s15, [r3]
 80074b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074c0:	4b9e      	ldr	r3, [pc, #632]	; (800773c <Below_30_RR_Control+0x2d8>)
 80074c2:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80074c6:	4b9d      	ldr	r3, [pc, #628]	; (800773c <Below_30_RR_Control+0x2d8>)
 80074c8:	edd3 7a00 	vldr	s15, [r3]
 80074cc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80074d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d8:	f200 8179 	bhi.w	80077ce <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 80074dc:	4b97      	ldr	r3, [pc, #604]	; (800773c <Below_30_RR_Control+0x2d8>)
 80074de:	4a98      	ldr	r2, [pc, #608]	; (8007740 <Below_30_RR_Control+0x2dc>)
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e174      	b.n	80077ce <Below_30_RR_Control+0x36a>

	}
	else if( (Achieved_PEEP> (Set_PEEP+2))  && (Achieved_PEEP<= (Set_PEEP+8)) )
 80074e4:	79fa      	ldrb	r2, [r7, #7]
 80074e6:	797b      	ldrb	r3, [r7, #5]
 80074e8:	3302      	adds	r3, #2
 80074ea:	429a      	cmp	r2, r3
 80074ec:	dd34      	ble.n	8007558 <Below_30_RR_Control+0xf4>
 80074ee:	79fa      	ldrb	r2, [r7, #7]
 80074f0:	797b      	ldrb	r3, [r7, #5]
 80074f2:	3308      	adds	r3, #8
 80074f4:	429a      	cmp	r2, r3
 80074f6:	dc2f      	bgt.n	8007558 <Below_30_RR_Control+0xf4>
	{
		Wait_Count_1++;
 80074f8:	4b8f      	ldr	r3, [pc, #572]	; (8007738 <Below_30_RR_Control+0x2d4>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	3301      	adds	r3, #1
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	4b8d      	ldr	r3, [pc, #564]	; (8007738 <Below_30_RR_Control+0x2d4>)
 8007502:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8007504:	4b8c      	ldr	r3, [pc, #560]	; (8007738 <Below_30_RR_Control+0x2d4>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d016      	beq.n	800753a <Below_30_RR_Control+0xd6>
		{
			Valve_Open_Time = Valve_Open_Time + 40;
 800750c:	8a3b      	ldrh	r3, [r7, #16]
 800750e:	3328      	adds	r3, #40	; 0x28
 8007510:	823b      	strh	r3, [r7, #16]
			Wait_Count_1    = RESET;
 8007512:	4b89      	ldr	r3, [pc, #548]	; (8007738 <Below_30_RR_Control+0x2d4>)
 8007514:	2200      	movs	r2, #0
 8007516:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 8007518:	8a3b      	ldrh	r3, [r7, #16]
 800751a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800751e:	d30c      	bcc.n	800753a <Below_30_RR_Control+0xd6>
				{
					Valve_Open_Time                   = 700;
 8007520:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8007524:	823b      	strh	r3, [r7, #16]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8007526:	4b85      	ldr	r3, [pc, #532]	; (800773c <Below_30_RR_Control+0x2d8>)
 8007528:	edd3 7a00 	vldr	s15, [r3]
 800752c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007534:	4b81      	ldr	r3, [pc, #516]	; (800773c <Below_30_RR_Control+0x2d8>)
 8007536:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 800753a:	4b80      	ldr	r3, [pc, #512]	; (800773c <Below_30_RR_Control+0x2d8>)
 800753c:	edd3 7a00 	vldr	s15, [r3]
 8007540:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754c:	f200 813f 	bhi.w	80077ce <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8007550:	4b7a      	ldr	r3, [pc, #488]	; (800773c <Below_30_RR_Control+0x2d8>)
 8007552:	4a7b      	ldr	r2, [pc, #492]	; (8007740 <Below_30_RR_Control+0x2dc>)
 8007554:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8007556:	e13a      	b.n	80077ce <Below_30_RR_Control+0x36a>
	}
	else if( (Achieved_PEEP> Set_PEEP)  && (Achieved_PEEP <= (Set_PEEP+2)) )
 8007558:	79fa      	ldrb	r2, [r7, #7]
 800755a:	797b      	ldrb	r3, [r7, #5]
 800755c:	429a      	cmp	r2, r3
 800755e:	d934      	bls.n	80075ca <Below_30_RR_Control+0x166>
 8007560:	79fa      	ldrb	r2, [r7, #7]
 8007562:	797b      	ldrb	r3, [r7, #5]
 8007564:	3302      	adds	r3, #2
 8007566:	429a      	cmp	r2, r3
 8007568:	dc2f      	bgt.n	80075ca <Below_30_RR_Control+0x166>
	{
		Wait_Count_1++;
 800756a:	4b73      	ldr	r3, [pc, #460]	; (8007738 <Below_30_RR_Control+0x2d4>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	3301      	adds	r3, #1
 8007570:	b2da      	uxtb	r2, r3
 8007572:	4b71      	ldr	r3, [pc, #452]	; (8007738 <Below_30_RR_Control+0x2d4>)
 8007574:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8007576:	4b70      	ldr	r3, [pc, #448]	; (8007738 <Below_30_RR_Control+0x2d4>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d016      	beq.n	80075ac <Below_30_RR_Control+0x148>
		{
			Valve_Open_Time = Valve_Open_Time + 10;
 800757e:	8a3b      	ldrh	r3, [r7, #16]
 8007580:	330a      	adds	r3, #10
 8007582:	823b      	strh	r3, [r7, #16]
			Wait_Count_1    = RESET;
 8007584:	4b6c      	ldr	r3, [pc, #432]	; (8007738 <Below_30_RR_Control+0x2d4>)
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 800758a:	8a3b      	ldrh	r3, [r7, #16]
 800758c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007590:	d30c      	bcc.n	80075ac <Below_30_RR_Control+0x148>
				{
					Valve_Open_Time                   = 700;
 8007592:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8007596:	823b      	strh	r3, [r7, #16]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8007598:	4b68      	ldr	r3, [pc, #416]	; (800773c <Below_30_RR_Control+0x2d8>)
 800759a:	edd3 7a00 	vldr	s15, [r3]
 800759e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075a6:	4b65      	ldr	r3, [pc, #404]	; (800773c <Below_30_RR_Control+0x2d8>)
 80075a8:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80075ac:	4b63      	ldr	r3, [pc, #396]	; (800773c <Below_30_RR_Control+0x2d8>)
 80075ae:	edd3 7a00 	vldr	s15, [r3]
 80075b2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80075b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075be:	f200 8106 	bhi.w	80077ce <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 80075c2:	4b5e      	ldr	r3, [pc, #376]	; (800773c <Below_30_RR_Control+0x2d8>)
 80075c4:	4a5e      	ldr	r2, [pc, #376]	; (8007740 <Below_30_RR_Control+0x2dc>)
 80075c6:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80075c8:	e101      	b.n	80077ce <Below_30_RR_Control+0x36a>
	}
	else if ((Achieved_PEEP == 0 ) )
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d136      	bne.n	800763e <Below_30_RR_Control+0x1da>
	{
		Wait_Count_2++;
 80075d0:	4b5c      	ldr	r3, [pc, #368]	; (8007744 <Below_30_RR_Control+0x2e0>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	3301      	adds	r3, #1
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	4b5a      	ldr	r3, [pc, #360]	; (8007744 <Below_30_RR_Control+0x2e0>)
 80075da:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 80075dc:	4b59      	ldr	r3, [pc, #356]	; (8007744 <Below_30_RR_Control+0x2e0>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d018      	beq.n	8007616 <Below_30_RR_Control+0x1b2>
		{
			PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 80075e4:	4b55      	ldr	r3, [pc, #340]	; (800773c <Below_30_RR_Control+0x2d8>)
 80075e6:	edd3 7a00 	vldr	s15, [r3]
 80075ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075f2:	4b52      	ldr	r3, [pc, #328]	; (800773c <Below_30_RR_Control+0x2d8>)
 80075f4:	edc3 7a00 	vstr	s15, [r3]
			Valve_Open_Time                   = (Valve_Open_Time - 10);
 80075f8:	8a3b      	ldrh	r3, [r7, #16]
 80075fa:	3b0a      	subs	r3, #10
 80075fc:	823b      	strh	r3, [r7, #16]
			Wait_Count_2                      = RESET;
 80075fe:	4b51      	ldr	r3, [pc, #324]	; (8007744 <Below_30_RR_Control+0x2e0>)
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
				if ( (Valve_Open_Time < 1) || (Valve_Open_Time > 700) )
 8007604:	8a3b      	ldrh	r3, [r7, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <Below_30_RR_Control+0x1ae>
 800760a:	8a3b      	ldrh	r3, [r7, #16]
 800760c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007610:	d901      	bls.n	8007616 <Below_30_RR_Control+0x1b2>
				{
					Valve_Open_Time = 1;
 8007612:	2301      	movs	r3, #1
 8007614:	823b      	strh	r3, [r7, #16]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp  > (Set_PEEP + 10) )
 8007616:	4b49      	ldr	r3, [pc, #292]	; (800773c <Below_30_RR_Control+0x2d8>)
 8007618:	ed93 7a00 	vldr	s14, [r3]
 800761c:	797b      	ldrb	r3, [r7, #5]
 800761e:	330a      	adds	r3, #10
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007628:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800762c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007630:	f340 80cd 	ble.w	80077ce <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp  = PEEP_Maintain_Parameter.PEEP_Temp ;
 8007634:	4b41      	ldr	r3, [pc, #260]	; (800773c <Below_30_RR_Control+0x2d8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a40      	ldr	r2, [pc, #256]	; (800773c <Below_30_RR_Control+0x2d8>)
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	e0c7      	b.n	80077ce <Below_30_RR_Control+0x36a>

	}
	else if (Achieved_PEEP< (Set_PEEP -8))
 800763e:	79fa      	ldrb	r2, [r7, #7]
 8007640:	797b      	ldrb	r3, [r7, #5]
 8007642:	3b08      	subs	r3, #8
 8007644:	429a      	cmp	r2, r3
 8007646:	da36      	bge.n	80076b6 <Below_30_RR_Control+0x252>
	{
		Wait_Count_2++;
 8007648:	4b3e      	ldr	r3, [pc, #248]	; (8007744 <Below_30_RR_Control+0x2e0>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	b2da      	uxtb	r2, r3
 8007650:	4b3c      	ldr	r3, [pc, #240]	; (8007744 <Below_30_RR_Control+0x2e0>)
 8007652:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8007654:	4b3b      	ldr	r3, [pc, #236]	; (8007744 <Below_30_RR_Control+0x2e0>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d018      	beq.n	800768e <Below_30_RR_Control+0x22a>
		{
			Valve_Open_Time = ( Valve_Open_Time - 50);
 800765c:	8a3b      	ldrh	r3, [r7, #16]
 800765e:	3b32      	subs	r3, #50	; 0x32
 8007660:	823b      	strh	r3, [r7, #16]
			Wait_Count_2    = RESET;
 8007662:	4b38      	ldr	r3, [pc, #224]	; (8007744 <Below_30_RR_Control+0x2e0>)
 8007664:	2200      	movs	r2, #0
 8007666:	701a      	strb	r2, [r3, #0]
				if ((Valve_Open_Time < 1) || (Valve_Open_Time > 700) )
 8007668:	8a3b      	ldrh	r3, [r7, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <Below_30_RR_Control+0x212>
 800766e:	8a3b      	ldrh	r3, [r7, #16]
 8007670:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007674:	d90b      	bls.n	800768e <Below_30_RR_Control+0x22a>
				{
					Valve_Open_Time                   = 1;
 8007676:	2301      	movs	r3, #1
 8007678:	823b      	strh	r3, [r7, #16]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 800767a:	4b30      	ldr	r3, [pc, #192]	; (800773c <Below_30_RR_Control+0x2d8>)
 800767c:	edd3 7a00 	vldr	s15, [r3]
 8007680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007684:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007688:	4b2c      	ldr	r3, [pc, #176]	; (800773c <Below_30_RR_Control+0x2d8>)
 800768a:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp> (Set_PEEP + 10) )
 800768e:	4b2b      	ldr	r3, [pc, #172]	; (800773c <Below_30_RR_Control+0x2d8>)
 8007690:	ed93 7a00 	vldr	s14, [r3]
 8007694:	797b      	ldrb	r3, [r7, #5]
 8007696:	330a      	adds	r3, #10
 8007698:	ee07 3a90 	vmov	s15, r3
 800769c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a8:	f340 8091 	ble.w	80077ce <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp =PEEP_Maintain_Parameter.PEEP_Temp;
 80076ac:	4b23      	ldr	r3, [pc, #140]	; (800773c <Below_30_RR_Control+0x2d8>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a22      	ldr	r2, [pc, #136]	; (800773c <Below_30_RR_Control+0x2d8>)
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	e08b      	b.n	80077ce <Below_30_RR_Control+0x36a>
	}
	else if (( Achieved_PEEP >= (Set_PEEP -8)) && (Achieved_PEEP< (Set_PEEP-2)))
 80076b6:	79fa      	ldrb	r2, [r7, #7]
 80076b8:	797b      	ldrb	r3, [r7, #5]
 80076ba:	3b08      	subs	r3, #8
 80076bc:	429a      	cmp	r2, r3
 80076be:	db43      	blt.n	8007748 <Below_30_RR_Control+0x2e4>
 80076c0:	79fa      	ldrb	r2, [r7, #7]
 80076c2:	797b      	ldrb	r3, [r7, #5]
 80076c4:	3b02      	subs	r3, #2
 80076c6:	429a      	cmp	r2, r3
 80076c8:	da3e      	bge.n	8007748 <Below_30_RR_Control+0x2e4>
	{
		Wait_Count_2++;
 80076ca:	4b1e      	ldr	r3, [pc, #120]	; (8007744 <Below_30_RR_Control+0x2e0>)
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	3301      	adds	r3, #1
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <Below_30_RR_Control+0x2e0>)
 80076d4:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 80076d6:	4b1b      	ldr	r3, [pc, #108]	; (8007744 <Below_30_RR_Control+0x2e0>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d018      	beq.n	8007710 <Below_30_RR_Control+0x2ac>
		{
			Valve_Open_Time = (Valve_Open_Time - 30);
 80076de:	8a3b      	ldrh	r3, [r7, #16]
 80076e0:	3b1e      	subs	r3, #30
 80076e2:	823b      	strh	r3, [r7, #16]
			Wait_Count_2    = RESET;
 80076e4:	4b17      	ldr	r3, [pc, #92]	; (8007744 <Below_30_RR_Control+0x2e0>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time< 1 || Valve_Open_Time > 700)
 80076ea:	8a3b      	ldrh	r3, [r7, #16]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <Below_30_RR_Control+0x294>
 80076f0:	8a3b      	ldrh	r3, [r7, #16]
 80076f2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80076f6:	d90b      	bls.n	8007710 <Below_30_RR_Control+0x2ac>
				{
					Valve_Open_Time                   = 1;
 80076f8:	2301      	movs	r3, #1
 80076fa:	823b      	strh	r3, [r7, #16]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <Below_30_RR_Control+0x2d8>)
 80076fe:	edd3 7a00 	vldr	s15, [r3]
 8007702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800770a:	4b0c      	ldr	r3, [pc, #48]	; (800773c <Below_30_RR_Control+0x2d8>)
 800770c:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8007710:	4b0a      	ldr	r3, [pc, #40]	; (800773c <Below_30_RR_Control+0x2d8>)
 8007712:	ed93 7a00 	vldr	s14, [r3]
 8007716:	797b      	ldrb	r3, [r7, #5]
 8007718:	330a      	adds	r3, #10
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772a:	dd50      	ble.n	80077ce <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 800772c:	4b03      	ldr	r3, [pc, #12]	; (800773c <Below_30_RR_Control+0x2d8>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a02      	ldr	r2, [pc, #8]	; (800773c <Below_30_RR_Control+0x2d8>)
 8007732:	6013      	str	r3, [r2, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8007734:	e04b      	b.n	80077ce <Below_30_RR_Control+0x36a>
 8007736:	bf00      	nop
 8007738:	200000a9 	.word	0x200000a9
 800773c:	20012c74 	.word	0x20012c74
 8007740:	40400000 	.word	0x40400000
 8007744:	200000aa 	.word	0x200000aa

	}
	else if ((Achieved_PEEP>= (Set_PEEP -2)) && (Achieved_PEEP< (Set_PEEP)))
 8007748:	79fa      	ldrb	r2, [r7, #7]
 800774a:	797b      	ldrb	r3, [r7, #5]
 800774c:	3b02      	subs	r3, #2
 800774e:	429a      	cmp	r2, r3
 8007750:	db39      	blt.n	80077c6 <Below_30_RR_Control+0x362>
 8007752:	79fa      	ldrb	r2, [r7, #7]
 8007754:	797b      	ldrb	r3, [r7, #5]
 8007756:	429a      	cmp	r2, r3
 8007758:	d235      	bcs.n	80077c6 <Below_30_RR_Control+0x362>
	{
		Wait_Count_2++;
 800775a:	4b20      	ldr	r3, [pc, #128]	; (80077dc <Below_30_RR_Control+0x378>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	3301      	adds	r3, #1
 8007760:	b2da      	uxtb	r2, r3
 8007762:	4b1e      	ldr	r3, [pc, #120]	; (80077dc <Below_30_RR_Control+0x378>)
 8007764:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8007766:	4b1d      	ldr	r3, [pc, #116]	; (80077dc <Below_30_RR_Control+0x378>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d018      	beq.n	80077a0 <Below_30_RR_Control+0x33c>
		{

			Valve_Open_Time = (Valve_Open_Time - 10);
 800776e:	8a3b      	ldrh	r3, [r7, #16]
 8007770:	3b0a      	subs	r3, #10
 8007772:	823b      	strh	r3, [r7, #16]
			Wait_Count_2    = RESET;
 8007774:	4b19      	ldr	r3, [pc, #100]	; (80077dc <Below_30_RR_Control+0x378>)
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
				if ( (Valve_Open_Time < 1) || (Valve_Open_Time> 700) )
 800777a:	8a3b      	ldrh	r3, [r7, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <Below_30_RR_Control+0x324>
 8007780:	8a3b      	ldrh	r3, [r7, #16]
 8007782:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007786:	d90b      	bls.n	80077a0 <Below_30_RR_Control+0x33c>
				{
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8007788:	4b15      	ldr	r3, [pc, #84]	; (80077e0 <Below_30_RR_Control+0x37c>)
 800778a:	edd3 7a00 	vldr	s15, [r3]
 800778e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007792:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007796:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <Below_30_RR_Control+0x37c>)
 8007798:	edc3 7a00 	vstr	s15, [r3]
					Valve_Open_Time                   = 1;
 800779c:	2301      	movs	r3, #1
 800779e:	823b      	strh	r3, [r7, #16]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 80077a0:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <Below_30_RR_Control+0x37c>)
 80077a2:	ed93 7a00 	vldr	s14, [r3]
 80077a6:	797b      	ldrb	r3, [r7, #5]
 80077a8:	330a      	adds	r3, #10
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ba:	dd08      	ble.n	80077ce <Below_30_RR_Control+0x36a>
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 80077bc:	4b08      	ldr	r3, [pc, #32]	; (80077e0 <Below_30_RR_Control+0x37c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a07      	ldr	r2, [pc, #28]	; (80077e0 <Below_30_RR_Control+0x37c>)
 80077c2:	6013      	str	r3, [r2, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 80077c4:	e003      	b.n	80077ce <Below_30_RR_Control+0x36a>
	}
	else
		PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 80077c6:	4b06      	ldr	r3, [pc, #24]	; (80077e0 <Below_30_RR_Control+0x37c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a05      	ldr	r2, [pc, #20]	; (80077e0 <Below_30_RR_Control+0x37c>)
 80077cc:	6013      	str	r3, [r2, #0]

	return Valve_Open_Time;
 80077ce:	8a3b      	ldrh	r3, [r7, #16]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	200000aa 	.word	0x200000aa
 80077e0:	20012c74 	.word	0x20012c74

080077e4 <Above_30_RR_Control>:
 * @param Inspiration_Time_in_MS
 * @param Set_PEEP
 * @param Valve_Open_Time
 * */
static uint16_t  Above_30_RR_Control(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,uint8_t Set_PEEP,uint16_t Valve_Open_Time)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	603a      	str	r2, [r7, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	71fb      	strb	r3, [r7, #7]
 80077f2:	460b      	mov	r3, r1
 80077f4:	71bb      	strb	r3, [r7, #6]
 80077f6:	4613      	mov	r3, r2
 80077f8:	717b      	strb	r3, [r7, #5]
	static uint8_t Wait_Count_1,Wait_Count_2;
	if ( (Inspiration_Time_in_MS <= 700))
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007800:	d802      	bhi.n	8007808 <Above_30_RR_Control+0x24>
		Achieved_PEEP = PEEP_Maintain_Parameter.Maximum_PEEP_Acheived;
 8007802:	4b92      	ldr	r3, [pc, #584]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007804:	799b      	ldrb	r3, [r3, #6]
 8007806:	71fb      	strb	r3, [r7, #7]
	PEEP_Maintain_Parameter.Maximum_PEEP_Acheived =0;
 8007808:	4b90      	ldr	r3, [pc, #576]	; (8007a4c <Above_30_RR_Control+0x268>)
 800780a:	2200      	movs	r2, #0
 800780c:	719a      	strb	r2, [r3, #6]

		if (Achieved_PEEP> (Set_PEEP +8) )
 800780e:	79fa      	ldrb	r2, [r7, #7]
 8007810:	797b      	ldrb	r3, [r7, #5]
 8007812:	3308      	adds	r3, #8
 8007814:	429a      	cmp	r2, r3
 8007816:	dd2f      	ble.n	8007878 <Above_30_RR_Control+0x94>
		{
			Wait_Count_1++;
 8007818:	4b8d      	ldr	r3, [pc, #564]	; (8007a50 <Above_30_RR_Control+0x26c>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	3301      	adds	r3, #1
 800781e:	b2da      	uxtb	r2, r3
 8007820:	4b8b      	ldr	r3, [pc, #556]	; (8007a50 <Above_30_RR_Control+0x26c>)
 8007822:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 8007824:	4b8a      	ldr	r3, [pc, #552]	; (8007a50 <Above_30_RR_Control+0x26c>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b02      	cmp	r3, #2
 800782a:	d916      	bls.n	800785a <Above_30_RR_Control+0x76>
			{
				Valve_Open_Time = (Valve_Open_Time + 100);
 800782c:	8a3b      	ldrh	r3, [r7, #16]
 800782e:	3364      	adds	r3, #100	; 0x64
 8007830:	823b      	strh	r3, [r7, #16]
				Wait_Count_1    = RESET;
 8007832:	4b87      	ldr	r3, [pc, #540]	; (8007a50 <Above_30_RR_Control+0x26c>)
 8007834:	2200      	movs	r2, #0
 8007836:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 8007838:	8a3b      	ldrh	r3, [r7, #16]
 800783a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800783e:	d90c      	bls.n	800785a <Above_30_RR_Control+0x76>
					{
						Valve_Open_Time                   = 700;
 8007840:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8007844:	823b      	strh	r3, [r7, #16]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8007846:	4b81      	ldr	r3, [pc, #516]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007848:	edd3 7a00 	vldr	s15, [r3]
 800784c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007850:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007854:	4b7d      	ldr	r3, [pc, #500]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007856:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 800785a:	4b7c      	ldr	r3, [pc, #496]	; (8007a4c <Above_30_RR_Control+0x268>)
 800785c:	edd3 7a00 	vldr	s15, [r3]
 8007860:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786c:	f200 8179 	bhi.w	8007b62 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8007870:	4b76      	ldr	r3, [pc, #472]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007872:	4a78      	ldr	r2, [pc, #480]	; (8007a54 <Above_30_RR_Control+0x270>)
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	e174      	b.n	8007b62 <Above_30_RR_Control+0x37e>
		}
		else if( (Achieved_PEEP> (Set_PEEP+2))  && (Achieved_PEEP<= (Set_PEEP+8)) )
 8007878:	79fa      	ldrb	r2, [r7, #7]
 800787a:	797b      	ldrb	r3, [r7, #5]
 800787c:	3302      	adds	r3, #2
 800787e:	429a      	cmp	r2, r3
 8007880:	dd34      	ble.n	80078ec <Above_30_RR_Control+0x108>
 8007882:	79fa      	ldrb	r2, [r7, #7]
 8007884:	797b      	ldrb	r3, [r7, #5]
 8007886:	3308      	adds	r3, #8
 8007888:	429a      	cmp	r2, r3
 800788a:	dc2f      	bgt.n	80078ec <Above_30_RR_Control+0x108>
		{
			Wait_Count_1++;
 800788c:	4b70      	ldr	r3, [pc, #448]	; (8007a50 <Above_30_RR_Control+0x26c>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	b2da      	uxtb	r2, r3
 8007894:	4b6e      	ldr	r3, [pc, #440]	; (8007a50 <Above_30_RR_Control+0x26c>)
 8007896:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 8007898:	4b6d      	ldr	r3, [pc, #436]	; (8007a50 <Above_30_RR_Control+0x26c>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b02      	cmp	r3, #2
 800789e:	d916      	bls.n	80078ce <Above_30_RR_Control+0xea>
			{
				Valve_Open_Time = (Valve_Open_Time + 40);
 80078a0:	8a3b      	ldrh	r3, [r7, #16]
 80078a2:	3328      	adds	r3, #40	; 0x28
 80078a4:	823b      	strh	r3, [r7, #16]
				Wait_Count_1    = RESET;
 80078a6:	4b6a      	ldr	r3, [pc, #424]	; (8007a50 <Above_30_RR_Control+0x26c>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 80078ac:	8a3b      	ldrh	r3, [r7, #16]
 80078ae:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80078b2:	d90c      	bls.n	80078ce <Above_30_RR_Control+0xea>
					{
						Valve_Open_Time                   = 700;
 80078b4:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80078b8:	823b      	strh	r3, [r7, #16]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 80078ba:	4b64      	ldr	r3, [pc, #400]	; (8007a4c <Above_30_RR_Control+0x268>)
 80078bc:	edd3 7a00 	vldr	s15, [r3]
 80078c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078c8:	4b60      	ldr	r3, [pc, #384]	; (8007a4c <Above_30_RR_Control+0x268>)
 80078ca:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80078ce:	4b5f      	ldr	r3, [pc, #380]	; (8007a4c <Above_30_RR_Control+0x268>)
 80078d0:	edd3 7a00 	vldr	s15, [r3]
 80078d4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80078d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e0:	f200 813f 	bhi.w	8007b62 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 80078e4:	4b59      	ldr	r3, [pc, #356]	; (8007a4c <Above_30_RR_Control+0x268>)
 80078e6:	4a5b      	ldr	r2, [pc, #364]	; (8007a54 <Above_30_RR_Control+0x270>)
 80078e8:	601a      	str	r2, [r3, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80078ea:	e13a      	b.n	8007b62 <Above_30_RR_Control+0x37e>
		}


		else if( (Achieved_PEEP> (Set_PEEP))  && (Achieved_PEEP<= (Set_PEEP+2)) )
 80078ec:	79fa      	ldrb	r2, [r7, #7]
 80078ee:	797b      	ldrb	r3, [r7, #5]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d934      	bls.n	800795e <Above_30_RR_Control+0x17a>
 80078f4:	79fa      	ldrb	r2, [r7, #7]
 80078f6:	797b      	ldrb	r3, [r7, #5]
 80078f8:	3302      	adds	r3, #2
 80078fa:	429a      	cmp	r2, r3
 80078fc:	dc2f      	bgt.n	800795e <Above_30_RR_Control+0x17a>
		{
			Wait_Count_1++;
 80078fe:	4b54      	ldr	r3, [pc, #336]	; (8007a50 <Above_30_RR_Control+0x26c>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	3301      	adds	r3, #1
 8007904:	b2da      	uxtb	r2, r3
 8007906:	4b52      	ldr	r3, [pc, #328]	; (8007a50 <Above_30_RR_Control+0x26c>)
 8007908:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 800790a:	4b51      	ldr	r3, [pc, #324]	; (8007a50 <Above_30_RR_Control+0x26c>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d916      	bls.n	8007940 <Above_30_RR_Control+0x15c>
			{

				Valve_Open_Time = (Valve_Open_Time + 10);
 8007912:	8a3b      	ldrh	r3, [r7, #16]
 8007914:	330a      	adds	r3, #10
 8007916:	823b      	strh	r3, [r7, #16]
				Wait_Count_1    = RESET;
 8007918:	4b4d      	ldr	r3, [pc, #308]	; (8007a50 <Above_30_RR_Control+0x26c>)
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 800791e:	8a3b      	ldrh	r3, [r7, #16]
 8007920:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007924:	d90c      	bls.n	8007940 <Above_30_RR_Control+0x15c>
					{
						Valve_Open_Time                   = 700;
 8007926:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800792a:	823b      	strh	r3, [r7, #16]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 800792c:	4b47      	ldr	r3, [pc, #284]	; (8007a4c <Above_30_RR_Control+0x268>)
 800792e:	edd3 7a00 	vldr	s15, [r3]
 8007932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800793a:	4b44      	ldr	r3, [pc, #272]	; (8007a4c <Above_30_RR_Control+0x268>)
 800793c:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8007940:	4b42      	ldr	r3, [pc, #264]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007942:	edd3 7a00 	vldr	s15, [r3]
 8007946:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800794a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800794e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007952:	f200 8106 	bhi.w	8007b62 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8007956:	4b3d      	ldr	r3, [pc, #244]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007958:	4a3e      	ldr	r2, [pc, #248]	; (8007a54 <Above_30_RR_Control+0x270>)
 800795a:	601a      	str	r2, [r3, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 800795c:	e101      	b.n	8007b62 <Above_30_RR_Control+0x37e>
		}
		else if ((Achieved_PEEP== 0 ) )
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d136      	bne.n	80079d2 <Above_30_RR_Control+0x1ee>
		{
			Wait_Count_2++;
 8007964:	4b3c      	ldr	r3, [pc, #240]	; (8007a58 <Above_30_RR_Control+0x274>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	3301      	adds	r3, #1
 800796a:	b2da      	uxtb	r2, r3
 800796c:	4b3a      	ldr	r3, [pc, #232]	; (8007a58 <Above_30_RR_Control+0x274>)
 800796e:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8007970:	4b39      	ldr	r3, [pc, #228]	; (8007a58 <Above_30_RR_Control+0x274>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d918      	bls.n	80079aa <Above_30_RR_Control+0x1c6>
			{
				PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8007978:	4b34      	ldr	r3, [pc, #208]	; (8007a4c <Above_30_RR_Control+0x268>)
 800797a:	edd3 7a00 	vldr	s15, [r3]
 800797e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007986:	4b31      	ldr	r3, [pc, #196]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007988:	edc3 7a00 	vstr	s15, [r3]
				Valve_Open_Time                   =( Valve_Open_Time - 10);
 800798c:	8a3b      	ldrh	r3, [r7, #16]
 800798e:	3b0a      	subs	r3, #10
 8007990:	823b      	strh	r3, [r7, #16]
				Wait_Count_2 = RESET;
 8007992:	4b31      	ldr	r3, [pc, #196]	; (8007a58 <Above_30_RR_Control+0x274>)
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8007998:	8a3b      	ldrh	r3, [r7, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <Above_30_RR_Control+0x1c2>
 800799e:	8a3b      	ldrh	r3, [r7, #16]
 80079a0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80079a4:	d901      	bls.n	80079aa <Above_30_RR_Control+0x1c6>
					{
						Valve_Open_Time = 1;
 80079a6:	2301      	movs	r3, #1
 80079a8:	823b      	strh	r3, [r7, #16]

					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 80079aa:	4b28      	ldr	r3, [pc, #160]	; (8007a4c <Above_30_RR_Control+0x268>)
 80079ac:	ed93 7a00 	vldr	s14, [r3]
 80079b0:	797b      	ldrb	r3, [r7, #5]
 80079b2:	330a      	adds	r3, #10
 80079b4:	ee07 3a90 	vmov	s15, r3
 80079b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80079c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c4:	f340 80cd 	ble.w	8007b62 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 80079c8:	4b20      	ldr	r3, [pc, #128]	; (8007a4c <Above_30_RR_Control+0x268>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a1f      	ldr	r2, [pc, #124]	; (8007a4c <Above_30_RR_Control+0x268>)
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	e0c7      	b.n	8007b62 <Above_30_RR_Control+0x37e>
		}
		else if ((Achieved_PEEP< (Set_PEEP -8)))
 80079d2:	79fa      	ldrb	r2, [r7, #7]
 80079d4:	797b      	ldrb	r3, [r7, #5]
 80079d6:	3b08      	subs	r3, #8
 80079d8:	429a      	cmp	r2, r3
 80079da:	da3f      	bge.n	8007a5c <Above_30_RR_Control+0x278>
		{
			Wait_Count_2++;
 80079dc:	4b1e      	ldr	r3, [pc, #120]	; (8007a58 <Above_30_RR_Control+0x274>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	4b1c      	ldr	r3, [pc, #112]	; (8007a58 <Above_30_RR_Control+0x274>)
 80079e6:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 80079e8:	4b1b      	ldr	r3, [pc, #108]	; (8007a58 <Above_30_RR_Control+0x274>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d918      	bls.n	8007a22 <Above_30_RR_Control+0x23e>
			{
				Valve_Open_Time = (Valve_Open_Time - 50);
 80079f0:	8a3b      	ldrh	r3, [r7, #16]
 80079f2:	3b32      	subs	r3, #50	; 0x32
 80079f4:	823b      	strh	r3, [r7, #16]
				Wait_Count_2    = RESET;
 80079f6:	4b18      	ldr	r3, [pc, #96]	; (8007a58 <Above_30_RR_Control+0x274>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 80079fc:	8a3b      	ldrh	r3, [r7, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <Above_30_RR_Control+0x226>
 8007a02:	8a3b      	ldrh	r3, [r7, #16]
 8007a04:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007a08:	d90b      	bls.n	8007a22 <Above_30_RR_Control+0x23e>
					{
						Valve_Open_Time                   = 1;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	823b      	strh	r3, [r7, #16]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007a10:	edd3 7a00 	vldr	s15, [r3]
 8007a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a1c:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007a1e:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > Set_PEEP + 10)
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007a24:	ed93 7a00 	vldr	s14, [r3]
 8007a28:	797b      	ldrb	r3, [r7, #5]
 8007a2a:	330a      	adds	r3, #10
 8007a2c:	ee07 3a90 	vmov	s15, r3
 8007a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3c:	f340 8091 	ble.w	8007b62 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8007a40:	4b02      	ldr	r3, [pc, #8]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a01      	ldr	r2, [pc, #4]	; (8007a4c <Above_30_RR_Control+0x268>)
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	e08b      	b.n	8007b62 <Above_30_RR_Control+0x37e>
 8007a4a:	bf00      	nop
 8007a4c:	20012c74 	.word	0x20012c74
 8007a50:	200000ab 	.word	0x200000ab
 8007a54:	40400000 	.word	0x40400000
 8007a58:	200000ac 	.word	0x200000ac
		}
		else if ((Achieved_PEEP>= (Set_PEEP -8)) && (Achieved_PEEP< (Set_PEEP-2)))
 8007a5c:	79fa      	ldrb	r2, [r7, #7]
 8007a5e:	797b      	ldrb	r3, [r7, #5]
 8007a60:	3b08      	subs	r3, #8
 8007a62:	429a      	cmp	r2, r3
 8007a64:	db3a      	blt.n	8007adc <Above_30_RR_Control+0x2f8>
 8007a66:	79fa      	ldrb	r2, [r7, #7]
 8007a68:	797b      	ldrb	r3, [r7, #5]
 8007a6a:	3b02      	subs	r3, #2
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	da35      	bge.n	8007adc <Above_30_RR_Control+0x2f8>
		{
			Wait_Count_2++;
 8007a70:	4b3f      	ldr	r3, [pc, #252]	; (8007b70 <Above_30_RR_Control+0x38c>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	4b3d      	ldr	r3, [pc, #244]	; (8007b70 <Above_30_RR_Control+0x38c>)
 8007a7a:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8007a7c:	4b3c      	ldr	r3, [pc, #240]	; (8007b70 <Above_30_RR_Control+0x38c>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d918      	bls.n	8007ab6 <Above_30_RR_Control+0x2d2>
			{
				Valve_Open_Time = (Valve_Open_Time - 30);
 8007a84:	8a3b      	ldrh	r3, [r7, #16]
 8007a86:	3b1e      	subs	r3, #30
 8007a88:	823b      	strh	r3, [r7, #16]
				Wait_Count_2    = RESET;
 8007a8a:	4b39      	ldr	r3, [pc, #228]	; (8007b70 <Above_30_RR_Control+0x38c>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8007a90:	8a3b      	ldrh	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <Above_30_RR_Control+0x2ba>
 8007a96:	8a3b      	ldrh	r3, [r7, #16]
 8007a98:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007a9c:	d90b      	bls.n	8007ab6 <Above_30_RR_Control+0x2d2>
					{
						Valve_Open_Time                   = 1;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	823b      	strh	r3, [r7, #16]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8007aa2:	4b34      	ldr	r3, [pc, #208]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007aa4:	edd3 7a00 	vldr	s15, [r3]
 8007aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ab0:	4b30      	ldr	r3, [pc, #192]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007ab2:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8007ab6:	4b2f      	ldr	r3, [pc, #188]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007ab8:	ed93 7a00 	vldr	s14, [r3]
 8007abc:	797b      	ldrb	r3, [r7, #5]
 8007abe:	330a      	adds	r3, #10
 8007ac0:	ee07 3a90 	vmov	s15, r3
 8007ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad0:	dd47      	ble.n	8007b62 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8007ad2:	4b28      	ldr	r3, [pc, #160]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a27      	ldr	r2, [pc, #156]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007ad8:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8007ada:	e042      	b.n	8007b62 <Above_30_RR_Control+0x37e>
		}
		else if ((Achieved_PEEP>= (Set_PEEP -2)) && (Achieved_PEEP< (Set_PEEP)))
 8007adc:	79fa      	ldrb	r2, [r7, #7]
 8007ade:	797b      	ldrb	r3, [r7, #5]
 8007ae0:	3b02      	subs	r3, #2
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	db39      	blt.n	8007b5a <Above_30_RR_Control+0x376>
 8007ae6:	79fa      	ldrb	r2, [r7, #7]
 8007ae8:	797b      	ldrb	r3, [r7, #5]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d235      	bcs.n	8007b5a <Above_30_RR_Control+0x376>
		{
			Wait_Count_2++;
 8007aee:	4b20      	ldr	r3, [pc, #128]	; (8007b70 <Above_30_RR_Control+0x38c>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	3301      	adds	r3, #1
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	4b1e      	ldr	r3, [pc, #120]	; (8007b70 <Above_30_RR_Control+0x38c>)
 8007af8:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8007afa:	4b1d      	ldr	r3, [pc, #116]	; (8007b70 <Above_30_RR_Control+0x38c>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d918      	bls.n	8007b34 <Above_30_RR_Control+0x350>
			{
				Valve_Open_Time = Valve_Open_Time - 10;
 8007b02:	8a3b      	ldrh	r3, [r7, #16]
 8007b04:	3b0a      	subs	r3, #10
 8007b06:	823b      	strh	r3, [r7, #16]
				Wait_Count_2    = RESET;
 8007b08:	4b19      	ldr	r3, [pc, #100]	; (8007b70 <Above_30_RR_Control+0x38c>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8007b0e:	8a3b      	ldrh	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <Above_30_RR_Control+0x338>
 8007b14:	8a3b      	ldrh	r3, [r7, #16]
 8007b16:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007b1a:	d90b      	bls.n	8007b34 <Above_30_RR_Control+0x350>
					{
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8007b1c:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007b1e:	edd3 7a00 	vldr	s15, [r3]
 8007b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b2a:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007b2c:	edc3 7a00 	vstr	s15, [r3]
						Valve_Open_Time                   = 1;
 8007b30:	2301      	movs	r3, #1
 8007b32:	823b      	strh	r3, [r7, #16]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8007b34:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007b36:	ed93 7a00 	vldr	s14, [r3]
 8007b3a:	797b      	ldrb	r3, [r7, #5]
 8007b3c:	330a      	adds	r3, #10
 8007b3e:	ee07 3a90 	vmov	s15, r3
 8007b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b4e:	dd08      	ble.n	8007b62 <Above_30_RR_Control+0x37e>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8007b50:	4b08      	ldr	r3, [pc, #32]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a07      	ldr	r2, [pc, #28]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007b56:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8007b58:	e003      	b.n	8007b62 <Above_30_RR_Control+0x37e>
		}

		else
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <Above_30_RR_Control+0x390>)
 8007b60:	6013      	str	r3, [r2, #0]


		return Valve_Open_Time;
 8007b62:	8a3b      	ldrh	r3, [r7, #16]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	200000ac 	.word	0x200000ac
 8007b74:	20012c74 	.word	0x20012c74

08007b78 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode>:
static uint16_t Above_30_RR_Control(uint8_t,uint8_t,uint32_t,float,uint16_t);



uint16_t PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,uint8_t Set_PEEP,uint16_t Valve_Open_Time)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	603a      	str	r2, [r7, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	4603      	mov	r3, r0
 8007b84:	71fb      	strb	r3, [r7, #7]
 8007b86:	460b      	mov	r3, r1
 8007b88:	71bb      	strb	r3, [r7, #6]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	717b      	strb	r3, [r7, #5]
	uint16_t Time;

	if(Set_Respiratory_Rate < 30)
 8007b8e:	79bb      	ldrb	r3, [r7, #6]
 8007b90:	2b1d      	cmp	r3, #29
 8007b92:	d80f      	bhi.n	8007bb4 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode+0x3c>
	{
		Time = Below_30_RR_Control(Achieved_PEEP,Set_Respiratory_Rate,Inspiration_Time_in_MS,Set_PEEP,Valve_Open_Time);
 8007b94:	797b      	ldrb	r3, [r7, #5]
 8007b96:	ee07 3a90 	vmov	s15, r3
 8007b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9e:	8b3b      	ldrh	r3, [r7, #24]
 8007ba0:	79b9      	ldrb	r1, [r7, #6]
 8007ba2:	79f8      	ldrb	r0, [r7, #7]
 8007ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	f000 f817 	bl	8007bdc <Below_30_RR_Control>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	81fb      	strh	r3, [r7, #14]
 8007bb2:	e00e      	b.n	8007bd2 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode+0x5a>
	}
	else
	{
		Time = Above_30_RR_Control(Achieved_PEEP,Set_Respiratory_Rate,Inspiration_Time_in_MS,Set_PEEP,Valve_Open_Time);
 8007bb4:	797b      	ldrb	r3, [r7, #5]
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	8b3b      	ldrh	r3, [r7, #24]
 8007bc0:	79b9      	ldrb	r1, [r7, #6]
 8007bc2:	79f8      	ldrb	r0, [r7, #7]
 8007bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	f000 fa31 	bl	8008030 <Above_30_RR_Control>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	81fb      	strh	r3, [r7, #14]
	}

	return Time;
 8007bd2:	89fb      	ldrh	r3, [r7, #14]


}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <Below_30_RR_Control>:

static uint16_t Below_30_RR_Control(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,float Set_PEEP,uint16_t Valve_Open_Time)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60ba      	str	r2, [r7, #8]
 8007be4:	ed87 0a01 	vstr	s0, [r7, #4]
 8007be8:	461a      	mov	r2, r3
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	73bb      	strb	r3, [r7, #14]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	81bb      	strh	r3, [r7, #12]
	static uint8_t Wait_Count_1,Wait_Count_2;
	if (Achieved_PEEP >  (Set_PEEP+8) )
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	ee07 3a90 	vmov	s15, r3
 8007bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c04:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8007c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c14:	dd2f      	ble.n	8007c76 <Below_30_RR_Control+0x9a>
	{
		Wait_Count_1++;
 8007c16:	4ba6      	ldr	r3, [pc, #664]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	4ba4      	ldr	r3, [pc, #656]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007c20:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8007c22:	4ba3      	ldr	r3, [pc, #652]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d016      	beq.n	8007c58 <Below_30_RR_Control+0x7c>
		{
			Valve_Open_Time = (Valve_Open_Time + 100);
 8007c2a:	89bb      	ldrh	r3, [r7, #12]
 8007c2c:	3364      	adds	r3, #100	; 0x64
 8007c2e:	81bb      	strh	r3, [r7, #12]
			Wait_Count_1    = RESET;
 8007c30:	4b9f      	ldr	r3, [pc, #636]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 8007c36:	89bb      	ldrh	r3, [r7, #12]
 8007c38:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007c3c:	d30c      	bcc.n	8007c58 <Below_30_RR_Control+0x7c>
				{
					Valve_Open_Time                   = 700;
 8007c3e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8007c42:	81bb      	strh	r3, [r7, #12]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8007c44:	4b9b      	ldr	r3, [pc, #620]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007c46:	edd3 7a00 	vldr	s15, [r3]
 8007c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c52:	4b98      	ldr	r3, [pc, #608]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007c54:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8007c58:	4b96      	ldr	r3, [pc, #600]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007c5a:	edd3 7a00 	vldr	s15, [r3]
 8007c5e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6a:	f200 81d5 	bhi.w	8008018 <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8007c6e:	4b91      	ldr	r3, [pc, #580]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007c70:	4a91      	ldr	r2, [pc, #580]	; (8007eb8 <Below_30_RR_Control+0x2dc>)
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e1d0      	b.n	8008018 <Below_30_RR_Control+0x43c>

	}
	else if( (Achieved_PEEP> (Set_PEEP+2))  && (Achieved_PEEP<= (Set_PEEP+8)) )
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c94:	dd3f      	ble.n	8007d16 <Below_30_RR_Control+0x13a>
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	ee07 3a90 	vmov	s15, r3
 8007c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ca0:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ca4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8007ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cb4:	d82f      	bhi.n	8007d16 <Below_30_RR_Control+0x13a>
	{
		Wait_Count_1++;
 8007cb6:	4b7e      	ldr	r3, [pc, #504]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	4b7c      	ldr	r3, [pc, #496]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007cc0:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8007cc2:	4b7b      	ldr	r3, [pc, #492]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <Below_30_RR_Control+0x11c>
		{
			Valve_Open_Time = Valve_Open_Time + 40;
 8007cca:	89bb      	ldrh	r3, [r7, #12]
 8007ccc:	3328      	adds	r3, #40	; 0x28
 8007cce:	81bb      	strh	r3, [r7, #12]
			Wait_Count_1    = RESET;
 8007cd0:	4b77      	ldr	r3, [pc, #476]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 8007cd6:	89bb      	ldrh	r3, [r7, #12]
 8007cd8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007cdc:	d30c      	bcc.n	8007cf8 <Below_30_RR_Control+0x11c>
				{
					Valve_Open_Time                   = 700;
 8007cde:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8007ce2:	81bb      	strh	r3, [r7, #12]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8007ce4:	4b73      	ldr	r3, [pc, #460]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007ce6:	edd3 7a00 	vldr	s15, [r3]
 8007cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cf2:	4b70      	ldr	r3, [pc, #448]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007cf4:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8007cf8:	4b6e      	ldr	r3, [pc, #440]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007cfa:	edd3 7a00 	vldr	s15, [r3]
 8007cfe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007d02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d0a:	f200 8185 	bhi.w	8008018 <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8007d0e:	4b69      	ldr	r3, [pc, #420]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007d10:	4a69      	ldr	r2, [pc, #420]	; (8007eb8 <Below_30_RR_Control+0x2dc>)
 8007d12:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8007d14:	e180      	b.n	8008018 <Below_30_RR_Control+0x43c>
	}
	else if( (Achieved_PEEP> Set_PEEP)  && (Achieved_PEEP <= (Set_PEEP+2)) )
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d20:	ed97 7a01 	vldr	s14, [r7, #4]
 8007d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2c:	d53f      	bpl.n	8007dae <Below_30_RR_Control+0x1d2>
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	ee07 3a90 	vmov	s15, r3
 8007d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d38:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4c:	d82f      	bhi.n	8007dae <Below_30_RR_Control+0x1d2>
	{
		Wait_Count_1++;
 8007d4e:	4b58      	ldr	r3, [pc, #352]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	3301      	adds	r3, #1
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	4b56      	ldr	r3, [pc, #344]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007d58:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_1 > 0)
 8007d5a:	4b55      	ldr	r3, [pc, #340]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d016      	beq.n	8007d90 <Below_30_RR_Control+0x1b4>
		{
			Valve_Open_Time = Valve_Open_Time + 10;
 8007d62:	89bb      	ldrh	r3, [r7, #12]
 8007d64:	330a      	adds	r3, #10
 8007d66:	81bb      	strh	r3, [r7, #12]
			Wait_Count_1    = RESET;
 8007d68:	4b51      	ldr	r3, [pc, #324]	; (8007eb0 <Below_30_RR_Control+0x2d4>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time >= 700)
 8007d6e:	89bb      	ldrh	r3, [r7, #12]
 8007d70:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007d74:	d30c      	bcc.n	8007d90 <Below_30_RR_Control+0x1b4>
				{
					Valve_Open_Time                   = 700;
 8007d76:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8007d7a:	81bb      	strh	r3, [r7, #12]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 8007d7c:	4b4d      	ldr	r3, [pc, #308]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007d7e:	edd3 7a00 	vldr	s15, [r3]
 8007d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d8a:	4b4a      	ldr	r3, [pc, #296]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007d8c:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8007d90:	4b48      	ldr	r3, [pc, #288]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007d92:	edd3 7a00 	vldr	s15, [r3]
 8007d96:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da2:	f200 8139 	bhi.w	8008018 <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8007da6:	4b43      	ldr	r3, [pc, #268]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007da8:	4a43      	ldr	r2, [pc, #268]	; (8007eb8 <Below_30_RR_Control+0x2dc>)
 8007daa:	601a      	str	r2, [r3, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8007dac:	e134      	b.n	8008018 <Below_30_RR_Control+0x43c>
	}
	else if ((Achieved_PEEP == 0 ) )
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d136      	bne.n	8007e22 <Below_30_RR_Control+0x246>
	{
		Wait_Count_2++;
 8007db4:	4b41      	ldr	r3, [pc, #260]	; (8007ebc <Below_30_RR_Control+0x2e0>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	4b3f      	ldr	r3, [pc, #252]	; (8007ebc <Below_30_RR_Control+0x2e0>)
 8007dbe:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 1)
 8007dc0:	4b3e      	ldr	r3, [pc, #248]	; (8007ebc <Below_30_RR_Control+0x2e0>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d918      	bls.n	8007dfa <Below_30_RR_Control+0x21e>
		{
			PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8007dc8:	4b3a      	ldr	r3, [pc, #232]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007dca:	edd3 7a00 	vldr	s15, [r3]
 8007dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007dd6:	4b37      	ldr	r3, [pc, #220]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007dd8:	edc3 7a00 	vstr	s15, [r3]
			Valve_Open_Time                   = (Valve_Open_Time - 10);
 8007ddc:	89bb      	ldrh	r3, [r7, #12]
 8007dde:	3b0a      	subs	r3, #10
 8007de0:	81bb      	strh	r3, [r7, #12]
			Wait_Count_2                      = RESET;
 8007de2:	4b36      	ldr	r3, [pc, #216]	; (8007ebc <Below_30_RR_Control+0x2e0>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]
				if ( (Valve_Open_Time < 1) || (Valve_Open_Time > 700) )
 8007de8:	89bb      	ldrh	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <Below_30_RR_Control+0x21a>
 8007dee:	89bb      	ldrh	r3, [r7, #12]
 8007df0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007df4:	d901      	bls.n	8007dfa <Below_30_RR_Control+0x21e>
				{
					Valve_Open_Time = 1;
 8007df6:	2301      	movs	r3, #1
 8007df8:	81bb      	strh	r3, [r7, #12]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp  > (Set_PEEP + 10) )
 8007dfa:	4b2e      	ldr	r3, [pc, #184]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007dfc:	ed93 7a00 	vldr	s14, [r3]
 8007e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e04:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8007e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e14:	f340 8100 	ble.w	8008018 <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp  = PEEP_Maintain_Parameter.PEEP_Temp ;
 8007e18:	4b26      	ldr	r3, [pc, #152]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a25      	ldr	r2, [pc, #148]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007e1e:	6013      	str	r3, [r2, #0]
 8007e20:	e0fa      	b.n	8008018 <Below_30_RR_Control+0x43c>

	}
	else if (Achieved_PEEP< (Set_PEEP -8))
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	ee07 3a90 	vmov	s15, r3
 8007e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e30:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8007e34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e40:	d53e      	bpl.n	8007ec0 <Below_30_RR_Control+0x2e4>
	{
		Wait_Count_2++;
 8007e42:	4b1e      	ldr	r3, [pc, #120]	; (8007ebc <Below_30_RR_Control+0x2e0>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	3301      	adds	r3, #1
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	4b1c      	ldr	r3, [pc, #112]	; (8007ebc <Below_30_RR_Control+0x2e0>)
 8007e4c:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8007e4e:	4b1b      	ldr	r3, [pc, #108]	; (8007ebc <Below_30_RR_Control+0x2e0>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d018      	beq.n	8007e88 <Below_30_RR_Control+0x2ac>
		{
			Valve_Open_Time = ( Valve_Open_Time - 50);
 8007e56:	89bb      	ldrh	r3, [r7, #12]
 8007e58:	3b32      	subs	r3, #50	; 0x32
 8007e5a:	81bb      	strh	r3, [r7, #12]
			Wait_Count_2    = RESET;
 8007e5c:	4b17      	ldr	r3, [pc, #92]	; (8007ebc <Below_30_RR_Control+0x2e0>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]
				if ((Valve_Open_Time < 1) || (Valve_Open_Time > 700) )
 8007e62:	89bb      	ldrh	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <Below_30_RR_Control+0x294>
 8007e68:	89bb      	ldrh	r3, [r7, #12]
 8007e6a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007e6e:	d90b      	bls.n	8007e88 <Below_30_RR_Control+0x2ac>
				{
					Valve_Open_Time                   = 1;
 8007e70:	2301      	movs	r3, #1
 8007e72:	81bb      	strh	r3, [r7, #12]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8007e74:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007e76:	edd3 7a00 	vldr	s15, [r3]
 8007e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e82:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007e84:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp> (Set_PEEP + 10) )
 8007e88:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007e8a:	ed93 7a00 	vldr	s14, [r3]
 8007e8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007e92:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8007e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea2:	f340 80b9 	ble.w	8008018 <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp =PEEP_Maintain_Parameter.PEEP_Temp;
 8007ea6:	4b03      	ldr	r3, [pc, #12]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a02      	ldr	r2, [pc, #8]	; (8007eb4 <Below_30_RR_Control+0x2d8>)
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	e0b3      	b.n	8008018 <Below_30_RR_Control+0x43c>
 8007eb0:	200000ad 	.word	0x200000ad
 8007eb4:	20012c74 	.word	0x20012c74
 8007eb8:	40400000 	.word	0x40400000
 8007ebc:	200000ae 	.word	0x200000ae
	}
	else if (( Achieved_PEEP >= (Set_PEEP -8)) && (Achieved_PEEP< (Set_PEEP-2)))
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007eca:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ece:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8007ed2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ede:	db45      	blt.n	8007f6c <Below_30_RR_Control+0x390>
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	ee07 3a90 	vmov	s15, r3
 8007ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007eea:	edd7 7a01 	vldr	s15, [r7, #4]
 8007eee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ef2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ef6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efe:	d535      	bpl.n	8007f6c <Below_30_RR_Control+0x390>
	{
		Wait_Count_2++;
 8007f00:	4b49      	ldr	r3, [pc, #292]	; (8008028 <Below_30_RR_Control+0x44c>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	4b47      	ldr	r3, [pc, #284]	; (8008028 <Below_30_RR_Control+0x44c>)
 8007f0a:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8007f0c:	4b46      	ldr	r3, [pc, #280]	; (8008028 <Below_30_RR_Control+0x44c>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d018      	beq.n	8007f46 <Below_30_RR_Control+0x36a>
		{
			Valve_Open_Time = (Valve_Open_Time - 30);
 8007f14:	89bb      	ldrh	r3, [r7, #12]
 8007f16:	3b1e      	subs	r3, #30
 8007f18:	81bb      	strh	r3, [r7, #12]
			Wait_Count_2    = RESET;
 8007f1a:	4b43      	ldr	r3, [pc, #268]	; (8008028 <Below_30_RR_Control+0x44c>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	701a      	strb	r2, [r3, #0]
				if (Valve_Open_Time< 1 || Valve_Open_Time > 700)
 8007f20:	89bb      	ldrh	r3, [r7, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <Below_30_RR_Control+0x352>
 8007f26:	89bb      	ldrh	r3, [r7, #12]
 8007f28:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007f2c:	d90b      	bls.n	8007f46 <Below_30_RR_Control+0x36a>
				{
					Valve_Open_Time                   = 1;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	81bb      	strh	r3, [r7, #12]
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8007f32:	4b3e      	ldr	r3, [pc, #248]	; (800802c <Below_30_RR_Control+0x450>)
 8007f34:	edd3 7a00 	vldr	s15, [r3]
 8007f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f40:	4b3a      	ldr	r3, [pc, #232]	; (800802c <Below_30_RR_Control+0x450>)
 8007f42:	edc3 7a00 	vstr	s15, [r3]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8007f46:	4b39      	ldr	r3, [pc, #228]	; (800802c <Below_30_RR_Control+0x450>)
 8007f48:	ed93 7a00 	vldr	s14, [r3]
 8007f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8007f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f60:	dd5a      	ble.n	8008018 <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8007f62:	4b32      	ldr	r3, [pc, #200]	; (800802c <Below_30_RR_Control+0x450>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a31      	ldr	r2, [pc, #196]	; (800802c <Below_30_RR_Control+0x450>)
 8007f68:	6013      	str	r3, [r2, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8007f6a:	e055      	b.n	8008018 <Below_30_RR_Control+0x43c>

	}
	else if ((Achieved_PEEP>= (Set_PEEP -2)) && (Achieved_PEEP< (Set_PEEP)))
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f76:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f7a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007f7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8a:	db41      	blt.n	8008010 <Below_30_RR_Control+0x434>
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f96:	ed97 7a01 	vldr	s14, [r7, #4]
 8007f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa2:	dd35      	ble.n	8008010 <Below_30_RR_Control+0x434>
	{
		Wait_Count_2++;
 8007fa4:	4b20      	ldr	r3, [pc, #128]	; (8008028 <Below_30_RR_Control+0x44c>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	4b1e      	ldr	r3, [pc, #120]	; (8008028 <Below_30_RR_Control+0x44c>)
 8007fae:	701a      	strb	r2, [r3, #0]
		if (Wait_Count_2 > 0)
 8007fb0:	4b1d      	ldr	r3, [pc, #116]	; (8008028 <Below_30_RR_Control+0x44c>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d018      	beq.n	8007fea <Below_30_RR_Control+0x40e>
		{

			Valve_Open_Time = (Valve_Open_Time - 10);
 8007fb8:	89bb      	ldrh	r3, [r7, #12]
 8007fba:	3b0a      	subs	r3, #10
 8007fbc:	81bb      	strh	r3, [r7, #12]
			Wait_Count_2    = RESET;
 8007fbe:	4b1a      	ldr	r3, [pc, #104]	; (8008028 <Below_30_RR_Control+0x44c>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	701a      	strb	r2, [r3, #0]
				if ( (Valve_Open_Time < 1) || (Valve_Open_Time> 700) )
 8007fc4:	89bb      	ldrh	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <Below_30_RR_Control+0x3f6>
 8007fca:	89bb      	ldrh	r3, [r7, #12]
 8007fcc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8007fd0:	d90b      	bls.n	8007fea <Below_30_RR_Control+0x40e>
				{
					PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8007fd2:	4b16      	ldr	r3, [pc, #88]	; (800802c <Below_30_RR_Control+0x450>)
 8007fd4:	edd3 7a00 	vldr	s15, [r3]
 8007fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fe0:	4b12      	ldr	r3, [pc, #72]	; (800802c <Below_30_RR_Control+0x450>)
 8007fe2:	edc3 7a00 	vstr	s15, [r3]
					Valve_Open_Time                   = 1;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	81bb      	strh	r3, [r7, #12]
				}
		}
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 8007fea:	4b10      	ldr	r3, [pc, #64]	; (800802c <Below_30_RR_Control+0x450>)
 8007fec:	ed93 7a00 	vldr	s14, [r3]
 8007ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ff4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8007ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ffc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008004:	dd08      	ble.n	8008018 <Below_30_RR_Control+0x43c>
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8008006:	4b09      	ldr	r3, [pc, #36]	; (800802c <Below_30_RR_Control+0x450>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a08      	ldr	r2, [pc, #32]	; (800802c <Below_30_RR_Control+0x450>)
 800800c:	6013      	str	r3, [r2, #0]
		if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10) )
 800800e:	e003      	b.n	8008018 <Below_30_RR_Control+0x43c>
	}
	else
		PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8008010:	4b06      	ldr	r3, [pc, #24]	; (800802c <Below_30_RR_Control+0x450>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a05      	ldr	r2, [pc, #20]	; (800802c <Below_30_RR_Control+0x450>)
 8008016:	6013      	str	r3, [r2, #0]

	return Valve_Open_Time;
 8008018:	89bb      	ldrh	r3, [r7, #12]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	200000ae 	.word	0x200000ae
 800802c:	20012c74 	.word	0x20012c74

08008030 <Above_30_RR_Control>:



static uint16_t  Above_30_RR_Control(uint8_t Achieved_PEEP,uint8_t Set_Respiratory_Rate,uint32_t Inspiration_Time_in_MS,float Set_PEEP,uint16_t Valve_Open_Time)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	60ba      	str	r2, [r7, #8]
 8008038:	ed87 0a01 	vstr	s0, [r7, #4]
 800803c:	461a      	mov	r2, r3
 800803e:	4603      	mov	r3, r0
 8008040:	73fb      	strb	r3, [r7, #15]
 8008042:	460b      	mov	r3, r1
 8008044:	73bb      	strb	r3, [r7, #14]
 8008046:	4613      	mov	r3, r2
 8008048:	81bb      	strh	r3, [r7, #12]
	static uint8_t Wait_Count_1,Wait_Count_2;
	if ( (Inspiration_Time_in_MS <= 700))
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008050:	d802      	bhi.n	8008058 <Above_30_RR_Control+0x28>
		Achieved_PEEP = PEEP_Maintain_Parameter.Maximum_PEEP_Acheived;
 8008052:	4bb1      	ldr	r3, [pc, #708]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008054:	799b      	ldrb	r3, [r3, #6]
 8008056:	73fb      	strb	r3, [r7, #15]
	PEEP_Maintain_Parameter.Maximum_PEEP_Acheived =0;
 8008058:	4baf      	ldr	r3, [pc, #700]	; (8008318 <Above_30_RR_Control+0x2e8>)
 800805a:	2200      	movs	r2, #0
 800805c:	719a      	strb	r2, [r3, #6]

		if (Achieved_PEEP> (Set_PEEP +8) )
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	ee07 3a90 	vmov	s15, r3
 8008064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008068:	edd7 7a01 	vldr	s15, [r7, #4]
 800806c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8008070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807c:	dd2f      	ble.n	80080de <Above_30_RR_Control+0xae>
		{
			Wait_Count_1++;
 800807e:	4ba7      	ldr	r3, [pc, #668]	; (800831c <Above_30_RR_Control+0x2ec>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	3301      	adds	r3, #1
 8008084:	b2da      	uxtb	r2, r3
 8008086:	4ba5      	ldr	r3, [pc, #660]	; (800831c <Above_30_RR_Control+0x2ec>)
 8008088:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 800808a:	4ba4      	ldr	r3, [pc, #656]	; (800831c <Above_30_RR_Control+0x2ec>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d916      	bls.n	80080c0 <Above_30_RR_Control+0x90>
			{
				Valve_Open_Time = (Valve_Open_Time + 100);
 8008092:	89bb      	ldrh	r3, [r7, #12]
 8008094:	3364      	adds	r3, #100	; 0x64
 8008096:	81bb      	strh	r3, [r7, #12]
				Wait_Count_1    = RESET;
 8008098:	4ba0      	ldr	r3, [pc, #640]	; (800831c <Above_30_RR_Control+0x2ec>)
 800809a:	2200      	movs	r2, #0
 800809c:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 800809e:	89bb      	ldrh	r3, [r7, #12]
 80080a0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80080a4:	d90c      	bls.n	80080c0 <Above_30_RR_Control+0x90>
					{
						Valve_Open_Time                   = 700;
 80080a6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80080aa:	81bb      	strh	r3, [r7, #12]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 80080ac:	4b9a      	ldr	r3, [pc, #616]	; (8008318 <Above_30_RR_Control+0x2e8>)
 80080ae:	edd3 7a00 	vldr	s15, [r3]
 80080b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080ba:	4b97      	ldr	r3, [pc, #604]	; (8008318 <Above_30_RR_Control+0x2e8>)
 80080bc:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80080c0:	4b95      	ldr	r3, [pc, #596]	; (8008318 <Above_30_RR_Control+0x2e8>)
 80080c2:	edd3 7a00 	vldr	s15, [r3]
 80080c6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80080ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d2:	f200 81d5 	bhi.w	8008480 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 80080d6:	4b90      	ldr	r3, [pc, #576]	; (8008318 <Above_30_RR_Control+0x2e8>)
 80080d8:	4a91      	ldr	r2, [pc, #580]	; (8008320 <Above_30_RR_Control+0x2f0>)
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	e1d0      	b.n	8008480 <Above_30_RR_Control+0x450>
		}
		else if( (Achieved_PEEP> (Set_PEEP+2))  && (Achieved_PEEP<= (Set_PEEP+8)) )
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	ee07 3a90 	vmov	s15, r3
 80080e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80080ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80080f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80080f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fc:	dd3f      	ble.n	800817e <Above_30_RR_Control+0x14e>
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	ee07 3a90 	vmov	s15, r3
 8008104:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008108:	edd7 7a01 	vldr	s15, [r7, #4]
 800810c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8008110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811c:	d82f      	bhi.n	800817e <Above_30_RR_Control+0x14e>
		{
			Wait_Count_1++;
 800811e:	4b7f      	ldr	r3, [pc, #508]	; (800831c <Above_30_RR_Control+0x2ec>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	3301      	adds	r3, #1
 8008124:	b2da      	uxtb	r2, r3
 8008126:	4b7d      	ldr	r3, [pc, #500]	; (800831c <Above_30_RR_Control+0x2ec>)
 8008128:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 800812a:	4b7c      	ldr	r3, [pc, #496]	; (800831c <Above_30_RR_Control+0x2ec>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d916      	bls.n	8008160 <Above_30_RR_Control+0x130>
			{
				Valve_Open_Time = (Valve_Open_Time + 40);
 8008132:	89bb      	ldrh	r3, [r7, #12]
 8008134:	3328      	adds	r3, #40	; 0x28
 8008136:	81bb      	strh	r3, [r7, #12]
				Wait_Count_1    = RESET;
 8008138:	4b78      	ldr	r3, [pc, #480]	; (800831c <Above_30_RR_Control+0x2ec>)
 800813a:	2200      	movs	r2, #0
 800813c:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 800813e:	89bb      	ldrh	r3, [r7, #12]
 8008140:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008144:	d90c      	bls.n	8008160 <Above_30_RR_Control+0x130>
					{
						Valve_Open_Time                   = 700;
 8008146:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800814a:	81bb      	strh	r3, [r7, #12]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 800814c:	4b72      	ldr	r3, [pc, #456]	; (8008318 <Above_30_RR_Control+0x2e8>)
 800814e:	edd3 7a00 	vldr	s15, [r3]
 8008152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800815a:	4b6f      	ldr	r3, [pc, #444]	; (8008318 <Above_30_RR_Control+0x2e8>)
 800815c:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8008160:	4b6d      	ldr	r3, [pc, #436]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008162:	edd3 7a00 	vldr	s15, [r3]
 8008166:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800816a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800816e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008172:	f200 8185 	bhi.w	8008480 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 8008176:	4b68      	ldr	r3, [pc, #416]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008178:	4a69      	ldr	r2, [pc, #420]	; (8008320 <Above_30_RR_Control+0x2f0>)
 800817a:	601a      	str	r2, [r3, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 800817c:	e180      	b.n	8008480 <Above_30_RR_Control+0x450>
		}


		else if( (Achieved_PEEP> (Set_PEEP))  && (Achieved_PEEP<= (Set_PEEP+2)) )
 800817e:	7bfb      	ldrb	r3, [r7, #15]
 8008180:	ee07 3a90 	vmov	s15, r3
 8008184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008188:	ed97 7a01 	vldr	s14, [r7, #4]
 800818c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008194:	d53f      	bpl.n	8008216 <Above_30_RR_Control+0x1e6>
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	ee07 3a90 	vmov	s15, r3
 800819c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80081a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80081a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80081b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b4:	d82f      	bhi.n	8008216 <Above_30_RR_Control+0x1e6>
		{
			Wait_Count_1++;
 80081b6:	4b59      	ldr	r3, [pc, #356]	; (800831c <Above_30_RR_Control+0x2ec>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	3301      	adds	r3, #1
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	4b57      	ldr	r3, [pc, #348]	; (800831c <Above_30_RR_Control+0x2ec>)
 80081c0:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_1 > 2)
 80081c2:	4b56      	ldr	r3, [pc, #344]	; (800831c <Above_30_RR_Control+0x2ec>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d916      	bls.n	80081f8 <Above_30_RR_Control+0x1c8>
			{

				Valve_Open_Time = (Valve_Open_Time + 10);
 80081ca:	89bb      	ldrh	r3, [r7, #12]
 80081cc:	330a      	adds	r3, #10
 80081ce:	81bb      	strh	r3, [r7, #12]
				Wait_Count_1    = RESET;
 80081d0:	4b52      	ldr	r3, [pc, #328]	; (800831c <Above_30_RR_Control+0x2ec>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time > 700)
 80081d6:	89bb      	ldrh	r3, [r7, #12]
 80081d8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80081dc:	d90c      	bls.n	80081f8 <Above_30_RR_Control+0x1c8>
					{
						Valve_Open_Time                   = 700;
 80081de:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80081e2:	81bb      	strh	r3, [r7, #12]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp - 1);
 80081e4:	4b4c      	ldr	r3, [pc, #304]	; (8008318 <Above_30_RR_Control+0x2e8>)
 80081e6:	edd3 7a00 	vldr	s15, [r3]
 80081ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081f2:	4b49      	ldr	r3, [pc, #292]	; (8008318 <Above_30_RR_Control+0x2e8>)
 80081f4:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 80081f8:	4b47      	ldr	r3, [pc, #284]	; (8008318 <Above_30_RR_Control+0x2e8>)
 80081fa:	edd3 7a00 	vldr	s15, [r3]
 80081fe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8008202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820a:	f200 8139 	bhi.w	8008480 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = 3;
 800820e:	4b42      	ldr	r3, [pc, #264]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008210:	4a43      	ldr	r2, [pc, #268]	; (8008320 <Above_30_RR_Control+0x2f0>)
 8008212:	601a      	str	r2, [r3, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp <= 3)
 8008214:	e134      	b.n	8008480 <Above_30_RR_Control+0x450>
		}
		else if ((Achieved_PEEP== 0 ) )
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d136      	bne.n	800828a <Above_30_RR_Control+0x25a>
		{
			Wait_Count_2++;
 800821c:	4b41      	ldr	r3, [pc, #260]	; (8008324 <Above_30_RR_Control+0x2f4>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	3301      	adds	r3, #1
 8008222:	b2da      	uxtb	r2, r3
 8008224:	4b3f      	ldr	r3, [pc, #252]	; (8008324 <Above_30_RR_Control+0x2f4>)
 8008226:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8008228:	4b3e      	ldr	r3, [pc, #248]	; (8008324 <Above_30_RR_Control+0x2f4>)
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d918      	bls.n	8008262 <Above_30_RR_Control+0x232>
			{
				PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 8008230:	4b39      	ldr	r3, [pc, #228]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008232:	edd3 7a00 	vldr	s15, [r3]
 8008236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800823a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800823e:	4b36      	ldr	r3, [pc, #216]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008240:	edc3 7a00 	vstr	s15, [r3]
				Valve_Open_Time                   =( Valve_Open_Time - 10);
 8008244:	89bb      	ldrh	r3, [r7, #12]
 8008246:	3b0a      	subs	r3, #10
 8008248:	81bb      	strh	r3, [r7, #12]
				Wait_Count_2 = RESET;
 800824a:	4b36      	ldr	r3, [pc, #216]	; (8008324 <Above_30_RR_Control+0x2f4>)
 800824c:	2200      	movs	r2, #0
 800824e:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8008250:	89bb      	ldrh	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <Above_30_RR_Control+0x22e>
 8008256:	89bb      	ldrh	r3, [r7, #12]
 8008258:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800825c:	d901      	bls.n	8008262 <Above_30_RR_Control+0x232>
					{
						Valve_Open_Time = 1;
 800825e:	2301      	movs	r3, #1
 8008260:	81bb      	strh	r3, [r7, #12]

					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8008262:	4b2d      	ldr	r3, [pc, #180]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008264:	ed93 7a00 	vldr	s14, [r3]
 8008268:	edd7 7a01 	vldr	s15, [r7, #4]
 800826c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800827c:	f340 8100 	ble.w	8008480 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8008280:	4b25      	ldr	r3, [pc, #148]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a24      	ldr	r2, [pc, #144]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	e0fa      	b.n	8008480 <Above_30_RR_Control+0x450>
		}
		else if ((Achieved_PEEP< (Set_PEEP -8)))
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	ee07 3a90 	vmov	s15, r3
 8008290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008294:	edd7 7a01 	vldr	s15, [r7, #4]
 8008298:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800829c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a8:	d53e      	bpl.n	8008328 <Above_30_RR_Control+0x2f8>
		{
			Wait_Count_2++;
 80082aa:	4b1e      	ldr	r3, [pc, #120]	; (8008324 <Above_30_RR_Control+0x2f4>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	3301      	adds	r3, #1
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	4b1c      	ldr	r3, [pc, #112]	; (8008324 <Above_30_RR_Control+0x2f4>)
 80082b4:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 80082b6:	4b1b      	ldr	r3, [pc, #108]	; (8008324 <Above_30_RR_Control+0x2f4>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d918      	bls.n	80082f0 <Above_30_RR_Control+0x2c0>
			{
				Valve_Open_Time = (Valve_Open_Time - 50);
 80082be:	89bb      	ldrh	r3, [r7, #12]
 80082c0:	3b32      	subs	r3, #50	; 0x32
 80082c2:	81bb      	strh	r3, [r7, #12]
				Wait_Count_2    = RESET;
 80082c4:	4b17      	ldr	r3, [pc, #92]	; (8008324 <Above_30_RR_Control+0x2f4>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 80082ca:	89bb      	ldrh	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d003      	beq.n	80082d8 <Above_30_RR_Control+0x2a8>
 80082d0:	89bb      	ldrh	r3, [r7, #12]
 80082d2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80082d6:	d90b      	bls.n	80082f0 <Above_30_RR_Control+0x2c0>
					{
						Valve_Open_Time                   = 1;
 80082d8:	2301      	movs	r3, #1
 80082da:	81bb      	strh	r3, [r7, #12]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 80082dc:	4b0e      	ldr	r3, [pc, #56]	; (8008318 <Above_30_RR_Control+0x2e8>)
 80082de:	edd3 7a00 	vldr	s15, [r3]
 80082e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80082e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80082ea:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <Above_30_RR_Control+0x2e8>)
 80082ec:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > Set_PEEP + 10)
 80082f0:	4b09      	ldr	r3, [pc, #36]	; (8008318 <Above_30_RR_Control+0x2e8>)
 80082f2:	ed93 7a00 	vldr	s14, [r3]
 80082f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80082fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80082fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830a:	f340 80b9 	ble.w	8008480 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 800830e:	4b02      	ldr	r3, [pc, #8]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a01      	ldr	r2, [pc, #4]	; (8008318 <Above_30_RR_Control+0x2e8>)
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	e0b3      	b.n	8008480 <Above_30_RR_Control+0x450>
 8008318:	20012c74 	.word	0x20012c74
 800831c:	200000af 	.word	0x200000af
 8008320:	40400000 	.word	0x40400000
 8008324:	200000b0 	.word	0x200000b0
		}
		else if ((Achieved_PEEP>= (Set_PEEP -8)) && (Achieved_PEEP< (Set_PEEP-2)))
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008332:	edd7 7a01 	vldr	s15, [r7, #4]
 8008336:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800833a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800833e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008346:	db45      	blt.n	80083d4 <Above_30_RR_Control+0x3a4>
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008352:	edd7 7a01 	vldr	s15, [r7, #4]
 8008356:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800835a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800835e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008366:	d535      	bpl.n	80083d4 <Above_30_RR_Control+0x3a4>
		{
			Wait_Count_2++;
 8008368:	4b49      	ldr	r3, [pc, #292]	; (8008490 <Above_30_RR_Control+0x460>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	3301      	adds	r3, #1
 800836e:	b2da      	uxtb	r2, r3
 8008370:	4b47      	ldr	r3, [pc, #284]	; (8008490 <Above_30_RR_Control+0x460>)
 8008372:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8008374:	4b46      	ldr	r3, [pc, #280]	; (8008490 <Above_30_RR_Control+0x460>)
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b02      	cmp	r3, #2
 800837a:	d918      	bls.n	80083ae <Above_30_RR_Control+0x37e>
			{
				Valve_Open_Time = (Valve_Open_Time - 30);
 800837c:	89bb      	ldrh	r3, [r7, #12]
 800837e:	3b1e      	subs	r3, #30
 8008380:	81bb      	strh	r3, [r7, #12]
				Wait_Count_2    = RESET;
 8008382:	4b43      	ldr	r3, [pc, #268]	; (8008490 <Above_30_RR_Control+0x460>)
 8008384:	2200      	movs	r2, #0
 8008386:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 8008388:	89bb      	ldrh	r3, [r7, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <Above_30_RR_Control+0x366>
 800838e:	89bb      	ldrh	r3, [r7, #12]
 8008390:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008394:	d90b      	bls.n	80083ae <Above_30_RR_Control+0x37e>
					{
						Valve_Open_Time                   = 1;
 8008396:	2301      	movs	r3, #1
 8008398:	81bb      	strh	r3, [r7, #12]
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 800839a:	4b3e      	ldr	r3, [pc, #248]	; (8008494 <Above_30_RR_Control+0x464>)
 800839c:	edd3 7a00 	vldr	s15, [r3]
 80083a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083a8:	4b3a      	ldr	r3, [pc, #232]	; (8008494 <Above_30_RR_Control+0x464>)
 80083aa:	edc3 7a00 	vstr	s15, [r3]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 80083ae:	4b39      	ldr	r3, [pc, #228]	; (8008494 <Above_30_RR_Control+0x464>)
 80083b0:	ed93 7a00 	vldr	s14, [r3]
 80083b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80083b8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80083bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c8:	dd5a      	ble.n	8008480 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 80083ca:	4b32      	ldr	r3, [pc, #200]	; (8008494 <Above_30_RR_Control+0x464>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a31      	ldr	r2, [pc, #196]	; (8008494 <Above_30_RR_Control+0x464>)
 80083d0:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 80083d2:	e055      	b.n	8008480 <Above_30_RR_Control+0x450>
		}
		else if ((Achieved_PEEP>= (Set_PEEP -2)) && (Achieved_PEEP< (Set_PEEP)))
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083de:	edd7 7a01 	vldr	s15, [r7, #4]
 80083e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80083e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f2:	db41      	blt.n	8008478 <Above_30_RR_Control+0x448>
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8008402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840a:	dd35      	ble.n	8008478 <Above_30_RR_Control+0x448>
		{
			Wait_Count_2++;
 800840c:	4b20      	ldr	r3, [pc, #128]	; (8008490 <Above_30_RR_Control+0x460>)
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	3301      	adds	r3, #1
 8008412:	b2da      	uxtb	r2, r3
 8008414:	4b1e      	ldr	r3, [pc, #120]	; (8008490 <Above_30_RR_Control+0x460>)
 8008416:	701a      	strb	r2, [r3, #0]
			if (Wait_Count_2 > 2)
 8008418:	4b1d      	ldr	r3, [pc, #116]	; (8008490 <Above_30_RR_Control+0x460>)
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b02      	cmp	r3, #2
 800841e:	d918      	bls.n	8008452 <Above_30_RR_Control+0x422>
			{
				Valve_Open_Time = Valve_Open_Time - 10;
 8008420:	89bb      	ldrh	r3, [r7, #12]
 8008422:	3b0a      	subs	r3, #10
 8008424:	81bb      	strh	r3, [r7, #12]
				Wait_Count_2    = RESET;
 8008426:	4b1a      	ldr	r3, [pc, #104]	; (8008490 <Above_30_RR_Control+0x460>)
 8008428:	2200      	movs	r2, #0
 800842a:	701a      	strb	r2, [r3, #0]
					if (Valve_Open_Time < 1 || Valve_Open_Time > 700)
 800842c:	89bb      	ldrh	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <Above_30_RR_Control+0x40a>
 8008432:	89bb      	ldrh	r3, [r7, #12]
 8008434:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008438:	d90b      	bls.n	8008452 <Above_30_RR_Control+0x422>
					{
						PEEP_Maintain_Parameter.PEEP_Temp = (PEEP_Maintain_Parameter.PEEP_Temp + 1);
 800843a:	4b16      	ldr	r3, [pc, #88]	; (8008494 <Above_30_RR_Control+0x464>)
 800843c:	edd3 7a00 	vldr	s15, [r3]
 8008440:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008444:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008448:	4b12      	ldr	r3, [pc, #72]	; (8008494 <Above_30_RR_Control+0x464>)
 800844a:	edc3 7a00 	vstr	s15, [r3]
						Valve_Open_Time                   = 1;
 800844e:	2301      	movs	r3, #1
 8008450:	81bb      	strh	r3, [r7, #12]
					}
			}
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8008452:	4b10      	ldr	r3, [pc, #64]	; (8008494 <Above_30_RR_Control+0x464>)
 8008454:	ed93 7a00 	vldr	s14, [r3]
 8008458:	edd7 7a01 	vldr	s15, [r7, #4]
 800845c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8008460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008464:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846c:	dd08      	ble.n	8008480 <Above_30_RR_Control+0x450>
				PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 800846e:	4b09      	ldr	r3, [pc, #36]	; (8008494 <Above_30_RR_Control+0x464>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a08      	ldr	r2, [pc, #32]	; (8008494 <Above_30_RR_Control+0x464>)
 8008474:	6013      	str	r3, [r2, #0]
			if (PEEP_Maintain_Parameter.PEEP_Temp > (Set_PEEP + 10))
 8008476:	e003      	b.n	8008480 <Above_30_RR_Control+0x450>
		}

		else
			PEEP_Maintain_Parameter.PEEP_Temp = PEEP_Maintain_Parameter.PEEP_Temp;
 8008478:	4b06      	ldr	r3, [pc, #24]	; (8008494 <Above_30_RR_Control+0x464>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a05      	ldr	r2, [pc, #20]	; (8008494 <Above_30_RR_Control+0x464>)
 800847e:	6013      	str	r3, [r2, #0]


		return Valve_Open_Time;
 8008480:	89bb      	ldrh	r3, [r7, #12]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	200000b0 	.word	0x200000b0
 8008494:	20012c74 	.word	0x20012c74

08008498 <HFNC_Task>:
 * @param none.
 * @post none.
  **/

void HFNC_Task (void *argument)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	while (1)
	{


		if(  (Oxygen_Parameter.Achieved_Oxygen < HFNC._FIO2_Val) )
 80084a0:	4b6a      	ldr	r3, [pc, #424]	; (800864c <HFNC_Task+0x1b4>)
 80084a2:	7a1a      	ldrb	r2, [r3, #8]
 80084a4:	4b6a      	ldr	r3, [pc, #424]	; (8008650 <HFNC_Task+0x1b8>)
 80084a6:	789b      	ldrb	r3, [r3, #2]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d220      	bcs.n	80084ee <HFNC_Task+0x56>
		{
			HFNC_O2_DAC_VALUE=controlsys_Update(&Parker_valve_tune, HFNC._FIO2_Val,Oxygen_Parameter.Achieved_Oxygen);
 80084ac:	4b68      	ldr	r3, [pc, #416]	; (8008650 <HFNC_Task+0x1b8>)
 80084ae:	789b      	ldrb	r3, [r3, #2]
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b8:	4b64      	ldr	r3, [pc, #400]	; (800864c <HFNC_Task+0x1b4>)
 80084ba:	7a1b      	ldrb	r3, [r3, #8]
 80084bc:	ee07 3a10 	vmov	s14, r3
 80084c0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80084c4:	eef0 0a47 	vmov.f32	s1, s14
 80084c8:	eeb0 0a67 	vmov.f32	s0, s15
 80084cc:	4861      	ldr	r0, [pc, #388]	; (8008654 <HFNC_Task+0x1bc>)
 80084ce:	f007 ffe3 	bl	8010498 <controlsys_Update>
 80084d2:	eef0 7a40 	vmov.f32	s15, s0
 80084d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084da:	ee17 3a90 	vmov	r3, s15
 80084de:	b29a      	uxth	r2, r3
 80084e0:	4b5d      	ldr	r3, [pc, #372]	; (8008658 <HFNC_Task+0x1c0>)
 80084e2:	801a      	strh	r2, [r3, #0]
			Parkar_valve_Signal( HFNC_O2_DAC_VALUE);
 80084e4:	4b5c      	ldr	r3, [pc, #368]	; (8008658 <HFNC_Task+0x1c0>)
 80084e6:	881a      	ldrh	r2, [r3, #0]
 80084e8:	4b5c      	ldr	r3, [pc, #368]	; (800865c <HFNC_Task+0x1c4>)
 80084ea:	615a      	str	r2, [r3, #20]
 80084ec:	e01f      	b.n	800852e <HFNC_Task+0x96>
		}
		else
		{
			HFNC_O2_DAC_VALUE=controlsys_Update(&Parker_valve_tune, HFNC._FIO2_Val,Oxygen_Parameter.Achieved_Oxygen);
 80084ee:	4b58      	ldr	r3, [pc, #352]	; (8008650 <HFNC_Task+0x1b8>)
 80084f0:	789b      	ldrb	r3, [r3, #2]
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fa:	4b54      	ldr	r3, [pc, #336]	; (800864c <HFNC_Task+0x1b4>)
 80084fc:	7a1b      	ldrb	r3, [r3, #8]
 80084fe:	ee07 3a10 	vmov	s14, r3
 8008502:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008506:	eef0 0a47 	vmov.f32	s1, s14
 800850a:	eeb0 0a67 	vmov.f32	s0, s15
 800850e:	4851      	ldr	r0, [pc, #324]	; (8008654 <HFNC_Task+0x1bc>)
 8008510:	f007 ffc2 	bl	8010498 <controlsys_Update>
 8008514:	eef0 7a40 	vmov.f32	s15, s0
 8008518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800851c:	ee17 3a90 	vmov	r3, s15
 8008520:	b29a      	uxth	r2, r3
 8008522:	4b4d      	ldr	r3, [pc, #308]	; (8008658 <HFNC_Task+0x1c0>)
 8008524:	801a      	strh	r2, [r3, #0]
			Parkar_valve_Signal( HFNC_O2_DAC_VALUE);
 8008526:	4b4c      	ldr	r3, [pc, #304]	; (8008658 <HFNC_Task+0x1c0>)
 8008528:	881a      	ldrh	r2, [r3, #0]
 800852a:	4b4c      	ldr	r3, [pc, #304]	; (800865c <HFNC_Task+0x1c4>)
 800852c:	615a      	str	r2, [r3, #20]
		}
		Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 800852e:	4b4c      	ldr	r3, [pc, #304]	; (8008660 <HFNC_Task+0x1c8>)
 8008530:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	4b45      	ldr	r3, [pc, #276]	; (800864c <HFNC_Task+0x1b4>)
 8008538:	721a      	strb	r2, [r3, #8]
		if(Check_O2==0)
 800853a:	4b4a      	ldr	r3, [pc, #296]	; (8008664 <HFNC_Task+0x1cc>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <HFNC_Task+0xb0>
		{
			Check_O2_Supply();
 8008542:	f000 f9a9 	bl	8008898 <Check_O2_Supply>
 8008546:	e00b      	b.n	8008560 <HFNC_Task+0xc8>
		}
		else
		{
			Check_O2  = (Check_O2 -2);
 8008548:	4b46      	ldr	r3, [pc, #280]	; (8008664 <HFNC_Task+0x1cc>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3b02      	subs	r3, #2
 800854e:	4a45      	ldr	r2, [pc, #276]	; (8008664 <HFNC_Task+0x1cc>)
 8008550:	6013      	str	r3, [r2, #0]
			if(Check_O2 <0)
 8008552:	4b44      	ldr	r3, [pc, #272]	; (8008664 <HFNC_Task+0x1cc>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	da02      	bge.n	8008560 <HFNC_Task+0xc8>
				Check_O2 = 0;
 800855a:	4b42      	ldr	r3, [pc, #264]	; (8008664 <HFNC_Task+0x1cc>)
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]

		}
		Flow_count++;
 8008560:	4b41      	ldr	r3, [pc, #260]	; (8008668 <HFNC_Task+0x1d0>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3301      	adds	r3, #1
 8008566:	4a40      	ldr	r2, [pc, #256]	; (8008668 <HFNC_Task+0x1d0>)
 8008568:	6013      	str	r3, [r2, #0]
		Cummulative_Flow_Value += GRAPH_VALUES.flow;
 800856a:	4b3d      	ldr	r3, [pc, #244]	; (8008660 <HFNC_Task+0x1c8>)
 800856c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008570:	4b3e      	ldr	r3, [pc, #248]	; (800866c <HFNC_Task+0x1d4>)
 8008572:	edd3 7a00 	vldr	s15, [r3]
 8008576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800857a:	4b3c      	ldr	r3, [pc, #240]	; (800866c <HFNC_Task+0x1d4>)
 800857c:	edc3 7a00 	vstr	s15, [r3]
		if(Flow_count >= 37)
 8008580:	4b39      	ldr	r3, [pc, #228]	; (8008668 <HFNC_Task+0x1d0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b24      	cmp	r3, #36	; 0x24
 8008586:	dd52      	ble.n	800862e <HFNC_Task+0x196>
		{
			FLOW_AVG                      = ((float)Cummulative_Flow_Value / (float)Flow_count);
 8008588:	4b38      	ldr	r3, [pc, #224]	; (800866c <HFNC_Task+0x1d4>)
 800858a:	edd3 6a00 	vldr	s13, [r3]
 800858e:	4b36      	ldr	r3, [pc, #216]	; (8008668 <HFNC_Task+0x1d0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800859a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800859e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085a2:	edc7 7a00 	vstr	s15, [r7]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	4b31      	ldr	r3, [pc, #196]	; (8008670 <HFNC_Task+0x1d8>)
 80085ac:	701a      	strb	r2, [r3, #0]
			LAST_HFNC_BLOWER_DAC_VALUE    = HFNC_TUNE_DAC_VALUE(&HFNC_BLOWER_DAC_VALUE ,HFNC._Flow_Rate );
 80085ae:	4b28      	ldr	r3, [pc, #160]	; (8008650 <HFNC_Task+0x1b8>)
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	4619      	mov	r1, r3
 80085b6:	482f      	ldr	r0, [pc, #188]	; (8008674 <HFNC_Task+0x1dc>)
 80085b8:	f000 f9b2 	bl	8008920 <HFNC_TUNE_DAC_VALUE>
 80085bc:	4603      	mov	r3, r0
 80085be:	461a      	mov	r2, r3
 80085c0:	4b2d      	ldr	r3, [pc, #180]	; (8008678 <HFNC_Task+0x1e0>)
 80085c2:	801a      	strh	r2, [r3, #0]

			if(LAST_HFNC_BLOWER_DAC_VALUE > 3000)
 80085c4:	4b2c      	ldr	r3, [pc, #176]	; (8008678 <HFNC_Task+0x1e0>)
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d904      	bls.n	80085da <HFNC_Task+0x142>
				LAST_HFNC_BLOWER_DAC_VALUE = 3000;
 80085d0:	4b29      	ldr	r3, [pc, #164]	; (8008678 <HFNC_Task+0x1e0>)
 80085d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	e006      	b.n	80085e8 <HFNC_Task+0x150>
			else if(LAST_HFNC_BLOWER_DAC_VALUE < 100)
 80085da:	4b27      	ldr	r3, [pc, #156]	; (8008678 <HFNC_Task+0x1e0>)
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	2b63      	cmp	r3, #99	; 0x63
 80085e0:	d802      	bhi.n	80085e8 <HFNC_Task+0x150>
				LAST_HFNC_BLOWER_DAC_VALUE = 100;
 80085e2:	4b25      	ldr	r3, [pc, #148]	; (8008678 <HFNC_Task+0x1e0>)
 80085e4:	2264      	movs	r2, #100	; 0x64
 80085e6:	801a      	strh	r2, [r3, #0]
			HFNC_BLOWER_DAC_VALUE         = LAST_HFNC_BLOWER_DAC_VALUE;
 80085e8:	4b23      	ldr	r3, [pc, #140]	; (8008678 <HFNC_Task+0x1e0>)
 80085ea:	881a      	ldrh	r2, [r3, #0]
 80085ec:	4b21      	ldr	r3, [pc, #132]	; (8008674 <HFNC_Task+0x1dc>)
 80085ee:	801a      	strh	r2, [r3, #0]
			Cummulative_Flow_Value        = 0;
 80085f0:	4b1e      	ldr	r3, [pc, #120]	; (800866c <HFNC_Task+0x1d4>)
 80085f2:	f04f 0200 	mov.w	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
			Flow_count                    = 0;
 80085f8:	4b1b      	ldr	r3, [pc, #108]	; (8008668 <HFNC_Task+0x1d0>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]

			/* Set PD5 High - Green LED ON*/
			Green_Led_ON();
 80085fe:	4b1f      	ldr	r3, [pc, #124]	; (800867c <HFNC_Task+0x1e4>)
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	4a1e      	ldr	r2, [pc, #120]	; (800867c <HFNC_Task+0x1e4>)
 8008604:	f043 0320 	orr.w	r3, r3, #32
 8008608:	6153      	str	r3, [r2, #20]
			Blue_Led_OFF();
 800860a:	4b1c      	ldr	r3, [pc, #112]	; (800867c <HFNC_Task+0x1e4>)
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	4a1b      	ldr	r2, [pc, #108]	; (800867c <HFNC_Task+0x1e4>)
 8008610:	f023 0308 	bic.w	r3, r3, #8
 8008614:	6153      	str	r3, [r2, #20]
			Red_Led_OFF();
 8008616:	4b19      	ldr	r3, [pc, #100]	; (800867c <HFNC_Task+0x1e4>)
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	4a18      	ldr	r2, [pc, #96]	; (800867c <HFNC_Task+0x1e4>)
 800861c:	f023 0310 	bic.w	r3, r3, #16
 8008620:	6153      	str	r3, [r2, #20]

			Send_Frame = First_Frame;
 8008622:	4b17      	ldr	r3, [pc, #92]	; (8008680 <HFNC_Task+0x1e8>)
 8008624:	2201      	movs	r2, #1
 8008626:	701a      	strb	r2, [r3, #0]
			Send_Bluetooth_Data_Farme = SEND_SAMPLED_PARAMETER_FRAME;
 8008628:	4b16      	ldr	r3, [pc, #88]	; (8008684 <HFNC_Task+0x1ec>)
 800862a:	2203      	movs	r2, #3
 800862c:	701a      	strb	r2, [r3, #0]
		}
		Blower_Signal(HFNC_BLOWER_DAC_VALUE);
 800862e:	4b11      	ldr	r3, [pc, #68]	; (8008674 <HFNC_Task+0x1dc>)
 8008630:	881a      	ldrh	r2, [r3, #0]
 8008632:	4b0a      	ldr	r3, [pc, #40]	; (800865c <HFNC_Task+0x1c4>)
 8008634:	609a      	str	r2, [r3, #8]
		ExpValve_CLOSE();
 8008636:	4b14      	ldr	r3, [pc, #80]	; (8008688 <HFNC_Task+0x1f0>)
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	4a13      	ldr	r2, [pc, #76]	; (8008688 <HFNC_Task+0x1f0>)
 800863c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008640:	6153      	str	r3, [r2, #20]
		vTaskDelay(70);
 8008642:	2046      	movs	r0, #70	; 0x46
 8008644:	f012 fd02 	bl	801b04c <vTaskDelay>
		if(  (Oxygen_Parameter.Achieved_Oxygen < HFNC._FIO2_Val) )
 8008648:	e72a      	b.n	80084a0 <HFNC_Task+0x8>
 800864a:	bf00      	nop
 800864c:	200129d4 	.word	0x200129d4
 8008650:	200122dc 	.word	0x200122dc
 8008654:	2000001c 	.word	0x2000001c
 8008658:	2001263e 	.word	0x2001263e
 800865c:	40007400 	.word	0x40007400
 8008660:	200125f8 	.word	0x200125f8
 8008664:	2000000c 	.word	0x2000000c
 8008668:	20012d70 	.word	0x20012d70
 800866c:	20012d68 	.word	0x20012d68
 8008670:	20012974 	.word	0x20012974
 8008674:	20012d6e 	.word	0x20012d6e
 8008678:	20000008 	.word	0x20000008
 800867c:	40020c00 	.word	0x40020c00
 8008680:	20012770 	.word	0x20012770
 8008684:	2001269d 	.word	0x2001269d
 8008688:	40020400 	.word	0x40020400
 800868c:	00000000 	.word	0x00000000

08008690 <HFNC_Packet_Data>:
* @param RECEIVE_GRAPH_PACKET data from blue-tooth.
* @post HFNC mode data is Separated.
**/

void HFNC_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
	controlsys_Init(&Parker_valve_tune);          //parker
 8008698:	4861      	ldr	r0, [pc, #388]	; (8008820 <HFNC_Packet_Data+0x190>)
 800869a:	f007 fedd 	bl	8010458 <controlsys_Init>


	HFNC._Flow_Rate  = (Receive_Graph_Packet ->Flow_Limit_FiO2_Flow_Limit);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	7b5b      	ldrb	r3, [r3, #13]
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	4b5f      	ldr	r3, [pc, #380]	; (8008824 <HFNC_Packet_Data+0x194>)
 80086a6:	801a      	strh	r2, [r3, #0]
	HFNC._FIO2_Val   = (Receive_Graph_Packet ->FiO2);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	7a1a      	ldrb	r2, [r3, #8]
 80086ac:	4b5d      	ldr	r3, [pc, #372]	; (8008824 <HFNC_Packet_Data+0x194>)
 80086ae:	709a      	strb	r2, [r3, #2]


	vTaskSuspend(Vc_Cmv_Handler);
 80086b0:	4b5d      	ldr	r3, [pc, #372]	; (8008828 <HFNC_Packet_Data+0x198>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f012 fcfd 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 80086ba:	4b5c      	ldr	r3, [pc, #368]	; (800882c <HFNC_Packet_Data+0x19c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4618      	mov	r0, r3
 80086c0:	f012 fcf8 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 80086c4:	4b5a      	ldr	r3, [pc, #360]	; (8008830 <HFNC_Packet_Data+0x1a0>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f012 fcf3 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Cmv_Handler);
 80086ce:	4b59      	ldr	r3, [pc, #356]	; (8008834 <HFNC_Packet_Data+0x1a4>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f012 fcee 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 80086d8:	4b57      	ldr	r3, [pc, #348]	; (8008838 <HFNC_Packet_Data+0x1a8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f012 fce9 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 80086e2:	4b56      	ldr	r3, [pc, #344]	; (800883c <HFNC_Packet_Data+0x1ac>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f012 fce4 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 80086ec:	4b54      	ldr	r3, [pc, #336]	; (8008840 <HFNC_Packet_Data+0x1b0>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f012 fcdf 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 80086f6:	4b53      	ldr	r3, [pc, #332]	; (8008844 <HFNC_Packet_Data+0x1b4>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f012 fcda 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 8008700:	4b51      	ldr	r3, [pc, #324]	; (8008848 <HFNC_Packet_Data+0x1b8>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f012 fcd5 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800870a:	4b50      	ldr	r3, [pc, #320]	; (800884c <HFNC_Packet_Data+0x1bc>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	f012 fcd0 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_Handler);
 8008714:	4b4e      	ldr	r3, [pc, #312]	; (8008850 <HFNC_Packet_Data+0x1c0>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f012 fccb 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800871e:	4b4d      	ldr	r3, [pc, #308]	; (8008854 <HFNC_Packet_Data+0x1c4>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4618      	mov	r0, r3
 8008724:	f012 fcc6 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 8008728:	4b4b      	ldr	r3, [pc, #300]	; (8008858 <HFNC_Packet_Data+0x1c8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4618      	mov	r0, r3
 800872e:	f012 fcc1 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 8008732:	4b4a      	ldr	r3, [pc, #296]	; (800885c <HFNC_Packet_Data+0x1cc>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f012 fcbc 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800873c:	4b48      	ldr	r3, [pc, #288]	; (8008860 <HFNC_Packet_Data+0x1d0>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4618      	mov	r0, r3
 8008742:	f012 fcb7 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 8008746:	4b47      	ldr	r3, [pc, #284]	; (8008864 <HFNC_Packet_Data+0x1d4>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f012 fcb2 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 8008750:	4b45      	ldr	r3, [pc, #276]	; (8008868 <HFNC_Packet_Data+0x1d8>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4618      	mov	r0, r3
 8008756:	f012 fcad 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Nebuliser_Handler);
 800875a:	4b44      	ldr	r3, [pc, #272]	; (800886c <HFNC_Packet_Data+0x1dc>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4618      	mov	r0, r3
 8008760:	f012 fca8 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Suction_Handler);
 8008764:	4b42      	ldr	r3, [pc, #264]	; (8008870 <HFNC_Packet_Data+0x1e0>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f012 fca3 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(HFNC_Handler);
 800876e:	4b41      	ldr	r3, [pc, #260]	; (8008874 <HFNC_Packet_Data+0x1e4>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4618      	mov	r0, r3
 8008774:	f012 fc9e 	bl	801b0b4 <vTaskSuspend>
	ExpValve_OPEN();
 8008778:	4b3f      	ldr	r3, [pc, #252]	; (8008878 <HFNC_Packet_Data+0x1e8>)
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	4a3e      	ldr	r2, [pc, #248]	; (8008878 <HFNC_Packet_Data+0x1e8>)
 800877e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008782:	6153      	str	r3, [r2, #20]
	Blower_Signal( 0);
 8008784:	4b3d      	ldr	r3, [pc, #244]	; (800887c <HFNC_Packet_Data+0x1ec>)
 8008786:	2200      	movs	r2, #0
 8008788:	609a      	str	r2, [r3, #8]
	Parkar_valve_Signal(0);
 800878a:	4b3c      	ldr	r3, [pc, #240]	; (800887c <HFNC_Packet_Data+0x1ec>)
 800878c:	2200      	movs	r2, #0
 800878e:	615a      	str	r2, [r3, #20]
	Nebuliser_OFF();
 8008790:	4b39      	ldr	r3, [pc, #228]	; (8008878 <HFNC_Packet_Data+0x1e8>)
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	4a38      	ldr	r2, [pc, #224]	; (8008878 <HFNC_Packet_Data+0x1e8>)
 8008796:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800879a:	6153      	str	r3, [r2, #20]
	HFNC_O2_DAC_VALUE=0;
 800879c:	4b38      	ldr	r3, [pc, #224]	; (8008880 <HFNC_Packet_Data+0x1f0>)
 800879e:	2200      	movs	r2, #0
 80087a0:	801a      	strh	r2, [r3, #0]
	Parkar_valve_Signal(0);
 80087a2:	4b36      	ldr	r3, [pc, #216]	; (800887c <HFNC_Packet_Data+0x1ec>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	615a      	str	r2, [r3, #20]
	Flow_count                       = 0;
 80087a8:	4b36      	ldr	r3, [pc, #216]	; (8008884 <HFNC_Packet_Data+0x1f4>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	601a      	str	r2, [r3, #0]
	HFNC_BLOWER_DAC_VALUE            = (10.6*HFNC._Flow_Rate)+82.1;
 80087ae:	4b1d      	ldr	r3, [pc, #116]	; (8008824 <HFNC_Packet_Data+0x194>)
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7f7 fe5e 	bl	8000474 <__aeabi_i2d>
 80087b8:	a315      	add	r3, pc, #84	; (adr r3, 8008810 <HFNC_Packet_Data+0x180>)
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f7f7 fec3 	bl	8000548 <__aeabi_dmul>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4610      	mov	r0, r2
 80087c8:	4619      	mov	r1, r3
 80087ca:	a313      	add	r3, pc, #76	; (adr r3, 8008818 <HFNC_Packet_Data+0x188>)
 80087cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d0:	f7f7 fd04 	bl	80001dc <__adddf3>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4610      	mov	r0, r2
 80087da:	4619      	mov	r1, r3
 80087dc:	f7f8 f976 	bl	8000acc <__aeabi_d2uiz>
 80087e0:	4603      	mov	r3, r0
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	4b28      	ldr	r3, [pc, #160]	; (8008888 <HFNC_Packet_Data+0x1f8>)
 80087e6:	801a      	strh	r2, [r3, #0]
	GRAPH_VALUES.Maximum_oxygen_flow = 0;
 80087e8:	4b28      	ldr	r3, [pc, #160]	; (800888c <HFNC_Packet_Data+0x1fc>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	829a      	strh	r2, [r3, #20]
	Oxygen_Parameter.Achieved_Oxygen = 90;
 80087ee:	4b28      	ldr	r3, [pc, #160]	; (8008890 <HFNC_Packet_Data+0x200>)
 80087f0:	225a      	movs	r2, #90	; 0x5a
 80087f2:	721a      	strb	r2, [r3, #8]
	Check_O2                         = 1000;
 80087f4:	4b27      	ldr	r3, [pc, #156]	; (8008894 <HFNC_Packet_Data+0x204>)
 80087f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80087fa:	601a      	str	r2, [r3, #0]
	vTaskResume(HFNC_Handler);
 80087fc:	4b1d      	ldr	r3, [pc, #116]	; (8008874 <HFNC_Packet_Data+0x1e4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4618      	mov	r0, r3
 8008802:	f012 fd1b 	bl	801b23c <vTaskResume>
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	33333333 	.word	0x33333333
 8008814:	40253333 	.word	0x40253333
 8008818:	66666666 	.word	0x66666666
 800881c:	40548666 	.word	0x40548666
 8008820:	2000001c 	.word	0x2000001c
 8008824:	200122dc 	.word	0x200122dc
 8008828:	20012c68 	.word	0x20012c68
 800882c:	20012248 	.word	0x20012248
 8008830:	200129cc 	.word	0x200129cc
 8008834:	20012874 	.word	0x20012874
 8008838:	200124ec 	.word	0x200124ec
 800883c:	20012638 	.word	0x20012638
 8008840:	20012cb4 	.word	0x20012cb4
 8008844:	20012824 	.word	0x20012824
 8008848:	20012c50 	.word	0x20012c50
 800884c:	20012500 	.word	0x20012500
 8008850:	200128a8 	.word	0x200128a8
 8008854:	200127a8 	.word	0x200127a8
 8008858:	20012d38 	.word	0x20012d38
 800885c:	20012364 	.word	0x20012364
 8008860:	20012b04 	.word	0x20012b04
 8008864:	20012810 	.word	0x20012810
 8008868:	20012a84 	.word	0x20012a84
 800886c:	20012504 	.word	0x20012504
 8008870:	20012b6c 	.word	0x20012b6c
 8008874:	2001234c 	.word	0x2001234c
 8008878:	40020400 	.word	0x40020400
 800887c:	40007400 	.word	0x40007400
 8008880:	2001263e 	.word	0x2001263e
 8008884:	20012d70 	.word	0x20012d70
 8008888:	20012d6e 	.word	0x20012d6e
 800888c:	200125f8 	.word	0x200125f8
 8008890:	200129d4 	.word	0x200129d4
 8008894:	2000000c 	.word	0x2000000c

08008898 <Check_O2_Supply>:
* @brief Check_O2_Supply
* This function checks for disconnection of the O2 supply.
**/

void Check_O2_Supply()
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
	    if(GRAPH_VALUES.oxygen_flow<=0)
 800889c:	4b1a      	ldr	r3, [pc, #104]	; (8008908 <Check_O2_Supply+0x70>)
 800889e:	edd3 7a04 	vldr	s15, [r3, #16]
 80088a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088aa:	d900      	bls.n	80088ae <Check_O2_Supply+0x16>

				Flow_count            = 0;
				O2_supply_error_count = 0;
			}
		}
}
 80088ac:	e02a      	b.n	8008904 <Check_O2_Supply+0x6c>
			O2_supply_error_count++;
 80088ae:	4b17      	ldr	r3, [pc, #92]	; (800890c <Check_O2_Supply+0x74>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3301      	adds	r3, #1
 80088b4:	4a15      	ldr	r2, [pc, #84]	; (800890c <Check_O2_Supply+0x74>)
 80088b6:	6013      	str	r3, [r2, #0]
			if(O2_supply_error_count >= 43)
 80088b8:	4b14      	ldr	r3, [pc, #80]	; (800890c <Check_O2_Supply+0x74>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b2a      	cmp	r3, #42	; 0x2a
 80088be:	dd21      	ble.n	8008904 <Check_O2_Supply+0x6c>
				Clear_All_Alert_Bits();
 80088c0:	f7f8 fb58 	bl	8000f74 <Clear_All_Alert_Bits>
				SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_OXYGEN_SUPPLY_FAILED);
 80088c4:	4a12      	ldr	r2, [pc, #72]	; (8008910 <Check_O2_Supply+0x78>)
 80088c6:	78d3      	ldrb	r3, [r2, #3]
 80088c8:	f043 0308 	orr.w	r3, r3, #8
 80088cc:	70d3      	strb	r3, [r2, #3]
				Send_Bluetooth_Data_Farme = SEND_ALERT_FRAME;
 80088ce:	4b11      	ldr	r3, [pc, #68]	; (8008914 <Check_O2_Supply+0x7c>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	701a      	strb	r2, [r3, #0]
				Red_Led_ON();
 80088d4:	4b10      	ldr	r3, [pc, #64]	; (8008918 <Check_O2_Supply+0x80>)
 80088d6:	695b      	ldr	r3, [r3, #20]
 80088d8:	4a0f      	ldr	r2, [pc, #60]	; (8008918 <Check_O2_Supply+0x80>)
 80088da:	f043 0310 	orr.w	r3, r3, #16
 80088de:	6153      	str	r3, [r2, #20]
				Blue_Led_OFF();
 80088e0:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <Check_O2_Supply+0x80>)
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	4a0c      	ldr	r2, [pc, #48]	; (8008918 <Check_O2_Supply+0x80>)
 80088e6:	f023 0308 	bic.w	r3, r3, #8
 80088ea:	6153      	str	r3, [r2, #20]
				Green_Led_OFF();
 80088ec:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <Check_O2_Supply+0x80>)
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	4a09      	ldr	r2, [pc, #36]	; (8008918 <Check_O2_Supply+0x80>)
 80088f2:	f023 0320 	bic.w	r3, r3, #32
 80088f6:	6153      	str	r3, [r2, #20]
				Flow_count            = 0;
 80088f8:	4b08      	ldr	r3, [pc, #32]	; (800891c <Check_O2_Supply+0x84>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]
				O2_supply_error_count = 0;
 80088fe:	4b03      	ldr	r3, [pc, #12]	; (800890c <Check_O2_Supply+0x74>)
 8008900:	2200      	movs	r2, #0
 8008902:	601a      	str	r2, [r3, #0]
}
 8008904:	bf00      	nop
 8008906:	bd80      	pop	{r7, pc}
 8008908:	200125f8 	.word	0x200125f8
 800890c:	20012d64 	.word	0x20012d64
 8008910:	20012408 	.word	0x20012408
 8008914:	2001269d 	.word	0x2001269d
 8008918:	40020c00 	.word	0x40020c00
 800891c:	20012d70 	.word	0x20012d70

08008920 <HFNC_TUNE_DAC_VALUE>:
* @param Set_Flow set flow.
* @return uint16_t Blower dac value is passed.
**/

static uint16_t HFNC_TUNE_DAC_VALUE(uint16_t *Last_Blower_DAC_Val,uint8_t Set_Flow)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
	if(  ( FLOW_AVG)  > ( Set_Flow ) && (FLOW_AVG  < (Set_Flow + 2) ) )
 800892c:	4b37      	ldr	r3, [pc, #220]	; (8008a0c <HFNC_TUNE_DAC_VALUE+0xec>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	78fa      	ldrb	r2, [r7, #3]
 8008932:	429a      	cmp	r2, r3
 8008934:	d20c      	bcs.n	8008950 <HFNC_TUNE_DAC_VALUE+0x30>
 8008936:	78fb      	ldrb	r3, [r7, #3]
 8008938:	3301      	adds	r3, #1
 800893a:	4a34      	ldr	r2, [pc, #208]	; (8008a0c <HFNC_TUNE_DAC_VALUE+0xec>)
 800893c:	7812      	ldrb	r2, [r2, #0]
 800893e:	4293      	cmp	r3, r2
 8008940:	db06      	blt.n	8008950 <HFNC_TUNE_DAC_VALUE+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	3b0a      	subs	r3, #10
 8008948:	b29a      	uxth	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	801a      	strh	r2, [r3, #0]
 800894e:	e055      	b.n	80089fc <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else if(  ( FLOW_AVG)  >= ( Set_Flow + 2 ) && (FLOW_AVG  < (Set_Flow + 4) ) )
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	3301      	adds	r3, #1
 8008954:	4a2d      	ldr	r2, [pc, #180]	; (8008a0c <HFNC_TUNE_DAC_VALUE+0xec>)
 8008956:	7812      	ldrb	r2, [r2, #0]
 8008958:	4293      	cmp	r3, r2
 800895a:	da0c      	bge.n	8008976 <HFNC_TUNE_DAC_VALUE+0x56>
 800895c:	78fb      	ldrb	r3, [r7, #3]
 800895e:	3303      	adds	r3, #3
 8008960:	4a2a      	ldr	r2, [pc, #168]	; (8008a0c <HFNC_TUNE_DAC_VALUE+0xec>)
 8008962:	7812      	ldrb	r2, [r2, #0]
 8008964:	4293      	cmp	r3, r2
 8008966:	db06      	blt.n	8008976 <HFNC_TUNE_DAC_VALUE+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	3b14      	subs	r3, #20
 800896e:	b29a      	uxth	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	801a      	strh	r2, [r3, #0]
 8008974:	e042      	b.n	80089fc <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else if(  ( FLOW_AVG)  >= ( Set_Flow + 4 )  )
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	3303      	adds	r3, #3
 800897a:	4a24      	ldr	r2, [pc, #144]	; (8008a0c <HFNC_TUNE_DAC_VALUE+0xec>)
 800897c:	7812      	ldrb	r2, [r2, #0]
 800897e:	4293      	cmp	r3, r2
 8008980:	da06      	bge.n	8008990 <HFNC_TUNE_DAC_VALUE+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	3b28      	subs	r3, #40	; 0x28
 8008988:	b29a      	uxth	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	801a      	strh	r2, [r3, #0]
 800898e:	e035      	b.n	80089fc <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else if( (FLOW_AVG  < Set_Flow) && (FLOW_AVG  > (Set_Flow -2) ) )
 8008990:	4b1e      	ldr	r3, [pc, #120]	; (8008a0c <HFNC_TUNE_DAC_VALUE+0xec>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	78fa      	ldrb	r2, [r7, #3]
 8008996:	429a      	cmp	r2, r3
 8008998:	d90c      	bls.n	80089b4 <HFNC_TUNE_DAC_VALUE+0x94>
 800899a:	78fb      	ldrb	r3, [r7, #3]
 800899c:	3b01      	subs	r3, #1
 800899e:	4a1b      	ldr	r2, [pc, #108]	; (8008a0c <HFNC_TUNE_DAC_VALUE+0xec>)
 80089a0:	7812      	ldrb	r2, [r2, #0]
 80089a2:	4293      	cmp	r3, r2
 80089a4:	dc06      	bgt.n	80089b4 <HFNC_TUNE_DAC_VALUE+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	330a      	adds	r3, #10
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	801a      	strh	r2, [r3, #0]
 80089b2:	e023      	b.n	80089fc <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else if(  (FLOW_AVG  <= (Set_Flow-2) ) && (FLOW_AVG  >  (Set_Flow-4) ) )
 80089b4:	78fb      	ldrb	r3, [r7, #3]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	4a14      	ldr	r2, [pc, #80]	; (8008a0c <HFNC_TUNE_DAC_VALUE+0xec>)
 80089ba:	7812      	ldrb	r2, [r2, #0]
 80089bc:	4293      	cmp	r3, r2
 80089be:	dd0c      	ble.n	80089da <HFNC_TUNE_DAC_VALUE+0xba>
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	3b03      	subs	r3, #3
 80089c4:	4a11      	ldr	r2, [pc, #68]	; (8008a0c <HFNC_TUNE_DAC_VALUE+0xec>)
 80089c6:	7812      	ldrb	r2, [r2, #0]
 80089c8:	4293      	cmp	r3, r2
 80089ca:	dc06      	bgt.n	80089da <HFNC_TUNE_DAC_VALUE+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	3314      	adds	r3, #20
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	801a      	strh	r2, [r3, #0]
 80089d8:	e010      	b.n	80089fc <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else if(  (FLOW_AVG  <= (Set_Flow-4) )  )
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	3b03      	subs	r3, #3
 80089de:	4a0b      	ldr	r2, [pc, #44]	; (8008a0c <HFNC_TUNE_DAC_VALUE+0xec>)
 80089e0:	7812      	ldrb	r2, [r2, #0]
 80089e2:	4293      	cmp	r3, r2
 80089e4:	dd06      	ble.n	80089f4 <HFNC_TUNE_DAC_VALUE+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	3328      	adds	r3, #40	; 0x28
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	e003      	b.n	80089fc <HFNC_TUNE_DAC_VALUE+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	881a      	ldrh	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	881b      	ldrh	r3, [r3, #0]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	20012974 	.word	0x20012974

08008a10 <Split_Nebuliser_Packets>:

uint8_t Suction_Started = 0;


void Split_Nebuliser_Packets(NEBULISER_PACKET * Receive_Graph_Packet)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
	Nebuliser.NEBULISER_ON_Val           = (0X80 & (Receive_Graph_Packet->NEBULISER)) >>7;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	78db      	ldrb	r3, [r3, #3]
 8008a1c:	09db      	lsrs	r3, r3, #7
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	4b39      	ldr	r3, [pc, #228]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008a22:	701a      	strb	r2, [r3, #0]
	Nebuliser.NEBULISER_SYNC_ON_Val      = (0X40 & ( Receive_Graph_Packet->NEBULISER)) >>6;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	78db      	ldrb	r3, [r3, #3]
 8008a28:	099b      	lsrs	r3, r3, #6
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	4b35      	ldr	r3, [pc, #212]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008a34:	705a      	strb	r2, [r3, #1]
	Nebuliser.NEBULISER_TIME             = (0X3F & (Receive_Graph_Packet->NEBULISER)) * 60000;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	78db      	ldrb	r3, [r3, #3]
 8008a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a3e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008a42:	fb02 f303 	mul.w	r3, r2, r3
 8008a46:	4a30      	ldr	r2, [pc, #192]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008a48:	6053      	str	r3, [r2, #4]
	Nebuliser.NEBULISER_TIMER            = Nebuliser.NEBULISER_TIME;
 8008a4a:	4b2f      	ldr	r3, [pc, #188]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	4a2e      	ldr	r2, [pc, #184]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008a50:	6093      	str	r3, [r2, #8]

	Nebuliser.SUCTION                    = (0X08 & ( Receive_Graph_Packet->MANUOVER)) >> 3;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	791b      	ldrb	r3, [r3, #4]
 8008a56:	08db      	lsrs	r3, r3, #3
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	4b29      	ldr	r3, [pc, #164]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008a62:	731a      	strb	r2, [r3, #12]


	 if(Nebuliser.NEBULISER_ON_Val==1)
 8008a64:	4b28      	ldr	r3, [pc, #160]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d10f      	bne.n	8008a8c <Split_Nebuliser_Packets+0x7c>
	 {
		 SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8008a6c:	4a27      	ldr	r2, [pc, #156]	; (8008b0c <Split_Nebuliser_Packets+0xfc>)
 8008a6e:	78d3      	ldrb	r3, [r2, #3]
 8008a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a74:	70d3      	strb	r3, [r2, #3]
		 CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8008a76:	4a25      	ldr	r2, [pc, #148]	; (8008b0c <Split_Nebuliser_Packets+0xfc>)
 8008a78:	78d3      	ldrb	r3, [r2, #3]
 8008a7a:	f36f 13c7 	bfc	r3, #7, #1
 8008a7e:	70d3      	strb	r3, [r2, #3]
		 vTaskResume(Nebuliser_Handler);
 8008a80:	4b23      	ldr	r3, [pc, #140]	; (8008b10 <Split_Nebuliser_Packets+0x100>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f012 fbd9 	bl	801b23c <vTaskResume>
 8008a8a:	e015      	b.n	8008ab8 <Split_Nebuliser_Packets+0xa8>
	 }
	 else if(Nebuliser.NEBULISER_ON_Val==0)
 8008a8c:	4b1e      	ldr	r3, [pc, #120]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d111      	bne.n	8008ab8 <Split_Nebuliser_Packets+0xa8>
	 {
     	 SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8008a94:	4a1d      	ldr	r2, [pc, #116]	; (8008b0c <Split_Nebuliser_Packets+0xfc>)
 8008a96:	78d3      	ldrb	r3, [r2, #3]
 8008a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9c:	70d3      	strb	r3, [r2, #3]
     	 CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8008a9e:	4a1b      	ldr	r2, [pc, #108]	; (8008b0c <Split_Nebuliser_Packets+0xfc>)
 8008aa0:	78d3      	ldrb	r3, [r2, #3]
 8008aa2:	f36f 1386 	bfc	r3, #6, #1
 8008aa6:	70d3      	strb	r3, [r2, #3]
		 Nebuliser.NEBULISER_TIMER = 0;
 8008aa8:	4b17      	ldr	r3, [pc, #92]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	609a      	str	r2, [r3, #8]
		 vTaskResume(Nebuliser_Handler);
 8008aae:	4b18      	ldr	r3, [pc, #96]	; (8008b10 <Split_Nebuliser_Packets+0x100>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f012 fbc2 	bl	801b23c <vTaskResume>
	 }


	 if(Nebuliser.SUCTION  == 1)
 8008ab8:	4b13      	ldr	r3, [pc, #76]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008aba:	7b1b      	ldrb	r3, [r3, #12]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d105      	bne.n	8008acc <Split_Nebuliser_Packets+0xbc>
	 {
		 Suction_Started  = 1;
 8008ac0:	4b14      	ldr	r3, [pc, #80]	; (8008b14 <Split_Nebuliser_Packets+0x104>)
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	701a      	strb	r2, [r3, #0]
		 SUCTION_Packet_Data();
 8008ac6:	f008 fff3 	bl	8011ab0 <SUCTION_Packet_Data>
	 }




}
 8008aca:	e018      	b.n	8008afe <Split_Nebuliser_Packets+0xee>
	 else if( (Nebuliser.SUCTION  == 0) && (Suction_Started == 1) )
 8008acc:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <Split_Nebuliser_Packets+0xf8>)
 8008ace:	7b1b      	ldrb	r3, [r3, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d114      	bne.n	8008afe <Split_Nebuliser_Packets+0xee>
 8008ad4:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <Split_Nebuliser_Packets+0x104>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d110      	bne.n	8008afe <Split_Nebuliser_Packets+0xee>
		 Suction_Started   = 0;
 8008adc:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <Split_Nebuliser_Packets+0x104>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	701a      	strb	r2, [r3, #0]
		 Blower_Signal(0);
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <Split_Nebuliser_Packets+0x108>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	609a      	str	r2, [r3, #8]
		 ExpValve_OPEN();
 8008ae8:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <Split_Nebuliser_Packets+0x10c>)
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	4a0b      	ldr	r2, [pc, #44]	; (8008b1c <Split_Nebuliser_Packets+0x10c>)
 8008aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008af2:	6153      	str	r3, [r2, #20]
		 vTaskSuspend(Suction_Handler);
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <Split_Nebuliser_Packets+0x110>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f012 fadb 	bl	801b0b4 <vTaskSuspend>
}
 8008afe:	bf00      	nop
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	2001282c 	.word	0x2001282c
 8008b0c:	20012408 	.word	0x20012408
 8008b10:	20012504 	.word	0x20012504
 8008b14:	200000b1 	.word	0x200000b1
 8008b18:	40007400 	.word	0x40007400
 8008b1c:	40020400 	.word	0x40020400
 8008b20:	20012b6c 	.word	0x20012b6c

08008b24 <Nebuliser_Task>:


void Nebuliser_Task (void *argument)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Nebuliser.NEBULISER_TIMER>0)
 8008b2c:	4b08      	ldr	r3, [pc, #32]	; (8008b50 <Nebuliser_Task+0x2c>)
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dd02      	ble.n	8008b3a <Nebuliser_Task+0x16>
		{
			Nebuliser_Func();
 8008b34:	f000 f810 	bl	8008b58 <Nebuliser_Func>
 8008b38:	e005      	b.n	8008b46 <Nebuliser_Task+0x22>
		}
		else
		{
			Nebuliser_OFF();
 8008b3a:	4b06      	ldr	r3, [pc, #24]	; (8008b54 <Nebuliser_Task+0x30>)
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	4a05      	ldr	r2, [pc, #20]	; (8008b54 <Nebuliser_Task+0x30>)
 8008b40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b44:	6153      	str	r3, [r2, #20]
		}
		vTaskDelay(Ten_Millisecond_Delay);
 8008b46:	200a      	movs	r0, #10
 8008b48:	f012 fa80 	bl	801b04c <vTaskDelay>
		if(Nebuliser.NEBULISER_TIMER>0)
 8008b4c:	e7ee      	b.n	8008b2c <Nebuliser_Task+0x8>
 8008b4e:	bf00      	nop
 8008b50:	2001282c 	.word	0x2001282c
 8008b54:	40020400 	.word	0x40020400

08008b58 <Nebuliser_Func>:
}



void Nebuliser_Func()
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0

	    if(Running_Mode  == Aprv)
 8008b5c:	4b54      	ldr	r3, [pc, #336]	; (8008cb0 <Nebuliser_Func+0x158>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d132      	bne.n	8008bca <Nebuliser_Func+0x72>
	    {
	        if(Nebuliser.NEBULISER_ON_Val==1)
 8008b64:	4b53      	ldr	r3, [pc, #332]	; (8008cb4 <Nebuliser_Func+0x15c>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d120      	bne.n	8008bae <Nebuliser_Func+0x56>
	        {
	        	if(Nebuliser.NEBULISER_SYNC_ON_Val==0)
 8008b6c:	4b51      	ldr	r3, [pc, #324]	; (8008cb4 <Nebuliser_Func+0x15c>)
 8008b6e:	785b      	ldrb	r3, [r3, #1]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d106      	bne.n	8008b82 <Nebuliser_Func+0x2a>
	        	{
	        		Nebuliser_ON();
 8008b74:	4b50      	ldr	r3, [pc, #320]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	4a4f      	ldr	r2, [pc, #316]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b7e:	6153      	str	r3, [r2, #20]
 8008b80:	e023      	b.n	8008bca <Nebuliser_Func+0x72>
	        	}
	        	else
	        	{
	        		if(APRV_current_breathe      == APRV_INS)
 8008b82:	4b4e      	ldr	r3, [pc, #312]	; (8008cbc <Nebuliser_Func+0x164>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d106      	bne.n	8008b98 <Nebuliser_Func+0x40>
	        		{
	        			Nebuliser_ON();
 8008b8a:	4b4b      	ldr	r3, [pc, #300]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	4a4a      	ldr	r2, [pc, #296]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b94:	6153      	str	r3, [r2, #20]
 8008b96:	e018      	b.n	8008bca <Nebuliser_Func+0x72>
	        		}
	                else if(APRV_current_breathe == APRV_EXP)
 8008b98:	4b48      	ldr	r3, [pc, #288]	; (8008cbc <Nebuliser_Func+0x164>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d114      	bne.n	8008bca <Nebuliser_Func+0x72>
	                {
	                	Nebuliser_OFF();
 8008ba0:	4b45      	ldr	r3, [pc, #276]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	4a44      	ldr	r2, [pc, #272]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008ba6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008baa:	6153      	str	r3, [r2, #20]
 8008bac:	e00d      	b.n	8008bca <Nebuliser_Func+0x72>
	                }
	         	}
	        }
	        else
	        {
	        	Nebuliser.NEBULISER_TIMER = 0;
 8008bae:	4b41      	ldr	r3, [pc, #260]	; (8008cb4 <Nebuliser_Func+0x15c>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	609a      	str	r2, [r3, #8]
	        	Nebuliser_OFF();
 8008bb4:	4b40      	ldr	r3, [pc, #256]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	4a3f      	ldr	r2, [pc, #252]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008bba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bbe:	6153      	str	r3, [r2, #20]
	        	vTaskSuspend(Nebuliser_Handler);
 8008bc0:	4b3f      	ldr	r3, [pc, #252]	; (8008cc0 <Nebuliser_Func+0x168>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f012 fa75 	bl	801b0b4 <vTaskSuspend>
	        }
	    }
	    if(Running_Mode  == Psv)
 8008bca:	4b39      	ldr	r3, [pc, #228]	; (8008cb0 <Nebuliser_Func+0x158>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b07      	cmp	r3, #7
 8008bd0:	d12f      	bne.n	8008c32 <Nebuliser_Func+0xda>
	    {
	        if(Nebuliser.NEBULISER_ON_Val==1)
 8008bd2:	4b38      	ldr	r3, [pc, #224]	; (8008cb4 <Nebuliser_Func+0x15c>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d11c      	bne.n	8008c14 <Nebuliser_Func+0xbc>
	        {
	        	if(Nebuliser.NEBULISER_SYNC_ON_Val==0)
 8008bda:	4b36      	ldr	r3, [pc, #216]	; (8008cb4 <Nebuliser_Func+0x15c>)
 8008bdc:	785b      	ldrb	r3, [r3, #1]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d106      	bne.n	8008bf0 <Nebuliser_Func+0x98>
	        	{
	        		Nebuliser_ON();
 8008be2:	4b35      	ldr	r3, [pc, #212]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	4a34      	ldr	r2, [pc, #208]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bec:	6153      	str	r3, [r2, #20]
	        	Nebuliser_OFF();
	        	vTaskSuspend(Nebuliser_Handler);
	        }
	    }

}
 8008bee:	e05d      	b.n	8008cac <Nebuliser_Func+0x154>
			    	if(PSV_Control._INSPIRATION_TIME >0)
 8008bf0:	4b34      	ldr	r3, [pc, #208]	; (8008cc4 <Nebuliser_Func+0x16c>)
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd06      	ble.n	8008c06 <Nebuliser_Func+0xae>
			    		Nebuliser_ON();
 8008bf8:	4b2f      	ldr	r3, [pc, #188]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	4a2e      	ldr	r2, [pc, #184]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c02:	6153      	str	r3, [r2, #20]
}
 8008c04:	e052      	b.n	8008cac <Nebuliser_Func+0x154>
			    		Nebuliser_OFF();
 8008c06:	4b2c      	ldr	r3, [pc, #176]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	4a2b      	ldr	r2, [pc, #172]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c10:	6153      	str	r3, [r2, #20]
}
 8008c12:	e04b      	b.n	8008cac <Nebuliser_Func+0x154>
	        	Nebuliser.NEBULISER_TIMER = 0;
 8008c14:	4b27      	ldr	r3, [pc, #156]	; (8008cb4 <Nebuliser_Func+0x15c>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	609a      	str	r2, [r3, #8]
	        	Nebuliser_OFF();
 8008c1a:	4b27      	ldr	r3, [pc, #156]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	4a26      	ldr	r2, [pc, #152]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c24:	6153      	str	r3, [r2, #20]
	        	vTaskSuspend(Nebuliser_Handler);
 8008c26:	4b26      	ldr	r3, [pc, #152]	; (8008cc0 <Nebuliser_Func+0x168>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f012 fa42 	bl	801b0b4 <vTaskSuspend>
}
 8008c30:	e03c      	b.n	8008cac <Nebuliser_Func+0x154>
	        if(Nebuliser.NEBULISER_ON_Val==1)
 8008c32:	4b20      	ldr	r3, [pc, #128]	; (8008cb4 <Nebuliser_Func+0x15c>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d120      	bne.n	8008c7c <Nebuliser_Func+0x124>
	        	if(Nebuliser.NEBULISER_SYNC_ON_Val==0)
 8008c3a:	4b1e      	ldr	r3, [pc, #120]	; (8008cb4 <Nebuliser_Func+0x15c>)
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <Nebuliser_Func+0xf8>
	        		Nebuliser_ON();
 8008c42:	4b1d      	ldr	r3, [pc, #116]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	4a1c      	ldr	r2, [pc, #112]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4c:	6153      	str	r3, [r2, #20]
}
 8008c4e:	e02d      	b.n	8008cac <Nebuliser_Func+0x154>
	        		if(Run_Current_Breathe_State      == Run_Inspiration_Cycle)
 8008c50:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <Nebuliser_Func+0x170>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d106      	bne.n	8008c66 <Nebuliser_Func+0x10e>
	        			Nebuliser_ON();
 8008c58:	4b17      	ldr	r3, [pc, #92]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	4a16      	ldr	r2, [pc, #88]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c62:	6153      	str	r3, [r2, #20]
}
 8008c64:	e022      	b.n	8008cac <Nebuliser_Func+0x154>
	                else if(Run_Current_Breathe_State == Run_Expiration_Cycle)
 8008c66:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <Nebuliser_Func+0x170>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d11e      	bne.n	8008cac <Nebuliser_Func+0x154>
	                	Nebuliser_OFF();
 8008c6e:	4b12      	ldr	r3, [pc, #72]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	4a11      	ldr	r2, [pc, #68]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c78:	6153      	str	r3, [r2, #20]
}
 8008c7a:	e017      	b.n	8008cac <Nebuliser_Func+0x154>
	        	SET_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_OFF);
 8008c7c:	4a13      	ldr	r2, [pc, #76]	; (8008ccc <Nebuliser_Func+0x174>)
 8008c7e:	78d3      	ldrb	r3, [r2, #3]
 8008c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c84:	70d3      	strb	r3, [r2, #3]
	        	CLEAR_ALERT_BIT(FIRST_FRAME_UN, _ALERT_NEBULISER_ON);
 8008c86:	4a11      	ldr	r2, [pc, #68]	; (8008ccc <Nebuliser_Func+0x174>)
 8008c88:	78d3      	ldrb	r3, [r2, #3]
 8008c8a:	f36f 1386 	bfc	r3, #6, #1
 8008c8e:	70d3      	strb	r3, [r2, #3]
	        	Nebuliser.NEBULISER_TIMER = 0;
 8008c90:	4b08      	ldr	r3, [pc, #32]	; (8008cb4 <Nebuliser_Func+0x15c>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	609a      	str	r2, [r3, #8]
	        	Nebuliser_OFF();
 8008c96:	4b08      	ldr	r3, [pc, #32]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	4a07      	ldr	r2, [pc, #28]	; (8008cb8 <Nebuliser_Func+0x160>)
 8008c9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ca0:	6153      	str	r3, [r2, #20]
	        	vTaskSuspend(Nebuliser_Handler);
 8008ca2:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <Nebuliser_Func+0x168>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f012 fa04 	bl	801b0b4 <vTaskSuspend>
}
 8008cac:	bf00      	nop
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20012b68 	.word	0x20012b68
 8008cb4:	2001282c 	.word	0x2001282c
 8008cb8:	40020400 	.word	0x40020400
 8008cbc:	2001263c 	.word	0x2001263c
 8008cc0:	20012504 	.word	0x20012504
 8008cc4:	20012b78 	.word	0x20012b78
 8008cc8:	20012870 	.word	0x20012870
 8008ccc:	20012408 	.word	0x20012408

08008cd0 <Find_Max_PIP>:
/**
 * @brief Find_Max_PIP.
 * This function is used to find the maximum PIP achieved during a breath.
 * */
void Find_Max_PIP()
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
	if(GRAPH_VALUES.pressure >= PIP_Average_Parameter.Maximum_PIP_Acheived)
 8008cd4:	4b07      	ldr	r3, [pc, #28]	; (8008cf4 <Find_Max_PIP+0x24>)
 8008cd6:	781a      	ldrb	r2, [r3, #0]
 8008cd8:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <Find_Max_PIP+0x28>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d303      	bcc.n	8008ce8 <Find_Max_PIP+0x18>
	{
		PIP_Average_Parameter.Maximum_PIP_Acheived   = GRAPH_VALUES.pressure;
 8008ce0:	4b04      	ldr	r3, [pc, #16]	; (8008cf4 <Find_Max_PIP+0x24>)
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <Find_Max_PIP+0x28>)
 8008ce6:	701a      	strb	r2, [r3, #0]
	}
}
 8008ce8:	bf00      	nop
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	200125f8 	.word	0x200125f8
 8008cf8:	200124bc 	.word	0x200124bc

08008cfc <Find_Maximum_PEEP>:
/**
 * @brief Find_Maximum_PEEP.
 * This function is used to find the Minimum PEEP achieved during a breath.
 * */
void Find_Maximum_PEEP()
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
	if(PEEP_Maintain_Parameter.Maximum_PEEP_Acheived < GRAPH_VALUES.pressure)
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <Find_Maximum_PEEP+0x24>)
 8008d02:	799a      	ldrb	r2, [r3, #6]
 8008d04:	4b07      	ldr	r3, [pc, #28]	; (8008d24 <Find_Maximum_PEEP+0x28>)
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d203      	bcs.n	8008d14 <Find_Maximum_PEEP+0x18>
	{
		PEEP_Maintain_Parameter.Maximum_PEEP_Acheived = GRAPH_VALUES.pressure;
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <Find_Maximum_PEEP+0x28>)
 8008d0e:	781a      	ldrb	r2, [r3, #0]
 8008d10:	4b03      	ldr	r3, [pc, #12]	; (8008d20 <Find_Maximum_PEEP+0x24>)
 8008d12:	719a      	strb	r2, [r3, #6]
	}
}
 8008d14:	bf00      	nop
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	20012c74 	.word	0x20012c74
 8008d24:	200125f8 	.word	0x200125f8

08008d28 <PIP_AVERAGE>:
/**
 * @brief PIP_AVERAGE.
 * This function is used to find the PIP average achieved during a breath.
 * */
void PIP_AVERAGE()
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
	if((PIP_Average_Parameter.PIP_Cumulative_Val == 0) || (PIP_Average_Parameter.PIP_Event_Count == 0))
 8008d2c:	4b10      	ldr	r3, [pc, #64]	; (8008d70 <PIP_AVERAGE+0x48>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <PIP_AVERAGE+0x14>
 8008d34:	4b0e      	ldr	r3, [pc, #56]	; (8008d70 <PIP_AVERAGE+0x48>)
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d105      	bne.n	8008d48 <PIP_AVERAGE+0x20>
	{
		PIP_Average_Parameter.PIP_Cumulative_Val = 1;
 8008d3c:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <PIP_AVERAGE+0x48>)
 8008d3e:	2201      	movs	r2, #1
 8008d40:	605a      	str	r2, [r3, #4]
		PIP_Average_Parameter.PIP_Event_Count    = 1;
 8008d42:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <PIP_AVERAGE+0x48>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	609a      	str	r2, [r3, #8]
	}

	PIP_Average_Parameter.PIP_AVG_VAL        = (uint32_t)(PIP_Average_Parameter.PIP_Cumulative_Val/ PIP_Average_Parameter.PIP_Event_Count);
 8008d48:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <PIP_AVERAGE+0x48>)
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	4b08      	ldr	r3, [pc, #32]	; (8008d70 <PIP_AVERAGE+0x48>)
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	4b06      	ldr	r3, [pc, #24]	; (8008d70 <PIP_AVERAGE+0x48>)
 8008d58:	731a      	strb	r2, [r3, #12]
	PIP_Average_Parameter.PIP_Cumulative_Val = RESET;
 8008d5a:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <PIP_AVERAGE+0x48>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	605a      	str	r2, [r3, #4]
	PIP_Average_Parameter.PIP_Event_Count    = RESET;
 8008d60:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <PIP_AVERAGE+0x48>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	609a      	str	r2, [r3, #8]
}
 8008d66:	bf00      	nop
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	200124bc 	.word	0x200124bc

08008d74 <PEEP_AVERAGE>:
/**
 * @brief PEEP_AVERAGE.
 * This function is used to find the PEEP average achieved during a breath.
 * */
void PEEP_AVERAGE()
{
 8008d74:	b480      	push	{r7}
 8008d76:	af00      	add	r7, sp, #0

	if(Patient_Trigger == PATIENT_TRIGGER_HAPPEN)
 8008d78:	4b21      	ldr	r3, [pc, #132]	; (8008e00 <PEEP_AVERAGE+0x8c>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d11d      	bne.n	8008dbc <PEEP_AVERAGE+0x48>
	{
		if((PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger == 0) || (PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger == 0))
 8008d80:	4b20      	ldr	r3, [pc, #128]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <PEEP_AVERAGE+0x1c>
 8008d88:	4b1e      	ldr	r3, [pc, #120]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d105      	bne.n	8008d9c <PEEP_AVERAGE+0x28>
		{
			PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = 1;
 8008d90:	4b1c      	ldr	r3, [pc, #112]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008d92:	2201      	movs	r2, #1
 8008d94:	615a      	str	r2, [r3, #20]
			PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = 1;
 8008d96:	4b1b      	ldr	r3, [pc, #108]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008d98:	2201      	movs	r2, #1
 8008d9a:	619a      	str	r2, [r3, #24]
		}
		PEEP_Maintain_Parameter.PEEP_AVG_VAL                = (uint32_t)(PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger/ PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger);
 8008d9c:	4b19      	ldr	r3, [pc, #100]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008d9e:	695a      	ldr	r2, [r3, #20]
 8008da0:	4b18      	ldr	r3, [pc, #96]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	4b16      	ldr	r3, [pc, #88]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008dac:	741a      	strb	r2, [r3, #16]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 8008dae:	4b15      	ldr	r3, [pc, #84]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	615a      	str	r2, [r3, #20]
		PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 8008db4:	4b13      	ldr	r3, [pc, #76]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008db6:	2200      	movs	r2, #0
 8008db8:	619a      	str	r2, [r3, #24]
		}
		PEEP_Maintain_Parameter.PEEP_AVG_VAL        = (uint32_t)(PEEP_Maintain_Parameter.PEEP_Cumulative_Val/ PEEP_Maintain_Parameter.PEEP_Event_Count);
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val = RESET;
		PEEP_Maintain_Parameter.PEEP_Event_Count    = RESET;
	}
}
 8008dba:	e01c      	b.n	8008df6 <PEEP_AVERAGE+0x82>
		if((PEEP_Maintain_Parameter.PEEP_Cumulative_Val == 0) || (PEEP_Maintain_Parameter.PEEP_Event_Count == 0))
 8008dbc:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d003      	beq.n	8008dcc <PEEP_AVERAGE+0x58>
 8008dc4:	4b0f      	ldr	r3, [pc, #60]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d105      	bne.n	8008dd8 <PEEP_AVERAGE+0x64>
			PEEP_Maintain_Parameter.PEEP_Cumulative_Val = 1;
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008dce:	2201      	movs	r2, #1
 8008dd0:	609a      	str	r2, [r3, #8]
			PEEP_Maintain_Parameter.PEEP_Event_Count    = 1;
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	60da      	str	r2, [r3, #12]
		PEEP_Maintain_Parameter.PEEP_AVG_VAL        = (uint32_t)(PEEP_Maintain_Parameter.PEEP_Cumulative_Val/ PEEP_Maintain_Parameter.PEEP_Event_Count);
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008de8:	741a      	strb	r2, [r3, #16]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val = RESET;
 8008dea:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count    = RESET;
 8008df0:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <PEEP_AVERAGE+0x90>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	60da      	str	r2, [r3, #12]
}
 8008df6:	bf00      	nop
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	2001263d 	.word	0x2001263d
 8008e04:	20012c74 	.word	0x20012c74

08008e08 <INITIAL_DAC_VALUE>:
 * @brief INITIAL_DAC_VALUE.
 * This function initializes the DAC value according to the PIP value.
 * */

void INITIAL_DAC_VALUE()
{
 8008e08:	b480      	push	{r7}
 8008e0a:	af00      	add	r7, sp, #0
	DAC_SIGNALS.DAC_VALUE_5       = 450;
 8008e0c:	4b7e      	ldr	r3, [pc, #504]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e0e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8008e12:	801a      	strh	r2, [r3, #0]
	DAC_SIGNALS.DAC_VALUE_6       = 500;
 8008e14:	4b7c      	ldr	r3, [pc, #496]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e16:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008e1a:	805a      	strh	r2, [r3, #2]
	DAC_SIGNALS.DAC_VALUE_7       = 550;
 8008e1c:	4b7a      	ldr	r3, [pc, #488]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e1e:	f240 2226 	movw	r2, #550	; 0x226
 8008e22:	809a      	strh	r2, [r3, #4]
	DAC_SIGNALS.DAC_VALUE_8       = 600;
 8008e24:	4b78      	ldr	r3, [pc, #480]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e26:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008e2a:	80da      	strh	r2, [r3, #6]
	DAC_SIGNALS.DAC_VALUE_9       = 630;
 8008e2c:	4b76      	ldr	r3, [pc, #472]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e2e:	f240 2276 	movw	r2, #630	; 0x276
 8008e32:	811a      	strh	r2, [r3, #8]
	DAC_SIGNALS.DAC_VALUE_10      = 660;
 8008e34:	4b74      	ldr	r3, [pc, #464]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e36:	f44f 7225 	mov.w	r2, #660	; 0x294
 8008e3a:	815a      	strh	r2, [r3, #10]
	DAC_SIGNALS.DAC_VALUE_11      = 690;
 8008e3c:	4b72      	ldr	r3, [pc, #456]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e3e:	f240 22b2 	movw	r2, #690	; 0x2b2
 8008e42:	819a      	strh	r2, [r3, #12]
	DAC_SIGNALS.DAC_VALUE_12      = 720;
 8008e44:	4b70      	ldr	r3, [pc, #448]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e46:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8008e4a:	81da      	strh	r2, [r3, #14]
	DAC_SIGNALS.DAC_VALUE_13      = 750;
 8008e4c:	4b6e      	ldr	r3, [pc, #440]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e4e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008e52:	821a      	strh	r2, [r3, #16]
	DAC_SIGNALS.DAC_VALUE_14      = 780;
 8008e54:	4b6c      	ldr	r3, [pc, #432]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e56:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8008e5a:	825a      	strh	r2, [r3, #18]
	DAC_SIGNALS.DAC_VALUE_15      = 810;
 8008e5c:	4b6a      	ldr	r3, [pc, #424]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e5e:	f240 322a 	movw	r2, #810	; 0x32a
 8008e62:	829a      	strh	r2, [r3, #20]
	DAC_SIGNALS.DAC_VALUE_16      = 840;
 8008e64:	4b68      	ldr	r3, [pc, #416]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e66:	f44f 7252 	mov.w	r2, #840	; 0x348
 8008e6a:	82da      	strh	r2, [r3, #22]
	DAC_SIGNALS.DAC_VALUE_17      = 870;
 8008e6c:	4b66      	ldr	r3, [pc, #408]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e6e:	f240 3266 	movw	r2, #870	; 0x366
 8008e72:	831a      	strh	r2, [r3, #24]
	DAC_SIGNALS.DAC_VALUE_18      = 900;
 8008e74:	4b64      	ldr	r3, [pc, #400]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e76:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008e7a:	835a      	strh	r2, [r3, #26]
	DAC_SIGNALS.DAC_VALUE_19      = 930;
 8008e7c:	4b62      	ldr	r3, [pc, #392]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e7e:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008e82:	839a      	strh	r2, [r3, #28]
	DAC_SIGNALS.DAC_VALUE_20      = 950;
 8008e84:	4b60      	ldr	r3, [pc, #384]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e86:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008e8a:	83da      	strh	r2, [r3, #30]
	DAC_SIGNALS.DAC_VALUE_21      = 970;
 8008e8c:	4b5e      	ldr	r3, [pc, #376]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e8e:	f240 32ca 	movw	r2, #970	; 0x3ca
 8008e92:	841a      	strh	r2, [r3, #32]
	DAC_SIGNALS.DAC_VALUE_22      = 990;
 8008e94:	4b5c      	ldr	r3, [pc, #368]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e96:	f240 32de 	movw	r2, #990	; 0x3de
 8008e9a:	845a      	strh	r2, [r3, #34]	; 0x22
	DAC_SIGNALS.DAC_VALUE_23      = 1010;
 8008e9c:	4b5a      	ldr	r3, [pc, #360]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008e9e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8008ea2:	849a      	strh	r2, [r3, #36]	; 0x24
	DAC_SIGNALS.DAC_VALUE_24      = 1030;
 8008ea4:	4b58      	ldr	r3, [pc, #352]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008ea6:	f240 4206 	movw	r2, #1030	; 0x406
 8008eaa:	84da      	strh	r2, [r3, #38]	; 0x26
	DAC_SIGNALS.DAC_VALUE_25      = 1050;
 8008eac:	4b56      	ldr	r3, [pc, #344]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008eae:	f240 421a 	movw	r2, #1050	; 0x41a
 8008eb2:	851a      	strh	r2, [r3, #40]	; 0x28
	DAC_SIGNALS.DAC_VALUE_26      = 1080;
 8008eb4:	4b54      	ldr	r3, [pc, #336]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008eb6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8008eba:	855a      	strh	r2, [r3, #42]	; 0x2a
	DAC_SIGNALS.DAC_VALUE_27      = 1100;
 8008ebc:	4b52      	ldr	r3, [pc, #328]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008ebe:	f240 424c 	movw	r2, #1100	; 0x44c
 8008ec2:	859a      	strh	r2, [r3, #44]	; 0x2c
	DAC_SIGNALS.DAC_VALUE_28      = 1120;
 8008ec4:	4b50      	ldr	r3, [pc, #320]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008ec6:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8008eca:	85da      	strh	r2, [r3, #46]	; 0x2e
	DAC_SIGNALS.DAC_VALUE_29      = 1140;
 8008ecc:	4b4e      	ldr	r3, [pc, #312]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008ece:	f240 4274 	movw	r2, #1140	; 0x474
 8008ed2:	861a      	strh	r2, [r3, #48]	; 0x30
	DAC_SIGNALS.DAC_VALUE_30      = 1160;
 8008ed4:	4b4c      	ldr	r3, [pc, #304]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008ed6:	f44f 6291 	mov.w	r2, #1160	; 0x488
 8008eda:	865a      	strh	r2, [r3, #50]	; 0x32
	DAC_SIGNALS.DAC_VALUE_31      = 1180;
 8008edc:	4b4a      	ldr	r3, [pc, #296]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008ede:	f240 429c 	movw	r2, #1180	; 0x49c
 8008ee2:	869a      	strh	r2, [r3, #52]	; 0x34
	DAC_SIGNALS.DAC_VALUE_32      = 1200;
 8008ee4:	4b48      	ldr	r3, [pc, #288]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008ee6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008eea:	86da      	strh	r2, [r3, #54]	; 0x36
	DAC_SIGNALS.DAC_VALUE_33      = 1220;
 8008eec:	4b46      	ldr	r3, [pc, #280]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008eee:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8008ef2:	871a      	strh	r2, [r3, #56]	; 0x38
	DAC_SIGNALS.DAC_VALUE_34      = 1240;
 8008ef4:	4b44      	ldr	r3, [pc, #272]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008ef6:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8008efa:	875a      	strh	r2, [r3, #58]	; 0x3a
	DAC_SIGNALS.DAC_VALUE_35      = 1260;
 8008efc:	4b42      	ldr	r3, [pc, #264]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008efe:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8008f02:	879a      	strh	r2, [r3, #60]	; 0x3c
	DAC_SIGNALS.DAC_VALUE_36      = 1280;
 8008f04:	4b40      	ldr	r3, [pc, #256]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f06:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8008f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
	DAC_SIGNALS.DAC_VALUE_37      = 1290;
 8008f0c:	4b3e      	ldr	r3, [pc, #248]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f0e:	f240 520a 	movw	r2, #1290	; 0x50a
 8008f12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DAC_SIGNALS.DAC_VALUE_38      = 1310;
 8008f16:	4b3c      	ldr	r3, [pc, #240]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f18:	f240 521e 	movw	r2, #1310	; 0x51e
 8008f1c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DAC_SIGNALS.DAC_VALUE_39      = 1325;
 8008f20:	4b39      	ldr	r3, [pc, #228]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f22:	f240 522d 	movw	r2, #1325	; 0x52d
 8008f26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	DAC_SIGNALS.DAC_VALUE_40      = 1340;
 8008f2a:	4b37      	ldr	r3, [pc, #220]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f2c:	f240 523c 	movw	r2, #1340	; 0x53c
 8008f30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	DAC_SIGNALS.DAC_VALUE_41      = 1360;
 8008f34:	4b34      	ldr	r3, [pc, #208]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f36:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 8008f3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	DAC_SIGNALS.DAC_VALUE_42      = 1380;
 8008f3e:	4b32      	ldr	r3, [pc, #200]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f40:	f240 5264 	movw	r2, #1380	; 0x564
 8008f44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	DAC_SIGNALS.DAC_VALUE_43      = 1400;
 8008f48:	4b2f      	ldr	r3, [pc, #188]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f4a:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8008f4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	DAC_SIGNALS.DAC_VALUE_44      = 1420;
 8008f52:	4b2d      	ldr	r3, [pc, #180]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f54:	f240 528c 	movw	r2, #1420	; 0x58c
 8008f58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	DAC_SIGNALS.DAC_VALUE_45      = 1440;
 8008f5c:	4b2a      	ldr	r3, [pc, #168]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f5e:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8008f62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	DAC_SIGNALS.DAC_VALUE_46      = 1460;
 8008f66:	4b28      	ldr	r3, [pc, #160]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f68:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8008f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	DAC_SIGNALS.DAC_VALUE_47      = 1470;
 8008f70:	4b25      	ldr	r3, [pc, #148]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f72:	f240 52be 	movw	r2, #1470	; 0x5be
 8008f76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	DAC_SIGNALS.DAC_VALUE_48      = 1480;
 8008f7a:	4b23      	ldr	r3, [pc, #140]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f7c:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 8008f80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	DAC_SIGNALS.DAC_VALUE_49      = 1500;
 8008f84:	4b20      	ldr	r3, [pc, #128]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f86:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008f8a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	DAC_SIGNALS.DAC_VALUE_50      = 1520;
 8008f8e:	4b1e      	ldr	r3, [pc, #120]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f90:	f44f 62be 	mov.w	r2, #1520	; 0x5f0
 8008f94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	DAC_SIGNALS.DAC_VALUE_51      = 1540;
 8008f98:	4b1b      	ldr	r3, [pc, #108]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008f9a:	f240 6204 	movw	r2, #1540	; 0x604
 8008f9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	DAC_SIGNALS.DAC_VALUE_52      = 1560;
 8008fa2:	4b19      	ldr	r3, [pc, #100]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008fa4:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8008fa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	DAC_SIGNALS.DAC_VALUE_53      = 1570;
 8008fac:	4b16      	ldr	r3, [pc, #88]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008fae:	f240 6222 	movw	r2, #1570	; 0x622
 8008fb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	DAC_SIGNALS.DAC_VALUE_54      = 1580;
 8008fb6:	4b14      	ldr	r3, [pc, #80]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008fb8:	f240 622c 	movw	r2, #1580	; 0x62c
 8008fbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	DAC_SIGNALS.DAC_VALUE_55      = 1600;
 8008fc0:	4b11      	ldr	r3, [pc, #68]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008fc2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008fc6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	DAC_SIGNALS.DAC_VALUE_56      = 1610;
 8008fca:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008fcc:	f240 624a 	movw	r2, #1610	; 0x64a
 8008fd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	DAC_SIGNALS.DAC_VALUE_57      = 1630;
 8008fd4:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008fd6:	f240 625e 	movw	r2, #1630	; 0x65e
 8008fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	DAC_SIGNALS.DAC_VALUE_58      = 1650;
 8008fde:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008fe0:	f240 6272 	movw	r2, #1650	; 0x672
 8008fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	DAC_SIGNALS.DAC_VALUE_59      = 1670;
 8008fe8:	4b07      	ldr	r3, [pc, #28]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008fea:	f240 6286 	movw	r2, #1670	; 0x686
 8008fee:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	DAC_SIGNALS.DAC_VALUE_60      = 1680;
 8008ff2:	4b05      	ldr	r3, [pc, #20]	; (8009008 <INITIAL_DAC_VALUE+0x200>)
 8008ff4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8008ff8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

}
 8008ffc:	bf00      	nop
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20012524 	.word	0x20012524

0800900c <DAC_VAL>:
/**
 * @brief DAC_VAL.
 * This function return DAC value according to the PIP value.
 * */
uint16_t DAC_VAL(uint8_t Set_VAL)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	71fb      	strb	r3, [r7, #7]

	switch(Set_VAL)
 8009016:	79fb      	ldrb	r3, [r7, #7]
 8009018:	3b05      	subs	r3, #5
 800901a:	2b37      	cmp	r3, #55	; 0x37
 800901c:	f200 81a8 	bhi.w	8009370 <DAC_VAL+0x364>
 8009020:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <DAC_VAL+0x1c>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	08009109 	.word	0x08009109
 800902c:	08009113 	.word	0x08009113
 8009030:	0800911d 	.word	0x0800911d
 8009034:	08009127 	.word	0x08009127
 8009038:	08009131 	.word	0x08009131
 800903c:	0800913b 	.word	0x0800913b
 8009040:	08009145 	.word	0x08009145
 8009044:	0800914f 	.word	0x0800914f
 8009048:	08009159 	.word	0x08009159
 800904c:	08009163 	.word	0x08009163
 8009050:	0800916d 	.word	0x0800916d
 8009054:	08009177 	.word	0x08009177
 8009058:	08009181 	.word	0x08009181
 800905c:	0800918b 	.word	0x0800918b
 8009060:	08009195 	.word	0x08009195
 8009064:	0800919f 	.word	0x0800919f
 8009068:	080091a9 	.word	0x080091a9
 800906c:	080091b3 	.word	0x080091b3
 8009070:	080091bd 	.word	0x080091bd
 8009074:	080091c7 	.word	0x080091c7
 8009078:	080091d1 	.word	0x080091d1
 800907c:	080091db 	.word	0x080091db
 8009080:	080091e5 	.word	0x080091e5
 8009084:	080091ef 	.word	0x080091ef
 8009088:	080091f9 	.word	0x080091f9
 800908c:	08009203 	.word	0x08009203
 8009090:	0800920d 	.word	0x0800920d
 8009094:	08009217 	.word	0x08009217
 8009098:	08009221 	.word	0x08009221
 800909c:	0800922b 	.word	0x0800922b
 80090a0:	08009235 	.word	0x08009235
 80090a4:	0800923f 	.word	0x0800923f
 80090a8:	08009249 	.word	0x08009249
 80090ac:	08009255 	.word	0x08009255
 80090b0:	08009261 	.word	0x08009261
 80090b4:	0800926d 	.word	0x0800926d
 80090b8:	08009279 	.word	0x08009279
 80090bc:	08009285 	.word	0x08009285
 80090c0:	08009291 	.word	0x08009291
 80090c4:	0800929d 	.word	0x0800929d
 80090c8:	080092a9 	.word	0x080092a9
 80090cc:	080092b5 	.word	0x080092b5
 80090d0:	080092c1 	.word	0x080092c1
 80090d4:	080092cd 	.word	0x080092cd
 80090d8:	080092d9 	.word	0x080092d9
 80090dc:	080092e5 	.word	0x080092e5
 80090e0:	080092f1 	.word	0x080092f1
 80090e4:	080092fd 	.word	0x080092fd
 80090e8:	08009309 	.word	0x08009309
 80090ec:	08009315 	.word	0x08009315
 80090f0:	08009329 	.word	0x08009329
 80090f4:	08009335 	.word	0x08009335
 80090f8:	08009341 	.word	0x08009341
 80090fc:	0800934d 	.word	0x0800934d
 8009100:	08009359 	.word	0x08009359
 8009104:	08009365 	.word	0x08009365
	{
	    case 5:
	    	 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_5;
 8009108:	4b85      	ldr	r3, [pc, #532]	; (8009320 <DAC_VAL+0x314>)
 800910a:	881a      	ldrh	r2, [r3, #0]
 800910c:	4b85      	ldr	r3, [pc, #532]	; (8009324 <DAC_VAL+0x318>)
 800910e:	801a      	strh	r2, [r3, #0]
	    break;
 8009110:	e12e      	b.n	8009370 <DAC_VAL+0x364>
	    case 6:
	    	 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_6;
 8009112:	4b83      	ldr	r3, [pc, #524]	; (8009320 <DAC_VAL+0x314>)
 8009114:	885a      	ldrh	r2, [r3, #2]
 8009116:	4b83      	ldr	r3, [pc, #524]	; (8009324 <DAC_VAL+0x318>)
 8009118:	801a      	strh	r2, [r3, #0]
	    break;
 800911a:	e129      	b.n	8009370 <DAC_VAL+0x364>
	    case 7:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_7;
 800911c:	4b80      	ldr	r3, [pc, #512]	; (8009320 <DAC_VAL+0x314>)
 800911e:	889a      	ldrh	r2, [r3, #4]
 8009120:	4b80      	ldr	r3, [pc, #512]	; (8009324 <DAC_VAL+0x318>)
 8009122:	801a      	strh	r2, [r3, #0]
		break;
 8009124:	e124      	b.n	8009370 <DAC_VAL+0x364>
	    case 8:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_8;
 8009126:	4b7e      	ldr	r3, [pc, #504]	; (8009320 <DAC_VAL+0x314>)
 8009128:	88da      	ldrh	r2, [r3, #6]
 800912a:	4b7e      	ldr	r3, [pc, #504]	; (8009324 <DAC_VAL+0x318>)
 800912c:	801a      	strh	r2, [r3, #0]
		break;
 800912e:	e11f      	b.n	8009370 <DAC_VAL+0x364>
	    case 9:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_9;
 8009130:	4b7b      	ldr	r3, [pc, #492]	; (8009320 <DAC_VAL+0x314>)
 8009132:	891a      	ldrh	r2, [r3, #8]
 8009134:	4b7b      	ldr	r3, [pc, #492]	; (8009324 <DAC_VAL+0x318>)
 8009136:	801a      	strh	r2, [r3, #0]
		break;
 8009138:	e11a      	b.n	8009370 <DAC_VAL+0x364>
	    case 10:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_10;
 800913a:	4b79      	ldr	r3, [pc, #484]	; (8009320 <DAC_VAL+0x314>)
 800913c:	895a      	ldrh	r2, [r3, #10]
 800913e:	4b79      	ldr	r3, [pc, #484]	; (8009324 <DAC_VAL+0x318>)
 8009140:	801a      	strh	r2, [r3, #0]
		break;
 8009142:	e115      	b.n	8009370 <DAC_VAL+0x364>
		case 11:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_11;
 8009144:	4b76      	ldr	r3, [pc, #472]	; (8009320 <DAC_VAL+0x314>)
 8009146:	899a      	ldrh	r2, [r3, #12]
 8009148:	4b76      	ldr	r3, [pc, #472]	; (8009324 <DAC_VAL+0x318>)
 800914a:	801a      	strh	r2, [r3, #0]
		break;
 800914c:	e110      	b.n	8009370 <DAC_VAL+0x364>
		case 12:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_12;
 800914e:	4b74      	ldr	r3, [pc, #464]	; (8009320 <DAC_VAL+0x314>)
 8009150:	89da      	ldrh	r2, [r3, #14]
 8009152:	4b74      	ldr	r3, [pc, #464]	; (8009324 <DAC_VAL+0x318>)
 8009154:	801a      	strh	r2, [r3, #0]
		break;
 8009156:	e10b      	b.n	8009370 <DAC_VAL+0x364>
		case 13:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_13;
 8009158:	4b71      	ldr	r3, [pc, #452]	; (8009320 <DAC_VAL+0x314>)
 800915a:	8a1a      	ldrh	r2, [r3, #16]
 800915c:	4b71      	ldr	r3, [pc, #452]	; (8009324 <DAC_VAL+0x318>)
 800915e:	801a      	strh	r2, [r3, #0]
		break;
 8009160:	e106      	b.n	8009370 <DAC_VAL+0x364>
		case 14:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_14;
 8009162:	4b6f      	ldr	r3, [pc, #444]	; (8009320 <DAC_VAL+0x314>)
 8009164:	8a5a      	ldrh	r2, [r3, #18]
 8009166:	4b6f      	ldr	r3, [pc, #444]	; (8009324 <DAC_VAL+0x318>)
 8009168:	801a      	strh	r2, [r3, #0]
		break;
 800916a:	e101      	b.n	8009370 <DAC_VAL+0x364>
		case 15:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_15;
 800916c:	4b6c      	ldr	r3, [pc, #432]	; (8009320 <DAC_VAL+0x314>)
 800916e:	8a9a      	ldrh	r2, [r3, #20]
 8009170:	4b6c      	ldr	r3, [pc, #432]	; (8009324 <DAC_VAL+0x318>)
 8009172:	801a      	strh	r2, [r3, #0]
		break;
 8009174:	e0fc      	b.n	8009370 <DAC_VAL+0x364>
		case 16:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_16;
 8009176:	4b6a      	ldr	r3, [pc, #424]	; (8009320 <DAC_VAL+0x314>)
 8009178:	8ada      	ldrh	r2, [r3, #22]
 800917a:	4b6a      	ldr	r3, [pc, #424]	; (8009324 <DAC_VAL+0x318>)
 800917c:	801a      	strh	r2, [r3, #0]
		break;
 800917e:	e0f7      	b.n	8009370 <DAC_VAL+0x364>
		case 17:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_17;
 8009180:	4b67      	ldr	r3, [pc, #412]	; (8009320 <DAC_VAL+0x314>)
 8009182:	8b1a      	ldrh	r2, [r3, #24]
 8009184:	4b67      	ldr	r3, [pc, #412]	; (8009324 <DAC_VAL+0x318>)
 8009186:	801a      	strh	r2, [r3, #0]
		break;
 8009188:	e0f2      	b.n	8009370 <DAC_VAL+0x364>
		case 18:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_18;
 800918a:	4b65      	ldr	r3, [pc, #404]	; (8009320 <DAC_VAL+0x314>)
 800918c:	8b5a      	ldrh	r2, [r3, #26]
 800918e:	4b65      	ldr	r3, [pc, #404]	; (8009324 <DAC_VAL+0x318>)
 8009190:	801a      	strh	r2, [r3, #0]
		break;
 8009192:	e0ed      	b.n	8009370 <DAC_VAL+0x364>
		case 19:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_19;
 8009194:	4b62      	ldr	r3, [pc, #392]	; (8009320 <DAC_VAL+0x314>)
 8009196:	8b9a      	ldrh	r2, [r3, #28]
 8009198:	4b62      	ldr	r3, [pc, #392]	; (8009324 <DAC_VAL+0x318>)
 800919a:	801a      	strh	r2, [r3, #0]
		break;
 800919c:	e0e8      	b.n	8009370 <DAC_VAL+0x364>
		case 20:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_20;
 800919e:	4b60      	ldr	r3, [pc, #384]	; (8009320 <DAC_VAL+0x314>)
 80091a0:	8bda      	ldrh	r2, [r3, #30]
 80091a2:	4b60      	ldr	r3, [pc, #384]	; (8009324 <DAC_VAL+0x318>)
 80091a4:	801a      	strh	r2, [r3, #0]
		break;
 80091a6:	e0e3      	b.n	8009370 <DAC_VAL+0x364>
		case 21:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_21;
 80091a8:	4b5d      	ldr	r3, [pc, #372]	; (8009320 <DAC_VAL+0x314>)
 80091aa:	8c1a      	ldrh	r2, [r3, #32]
 80091ac:	4b5d      	ldr	r3, [pc, #372]	; (8009324 <DAC_VAL+0x318>)
 80091ae:	801a      	strh	r2, [r3, #0]
		break;
 80091b0:	e0de      	b.n	8009370 <DAC_VAL+0x364>
		case 22:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_22;
 80091b2:	4b5b      	ldr	r3, [pc, #364]	; (8009320 <DAC_VAL+0x314>)
 80091b4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80091b6:	4b5b      	ldr	r3, [pc, #364]	; (8009324 <DAC_VAL+0x318>)
 80091b8:	801a      	strh	r2, [r3, #0]
		break;
 80091ba:	e0d9      	b.n	8009370 <DAC_VAL+0x364>
		case 23:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_23;
 80091bc:	4b58      	ldr	r3, [pc, #352]	; (8009320 <DAC_VAL+0x314>)
 80091be:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80091c0:	4b58      	ldr	r3, [pc, #352]	; (8009324 <DAC_VAL+0x318>)
 80091c2:	801a      	strh	r2, [r3, #0]
		break;
 80091c4:	e0d4      	b.n	8009370 <DAC_VAL+0x364>
		case 24:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_24;
 80091c6:	4b56      	ldr	r3, [pc, #344]	; (8009320 <DAC_VAL+0x314>)
 80091c8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80091ca:	4b56      	ldr	r3, [pc, #344]	; (8009324 <DAC_VAL+0x318>)
 80091cc:	801a      	strh	r2, [r3, #0]
		break;
 80091ce:	e0cf      	b.n	8009370 <DAC_VAL+0x364>
		case 25:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_25;
 80091d0:	4b53      	ldr	r3, [pc, #332]	; (8009320 <DAC_VAL+0x314>)
 80091d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80091d4:	4b53      	ldr	r3, [pc, #332]	; (8009324 <DAC_VAL+0x318>)
 80091d6:	801a      	strh	r2, [r3, #0]
		break;
 80091d8:	e0ca      	b.n	8009370 <DAC_VAL+0x364>
		case 26:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_26;
 80091da:	4b51      	ldr	r3, [pc, #324]	; (8009320 <DAC_VAL+0x314>)
 80091dc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80091de:	4b51      	ldr	r3, [pc, #324]	; (8009324 <DAC_VAL+0x318>)
 80091e0:	801a      	strh	r2, [r3, #0]
		break;
 80091e2:	e0c5      	b.n	8009370 <DAC_VAL+0x364>
		case 27:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_27;
 80091e4:	4b4e      	ldr	r3, [pc, #312]	; (8009320 <DAC_VAL+0x314>)
 80091e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091e8:	4b4e      	ldr	r3, [pc, #312]	; (8009324 <DAC_VAL+0x318>)
 80091ea:	801a      	strh	r2, [r3, #0]
		break;
 80091ec:	e0c0      	b.n	8009370 <DAC_VAL+0x364>
		case 28:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_28;
 80091ee:	4b4c      	ldr	r3, [pc, #304]	; (8009320 <DAC_VAL+0x314>)
 80091f0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80091f2:	4b4c      	ldr	r3, [pc, #304]	; (8009324 <DAC_VAL+0x318>)
 80091f4:	801a      	strh	r2, [r3, #0]
		break;
 80091f6:	e0bb      	b.n	8009370 <DAC_VAL+0x364>
	    case 29:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_29;
 80091f8:	4b49      	ldr	r3, [pc, #292]	; (8009320 <DAC_VAL+0x314>)
 80091fa:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80091fc:	4b49      	ldr	r3, [pc, #292]	; (8009324 <DAC_VAL+0x318>)
 80091fe:	801a      	strh	r2, [r3, #0]
		break;
 8009200:	e0b6      	b.n	8009370 <DAC_VAL+0x364>
		case 30:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_30;
 8009202:	4b47      	ldr	r3, [pc, #284]	; (8009320 <DAC_VAL+0x314>)
 8009204:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009206:	4b47      	ldr	r3, [pc, #284]	; (8009324 <DAC_VAL+0x318>)
 8009208:	801a      	strh	r2, [r3, #0]
		break;
 800920a:	e0b1      	b.n	8009370 <DAC_VAL+0x364>
		case 31:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_31;
 800920c:	4b44      	ldr	r3, [pc, #272]	; (8009320 <DAC_VAL+0x314>)
 800920e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8009210:	4b44      	ldr	r3, [pc, #272]	; (8009324 <DAC_VAL+0x318>)
 8009212:	801a      	strh	r2, [r3, #0]
		break;
 8009214:	e0ac      	b.n	8009370 <DAC_VAL+0x364>
		case 32:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_32;
 8009216:	4b42      	ldr	r3, [pc, #264]	; (8009320 <DAC_VAL+0x314>)
 8009218:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800921a:	4b42      	ldr	r3, [pc, #264]	; (8009324 <DAC_VAL+0x318>)
 800921c:	801a      	strh	r2, [r3, #0]
		break;
 800921e:	e0a7      	b.n	8009370 <DAC_VAL+0x364>
		case 33:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_33;
 8009220:	4b3f      	ldr	r3, [pc, #252]	; (8009320 <DAC_VAL+0x314>)
 8009222:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8009224:	4b3f      	ldr	r3, [pc, #252]	; (8009324 <DAC_VAL+0x318>)
 8009226:	801a      	strh	r2, [r3, #0]
		break;
 8009228:	e0a2      	b.n	8009370 <DAC_VAL+0x364>
		case 34:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_34;
 800922a:	4b3d      	ldr	r3, [pc, #244]	; (8009320 <DAC_VAL+0x314>)
 800922c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800922e:	4b3d      	ldr	r3, [pc, #244]	; (8009324 <DAC_VAL+0x318>)
 8009230:	801a      	strh	r2, [r3, #0]
		break;
 8009232:	e09d      	b.n	8009370 <DAC_VAL+0x364>
		case 35:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_35;
 8009234:	4b3a      	ldr	r3, [pc, #232]	; (8009320 <DAC_VAL+0x314>)
 8009236:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8009238:	4b3a      	ldr	r3, [pc, #232]	; (8009324 <DAC_VAL+0x318>)
 800923a:	801a      	strh	r2, [r3, #0]
		break;
 800923c:	e098      	b.n	8009370 <DAC_VAL+0x364>
		case 36:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_36;
 800923e:	4b38      	ldr	r3, [pc, #224]	; (8009320 <DAC_VAL+0x314>)
 8009240:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8009242:	4b38      	ldr	r3, [pc, #224]	; (8009324 <DAC_VAL+0x318>)
 8009244:	801a      	strh	r2, [r3, #0]
		break;
 8009246:	e093      	b.n	8009370 <DAC_VAL+0x364>
		case 37:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_37;
 8009248:	4b35      	ldr	r3, [pc, #212]	; (8009320 <DAC_VAL+0x314>)
 800924a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800924e:	4b35      	ldr	r3, [pc, #212]	; (8009324 <DAC_VAL+0x318>)
 8009250:	801a      	strh	r2, [r3, #0]
		break;
 8009252:	e08d      	b.n	8009370 <DAC_VAL+0x364>
		case 38:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_38;
 8009254:	4b32      	ldr	r3, [pc, #200]	; (8009320 <DAC_VAL+0x314>)
 8009256:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800925a:	4b32      	ldr	r3, [pc, #200]	; (8009324 <DAC_VAL+0x318>)
 800925c:	801a      	strh	r2, [r3, #0]
		break;
 800925e:	e087      	b.n	8009370 <DAC_VAL+0x364>
		case 39:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_39;
 8009260:	4b2f      	ldr	r3, [pc, #188]	; (8009320 <DAC_VAL+0x314>)
 8009262:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8009266:	4b2f      	ldr	r3, [pc, #188]	; (8009324 <DAC_VAL+0x318>)
 8009268:	801a      	strh	r2, [r3, #0]
		break;
 800926a:	e081      	b.n	8009370 <DAC_VAL+0x364>
		case 40:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_40;
 800926c:	4b2c      	ldr	r3, [pc, #176]	; (8009320 <DAC_VAL+0x314>)
 800926e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8009272:	4b2c      	ldr	r3, [pc, #176]	; (8009324 <DAC_VAL+0x318>)
 8009274:	801a      	strh	r2, [r3, #0]
		break;
 8009276:	e07b      	b.n	8009370 <DAC_VAL+0x364>
		case 41:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_41;
 8009278:	4b29      	ldr	r3, [pc, #164]	; (8009320 <DAC_VAL+0x314>)
 800927a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800927e:	4b29      	ldr	r3, [pc, #164]	; (8009324 <DAC_VAL+0x318>)
 8009280:	801a      	strh	r2, [r3, #0]
		break;
 8009282:	e075      	b.n	8009370 <DAC_VAL+0x364>
		case 42:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_42;
 8009284:	4b26      	ldr	r3, [pc, #152]	; (8009320 <DAC_VAL+0x314>)
 8009286:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800928a:	4b26      	ldr	r3, [pc, #152]	; (8009324 <DAC_VAL+0x318>)
 800928c:	801a      	strh	r2, [r3, #0]
		break;
 800928e:	e06f      	b.n	8009370 <DAC_VAL+0x364>
		case 43:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_43;
 8009290:	4b23      	ldr	r3, [pc, #140]	; (8009320 <DAC_VAL+0x314>)
 8009292:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8009296:	4b23      	ldr	r3, [pc, #140]	; (8009324 <DAC_VAL+0x318>)
 8009298:	801a      	strh	r2, [r3, #0]
		break;
 800929a:	e069      	b.n	8009370 <DAC_VAL+0x364>
		case 44:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_44;
 800929c:	4b20      	ldr	r3, [pc, #128]	; (8009320 <DAC_VAL+0x314>)
 800929e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80092a2:	4b20      	ldr	r3, [pc, #128]	; (8009324 <DAC_VAL+0x318>)
 80092a4:	801a      	strh	r2, [r3, #0]
		break;
 80092a6:	e063      	b.n	8009370 <DAC_VAL+0x364>
		case 45:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_45;
 80092a8:	4b1d      	ldr	r3, [pc, #116]	; (8009320 <DAC_VAL+0x314>)
 80092aa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80092ae:	4b1d      	ldr	r3, [pc, #116]	; (8009324 <DAC_VAL+0x318>)
 80092b0:	801a      	strh	r2, [r3, #0]
		break;
 80092b2:	e05d      	b.n	8009370 <DAC_VAL+0x364>
		case 46:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_46;
 80092b4:	4b1a      	ldr	r3, [pc, #104]	; (8009320 <DAC_VAL+0x314>)
 80092b6:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80092ba:	4b1a      	ldr	r3, [pc, #104]	; (8009324 <DAC_VAL+0x318>)
 80092bc:	801a      	strh	r2, [r3, #0]
		break;
 80092be:	e057      	b.n	8009370 <DAC_VAL+0x364>
		case 47:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_47;
 80092c0:	4b17      	ldr	r3, [pc, #92]	; (8009320 <DAC_VAL+0x314>)
 80092c2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80092c6:	4b17      	ldr	r3, [pc, #92]	; (8009324 <DAC_VAL+0x318>)
 80092c8:	801a      	strh	r2, [r3, #0]
		break;
 80092ca:	e051      	b.n	8009370 <DAC_VAL+0x364>
		case 48:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_48;
 80092cc:	4b14      	ldr	r3, [pc, #80]	; (8009320 <DAC_VAL+0x314>)
 80092ce:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80092d2:	4b14      	ldr	r3, [pc, #80]	; (8009324 <DAC_VAL+0x318>)
 80092d4:	801a      	strh	r2, [r3, #0]
		break;
 80092d6:	e04b      	b.n	8009370 <DAC_VAL+0x364>
		case 49:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_49;
 80092d8:	4b11      	ldr	r3, [pc, #68]	; (8009320 <DAC_VAL+0x314>)
 80092da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80092de:	4b11      	ldr	r3, [pc, #68]	; (8009324 <DAC_VAL+0x318>)
 80092e0:	801a      	strh	r2, [r3, #0]
		break;
 80092e2:	e045      	b.n	8009370 <DAC_VAL+0x364>
		case 50:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_50;
 80092e4:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <DAC_VAL+0x314>)
 80092e6:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
 80092ea:	4b0e      	ldr	r3, [pc, #56]	; (8009324 <DAC_VAL+0x318>)
 80092ec:	801a      	strh	r2, [r3, #0]
		break;
 80092ee:	e03f      	b.n	8009370 <DAC_VAL+0x364>
		case 51:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_51;
 80092f0:	4b0b      	ldr	r3, [pc, #44]	; (8009320 <DAC_VAL+0x314>)
 80092f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092f6:	4b0b      	ldr	r3, [pc, #44]	; (8009324 <DAC_VAL+0x318>)
 80092f8:	801a      	strh	r2, [r3, #0]
		break;
 80092fa:	e039      	b.n	8009370 <DAC_VAL+0x364>
		case 52:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_52;
 80092fc:	4b08      	ldr	r3, [pc, #32]	; (8009320 <DAC_VAL+0x314>)
 80092fe:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8009302:	4b08      	ldr	r3, [pc, #32]	; (8009324 <DAC_VAL+0x318>)
 8009304:	801a      	strh	r2, [r3, #0]
		break;
 8009306:	e033      	b.n	8009370 <DAC_VAL+0x364>
	    case 53:
			 DAC_VALUE   = DAC_SIGNALS.DAC_VALUE_53;
 8009308:	4b05      	ldr	r3, [pc, #20]	; (8009320 <DAC_VAL+0x314>)
 800930a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800930e:	4b05      	ldr	r3, [pc, #20]	; (8009324 <DAC_VAL+0x318>)
 8009310:	801a      	strh	r2, [r3, #0]
		break;
 8009312:	e02d      	b.n	8009370 <DAC_VAL+0x364>
		case 54:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_54;
 8009314:	4b02      	ldr	r3, [pc, #8]	; (8009320 <DAC_VAL+0x314>)
 8009316:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800931a:	4b02      	ldr	r3, [pc, #8]	; (8009324 <DAC_VAL+0x318>)
 800931c:	801a      	strh	r2, [r3, #0]
		break;
 800931e:	e027      	b.n	8009370 <DAC_VAL+0x364>
 8009320:	20012524 	.word	0x20012524
 8009324:	20012c64 	.word	0x20012c64
		case 55:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_55;
 8009328:	4b15      	ldr	r3, [pc, #84]	; (8009380 <DAC_VAL+0x374>)
 800932a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800932e:	4b15      	ldr	r3, [pc, #84]	; (8009384 <DAC_VAL+0x378>)
 8009330:	801a      	strh	r2, [r3, #0]
		break;
 8009332:	e01d      	b.n	8009370 <DAC_VAL+0x364>
		case 56:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_56;
 8009334:	4b12      	ldr	r3, [pc, #72]	; (8009380 <DAC_VAL+0x374>)
 8009336:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800933a:	4b12      	ldr	r3, [pc, #72]	; (8009384 <DAC_VAL+0x378>)
 800933c:	801a      	strh	r2, [r3, #0]
		break;
 800933e:	e017      	b.n	8009370 <DAC_VAL+0x364>
		case 57:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_57;
 8009340:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <DAC_VAL+0x374>)
 8009342:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8009346:	4b0f      	ldr	r3, [pc, #60]	; (8009384 <DAC_VAL+0x378>)
 8009348:	801a      	strh	r2, [r3, #0]
		break;
 800934a:	e011      	b.n	8009370 <DAC_VAL+0x364>
		case 58:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_58;
 800934c:	4b0c      	ldr	r3, [pc, #48]	; (8009380 <DAC_VAL+0x374>)
 800934e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <DAC_VAL+0x378>)
 8009354:	801a      	strh	r2, [r3, #0]
		break;
 8009356:	e00b      	b.n	8009370 <DAC_VAL+0x364>
		case 59:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_59;
 8009358:	4b09      	ldr	r3, [pc, #36]	; (8009380 <DAC_VAL+0x374>)
 800935a:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 800935e:	4b09      	ldr	r3, [pc, #36]	; (8009384 <DAC_VAL+0x378>)
 8009360:	801a      	strh	r2, [r3, #0]
		break;
 8009362:	e005      	b.n	8009370 <DAC_VAL+0x364>
		case 60:
			 DAC_VALUE  = DAC_SIGNALS.DAC_VALUE_60;
 8009364:	4b06      	ldr	r3, [pc, #24]	; (8009380 <DAC_VAL+0x374>)
 8009366:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 800936a:	4b06      	ldr	r3, [pc, #24]	; (8009384 <DAC_VAL+0x378>)
 800936c:	801a      	strh	r2, [r3, #0]
		break;
 800936e:	bf00      	nop
	}

	return DAC_VALUE;
 8009370:	4b04      	ldr	r3, [pc, #16]	; (8009384 <DAC_VAL+0x378>)
 8009372:	881b      	ldrh	r3, [r3, #0]
}
 8009374:	4618      	mov	r0, r3
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	20012524 	.word	0x20012524
 8009384:	20012c64 	.word	0x20012c64

08009388 <Change_DAC_Values>:
 * @brief Change_DAC_Values.
 * This function reset DAC value according to the PIP value.
 * */

void Change_DAC_Values(uint8_t Set_Value,uint16_t Blower_Value)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	460a      	mov	r2, r1
 8009392:	71fb      	strb	r3, [r7, #7]
 8009394:	4613      	mov	r3, r2
 8009396:	80bb      	strh	r3, [r7, #4]
	switch(Set_Value)
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	3b05      	subs	r3, #5
 800939c:	2b37      	cmp	r3, #55	; 0x37
 800939e:	f200 816b 	bhi.w	8009678 <Change_DAC_Values+0x2f0>
 80093a2:	a201      	add	r2, pc, #4	; (adr r2, 80093a8 <Change_DAC_Values+0x20>)
 80093a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a8:	08009489 	.word	0x08009489
 80093ac:	08009491 	.word	0x08009491
 80093b0:	08009499 	.word	0x08009499
 80093b4:	080094a1 	.word	0x080094a1
 80093b8:	080094a9 	.word	0x080094a9
 80093bc:	080094b1 	.word	0x080094b1
 80093c0:	080094b9 	.word	0x080094b9
 80093c4:	080094c1 	.word	0x080094c1
 80093c8:	080094c9 	.word	0x080094c9
 80093cc:	080094d1 	.word	0x080094d1
 80093d0:	080094d9 	.word	0x080094d9
 80093d4:	080094e1 	.word	0x080094e1
 80093d8:	080094e9 	.word	0x080094e9
 80093dc:	080094f1 	.word	0x080094f1
 80093e0:	080094f9 	.word	0x080094f9
 80093e4:	08009501 	.word	0x08009501
 80093e8:	08009509 	.word	0x08009509
 80093ec:	08009511 	.word	0x08009511
 80093f0:	08009519 	.word	0x08009519
 80093f4:	08009521 	.word	0x08009521
 80093f8:	08009529 	.word	0x08009529
 80093fc:	08009531 	.word	0x08009531
 8009400:	08009539 	.word	0x08009539
 8009404:	08009541 	.word	0x08009541
 8009408:	08009549 	.word	0x08009549
 800940c:	08009551 	.word	0x08009551
 8009410:	08009559 	.word	0x08009559
 8009414:	08009561 	.word	0x08009561
 8009418:	08009569 	.word	0x08009569
 800941c:	08009571 	.word	0x08009571
 8009420:	08009579 	.word	0x08009579
 8009424:	08009581 	.word	0x08009581
 8009428:	08009589 	.word	0x08009589
 800942c:	08009593 	.word	0x08009593
 8009430:	0800959d 	.word	0x0800959d
 8009434:	080095a7 	.word	0x080095a7
 8009438:	080095b1 	.word	0x080095b1
 800943c:	080095bb 	.word	0x080095bb
 8009440:	080095c5 	.word	0x080095c5
 8009444:	080095cf 	.word	0x080095cf
 8009448:	080095d9 	.word	0x080095d9
 800944c:	080095e3 	.word	0x080095e3
 8009450:	080095ed 	.word	0x080095ed
 8009454:	080095f7 	.word	0x080095f7
 8009458:	08009601 	.word	0x08009601
 800945c:	0800960b 	.word	0x0800960b
 8009460:	08009615 	.word	0x08009615
 8009464:	0800961f 	.word	0x0800961f
 8009468:	08009629 	.word	0x08009629
 800946c:	08009633 	.word	0x08009633
 8009470:	0800963d 	.word	0x0800963d
 8009474:	08009647 	.word	0x08009647
 8009478:	08009651 	.word	0x08009651
 800947c:	0800965b 	.word	0x0800965b
 8009480:	08009665 	.word	0x08009665
 8009484:	0800966f 	.word	0x0800966f
	{
	    case 5:
	    	 DAC_SIGNALS.DAC_VALUE_5   =Blower_Value;
 8009488:	4a7e      	ldr	r2, [pc, #504]	; (8009684 <Change_DAC_Values+0x2fc>)
 800948a:	88bb      	ldrh	r3, [r7, #4]
 800948c:	8013      	strh	r3, [r2, #0]
	    break;
 800948e:	e0f3      	b.n	8009678 <Change_DAC_Values+0x2f0>
	    case 6:
	    	 DAC_SIGNALS.DAC_VALUE_6   =Blower_Value;
 8009490:	4a7c      	ldr	r2, [pc, #496]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009492:	88bb      	ldrh	r3, [r7, #4]
 8009494:	8053      	strh	r3, [r2, #2]
	    break;
 8009496:	e0ef      	b.n	8009678 <Change_DAC_Values+0x2f0>
	    case 7:
			 DAC_SIGNALS.DAC_VALUE_7   =Blower_Value;
 8009498:	4a7a      	ldr	r2, [pc, #488]	; (8009684 <Change_DAC_Values+0x2fc>)
 800949a:	88bb      	ldrh	r3, [r7, #4]
 800949c:	8093      	strh	r3, [r2, #4]
		break;
 800949e:	e0eb      	b.n	8009678 <Change_DAC_Values+0x2f0>
	    case 8:
			 DAC_SIGNALS.DAC_VALUE_8   =Blower_Value;
 80094a0:	4a78      	ldr	r2, [pc, #480]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094a2:	88bb      	ldrh	r3, [r7, #4]
 80094a4:	80d3      	strh	r3, [r2, #6]
		break;
 80094a6:	e0e7      	b.n	8009678 <Change_DAC_Values+0x2f0>
	    case 9:
			 DAC_SIGNALS.DAC_VALUE_9   =Blower_Value;
 80094a8:	4a76      	ldr	r2, [pc, #472]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094aa:	88bb      	ldrh	r3, [r7, #4]
 80094ac:	8113      	strh	r3, [r2, #8]
		break;
 80094ae:	e0e3      	b.n	8009678 <Change_DAC_Values+0x2f0>
	    case 10:
			 DAC_SIGNALS.DAC_VALUE_10  =Blower_Value;
 80094b0:	4a74      	ldr	r2, [pc, #464]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094b2:	88bb      	ldrh	r3, [r7, #4]
 80094b4:	8153      	strh	r3, [r2, #10]
		break;
 80094b6:	e0df      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 11:
			 DAC_SIGNALS.DAC_VALUE_11  =Blower_Value;
 80094b8:	4a72      	ldr	r2, [pc, #456]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094ba:	88bb      	ldrh	r3, [r7, #4]
 80094bc:	8193      	strh	r3, [r2, #12]
		break;
 80094be:	e0db      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 12:
			 DAC_SIGNALS.DAC_VALUE_12  =Blower_Value;
 80094c0:	4a70      	ldr	r2, [pc, #448]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094c2:	88bb      	ldrh	r3, [r7, #4]
 80094c4:	81d3      	strh	r3, [r2, #14]
		break;
 80094c6:	e0d7      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 13:
			 DAC_SIGNALS.DAC_VALUE_13  =Blower_Value;
 80094c8:	4a6e      	ldr	r2, [pc, #440]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094ca:	88bb      	ldrh	r3, [r7, #4]
 80094cc:	8213      	strh	r3, [r2, #16]
		break;
 80094ce:	e0d3      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 14:
			 DAC_SIGNALS.DAC_VALUE_14  =Blower_Value;
 80094d0:	4a6c      	ldr	r2, [pc, #432]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094d2:	88bb      	ldrh	r3, [r7, #4]
 80094d4:	8253      	strh	r3, [r2, #18]
		break;
 80094d6:	e0cf      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 15:
			 DAC_SIGNALS.DAC_VALUE_15  =Blower_Value;
 80094d8:	4a6a      	ldr	r2, [pc, #424]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094da:	88bb      	ldrh	r3, [r7, #4]
 80094dc:	8293      	strh	r3, [r2, #20]
		break;
 80094de:	e0cb      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 16:
			 DAC_SIGNALS.DAC_VALUE_16  =Blower_Value;
 80094e0:	4a68      	ldr	r2, [pc, #416]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094e2:	88bb      	ldrh	r3, [r7, #4]
 80094e4:	82d3      	strh	r3, [r2, #22]
		break;
 80094e6:	e0c7      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 17:
			 DAC_SIGNALS.DAC_VALUE_17  =Blower_Value;
 80094e8:	4a66      	ldr	r2, [pc, #408]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094ea:	88bb      	ldrh	r3, [r7, #4]
 80094ec:	8313      	strh	r3, [r2, #24]
		break;
 80094ee:	e0c3      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 18:
			 DAC_SIGNALS.DAC_VALUE_18  =Blower_Value;
 80094f0:	4a64      	ldr	r2, [pc, #400]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094f2:	88bb      	ldrh	r3, [r7, #4]
 80094f4:	8353      	strh	r3, [r2, #26]
		break;
 80094f6:	e0bf      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 19:
			 DAC_SIGNALS.DAC_VALUE_19  =Blower_Value;
 80094f8:	4a62      	ldr	r2, [pc, #392]	; (8009684 <Change_DAC_Values+0x2fc>)
 80094fa:	88bb      	ldrh	r3, [r7, #4]
 80094fc:	8393      	strh	r3, [r2, #28]
		break;
 80094fe:	e0bb      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 20:
			 DAC_SIGNALS.DAC_VALUE_20  =Blower_Value;
 8009500:	4a60      	ldr	r2, [pc, #384]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009502:	88bb      	ldrh	r3, [r7, #4]
 8009504:	83d3      	strh	r3, [r2, #30]
		break;
 8009506:	e0b7      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 21:
			 DAC_SIGNALS.DAC_VALUE_21  =Blower_Value;
 8009508:	4a5e      	ldr	r2, [pc, #376]	; (8009684 <Change_DAC_Values+0x2fc>)
 800950a:	88bb      	ldrh	r3, [r7, #4]
 800950c:	8413      	strh	r3, [r2, #32]
		break;
 800950e:	e0b3      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 22:
			 DAC_SIGNALS.DAC_VALUE_22  =Blower_Value;
 8009510:	4a5c      	ldr	r2, [pc, #368]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009512:	88bb      	ldrh	r3, [r7, #4]
 8009514:	8453      	strh	r3, [r2, #34]	; 0x22
		break;
 8009516:	e0af      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 23:
			 DAC_SIGNALS.DAC_VALUE_23  =Blower_Value;
 8009518:	4a5a      	ldr	r2, [pc, #360]	; (8009684 <Change_DAC_Values+0x2fc>)
 800951a:	88bb      	ldrh	r3, [r7, #4]
 800951c:	8493      	strh	r3, [r2, #36]	; 0x24
		break;
 800951e:	e0ab      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 24:
			 DAC_SIGNALS.DAC_VALUE_24  =Blower_Value;
 8009520:	4a58      	ldr	r2, [pc, #352]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009522:	88bb      	ldrh	r3, [r7, #4]
 8009524:	84d3      	strh	r3, [r2, #38]	; 0x26
		break;
 8009526:	e0a7      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 25:
			 DAC_SIGNALS.DAC_VALUE_25  =Blower_Value;
 8009528:	4a56      	ldr	r2, [pc, #344]	; (8009684 <Change_DAC_Values+0x2fc>)
 800952a:	88bb      	ldrh	r3, [r7, #4]
 800952c:	8513      	strh	r3, [r2, #40]	; 0x28
		break;
 800952e:	e0a3      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 26:
			 DAC_SIGNALS.DAC_VALUE_26  =Blower_Value;
 8009530:	4a54      	ldr	r2, [pc, #336]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009532:	88bb      	ldrh	r3, [r7, #4]
 8009534:	8553      	strh	r3, [r2, #42]	; 0x2a
		break;
 8009536:	e09f      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 27:
			 DAC_SIGNALS.DAC_VALUE_27  =Blower_Value;
 8009538:	4a52      	ldr	r2, [pc, #328]	; (8009684 <Change_DAC_Values+0x2fc>)
 800953a:	88bb      	ldrh	r3, [r7, #4]
 800953c:	8593      	strh	r3, [r2, #44]	; 0x2c
		break;
 800953e:	e09b      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 28:
			 DAC_SIGNALS.DAC_VALUE_28  =Blower_Value;
 8009540:	4a50      	ldr	r2, [pc, #320]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009542:	88bb      	ldrh	r3, [r7, #4]
 8009544:	85d3      	strh	r3, [r2, #46]	; 0x2e
		break;
 8009546:	e097      	b.n	8009678 <Change_DAC_Values+0x2f0>
	    case 29:
			 DAC_SIGNALS.DAC_VALUE_29  =Blower_Value;
 8009548:	4a4e      	ldr	r2, [pc, #312]	; (8009684 <Change_DAC_Values+0x2fc>)
 800954a:	88bb      	ldrh	r3, [r7, #4]
 800954c:	8613      	strh	r3, [r2, #48]	; 0x30
		break;
 800954e:	e093      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 30:
			 DAC_SIGNALS.DAC_VALUE_30  =Blower_Value;
 8009550:	4a4c      	ldr	r2, [pc, #304]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009552:	88bb      	ldrh	r3, [r7, #4]
 8009554:	8653      	strh	r3, [r2, #50]	; 0x32
		break;
 8009556:	e08f      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 31:
			 DAC_SIGNALS.DAC_VALUE_31  =Blower_Value;
 8009558:	4a4a      	ldr	r2, [pc, #296]	; (8009684 <Change_DAC_Values+0x2fc>)
 800955a:	88bb      	ldrh	r3, [r7, #4]
 800955c:	8693      	strh	r3, [r2, #52]	; 0x34
		break;
 800955e:	e08b      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 32:
			 DAC_SIGNALS.DAC_VALUE_32  =Blower_Value;
 8009560:	4a48      	ldr	r2, [pc, #288]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009562:	88bb      	ldrh	r3, [r7, #4]
 8009564:	86d3      	strh	r3, [r2, #54]	; 0x36
		break;
 8009566:	e087      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 33:
			 DAC_SIGNALS.DAC_VALUE_33  =Blower_Value;
 8009568:	4a46      	ldr	r2, [pc, #280]	; (8009684 <Change_DAC_Values+0x2fc>)
 800956a:	88bb      	ldrh	r3, [r7, #4]
 800956c:	8713      	strh	r3, [r2, #56]	; 0x38
		break;
 800956e:	e083      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 34:
			 DAC_SIGNALS.DAC_VALUE_34  =Blower_Value;
 8009570:	4a44      	ldr	r2, [pc, #272]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009572:	88bb      	ldrh	r3, [r7, #4]
 8009574:	8753      	strh	r3, [r2, #58]	; 0x3a
		break;
 8009576:	e07f      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 35:
			 DAC_SIGNALS.DAC_VALUE_35  =Blower_Value;
 8009578:	4a42      	ldr	r2, [pc, #264]	; (8009684 <Change_DAC_Values+0x2fc>)
 800957a:	88bb      	ldrh	r3, [r7, #4]
 800957c:	8793      	strh	r3, [r2, #60]	; 0x3c
		break;
 800957e:	e07b      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 36:
			 DAC_SIGNALS.DAC_VALUE_36  =Blower_Value;
 8009580:	4a40      	ldr	r2, [pc, #256]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009582:	88bb      	ldrh	r3, [r7, #4]
 8009584:	87d3      	strh	r3, [r2, #62]	; 0x3e
		break;
 8009586:	e077      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 37:
			 DAC_SIGNALS.DAC_VALUE_37  =Blower_Value;
 8009588:	4a3e      	ldr	r2, [pc, #248]	; (8009684 <Change_DAC_Values+0x2fc>)
 800958a:	88bb      	ldrh	r3, [r7, #4]
 800958c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
		break;
 8009590:	e072      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 38:
			 DAC_SIGNALS.DAC_VALUE_38  =Blower_Value;
 8009592:	4a3c      	ldr	r2, [pc, #240]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009594:	88bb      	ldrh	r3, [r7, #4]
 8009596:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
		break;
 800959a:	e06d      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 39:
			 DAC_SIGNALS.DAC_VALUE_39  =Blower_Value;
 800959c:	4a39      	ldr	r2, [pc, #228]	; (8009684 <Change_DAC_Values+0x2fc>)
 800959e:	88bb      	ldrh	r3, [r7, #4]
 80095a0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		break;
 80095a4:	e068      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 40:
			 DAC_SIGNALS.DAC_VALUE_40  =Blower_Value;
 80095a6:	4a37      	ldr	r2, [pc, #220]	; (8009684 <Change_DAC_Values+0x2fc>)
 80095a8:	88bb      	ldrh	r3, [r7, #4]
 80095aa:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
		break;
 80095ae:	e063      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 41:
			 DAC_SIGNALS.DAC_VALUE_41  =Blower_Value;
 80095b0:	4a34      	ldr	r2, [pc, #208]	; (8009684 <Change_DAC_Values+0x2fc>)
 80095b2:	88bb      	ldrh	r3, [r7, #4]
 80095b4:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
		break;
 80095b8:	e05e      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 42:
			 DAC_SIGNALS.DAC_VALUE_42  =Blower_Value;
 80095ba:	4a32      	ldr	r2, [pc, #200]	; (8009684 <Change_DAC_Values+0x2fc>)
 80095bc:	88bb      	ldrh	r3, [r7, #4]
 80095be:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
		break;
 80095c2:	e059      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 43:
			 DAC_SIGNALS.DAC_VALUE_43  =Blower_Value;
 80095c4:	4a2f      	ldr	r2, [pc, #188]	; (8009684 <Change_DAC_Values+0x2fc>)
 80095c6:	88bb      	ldrh	r3, [r7, #4]
 80095c8:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
		break;
 80095cc:	e054      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 44:
			 DAC_SIGNALS.DAC_VALUE_44  =Blower_Value;
 80095ce:	4a2d      	ldr	r2, [pc, #180]	; (8009684 <Change_DAC_Values+0x2fc>)
 80095d0:	88bb      	ldrh	r3, [r7, #4]
 80095d2:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
		break;
 80095d6:	e04f      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 45:
			 DAC_SIGNALS.DAC_VALUE_45  =Blower_Value;
 80095d8:	4a2a      	ldr	r2, [pc, #168]	; (8009684 <Change_DAC_Values+0x2fc>)
 80095da:	88bb      	ldrh	r3, [r7, #4]
 80095dc:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
		break;
 80095e0:	e04a      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 46:
			 DAC_SIGNALS.DAC_VALUE_46  =Blower_Value;
 80095e2:	4a28      	ldr	r2, [pc, #160]	; (8009684 <Change_DAC_Values+0x2fc>)
 80095e4:	88bb      	ldrh	r3, [r7, #4]
 80095e6:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
		break;
 80095ea:	e045      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 47:
			 DAC_SIGNALS.DAC_VALUE_47  =Blower_Value;
 80095ec:	4a25      	ldr	r2, [pc, #148]	; (8009684 <Change_DAC_Values+0x2fc>)
 80095ee:	88bb      	ldrh	r3, [r7, #4]
 80095f0:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
		break;
 80095f4:	e040      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 48:
			 DAC_SIGNALS.DAC_VALUE_48  =Blower_Value;
 80095f6:	4a23      	ldr	r2, [pc, #140]	; (8009684 <Change_DAC_Values+0x2fc>)
 80095f8:	88bb      	ldrh	r3, [r7, #4]
 80095fa:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
		break;
 80095fe:	e03b      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 49:
			 DAC_SIGNALS.DAC_VALUE_49  =Blower_Value;
 8009600:	4a20      	ldr	r2, [pc, #128]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009602:	88bb      	ldrh	r3, [r7, #4]
 8009604:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
		break;
 8009608:	e036      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 50:
			 DAC_SIGNALS.DAC_VALUE_50  =Blower_Value;
 800960a:	4a1e      	ldr	r2, [pc, #120]	; (8009684 <Change_DAC_Values+0x2fc>)
 800960c:	88bb      	ldrh	r3, [r7, #4]
 800960e:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
		break;
 8009612:	e031      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 51:
			 DAC_SIGNALS.DAC_VALUE_51  =Blower_Value;
 8009614:	4a1b      	ldr	r2, [pc, #108]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009616:	88bb      	ldrh	r3, [r7, #4]
 8009618:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
		break;
 800961c:	e02c      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 52:
			 DAC_SIGNALS.DAC_VALUE_52  =Blower_Value;
 800961e:	4a19      	ldr	r2, [pc, #100]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009620:	88bb      	ldrh	r3, [r7, #4]
 8009622:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		break;
 8009626:	e027      	b.n	8009678 <Change_DAC_Values+0x2f0>
	    case 53:
			 DAC_SIGNALS.DAC_VALUE_53  =Blower_Value;
 8009628:	4a16      	ldr	r2, [pc, #88]	; (8009684 <Change_DAC_Values+0x2fc>)
 800962a:	88bb      	ldrh	r3, [r7, #4]
 800962c:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
		break;
 8009630:	e022      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 54:
			 DAC_SIGNALS.DAC_VALUE_54  =Blower_Value;
 8009632:	4a14      	ldr	r2, [pc, #80]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009634:	88bb      	ldrh	r3, [r7, #4]
 8009636:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
		break;
 800963a:	e01d      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 55:
			 DAC_SIGNALS.DAC_VALUE_55  =Blower_Value;
 800963c:	4a11      	ldr	r2, [pc, #68]	; (8009684 <Change_DAC_Values+0x2fc>)
 800963e:	88bb      	ldrh	r3, [r7, #4]
 8009640:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		break;
 8009644:	e018      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 56:
			 DAC_SIGNALS.DAC_VALUE_56  =Blower_Value;
 8009646:	4a0f      	ldr	r2, [pc, #60]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009648:	88bb      	ldrh	r3, [r7, #4]
 800964a:	f8a2 3066 	strh.w	r3, [r2, #102]	; 0x66
		break;
 800964e:	e013      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 57:
			 DAC_SIGNALS.DAC_VALUE_57  =Blower_Value;
 8009650:	4a0c      	ldr	r2, [pc, #48]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009652:	88bb      	ldrh	r3, [r7, #4]
 8009654:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
		break;
 8009658:	e00e      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 58:
			 DAC_SIGNALS.DAC_VALUE_58  =Blower_Value;
 800965a:	4a0a      	ldr	r2, [pc, #40]	; (8009684 <Change_DAC_Values+0x2fc>)
 800965c:	88bb      	ldrh	r3, [r7, #4]
 800965e:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
		break;
 8009662:	e009      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 59:
			 DAC_SIGNALS.DAC_VALUE_59  =Blower_Value;
 8009664:	4a07      	ldr	r2, [pc, #28]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009666:	88bb      	ldrh	r3, [r7, #4]
 8009668:	f8a2 306c 	strh.w	r3, [r2, #108]	; 0x6c
		break;
 800966c:	e004      	b.n	8009678 <Change_DAC_Values+0x2f0>
		case 60:
			 DAC_SIGNALS.DAC_VALUE_60  =Blower_Value;
 800966e:	4a05      	ldr	r2, [pc, #20]	; (8009684 <Change_DAC_Values+0x2fc>)
 8009670:	88bb      	ldrh	r3, [r7, #4]
 8009672:	f8a2 306e 	strh.w	r3, [r2, #110]	; 0x6e
		break;
 8009676:	bf00      	nop
	}

}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	20012524 	.word	0x20012524

08009688 <INITIAL_CPAP_DAC_VALUE_INVASIVE>:
 * @brief INITIAL_CPAP_DAC_VALUE_INVASIVE.
 * This function initializes DAC value according to the mask mode PIP value.
 * */

void INITIAL_CPAP_DAC_VALUE_INVASIVE()
{
 8009688:	b480      	push	{r7}
 800968a:	af00      	add	r7, sp, #0
	DAC_SIGNAL.APNEA_DAC_VALUE_5       = 800;
 800968c:	4b40      	ldr	r3, [pc, #256]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 800968e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009692:	801a      	strh	r2, [r3, #0]
	DAC_SIGNAL.APNEA_DAC_VALUE_6       = 850;
 8009694:	4b3e      	ldr	r3, [pc, #248]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 8009696:	f240 3252 	movw	r2, #850	; 0x352
 800969a:	805a      	strh	r2, [r3, #2]
	DAC_SIGNAL.APNEA_DAC_VALUE_7       = 900;
 800969c:	4b3c      	ldr	r3, [pc, #240]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 800969e:	f44f 7261 	mov.w	r2, #900	; 0x384
 80096a2:	809a      	strh	r2, [r3, #4]
	DAC_SIGNAL.APNEA_DAC_VALUE_8       = 950;
 80096a4:	4b3a      	ldr	r3, [pc, #232]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096a6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80096aa:	80da      	strh	r2, [r3, #6]
	DAC_SIGNAL.APNEA_DAC_VALUE_9       = 1000;
 80096ac:	4b38      	ldr	r3, [pc, #224]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096b2:	811a      	strh	r2, [r3, #8]
	DAC_SIGNAL.APNEA_DAC_VALUE_10      = 1030;
 80096b4:	4b36      	ldr	r3, [pc, #216]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096b6:	f240 4206 	movw	r2, #1030	; 0x406
 80096ba:	815a      	strh	r2, [r3, #10]
	DAC_SIGNAL.APNEA_DAC_VALUE_11      = 1060;
 80096bc:	4b34      	ldr	r3, [pc, #208]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096be:	f240 4224 	movw	r2, #1060	; 0x424
 80096c2:	819a      	strh	r2, [r3, #12]
	DAC_SIGNAL.APNEA_DAC_VALUE_12      = 1090;
 80096c4:	4b32      	ldr	r3, [pc, #200]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096c6:	f240 4242 	movw	r2, #1090	; 0x442
 80096ca:	81da      	strh	r2, [r3, #14]
	DAC_SIGNAL.APNEA_DAC_VALUE_13      = 1130;
 80096cc:	4b30      	ldr	r3, [pc, #192]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096ce:	f240 426a 	movw	r2, #1130	; 0x46a
 80096d2:	821a      	strh	r2, [r3, #16]
	DAC_SIGNAL.APNEA_DAC_VALUE_14      = 1170;
 80096d4:	4b2e      	ldr	r3, [pc, #184]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096d6:	f240 4292 	movw	r2, #1170	; 0x492
 80096da:	825a      	strh	r2, [r3, #18]
	DAC_SIGNAL.APNEA_DAC_VALUE_15      = 1220;
 80096dc:	4b2c      	ldr	r3, [pc, #176]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096de:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80096e2:	829a      	strh	r2, [r3, #20]
	DAC_SIGNAL.APNEA_DAC_VALUE_16      = 1250;
 80096e4:	4b2a      	ldr	r3, [pc, #168]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096e6:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80096ea:	82da      	strh	r2, [r3, #22]
	DAC_SIGNAL.APNEA_DAC_VALUE_17      = 1280;
 80096ec:	4b28      	ldr	r3, [pc, #160]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096ee:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80096f2:	831a      	strh	r2, [r3, #24]
	DAC_SIGNAL.APNEA_DAC_VALUE_18      = 1310;
 80096f4:	4b26      	ldr	r3, [pc, #152]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096f6:	f240 521e 	movw	r2, #1310	; 0x51e
 80096fa:	835a      	strh	r2, [r3, #26]
	DAC_SIGNAL.APNEA_DAC_VALUE_19      = 1340;
 80096fc:	4b24      	ldr	r3, [pc, #144]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 80096fe:	f240 523c 	movw	r2, #1340	; 0x53c
 8009702:	839a      	strh	r2, [r3, #28]
	DAC_SIGNAL.APNEA_DAC_VALUE_20      = 1370;
 8009704:	4b22      	ldr	r3, [pc, #136]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 8009706:	f240 525a 	movw	r2, #1370	; 0x55a
 800970a:	83da      	strh	r2, [r3, #30]
	DAC_SIGNAL.APNEA_DAC_VALUE_21      = 1400;
 800970c:	4b20      	ldr	r3, [pc, #128]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 800970e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8009712:	841a      	strh	r2, [r3, #32]
	DAC_SIGNAL.APNEA_DAC_VALUE_22      = 1430;
 8009714:	4b1e      	ldr	r3, [pc, #120]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 8009716:	f240 5296 	movw	r2, #1430	; 0x596
 800971a:	845a      	strh	r2, [r3, #34]	; 0x22
	DAC_SIGNAL.APNEA_DAC_VALUE_23      = 1470;
 800971c:	4b1c      	ldr	r3, [pc, #112]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 800971e:	f240 52be 	movw	r2, #1470	; 0x5be
 8009722:	849a      	strh	r2, [r3, #36]	; 0x24
	DAC_SIGNAL.APNEA_DAC_VALUE_24      = 1500;
 8009724:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 8009726:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800972a:	84da      	strh	r2, [r3, #38]	; 0x26
	DAC_SIGNAL.APNEA_DAC_VALUE_25      = 1530;
 800972c:	4b18      	ldr	r3, [pc, #96]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 800972e:	f240 52fa 	movw	r2, #1530	; 0x5fa
 8009732:	851a      	strh	r2, [r3, #40]	; 0x28
	DAC_SIGNAL.APNEA_DAC_VALUE_26      = 1560;
 8009734:	4b16      	ldr	r3, [pc, #88]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 8009736:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 800973a:	855a      	strh	r2, [r3, #42]	; 0x2a
	DAC_SIGNAL.APNEA_DAC_VALUE_27      = 1590;
 800973c:	4b14      	ldr	r3, [pc, #80]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 800973e:	f240 6236 	movw	r2, #1590	; 0x636
 8009742:	859a      	strh	r2, [r3, #44]	; 0x2c
	DAC_SIGNAL.APNEA_DAC_VALUE_28      = 1620;
 8009744:	4b12      	ldr	r3, [pc, #72]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 8009746:	f240 6254 	movw	r2, #1620	; 0x654
 800974a:	85da      	strh	r2, [r3, #46]	; 0x2e
	DAC_SIGNAL.APNEA_DAC_VALUE_29      = 1650;
 800974c:	4b10      	ldr	r3, [pc, #64]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 800974e:	f240 6272 	movw	r2, #1650	; 0x672
 8009752:	861a      	strh	r2, [r3, #48]	; 0x30
	DAC_SIGNAL.APNEA_DAC_VALUE_30      = 1680;
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 8009756:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800975a:	865a      	strh	r2, [r3, #50]	; 0x32
	DAC_SIGNAL.APNEA_DAC_VALUE_31      = 1700;
 800975c:	4b0c      	ldr	r3, [pc, #48]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 800975e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8009762:	869a      	strh	r2, [r3, #52]	; 0x34
	DAC_SIGNAL.APNEA_DAC_VALUE_32      = 1730;
 8009764:	4b0a      	ldr	r3, [pc, #40]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 8009766:	f240 62c2 	movw	r2, #1730	; 0x6c2
 800976a:	86da      	strh	r2, [r3, #54]	; 0x36
	DAC_SIGNAL.APNEA_DAC_VALUE_33      = 1750;
 800976c:	4b08      	ldr	r3, [pc, #32]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 800976e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8009772:	871a      	strh	r2, [r3, #56]	; 0x38
	DAC_SIGNAL.APNEA_DAC_VALUE_34      = 1770;
 8009774:	4b06      	ldr	r3, [pc, #24]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 8009776:	f240 62ea 	movw	r2, #1770	; 0x6ea
 800977a:	875a      	strh	r2, [r3, #58]	; 0x3a
	DAC_SIGNAL.APNEA_DAC_VALUE_35      = 1800;
 800977c:	4b04      	ldr	r3, [pc, #16]	; (8009790 <INITIAL_CPAP_DAC_VALUE_INVASIVE+0x108>)
 800977e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8009782:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8009784:	bf00      	nop
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20012bb0 	.word	0x20012bb0

08009794 <APNEA_DAC_VAL>:
/**
 * @brief APNEA_DAC_VAL.
 * This function upload DAC value according to the mask mode PIP value.
 * */
uint16_t APNEA_DAC_VAL(uint8_t Set_VAL)
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	4603      	mov	r3, r0
 800979c:	71fb      	strb	r3, [r7, #7]


	switch(Set_VAL)
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	3b05      	subs	r3, #5
 80097a2:	2b1e      	cmp	r3, #30
 80097a4:	f200 80dd 	bhi.w	8009962 <APNEA_DAC_VAL+0x1ce>
 80097a8:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <APNEA_DAC_VAL+0x1c>)
 80097aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ae:	bf00      	nop
 80097b0:	0800982d 	.word	0x0800982d
 80097b4:	08009837 	.word	0x08009837
 80097b8:	08009841 	.word	0x08009841
 80097bc:	0800984b 	.word	0x0800984b
 80097c0:	08009855 	.word	0x08009855
 80097c4:	0800985f 	.word	0x0800985f
 80097c8:	08009869 	.word	0x08009869
 80097cc:	08009873 	.word	0x08009873
 80097d0:	0800987d 	.word	0x0800987d
 80097d4:	08009887 	.word	0x08009887
 80097d8:	08009891 	.word	0x08009891
 80097dc:	0800989b 	.word	0x0800989b
 80097e0:	080098a5 	.word	0x080098a5
 80097e4:	080098af 	.word	0x080098af
 80097e8:	080098b9 	.word	0x080098b9
 80097ec:	080098c3 	.word	0x080098c3
 80097f0:	080098cd 	.word	0x080098cd
 80097f4:	080098d7 	.word	0x080098d7
 80097f8:	080098e1 	.word	0x080098e1
 80097fc:	080098eb 	.word	0x080098eb
 8009800:	080098f5 	.word	0x080098f5
 8009804:	080098ff 	.word	0x080098ff
 8009808:	08009909 	.word	0x08009909
 800980c:	08009913 	.word	0x08009913
 8009810:	0800991d 	.word	0x0800991d
 8009814:	08009927 	.word	0x08009927
 8009818:	08009931 	.word	0x08009931
 800981c:	0800993b 	.word	0x0800993b
 8009820:	08009945 	.word	0x08009945
 8009824:	0800994f 	.word	0x0800994f
 8009828:	08009959 	.word	0x08009959
	{
	    case 5:
	    	 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_5;
 800982c:	4b51      	ldr	r3, [pc, #324]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 800982e:	881a      	ldrh	r2, [r3, #0]
 8009830:	4b51      	ldr	r3, [pc, #324]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009832:	801a      	strh	r2, [r3, #0]
	    break;
 8009834:	e095      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
	    case 6:
	    	 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_6;
 8009836:	4b4f      	ldr	r3, [pc, #316]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009838:	885a      	ldrh	r2, [r3, #2]
 800983a:	4b4f      	ldr	r3, [pc, #316]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 800983c:	801a      	strh	r2, [r3, #0]
	    break;
 800983e:	e090      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
	    case 7:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_7;
 8009840:	4b4c      	ldr	r3, [pc, #304]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009842:	889a      	ldrh	r2, [r3, #4]
 8009844:	4b4c      	ldr	r3, [pc, #304]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009846:	801a      	strh	r2, [r3, #0]
		break;
 8009848:	e08b      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
	    case 8:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_8;
 800984a:	4b4a      	ldr	r3, [pc, #296]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 800984c:	88da      	ldrh	r2, [r3, #6]
 800984e:	4b4a      	ldr	r3, [pc, #296]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009850:	801a      	strh	r2, [r3, #0]
		break;
 8009852:	e086      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
	    case 9:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_9;
 8009854:	4b47      	ldr	r3, [pc, #284]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009856:	891a      	ldrh	r2, [r3, #8]
 8009858:	4b47      	ldr	r3, [pc, #284]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 800985a:	801a      	strh	r2, [r3, #0]
		break;
 800985c:	e081      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
	    case 10:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_10;
 800985e:	4b45      	ldr	r3, [pc, #276]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009860:	895a      	ldrh	r2, [r3, #10]
 8009862:	4b45      	ldr	r3, [pc, #276]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009864:	801a      	strh	r2, [r3, #0]
		break;
 8009866:	e07c      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 11:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_11;
 8009868:	4b42      	ldr	r3, [pc, #264]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 800986a:	899a      	ldrh	r2, [r3, #12]
 800986c:	4b42      	ldr	r3, [pc, #264]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 800986e:	801a      	strh	r2, [r3, #0]
		break;
 8009870:	e077      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 12:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_12;
 8009872:	4b40      	ldr	r3, [pc, #256]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009874:	89da      	ldrh	r2, [r3, #14]
 8009876:	4b40      	ldr	r3, [pc, #256]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009878:	801a      	strh	r2, [r3, #0]
		break;
 800987a:	e072      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 13:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_13;
 800987c:	4b3d      	ldr	r3, [pc, #244]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 800987e:	8a1a      	ldrh	r2, [r3, #16]
 8009880:	4b3d      	ldr	r3, [pc, #244]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009882:	801a      	strh	r2, [r3, #0]
		break;
 8009884:	e06d      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 14:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_14;
 8009886:	4b3b      	ldr	r3, [pc, #236]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009888:	8a5a      	ldrh	r2, [r3, #18]
 800988a:	4b3b      	ldr	r3, [pc, #236]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 800988c:	801a      	strh	r2, [r3, #0]
		break;
 800988e:	e068      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 15:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_15;
 8009890:	4b38      	ldr	r3, [pc, #224]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009892:	8a9a      	ldrh	r2, [r3, #20]
 8009894:	4b38      	ldr	r3, [pc, #224]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009896:	801a      	strh	r2, [r3, #0]
		break;
 8009898:	e063      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 16:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_16;
 800989a:	4b36      	ldr	r3, [pc, #216]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 800989c:	8ada      	ldrh	r2, [r3, #22]
 800989e:	4b36      	ldr	r3, [pc, #216]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 80098a0:	801a      	strh	r2, [r3, #0]
		break;
 80098a2:	e05e      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 17:
			 DAC_VALUE_2   = DAC_SIGNAL.APNEA_DAC_VALUE_17;
 80098a4:	4b33      	ldr	r3, [pc, #204]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 80098a6:	8b1a      	ldrh	r2, [r3, #24]
 80098a8:	4b33      	ldr	r3, [pc, #204]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 80098aa:	801a      	strh	r2, [r3, #0]
		break;
 80098ac:	e059      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 18:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_18;
 80098ae:	4b31      	ldr	r3, [pc, #196]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 80098b0:	8b5a      	ldrh	r2, [r3, #26]
 80098b2:	4b31      	ldr	r3, [pc, #196]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 80098b4:	801a      	strh	r2, [r3, #0]
		break;
 80098b6:	e054      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 19:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_19;
 80098b8:	4b2e      	ldr	r3, [pc, #184]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 80098ba:	8b9a      	ldrh	r2, [r3, #28]
 80098bc:	4b2e      	ldr	r3, [pc, #184]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 80098be:	801a      	strh	r2, [r3, #0]
		break;
 80098c0:	e04f      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 20:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_20;
 80098c2:	4b2c      	ldr	r3, [pc, #176]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 80098c4:	8bda      	ldrh	r2, [r3, #30]
 80098c6:	4b2c      	ldr	r3, [pc, #176]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 80098c8:	801a      	strh	r2, [r3, #0]
		break;
 80098ca:	e04a      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 21:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_21;
 80098cc:	4b29      	ldr	r3, [pc, #164]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 80098ce:	8c1a      	ldrh	r2, [r3, #32]
 80098d0:	4b29      	ldr	r3, [pc, #164]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 80098d2:	801a      	strh	r2, [r3, #0]
		break;
 80098d4:	e045      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 22:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_22;
 80098d6:	4b27      	ldr	r3, [pc, #156]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 80098d8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80098da:	4b27      	ldr	r3, [pc, #156]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 80098dc:	801a      	strh	r2, [r3, #0]
		break;
 80098de:	e040      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 23:
			 DAC_VALUE_2   = DAC_SIGNAL.APNEA_DAC_VALUE_23;
 80098e0:	4b24      	ldr	r3, [pc, #144]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 80098e2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80098e4:	4b24      	ldr	r3, [pc, #144]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 80098e6:	801a      	strh	r2, [r3, #0]
		break;
 80098e8:	e03b      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 24:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_24;
 80098ea:	4b22      	ldr	r3, [pc, #136]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 80098ec:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80098ee:	4b22      	ldr	r3, [pc, #136]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 80098f0:	801a      	strh	r2, [r3, #0]
		break;
 80098f2:	e036      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 25:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_25;
 80098f4:	4b1f      	ldr	r3, [pc, #124]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 80098f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80098f8:	4b1f      	ldr	r3, [pc, #124]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 80098fa:	801a      	strh	r2, [r3, #0]
		break;
 80098fc:	e031      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 26:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_26;
 80098fe:	4b1d      	ldr	r3, [pc, #116]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009900:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009902:	4b1d      	ldr	r3, [pc, #116]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009904:	801a      	strh	r2, [r3, #0]
		break;
 8009906:	e02c      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 27:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_27;
 8009908:	4b1a      	ldr	r3, [pc, #104]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 800990a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800990c:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 800990e:	801a      	strh	r2, [r3, #0]
		break;
 8009910:	e027      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 28:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_28;
 8009912:	4b18      	ldr	r3, [pc, #96]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009914:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8009916:	4b18      	ldr	r3, [pc, #96]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009918:	801a      	strh	r2, [r3, #0]
		break;
 800991a:	e022      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
	    case 29:
			 DAC_VALUE_2   = DAC_SIGNAL.APNEA_DAC_VALUE_29;
 800991c:	4b15      	ldr	r3, [pc, #84]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 800991e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8009920:	4b15      	ldr	r3, [pc, #84]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009922:	801a      	strh	r2, [r3, #0]
		break;
 8009924:	e01d      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 30:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_30;
 8009926:	4b13      	ldr	r3, [pc, #76]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009928:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800992a:	4b13      	ldr	r3, [pc, #76]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 800992c:	801a      	strh	r2, [r3, #0]
		break;
 800992e:	e018      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 31:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_31;
 8009930:	4b10      	ldr	r3, [pc, #64]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009932:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8009934:	4b10      	ldr	r3, [pc, #64]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009936:	801a      	strh	r2, [r3, #0]
		break;
 8009938:	e013      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 32:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_32;
 800993a:	4b0e      	ldr	r3, [pc, #56]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 800993c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800993e:	4b0e      	ldr	r3, [pc, #56]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009940:	801a      	strh	r2, [r3, #0]
		break;
 8009942:	e00e      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 33:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_33;
 8009944:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009946:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8009948:	4b0b      	ldr	r3, [pc, #44]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 800994a:	801a      	strh	r2, [r3, #0]
		break;
 800994c:	e009      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
	    case 34:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_34;
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 8009950:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8009952:	4b09      	ldr	r3, [pc, #36]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009954:	801a      	strh	r2, [r3, #0]
		break;
 8009956:	e004      	b.n	8009962 <APNEA_DAC_VAL+0x1ce>
		case 35:
			 DAC_VALUE_2  = DAC_SIGNAL.APNEA_DAC_VALUE_35;
 8009958:	4b06      	ldr	r3, [pc, #24]	; (8009974 <APNEA_DAC_VAL+0x1e0>)
 800995a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800995c:	4b06      	ldr	r3, [pc, #24]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 800995e:	801a      	strh	r2, [r3, #0]
		break;
 8009960:	bf00      	nop
	}

	return DAC_VALUE_2;
 8009962:	4b05      	ldr	r3, [pc, #20]	; (8009978 <APNEA_DAC_VAL+0x1e4>)
 8009964:	881b      	ldrh	r3, [r3, #0]
}
 8009966:	4618      	mov	r0, r3
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	20012bb0 	.word	0x20012bb0
 8009978:	200129a8 	.word	0x200129a8

0800997c <Change_CPAP_DAC_Values_INVASIVE>:
/**
 * @brief Change_CPAP_DAC_Values_INVASIVE.
 * This function reset DAC value according to the mask mode PIP value.
 * */
void Change_CPAP_DAC_Values_INVASIVE(uint8_t Set_Value,uint16_t Blower_Value)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	460a      	mov	r2, r1
 8009986:	71fb      	strb	r3, [r7, #7]
 8009988:	4613      	mov	r3, r2
 800998a:	80bb      	strh	r3, [r7, #4]
	switch(Set_Value)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	3b05      	subs	r3, #5
 8009990:	2b19      	cmp	r3, #25
 8009992:	f200 809f 	bhi.w	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
 8009996:	a201      	add	r2, pc, #4	; (adr r2, 800999c <Change_CPAP_DAC_Values_INVASIVE+0x20>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	08009a05 	.word	0x08009a05
 80099a0:	08009a0d 	.word	0x08009a0d
 80099a4:	08009a15 	.word	0x08009a15
 80099a8:	08009a1d 	.word	0x08009a1d
 80099ac:	08009a25 	.word	0x08009a25
 80099b0:	08009a2d 	.word	0x08009a2d
 80099b4:	08009a35 	.word	0x08009a35
 80099b8:	08009a3d 	.word	0x08009a3d
 80099bc:	08009a45 	.word	0x08009a45
 80099c0:	08009a4d 	.word	0x08009a4d
 80099c4:	08009a55 	.word	0x08009a55
 80099c8:	08009a5d 	.word	0x08009a5d
 80099cc:	08009a65 	.word	0x08009a65
 80099d0:	08009a6d 	.word	0x08009a6d
 80099d4:	08009a75 	.word	0x08009a75
 80099d8:	08009a7d 	.word	0x08009a7d
 80099dc:	08009a85 	.word	0x08009a85
 80099e0:	08009a8d 	.word	0x08009a8d
 80099e4:	08009a95 	.word	0x08009a95
 80099e8:	08009a9d 	.word	0x08009a9d
 80099ec:	08009aa5 	.word	0x08009aa5
 80099f0:	08009aad 	.word	0x08009aad
 80099f4:	08009ab5 	.word	0x08009ab5
 80099f8:	08009abd 	.word	0x08009abd
 80099fc:	08009ac5 	.word	0x08009ac5
 8009a00:	08009acd 	.word	0x08009acd
	{
	    case 5:
	    	 DAC_SIGNAL.APNEA_DAC_VALUE_5   =Blower_Value;
 8009a04:	4a36      	ldr	r2, [pc, #216]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a06:	88bb      	ldrh	r3, [r7, #4]
 8009a08:	8013      	strh	r3, [r2, #0]
	    break;
 8009a0a:	e063      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
	    case 6:
	    	 DAC_SIGNAL.APNEA_DAC_VALUE_6   =Blower_Value;
 8009a0c:	4a34      	ldr	r2, [pc, #208]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a0e:	88bb      	ldrh	r3, [r7, #4]
 8009a10:	8053      	strh	r3, [r2, #2]
	    break;
 8009a12:	e05f      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
	    case 7:
			 DAC_SIGNAL.APNEA_DAC_VALUE_7   =Blower_Value;
 8009a14:	4a32      	ldr	r2, [pc, #200]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a16:	88bb      	ldrh	r3, [r7, #4]
 8009a18:	8093      	strh	r3, [r2, #4]
		break;
 8009a1a:	e05b      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
	    case 8:
			 DAC_SIGNAL.APNEA_DAC_VALUE_8   =Blower_Value;
 8009a1c:	4a30      	ldr	r2, [pc, #192]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a1e:	88bb      	ldrh	r3, [r7, #4]
 8009a20:	80d3      	strh	r3, [r2, #6]
		break;
 8009a22:	e057      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
	    case 9:
			 DAC_SIGNAL.APNEA_DAC_VALUE_9   =Blower_Value;
 8009a24:	4a2e      	ldr	r2, [pc, #184]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a26:	88bb      	ldrh	r3, [r7, #4]
 8009a28:	8113      	strh	r3, [r2, #8]
		break;
 8009a2a:	e053      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
	    case 10:
			 DAC_SIGNAL.APNEA_DAC_VALUE_10  =Blower_Value;
 8009a2c:	4a2c      	ldr	r2, [pc, #176]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a2e:	88bb      	ldrh	r3, [r7, #4]
 8009a30:	8153      	strh	r3, [r2, #10]
		break;
 8009a32:	e04f      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 11:
			 DAC_SIGNAL.APNEA_DAC_VALUE_11  =Blower_Value;
 8009a34:	4a2a      	ldr	r2, [pc, #168]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a36:	88bb      	ldrh	r3, [r7, #4]
 8009a38:	8193      	strh	r3, [r2, #12]
		break;
 8009a3a:	e04b      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 12:
			 DAC_SIGNAL.APNEA_DAC_VALUE_12  =Blower_Value;
 8009a3c:	4a28      	ldr	r2, [pc, #160]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a3e:	88bb      	ldrh	r3, [r7, #4]
 8009a40:	81d3      	strh	r3, [r2, #14]
		break;
 8009a42:	e047      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 13:
			 DAC_SIGNAL.APNEA_DAC_VALUE_13  =Blower_Value;
 8009a44:	4a26      	ldr	r2, [pc, #152]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a46:	88bb      	ldrh	r3, [r7, #4]
 8009a48:	8213      	strh	r3, [r2, #16]
		break;
 8009a4a:	e043      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 14:
			 DAC_SIGNAL.APNEA_DAC_VALUE_14  =Blower_Value;
 8009a4c:	4a24      	ldr	r2, [pc, #144]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a4e:	88bb      	ldrh	r3, [r7, #4]
 8009a50:	8253      	strh	r3, [r2, #18]
		break;
 8009a52:	e03f      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 15:
			 DAC_SIGNAL.APNEA_DAC_VALUE_15  =Blower_Value;
 8009a54:	4a22      	ldr	r2, [pc, #136]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a56:	88bb      	ldrh	r3, [r7, #4]
 8009a58:	8293      	strh	r3, [r2, #20]
		break;
 8009a5a:	e03b      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 16:
			 DAC_SIGNAL.APNEA_DAC_VALUE_16  =Blower_Value;
 8009a5c:	4a20      	ldr	r2, [pc, #128]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a5e:	88bb      	ldrh	r3, [r7, #4]
 8009a60:	82d3      	strh	r3, [r2, #22]
		break;
 8009a62:	e037      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 17:
			 DAC_SIGNAL.APNEA_DAC_VALUE_17  =Blower_Value;
 8009a64:	4a1e      	ldr	r2, [pc, #120]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a66:	88bb      	ldrh	r3, [r7, #4]
 8009a68:	8313      	strh	r3, [r2, #24]
		break;
 8009a6a:	e033      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 18:
			 DAC_SIGNAL.APNEA_DAC_VALUE_18  =Blower_Value;
 8009a6c:	4a1c      	ldr	r2, [pc, #112]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a6e:	88bb      	ldrh	r3, [r7, #4]
 8009a70:	8353      	strh	r3, [r2, #26]
		break;
 8009a72:	e02f      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 19:
			 DAC_SIGNAL.APNEA_DAC_VALUE_19  =Blower_Value;
 8009a74:	4a1a      	ldr	r2, [pc, #104]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a76:	88bb      	ldrh	r3, [r7, #4]
 8009a78:	8393      	strh	r3, [r2, #28]
		break;
 8009a7a:	e02b      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 20:
			 DAC_SIGNAL.APNEA_DAC_VALUE_20  =Blower_Value;
 8009a7c:	4a18      	ldr	r2, [pc, #96]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a7e:	88bb      	ldrh	r3, [r7, #4]
 8009a80:	83d3      	strh	r3, [r2, #30]
		break;
 8009a82:	e027      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 21:
			 DAC_SIGNAL.APNEA_DAC_VALUE_21  =Blower_Value;
 8009a84:	4a16      	ldr	r2, [pc, #88]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a86:	88bb      	ldrh	r3, [r7, #4]
 8009a88:	8413      	strh	r3, [r2, #32]
		break;
 8009a8a:	e023      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 22:
			 DAC_SIGNAL.APNEA_DAC_VALUE_22  =Blower_Value;
 8009a8c:	4a14      	ldr	r2, [pc, #80]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a8e:	88bb      	ldrh	r3, [r7, #4]
 8009a90:	8453      	strh	r3, [r2, #34]	; 0x22
		break;
 8009a92:	e01f      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 23:
			 DAC_SIGNAL.APNEA_DAC_VALUE_23  =Blower_Value;
 8009a94:	4a12      	ldr	r2, [pc, #72]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a96:	88bb      	ldrh	r3, [r7, #4]
 8009a98:	8493      	strh	r3, [r2, #36]	; 0x24
		break;
 8009a9a:	e01b      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 24:
			 DAC_SIGNAL.APNEA_DAC_VALUE_24  =Blower_Value;
 8009a9c:	4a10      	ldr	r2, [pc, #64]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009a9e:	88bb      	ldrh	r3, [r7, #4]
 8009aa0:	84d3      	strh	r3, [r2, #38]	; 0x26
		break;
 8009aa2:	e017      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 25:
			 DAC_SIGNAL.APNEA_DAC_VALUE_25  =Blower_Value;
 8009aa4:	4a0e      	ldr	r2, [pc, #56]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009aa6:	88bb      	ldrh	r3, [r7, #4]
 8009aa8:	8513      	strh	r3, [r2, #40]	; 0x28
		break;
 8009aaa:	e013      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 26:
			 DAC_SIGNAL.APNEA_DAC_VALUE_26  =Blower_Value;
 8009aac:	4a0c      	ldr	r2, [pc, #48]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009aae:	88bb      	ldrh	r3, [r7, #4]
 8009ab0:	8553      	strh	r3, [r2, #42]	; 0x2a
		break;
 8009ab2:	e00f      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 27:
			 DAC_SIGNAL.APNEA_DAC_VALUE_27  =Blower_Value;
 8009ab4:	4a0a      	ldr	r2, [pc, #40]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009ab6:	88bb      	ldrh	r3, [r7, #4]
 8009ab8:	8593      	strh	r3, [r2, #44]	; 0x2c
		break;
 8009aba:	e00b      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 28:
			 DAC_SIGNAL.APNEA_DAC_VALUE_28  =Blower_Value;
 8009abc:	4a08      	ldr	r2, [pc, #32]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009abe:	88bb      	ldrh	r3, [r7, #4]
 8009ac0:	85d3      	strh	r3, [r2, #46]	; 0x2e
		break;
 8009ac2:	e007      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
	    case 29:
			 DAC_SIGNAL.APNEA_DAC_VALUE_29  =Blower_Value;
 8009ac4:	4a06      	ldr	r2, [pc, #24]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009ac6:	88bb      	ldrh	r3, [r7, #4]
 8009ac8:	8613      	strh	r3, [r2, #48]	; 0x30
		break;
 8009aca:	e003      	b.n	8009ad4 <Change_CPAP_DAC_Values_INVASIVE+0x158>
		case 30:
			 DAC_SIGNAL.APNEA_DAC_VALUE_30  =Blower_Value;
 8009acc:	4a04      	ldr	r2, [pc, #16]	; (8009ae0 <Change_CPAP_DAC_Values_INVASIVE+0x164>)
 8009ace:	88bb      	ldrh	r3, [r7, #4]
 8009ad0:	8653      	strh	r3, [r2, #50]	; 0x32
		break;
 8009ad2:	bf00      	nop
	}
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	20012bb0 	.word	0x20012bb0

08009ae4 <Mode_Initial_Flag_Set_Task>:
/**
 * \brief Mode_Initial_Flag_Set_Task.
 * This task determines the initialization of flags in the specified mode.
 * */
void Mode_Initial_Flag_Set_Task (void *argument)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	while(1)
	{
		One_Minite_Or_60000_Ms  = 60000;
 8009aec:	4b33      	ldr	r3, [pc, #204]	; (8009bbc <Mode_Initial_Flag_Set_Task+0xd8>)
 8009aee:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009af2:	801a      	strh	r2, [r3, #0]
		Breath                  = 0;
 8009af4:	4b32      	ldr	r3, [pc, #200]	; (8009bc0 <Mode_Initial_Flag_Set_Task+0xdc>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	701a      	strb	r2, [r3, #0]
		Breath_Count            = Leave_Count_The_Breath;
 8009afa:	4b32      	ldr	r3, [pc, #200]	; (8009bc4 <Mode_Initial_Flag_Set_Task+0xe0>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	701a      	strb	r2, [r3, #0]
		O2_Low_Count            = 0;
 8009b00:	4b31      	ldr	r3, [pc, #196]	; (8009bc8 <Mode_Initial_Flag_Set_Task+0xe4>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	701a      	strb	r2, [r3, #0]
	    O2_High_Count           = 0;
 8009b06:	4b31      	ldr	r3, [pc, #196]	; (8009bcc <Mode_Initial_Flag_Set_Task+0xe8>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	701a      	strb	r2, [r3, #0]
		count1                  = 0;
 8009b0c:	4b30      	ldr	r3, [pc, #192]	; (8009bd0 <Mode_Initial_Flag_Set_Task+0xec>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	701a      	strb	r2, [r3, #0]
		count2                  = 0;
 8009b12:	4b30      	ldr	r3, [pc, #192]	; (8009bd4 <Mode_Initial_Flag_Set_Task+0xf0>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	701a      	strb	r2, [r3, #0]
		INITIAL_DAC_VALUE();
 8009b18:	f7ff f976 	bl	8008e08 <INITIAL_DAC_VALUE>
		INITIAL_CPAP_DAC_VALUE_INVASIVE();
 8009b1c:	f7ff fdb4 	bl	8009688 <INITIAL_CPAP_DAC_VALUE_INVASIVE>
		switch (Mode_Initial_Flag_Set)
 8009b20:	4b2d      	ldr	r3, [pc, #180]	; (8009bd8 <Mode_Initial_Flag_Set_Task+0xf4>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d139      	bne.n	8009b9c <Mode_Initial_Flag_Set_Task+0xb8>
		{
			case OPEN:
				switch(Mode)
 8009b28:	4b2c      	ldr	r3, [pc, #176]	; (8009bdc <Mode_Initial_Flag_Set_Task+0xf8>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	2b0b      	cmp	r3, #11
 8009b30:	d832      	bhi.n	8009b98 <Mode_Initial_Flag_Set_Task+0xb4>
 8009b32:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <Mode_Initial_Flag_Set_Task+0x54>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009b69 	.word	0x08009b69
 8009b3c:	08009b6f 	.word	0x08009b6f
 8009b40:	08009b99 	.word	0x08009b99
 8009b44:	08009b93 	.word	0x08009b93
 8009b48:	08009b75 	.word	0x08009b75
 8009b4c:	08009b7b 	.word	0x08009b7b
 8009b50:	08009b81 	.word	0x08009b81
 8009b54:	08009b99 	.word	0x08009b99
 8009b58:	08009b99 	.word	0x08009b99
 8009b5c:	08009b99 	.word	0x08009b99
 8009b60:	08009b87 	.word	0x08009b87
 8009b64:	08009b8d 	.word	0x08009b8d
				{
					case Pccmv:
						PC_CMV_Initial_Flags_SET();
 8009b68:	f000 f83e 	bl	8009be8 <PC_CMV_Initial_Flags_SET>
					break;
 8009b6c:	e015      	b.n	8009b9a <Mode_Initial_Flag_Set_Task+0xb6>
					case Vccmv:
						VC_CMV_Initial_Flags_SET();
 8009b6e:	f000 fa11 	bl	8009f94 <VC_CMV_Initial_Flags_SET>
					break;
 8009b72:	e012      	b.n	8009b9a <Mode_Initial_Flag_Set_Task+0xb6>
					case Pcsimv:
						PC_SIMV_Initial_Flags_SET();
 8009b74:	f000 fb62 	bl	800a23c <PC_SIMV_Initial_Flags_SET>
					break;
 8009b78:	e00f      	b.n	8009b9a <Mode_Initial_Flag_Set_Task+0xb6>
					case Vcsimv:
						VC_SIMV_Initial_Flags_SET();
 8009b7a:	f000 fd75 	bl	800a668 <VC_SIMV_Initial_Flags_SET>
					break;
 8009b7e:	e00c      	b.n	8009b9a <Mode_Initial_Flag_Set_Task+0xb6>
					case Psv:
						PSV_Initial_Flags_SET();
 8009b80:	f000 fefc 	bl	800a97c <PSV_Initial_Flags_SET>
					break;
 8009b84:	e009      	b.n	8009b9a <Mode_Initial_Flag_Set_Task+0xb6>
					case Cpap:
						CPAP_Initial_Flags_SET();
 8009b86:	f000 ff23 	bl	800a9d0 <CPAP_Initial_Flags_SET>
					break;
 8009b8a:	e006      	b.n	8009b9a <Mode_Initial_Flag_Set_Task+0xb6>
					case BiPap:
						BIBAP_Initial_Flags_SET();
 8009b8c:	f001 f87a 	bl	800ac84 <BIBAP_Initial_Flags_SET>
					break;
 8009b90:	e003      	b.n	8009b9a <Mode_Initial_Flag_Set_Task+0xb6>
					case Aprv:
						APRV_Initial_Flags_SET();
 8009b92:	f001 f9a1 	bl	800aed8 <APRV_Initial_Flags_SET>
					break;
 8009b96:	e000      	b.n	8009b9a <Mode_Initial_Flag_Set_Task+0xb6>
					default:
					break;
 8009b98:	bf00      	nop
				}
			break;
 8009b9a:	e000      	b.n	8009b9e <Mode_Initial_Flag_Set_Task+0xba>
			default:
			break;
 8009b9c:	bf00      	nop
		}



		switch (Back_Up_Mode_Initial_Flag_Set)
 8009b9e:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <Mode_Initial_Flag_Set_Task+0xfc>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d108      	bne.n	8009bb8 <Mode_Initial_Flag_Set_Task+0xd4>
		{
			case OPEN:
				switch(Current_Backup_Mode)
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	; (8009be4 <Mode_Initial_Flag_Set_Task+0x100>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d102      	bne.n	8009bb4 <Mode_Initial_Flag_Set_Task+0xd0>
				{
					case Backup_PCCMV_Mode:
						Backup_PC_CMV_Initial_Flags_SET();
 8009bae:	f001 fab1 	bl	800b114 <Backup_PC_CMV_Initial_Flags_SET>
					break;
 8009bb2:	e000      	b.n	8009bb6 <Mode_Initial_Flag_Set_Task+0xd2>
					default:
					break;
 8009bb4:	bf00      	nop
				}
			break;
 8009bb6:	e000      	b.n	8009bba <Mode_Initial_Flag_Set_Task+0xd6>
			default:
			break;
 8009bb8:	bf00      	nop
		One_Minite_Or_60000_Ms  = 60000;
 8009bba:	e797      	b.n	8009aec <Mode_Initial_Flag_Set_Task+0x8>
 8009bbc:	200128a4 	.word	0x200128a4
 8009bc0:	200129ab 	.word	0x200129ab
 8009bc4:	200122a8 	.word	0x200122a8
 8009bc8:	200126b8 	.word	0x200126b8
 8009bcc:	20012368 	.word	0x20012368
 8009bd0:	20012a3a 	.word	0x20012a3a
 8009bd4:	200122e0 	.word	0x200122e0
 8009bd8:	20012cb1 	.word	0x20012cb1
 8009bdc:	200126ba 	.word	0x200126ba
 8009be0:	20012829 	.word	0x20012829
 8009be4:	20012846 	.word	0x20012846

08009be8 <PC_CMV_Initial_Flags_SET>:
/**
 * \brief PC_CMV_Initial_Flags_SET.
 * This function resets flags for PCCMV mode and also starts PCCMV mode.
 * */
void PC_CMV_Initial_Flags_SET()
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
	controlsys_Init(&Parker_valve_tune);
 8009bec:	48b3      	ldr	r0, [pc, #716]	; (8009ebc <PC_CMV_Initial_Flags_SET+0x2d4>)
 8009bee:	f006 fc33 	bl	8010458 <controlsys_Init>
	Avg_Flow                                              = 1;
 8009bf2:	4bb3      	ldr	r3, [pc, #716]	; (8009ec0 <PC_CMV_Initial_Flags_SET+0x2d8>)
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	801a      	strh	r2, [r3, #0]
	Flow_Count                                            = 0;
 8009bf8:	4bb2      	ldr	r3, [pc, #712]	; (8009ec4 <PC_CMV_Initial_Flags_SET+0x2dc>)
 8009bfa:	f04f 0200 	mov.w	r2, #0
 8009bfe:	601a      	str	r2, [r3, #0]
	Flow_Cummulative_Val                                  = 0;
 8009c00:	4bb1      	ldr	r3, [pc, #708]	; (8009ec8 <PC_CMV_Initial_Flags_SET+0x2e0>)
 8009c02:	f04f 0200 	mov.w	r2, #0
 8009c06:	601a      	str	r2, [r3, #0]
	Check_Oxygen_Count                                    = 0;
 8009c08:	4bb0      	ldr	r3, [pc, #704]	; (8009ecc <PC_CMV_Initial_Flags_SET+0x2e4>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	701a      	strb	r2, [r3, #0]
	Temp_Dac                                              = 1400;
 8009c0e:	4bb0      	ldr	r3, [pc, #704]	; (8009ed0 <PC_CMV_Initial_Flags_SET+0x2e8>)
 8009c10:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8009c14:	801a      	strh	r2, [r3, #0]
	inc_dac                                               = 2;
 8009c16:	4baf      	ldr	r3, [pc, #700]	; (8009ed4 <PC_CMV_Initial_Flags_SET+0x2ec>)
 8009c18:	2202      	movs	r2, #2
 8009c1a:	801a      	strh	r2, [r3, #0]
	Oxygen_Blending_Status                                = OXYGEN_NOT_ACHIEVED;
 8009c1c:	4bae      	ldr	r3, [pc, #696]	; (8009ed8 <PC_CMV_Initial_Flags_SET+0x2f0>)
 8009c1e:	2201      	movs	r2, #1
 8009c20:	701a      	strb	r2, [r3, #0]

	Reset_Flow_Offset();
 8009c22:	f001 ff49 	bl	800bab8 <Reset_Flow_Offset>
    OLD.last_vent_type                                    = ET_TUBE_MODE;
 8009c26:	4bad      	ldr	r3, [pc, #692]	; (8009edc <PC_CMV_Initial_Flags_SET+0x2f4>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	779a      	strb	r2, [r3, #30]
	Maximum_Limit                                         = 6;
 8009c2c:	4bac      	ldr	r3, [pc, #688]	; (8009ee0 <PC_CMV_Initial_Flags_SET+0x2f8>)
 8009c2e:	2206      	movs	r2, #6
 8009c30:	701a      	strb	r2, [r3, #0]
	Apnea_Mode                                            = OFF;
 8009c32:	4bac      	ldr	r3, [pc, #688]	; (8009ee4 <PC_CMV_Initial_Flags_SET+0x2fc>)
 8009c34:	2201      	movs	r2, #1
 8009c36:	701a      	strb	r2, [r3, #0]
	O2_DAC_AS_PER_FLOW_RATE_Count                         = 0;
 8009c38:	4bab      	ldr	r3, [pc, #684]	; (8009ee8 <PC_CMV_Initial_Flags_SET+0x300>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                                  = APRV_IDLE;
 8009c3e:	4bab      	ldr	r3, [pc, #684]	; (8009eec <PC_CMV_Initial_Flags_SET+0x304>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                                     = APRV_Idle;
 8009c44:	4baa      	ldr	r3, [pc, #680]	; (8009ef0 <PC_CMV_Initial_Flags_SET+0x308>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PIP_Val                        = PC_CMV.PIP_Val;
 8009c4a:	4baa      	ldr	r3, [pc, #680]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009c4c:	781a      	ldrb	r2, [r3, #0]
 8009c4e:	4baa      	ldr	r3, [pc, #680]	; (8009ef8 <PC_CMV_Initial_Flags_SET+0x310>)
 8009c50:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = PC_CMV.PEEP_Val;
 8009c52:	4ba8      	ldr	r3, [pc, #672]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009c54:	785a      	ldrb	r2, [r3, #1]
 8009c56:	4ba8      	ldr	r3, [pc, #672]	; (8009ef8 <PC_CMV_Initial_Flags_SET+0x310>)
 8009c58:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._RESPIRATORY_RATE_Val           = PC_CMV.RESPIRATORY_RATE_Val;
 8009c5a:	4ba6      	ldr	r3, [pc, #664]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009c5c:	789a      	ldrb	r2, [r3, #2]
 8009c5e:	4ba6      	ldr	r3, [pc, #664]	; (8009ef8 <PC_CMV_Initial_Flags_SET+0x310>)
 8009c60:	709a      	strb	r2, [r3, #2]
	Common_Mode_Parameter._FIO2_Val                       = PC_CMV.FIO2_Val;
 8009c62:	4ba4      	ldr	r3, [pc, #656]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009c64:	78da      	ldrb	r2, [r3, #3]
 8009c66:	4ba4      	ldr	r3, [pc, #656]	; (8009ef8 <PC_CMV_Initial_Flags_SET+0x310>)
 8009c68:	70da      	strb	r2, [r3, #3]
	Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 8009c6a:	4ba4      	ldr	r3, [pc, #656]	; (8009efc <PC_CMV_Initial_Flags_SET+0x314>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			              = OPENED;
 8009c70:	4ba3      	ldr	r3, [pc, #652]	; (8009f00 <PC_CMV_Initial_Flags_SET+0x318>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Temp                     = (PC_CMV.PEEP_Val / 2);
 8009c76:	4b9f      	ldr	r3, [pc, #636]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009c78:	785b      	ldrb	r3, [r3, #1]
 8009c7a:	085b      	lsrs	r3, r3, #1
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c86:	4b9f      	ldr	r3, [pc, #636]	; (8009f04 <PC_CMV_Initial_Flags_SET+0x31c>)
 8009c88:	edc3 7a00 	vstr	s15, [r3]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    = 0;
 8009c8c:	4b9d      	ldr	r3, [pc, #628]	; (8009f04 <PC_CMV_Initial_Flags_SET+0x31c>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	809a      	strh	r2, [r3, #4]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 8009c92:	4b9c      	ldr	r3, [pc, #624]	; (8009f04 <PC_CMV_Initial_Flags_SET+0x31c>)
 8009c94:	2201      	movs	r2, #1
 8009c96:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 8009c98:	4b9a      	ldr	r3, [pc, #616]	; (8009f04 <PC_CMV_Initial_Flags_SET+0x31c>)
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	60da      	str	r2, [r3, #12]
    Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(PC_CMV.PIP_Val);
 8009c9e:	4b95      	ldr	r3, [pc, #596]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff f9b2 	bl	800900c <DAC_VAL>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	461a      	mov	r2, r3
 8009cac:	4b96      	ldr	r3, [pc, #600]	; (8009f08 <PC_CMV_Initial_Flags_SET+0x320>)
 8009cae:	811a      	strh	r2, [r3, #8]




	PIP_control_Task.PIP_Control_Task_Delay           = 10;              //new
 8009cb0:	4b96      	ldr	r3, [pc, #600]	; (8009f0c <PC_CMV_Initial_Flags_SET+0x324>)
 8009cb2:	220a      	movs	r2, #10
 8009cb4:	801a      	strh	r2, [r3, #0]
	PIP_control_Task.Increase_Each_DAC_SET_CONST      = 30;              //new
 8009cb6:	4b95      	ldr	r3, [pc, #596]	; (8009f0c <PC_CMV_Initial_Flags_SET+0x324>)
 8009cb8:	221e      	movs	r2, #30
 8009cba:	80da      	strh	r2, [r3, #6]



	PC_CMV.RISE_TIME_MS_Val     = (PC_CMV.Rise_Time *100);
 8009cbc:	4b8d      	ldr	r3, [pc, #564]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009cbe:	7c9b      	ldrb	r3, [r3, #18]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	2364      	movs	r3, #100	; 0x64
 8009cc4:	fb03 f302 	mul.w	r3, r3, r2
 8009cc8:	ee07 3a90 	vmov	s15, r3
 8009ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cd0:	4b88      	ldr	r3, [pc, #544]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009cd2:	edc3 7a01 	vstr	s15, [r3, #4]
	if(PC_CMV.RISE_TIME_MS_Val >= PC_CMV.INSPIRATION_TIME)            //new
 8009cd6:	4b87      	ldr	r3, [pc, #540]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009cd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8009cdc:	4b85      	ldr	r3, [pc, #532]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	ee07 3a90 	vmov	s15, r3
 8009ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf0:	db08      	blt.n	8009d04 <PC_CMV_Initial_Flags_SET+0x11c>
	{
		PC_CMV.RISE_TIME_MS_Val =PC_CMV.INSPIRATION_TIME;
 8009cf2:	4b80      	ldr	r3, [pc, #512]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfe:	4b7d      	ldr	r3, [pc, #500]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009d00:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	if(PC_CMV.RISE_TIME_MS_Val <=600)
 8009d04:	4b7b      	ldr	r3, [pc, #492]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009d06:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d0a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8009f10 <PC_CMV_Initial_Flags_SET+0x328>
 8009d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d16:	d802      	bhi.n	8009d1e <PC_CMV_Initial_Flags_SET+0x136>
	{
		PC_CMV.RISE_TIME_MS_Val =600;
 8009d18:	4b76      	ldr	r3, [pc, #472]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009d1a:	4a7e      	ldr	r2, [pc, #504]	; (8009f14 <PC_CMV_Initial_Flags_SET+0x32c>)
 8009d1c:	605a      	str	r2, [r3, #4]
	}
	PC_CMV.Rise_Time_percentage   = ((float)PC_CMV.RISE_TIME_MS_Val /PC_CMV.INSPIRATION_TIME) * 100.00;     //new
 8009d1e:	4b75      	ldr	r3, [pc, #468]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009d20:	ed93 7a01 	vldr	s14, [r3, #4]
 8009d24:	4b73      	ldr	r3, [pc, #460]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	ee07 3a90 	vmov	s15, r3
 8009d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009d34:	ee16 0a90 	vmov	r0, s13
 8009d38:	f7f6 fbae 	bl	8000498 <__aeabi_f2d>
 8009d3c:	f04f 0200 	mov.w	r2, #0
 8009d40:	4b75      	ldr	r3, [pc, #468]	; (8009f18 <PC_CMV_Initial_Flags_SET+0x330>)
 8009d42:	f7f6 fc01 	bl	8000548 <__aeabi_dmul>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	f7f6 febd 	bl	8000acc <__aeabi_d2uiz>
 8009d52:	4603      	mov	r3, r0
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	4b67      	ldr	r3, [pc, #412]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009d58:	74da      	strb	r2, [r3, #19]
	PIP_control_Task.PIP_Acheived_Time_Ms      	 =  (PC_CMV.RISE_TIME_MS_Val * 2);
 8009d5a:	4b66      	ldr	r3, [pc, #408]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009d5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009d60:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d68:	ee17 3a90 	vmov	r3, s15
 8009d6c:	b21a      	sxth	r2, r3
 8009d6e:	4b67      	ldr	r3, [pc, #412]	; (8009f0c <PC_CMV_Initial_Flags_SET+0x324>)
 8009d70:	809a      	strh	r2, [r3, #4]



	Need_PID_Task_Delay                                   = NO;
 8009d72:	4b6a      	ldr	r3, [pc, #424]	; (8009f1c <PC_CMV_Initial_Flags_SET+0x334>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	701a      	strb	r2, [r3, #0]
	Tune_PID_Task_Delay                                   = T_OPEN;
 8009d78:	4b69      	ldr	r3, [pc, #420]	; (8009f20 <PC_CMV_Initial_Flags_SET+0x338>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.Low_PIP_Count                        = RESET;
 8009d7e:	4b63      	ldr	r3, [pc, #396]	; (8009f0c <PC_CMV_Initial_Flags_SET+0x324>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	729a      	strb	r2, [r3, #10]
	PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = RESET;
 8009d84:	4b61      	ldr	r3, [pc, #388]	; (8009f0c <PC_CMV_Initial_Flags_SET+0x324>)
 8009d86:	2200      	movs	r2, #0
 8009d88:	725a      	strb	r2, [r3, #9]
	Smooth_Ramp_Time_Val_Count                            = 0;
 8009d8a:	4b66      	ldr	r3, [pc, #408]	; (8009f24 <PC_CMV_Initial_Flags_SET+0x33c>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	701a      	strb	r2, [r3, #0]
	Smooth_Ramp_Time_Val                                  = 15;
 8009d90:	4b65      	ldr	r3, [pc, #404]	; (8009f28 <PC_CMV_Initial_Flags_SET+0x340>)
 8009d92:	220f      	movs	r2, #15
 8009d94:	701a      	strb	r2, [r3, #0]
	if(Common_Mode_Parameter._PEEP_Val >= 15)
 8009d96:	4b58      	ldr	r3, [pc, #352]	; (8009ef8 <PC_CMV_Initial_Flags_SET+0x310>)
 8009d98:	785b      	ldrb	r3, [r3, #1]
 8009d9a:	2b0e      	cmp	r3, #14
 8009d9c:	d903      	bls.n	8009da6 <PC_CMV_Initial_Flags_SET+0x1be>
	{
	  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 8009d9e:	4b63      	ldr	r3, [pc, #396]	; (8009f2c <PC_CMV_Initial_Flags_SET+0x344>)
 8009da0:	2201      	movs	r2, #1
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	e00e      	b.n	8009dc4 <PC_CMV_Initial_Flags_SET+0x1dc>
	}
	else if( (Common_Mode_Parameter._PEEP_Val < 15) && (Common_Mode_Parameter._PEEP_Val >= 9))
 8009da6:	4b54      	ldr	r3, [pc, #336]	; (8009ef8 <PC_CMV_Initial_Flags_SET+0x310>)
 8009da8:	785b      	ldrb	r3, [r3, #1]
 8009daa:	2b0e      	cmp	r3, #14
 8009dac:	d807      	bhi.n	8009dbe <PC_CMV_Initial_Flags_SET+0x1d6>
 8009dae:	4b52      	ldr	r3, [pc, #328]	; (8009ef8 <PC_CMV_Initial_Flags_SET+0x310>)
 8009db0:	785b      	ldrb	r3, [r3, #1]
 8009db2:	2b08      	cmp	r3, #8
 8009db4:	d903      	bls.n	8009dbe <PC_CMV_Initial_Flags_SET+0x1d6>
	{
	  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Pending;
 8009db6:	4b5d      	ldr	r3, [pc, #372]	; (8009f2c <PC_CMV_Initial_Flags_SET+0x344>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	701a      	strb	r2, [r3, #0]
 8009dbc:	e002      	b.n	8009dc4 <PC_CMV_Initial_Flags_SET+0x1dc>
	}
	else
	{
		Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 8009dbe:	4b5b      	ldr	r3, [pc, #364]	; (8009f2c <PC_CMV_Initial_Flags_SET+0x344>)
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	701a      	strb	r2, [r3, #0]
	}
    Fio2_Blending_Method = PRESSURE_CONTROLLED;
 8009dc4:	4b5a      	ldr	r3, [pc, #360]	; (8009f30 <PC_CMV_Initial_Flags_SET+0x348>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
    O2_Initial_Parameter(PC_CMV.FIO2_Val,Dummy);
 8009dca:	4b4a      	ldr	r3, [pc, #296]	; (8009ef4 <PC_CMV_Initial_Flags_SET+0x30c>)
 8009dcc:	78db      	ldrb	r3, [r3, #3]
 8009dce:	4a59      	ldr	r2, [pc, #356]	; (8009f34 <PC_CMV_Initial_Flags_SET+0x34c>)
 8009dd0:	7812      	ldrb	r2, [r2, #0]
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f002 fbaf 	bl	800c538 <O2_Initial_Parameter>
	Alert_Flags_Reset();
 8009dda:	f7f7 f961 	bl	80010a0 <Alert_Flags_Reset>
	Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 8009dde:	4b56      	ldr	r3, [pc, #344]	; (8009f38 <PC_CMV_Initial_Flags_SET+0x350>)
 8009de0:	2201      	movs	r2, #1
 8009de2:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                             = Run_Expiration_Cycle;
 8009de4:	4b55      	ldr	r3, [pc, #340]	; (8009f3c <PC_CMV_Initial_Flags_SET+0x354>)
 8009de6:	2202      	movs	r2, #2
 8009de8:	701a      	strb	r2, [r3, #0]
	Back_Up_Mode_Initial_Flag_Set                         = CLOSE;
 8009dea:	4b55      	ldr	r3, [pc, #340]	; (8009f40 <PC_CMV_Initial_Flags_SET+0x358>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set                                 = CLOSE;
 8009df0:	4b54      	ldr	r3, [pc, #336]	; (8009f44 <PC_CMV_Initial_Flags_SET+0x35c>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	701a      	strb	r2, [r3, #0]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 8009df6:	f001 fbe5 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskSuspend(Vc_Cmv_Handler);
 8009dfa:	4b53      	ldr	r3, [pc, #332]	; (8009f48 <PC_CMV_Initial_Flags_SET+0x360>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f011 f958 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 8009e04:	4b51      	ldr	r3, [pc, #324]	; (8009f4c <PC_CMV_Initial_Flags_SET+0x364>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f011 f953 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 8009e0e:	4b50      	ldr	r3, [pc, #320]	; (8009f50 <PC_CMV_Initial_Flags_SET+0x368>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f011 f94e 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 8009e18:	4b4e      	ldr	r3, [pc, #312]	; (8009f54 <PC_CMV_Initial_Flags_SET+0x36c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f011 f949 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 8009e22:	4b4d      	ldr	r3, [pc, #308]	; (8009f58 <PC_CMV_Initial_Flags_SET+0x370>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f011 f944 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 8009e2c:	4b4b      	ldr	r3, [pc, #300]	; (8009f5c <PC_CMV_Initial_Flags_SET+0x374>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f011 f93f 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 8009e36:	4b4a      	ldr	r3, [pc, #296]	; (8009f60 <PC_CMV_Initial_Flags_SET+0x378>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f011 f93a 	bl	801b0b4 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 8009e40:	4b48      	ldr	r3, [pc, #288]	; (8009f64 <PC_CMV_Initial_Flags_SET+0x37c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f011 f935 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 8009e4a:	4b47      	ldr	r3, [pc, #284]	; (8009f68 <PC_CMV_Initial_Flags_SET+0x380>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f011 f930 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 8009e54:	4b45      	ldr	r3, [pc, #276]	; (8009f6c <PC_CMV_Initial_Flags_SET+0x384>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f011 f92b 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 8009e5e:	4b44      	ldr	r3, [pc, #272]	; (8009f70 <PC_CMV_Initial_Flags_SET+0x388>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f011 f926 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 8009e68:	4b42      	ldr	r3, [pc, #264]	; (8009f74 <PC_CMV_Initial_Flags_SET+0x38c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f011 f921 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 8009e72:	4b41      	ldr	r3, [pc, #260]	; (8009f78 <PC_CMV_Initial_Flags_SET+0x390>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f011 f91c 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 8009e7c:	4b3f      	ldr	r3, [pc, #252]	; (8009f7c <PC_CMV_Initial_Flags_SET+0x394>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f011 f917 	bl	801b0b4 <vTaskSuspend>
	vTaskResume(Alert_Handler);
 8009e86:	4b3e      	ldr	r3, [pc, #248]	; (8009f80 <PC_CMV_Initial_Flags_SET+0x398>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f011 f9d6 	bl	801b23c <vTaskResume>
	vTaskResume(One_Time_Handler);
 8009e90:	4b3c      	ldr	r3, [pc, #240]	; (8009f84 <PC_CMV_Initial_Flags_SET+0x39c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f011 f9d1 	bl	801b23c <vTaskResume>
	vTaskResume(Pc_Cmv_Handler);
 8009e9a:	4b3b      	ldr	r3, [pc, #236]	; (8009f88 <PC_CMV_Initial_Flags_SET+0x3a0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f011 f9cc 	bl	801b23c <vTaskResume>
	vTaskResume(PIP_Control_Task_Handler);
 8009ea4:	4b39      	ldr	r3, [pc, #228]	; (8009f8c <PC_CMV_Initial_Flags_SET+0x3a4>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f011 f9c7 	bl	801b23c <vTaskResume>
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 8009eae:	4b38      	ldr	r3, [pc, #224]	; (8009f90 <PC_CMV_Initial_Flags_SET+0x3a8>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f011 f8fe 	bl	801b0b4 <vTaskSuspend>
}
 8009eb8:	bf00      	nop
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	2000001c 	.word	0x2000001c
 8009ec0:	2001283c 	.word	0x2001283c
 8009ec4:	200128a0 	.word	0x200128a0
 8009ec8:	200122f8 	.word	0x200122f8
 8009ecc:	20012a0a 	.word	0x20012a0a
 8009ed0:	20012474 	.word	0x20012474
 8009ed4:	200123ce 	.word	0x200123ce
 8009ed8:	20012b71 	.word	0x20012b71
 8009edc:	20012c08 	.word	0x20012c08
 8009ee0:	20012a35 	.word	0x20012a35
 8009ee4:	20012aa1 	.word	0x20012aa1
 8009ee8:	20012a3b 	.word	0x20012a3b
 8009eec:	2001263c 	.word	0x2001263c
 8009ef0:	20012a10 	.word	0x20012a10
 8009ef4:	20012b1c 	.word	0x20012b1c
 8009ef8:	200124f0 	.word	0x200124f0
 8009efc:	20012a37 	.word	0x20012a37
 8009f00:	20012a34 	.word	0x20012a34
 8009f04:	20012c74 	.word	0x20012c74
 8009f08:	20012978 	.word	0x20012978
 8009f0c:	200123d0 	.word	0x200123d0
 8009f10:	44160000 	.word	0x44160000
 8009f14:	44160000 	.word	0x44160000
 8009f18:	40590000 	.word	0x40590000
 8009f1c:	20012a38 	.word	0x20012a38
 8009f20:	20012620 	.word	0x20012620
 8009f24:	200129f6 	.word	0x200129f6
 8009f28:	200129a1 	.word	0x200129a1
 8009f2c:	200124ce 	.word	0x200124ce
 8009f30:	20012360 	.word	0x20012360
 8009f34:	20012d74 	.word	0x20012d74
 8009f38:	2001269e 	.word	0x2001269e
 8009f3c:	20012870 	.word	0x20012870
 8009f40:	20012829 	.word	0x20012829
 8009f44:	20012cb1 	.word	0x20012cb1
 8009f48:	20012c68 	.word	0x20012c68
 8009f4c:	20012248 	.word	0x20012248
 8009f50:	20012638 	.word	0x20012638
 8009f54:	20012cb4 	.word	0x20012cb4
 8009f58:	20012c50 	.word	0x20012c50
 8009f5c:	20012824 	.word	0x20012824
 8009f60:	20012500 	.word	0x20012500
 8009f64:	200128a8 	.word	0x200128a8
 8009f68:	200127a8 	.word	0x200127a8
 8009f6c:	20012d38 	.word	0x20012d38
 8009f70:	20012364 	.word	0x20012364
 8009f74:	20012b04 	.word	0x20012b04
 8009f78:	20012810 	.word	0x20012810
 8009f7c:	20012a84 	.word	0x20012a84
 8009f80:	20012968 	.word	0x20012968
 8009f84:	200129cc 	.word	0x200129cc
 8009f88:	20012874 	.word	0x20012874
 8009f8c:	200124ec 	.word	0x200124ec
 8009f90:	200129ac 	.word	0x200129ac

08009f94 <VC_CMV_Initial_Flags_SET>:
/**
 * \brief VC_CMV_Initial_Flags_SET.
 * This function resets flags for VCCMV mode and also starts VCCMV mode.
 * */
void VC_CMV_Initial_Flags_SET()
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	af00      	add	r7, sp, #0
	Stop_Increment_Count                                  = 0;
 8009f98:	4b76      	ldr	r3, [pc, #472]	; (800a174 <VC_CMV_Initial_Flags_SET+0x1e0>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
	Last_Flow_increment                                   = 0;
 8009f9e:	4b76      	ldr	r3, [pc, #472]	; (800a178 <VC_CMV_Initial_Flags_SET+0x1e4>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
	controlsys_Init(&Parker_valve_tune);          //parker
 8009fa4:	4875      	ldr	r0, [pc, #468]	; (800a17c <VC_CMV_Initial_Flags_SET+0x1e8>)
 8009fa6:	f006 fa57 	bl	8010458 <controlsys_Init>
	Flow_Count                                            = 0;
 8009faa:	4b75      	ldr	r3, [pc, #468]	; (800a180 <VC_CMV_Initial_Flags_SET+0x1ec>)
 8009fac:	f04f 0200 	mov.w	r2, #0
 8009fb0:	601a      	str	r2, [r3, #0]
	Flow_Cummulative_Val                                  = 0;
 8009fb2:	4b74      	ldr	r3, [pc, #464]	; (800a184 <VC_CMV_Initial_Flags_SET+0x1f0>)
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	601a      	str	r2, [r3, #0]
	Check_Oxygen_Count                                    = 0;
 8009fba:	4b73      	ldr	r3, [pc, #460]	; (800a188 <VC_CMV_Initial_Flags_SET+0x1f4>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	701a      	strb	r2, [r3, #0]
	Temp_Dac                                              = 1400;
 8009fc0:	4b72      	ldr	r3, [pc, #456]	; (800a18c <VC_CMV_Initial_Flags_SET+0x1f8>)
 8009fc2:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8009fc6:	801a      	strh	r2, [r3, #0]
	inc_dac                                               = 1;
 8009fc8:	4b71      	ldr	r3, [pc, #452]	; (800a190 <VC_CMV_Initial_Flags_SET+0x1fc>)
 8009fca:	2201      	movs	r2, #1
 8009fcc:	801a      	strh	r2, [r3, #0]
	Oxygen_Blending_Status                                = OXYGEN_NOT_ACHIEVED;
 8009fce:	4b71      	ldr	r3, [pc, #452]	; (800a194 <VC_CMV_Initial_Flags_SET+0x200>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	701a      	strb	r2, [r3, #0]
	Reset_Flow_Offset();
 8009fd4:	f001 fd70 	bl	800bab8 <Reset_Flow_Offset>
    OLD.last_vent_type                                    = ET_TUBE_MODE;
 8009fd8:	4b6f      	ldr	r3, [pc, #444]	; (800a198 <VC_CMV_Initial_Flags_SET+0x204>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	779a      	strb	r2, [r3, #30]
	Maximum_Limit                                         = 6;
 8009fde:	4b6f      	ldr	r3, [pc, #444]	; (800a19c <VC_CMV_Initial_Flags_SET+0x208>)
 8009fe0:	2206      	movs	r2, #6
 8009fe2:	701a      	strb	r2, [r3, #0]
	Apnea_Mode                                            = OFF;
 8009fe4:	4b6e      	ldr	r3, [pc, #440]	; (800a1a0 <VC_CMV_Initial_Flags_SET+0x20c>)
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	701a      	strb	r2, [r3, #0]
	O2_DAC_AS_PER_FLOW_RATE_Count                         = 0;
 8009fea:	4b6e      	ldr	r3, [pc, #440]	; (800a1a4 <VC_CMV_Initial_Flags_SET+0x210>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	701a      	strb	r2, [r3, #0]
	Reset_Blower_Status();
 8009ff0:	f009 feac 	bl	8013d4c <Reset_Blower_Status>
	APRV_current_breathe                                  = APRV_IDLE;
 8009ff4:	4b6c      	ldr	r3, [pc, #432]	; (800a1a8 <VC_CMV_Initial_Flags_SET+0x214>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                                     = APRV_Idle;
 8009ffa:	4b6c      	ldr	r3, [pc, #432]	; (800a1ac <VC_CMV_Initial_Flags_SET+0x218>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	701a      	strb	r2, [r3, #0]
	Total_Volume_Achieved_Time                            = 500;
 800a000:	4b6b      	ldr	r3, [pc, #428]	; (800a1b0 <VC_CMV_Initial_Flags_SET+0x21c>)
 800a002:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a006:	801a      	strh	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = VC_CMV.PEEP_Val;
 800a008:	4b6a      	ldr	r3, [pc, #424]	; (800a1b4 <VC_CMV_Initial_Flags_SET+0x220>)
 800a00a:	789a      	ldrb	r2, [r3, #2]
 800a00c:	4b6a      	ldr	r3, [pc, #424]	; (800a1b8 <VC_CMV_Initial_Flags_SET+0x224>)
 800a00e:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._RESPIRATORY_RATE_Val           = VC_CMV.RESPIRATORY_RATE_Val;
 800a010:	4b68      	ldr	r3, [pc, #416]	; (800a1b4 <VC_CMV_Initial_Flags_SET+0x220>)
 800a012:	78da      	ldrb	r2, [r3, #3]
 800a014:	4b68      	ldr	r3, [pc, #416]	; (800a1b8 <VC_CMV_Initial_Flags_SET+0x224>)
 800a016:	709a      	strb	r2, [r3, #2]
	Common_Mode_Parameter._FIO2_Val                       = VC_CMV.FIO2_Val;
 800a018:	4b66      	ldr	r3, [pc, #408]	; (800a1b4 <VC_CMV_Initial_Flags_SET+0x220>)
 800a01a:	791a      	ldrb	r2, [r3, #4]
 800a01c:	4b66      	ldr	r3, [pc, #408]	; (800a1b8 <VC_CMV_Initial_Flags_SET+0x224>)
 800a01e:	70da      	strb	r2, [r3, #3]
	Common_Mode_Parameter._VOLUME_Val                     = VC_CMV.VOLUME_Val;
 800a020:	4b64      	ldr	r3, [pc, #400]	; (800a1b4 <VC_CMV_Initial_Flags_SET+0x220>)
 800a022:	881a      	ldrh	r2, [r3, #0]
 800a024:	4b64      	ldr	r3, [pc, #400]	; (800a1b8 <VC_CMV_Initial_Flags_SET+0x224>)
 800a026:	809a      	strh	r2, [r3, #4]
	Common_Mode_Parameter._FLOW_RATE                      = VC_CMV.FLOW_RATE_Val;
 800a028:	4b62      	ldr	r3, [pc, #392]	; (800a1b4 <VC_CMV_Initial_Flags_SET+0x220>)
 800a02a:	7c9a      	ldrb	r2, [r3, #18]
 800a02c:	4b62      	ldr	r3, [pc, #392]	; (800a1b8 <VC_CMV_Initial_Flags_SET+0x224>)
 800a02e:	719a      	strb	r2, [r3, #6]
	Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 800a030:	4b62      	ldr	r3, [pc, #392]	; (800a1bc <VC_CMV_Initial_Flags_SET+0x228>)
 800a032:	2200      	movs	r2, #0
 800a034:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			              = OPENED;
 800a036:	4b62      	ldr	r3, [pc, #392]	; (800a1c0 <VC_CMV_Initial_Flags_SET+0x22c>)
 800a038:	2200      	movs	r2, #0
 800a03a:	701a      	strb	r2, [r3, #0]
    PEEP_Maintain_Parameter.PEEP_Temp                     = 3;
 800a03c:	4b61      	ldr	r3, [pc, #388]	; (800a1c4 <VC_CMV_Initial_Flags_SET+0x230>)
 800a03e:	4a62      	ldr	r2, [pc, #392]	; (800a1c8 <VC_CMV_Initial_Flags_SET+0x234>)
 800a040:	601a      	str	r2, [r3, #0]
    PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    = 0;
 800a042:	4b60      	ldr	r3, [pc, #384]	; (800a1c4 <VC_CMV_Initial_Flags_SET+0x230>)
 800a044:	2200      	movs	r2, #0
 800a046:	809a      	strh	r2, [r3, #4]
    PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 800a048:	4b5e      	ldr	r3, [pc, #376]	; (800a1c4 <VC_CMV_Initial_Flags_SET+0x230>)
 800a04a:	2201      	movs	r2, #1
 800a04c:	609a      	str	r2, [r3, #8]
    PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 800a04e:	4b5d      	ldr	r3, [pc, #372]	; (800a1c4 <VC_CMV_Initial_Flags_SET+0x230>)
 800a050:	2201      	movs	r2, #1
 800a052:	60da      	str	r2, [r3, #12]


	LOW_COMPLIANCE_DAC                                         = LOW_Compliance_DAC_value(Common_Mode_Parameter._FLOW_RATE);
 800a054:	4b58      	ldr	r3, [pc, #352]	; (800a1b8 <VC_CMV_Initial_Flags_SET+0x224>)
 800a056:	799b      	ldrb	r3, [r3, #6]
 800a058:	4618      	mov	r0, r3
 800a05a:	f00a f8c5 	bl	80141e8 <LOW_Compliance_DAC_value>
 800a05e:	4603      	mov	r3, r0
 800a060:	461a      	mov	r2, r3
 800a062:	4b5a      	ldr	r3, [pc, #360]	; (800a1cc <VC_CMV_Initial_Flags_SET+0x238>)
 800a064:	801a      	strh	r2, [r3, #0]
	Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL = LOW_COMPLIANCE_DAC;
 800a066:	4b59      	ldr	r3, [pc, #356]	; (800a1cc <VC_CMV_Initial_Flags_SET+0x238>)
 800a068:	881a      	ldrh	r2, [r3, #0]
 800a06a:	4b59      	ldr	r3, [pc, #356]	; (800a1d0 <VC_CMV_Initial_Flags_SET+0x23c>)
 800a06c:	80da      	strh	r2, [r3, #6]


    Fio2_Blending_Method = VOLUME_CONTROLLED;
 800a06e:	4b59      	ldr	r3, [pc, #356]	; (800a1d4 <VC_CMV_Initial_Flags_SET+0x240>)
 800a070:	2201      	movs	r2, #1
 800a072:	701a      	strb	r2, [r3, #0]
    O2_Initial_Parameter(VC_CMV.FIO2_Val,Common_Mode_Parameter._FLOW_RATE);
 800a074:	4b4f      	ldr	r3, [pc, #316]	; (800a1b4 <VC_CMV_Initial_Flags_SET+0x220>)
 800a076:	791b      	ldrb	r3, [r3, #4]
 800a078:	4a4f      	ldr	r2, [pc, #316]	; (800a1b8 <VC_CMV_Initial_Flags_SET+0x224>)
 800a07a:	7992      	ldrb	r2, [r2, #6]
 800a07c:	4611      	mov	r1, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f002 fa5a 	bl	800c538 <O2_Initial_Parameter>
    INCREMENT_DAC_VAL_PER_ITERATION           = 3;
 800a084:	4b54      	ldr	r3, [pc, #336]	; (800a1d8 <VC_CMV_Initial_Flags_SET+0x244>)
 800a086:	2203      	movs	r2, #3
 800a088:	701a      	strb	r2, [r3, #0]
	Volume_control_Task.Volume_Stop_Value     = 10;
 800a08a:	4b54      	ldr	r3, [pc, #336]	; (800a1dc <VC_CMV_Initial_Flags_SET+0x248>)
 800a08c:	220a      	movs	r2, #10
 800a08e:	701a      	strb	r2, [r3, #0]
	Alert_Flags_Reset();
 800a090:	f7f7 f806 	bl	80010a0 <Alert_Flags_Reset>
	Next_Half_Breath_Cycle                    = Generate_Expiration_Cycle;
 800a094:	4b52      	ldr	r3, [pc, #328]	; (800a1e0 <VC_CMV_Initial_Flags_SET+0x24c>)
 800a096:	2201      	movs	r2, #1
 800a098:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                 = Run_Expiration_Cycle;
 800a09a:	4b52      	ldr	r3, [pc, #328]	; (800a1e4 <VC_CMV_Initial_Flags_SET+0x250>)
 800a09c:	2202      	movs	r2, #2
 800a09e:	701a      	strb	r2, [r3, #0]
	Back_Up_Mode_Initial_Flag_Set             = CLOSE;
 800a0a0:	4b51      	ldr	r3, [pc, #324]	; (800a1e8 <VC_CMV_Initial_Flags_SET+0x254>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set                     = CLOSE;
 800a0a6:	4b51      	ldr	r3, [pc, #324]	; (800a1ec <VC_CMV_Initial_Flags_SET+0x258>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	701a      	strb	r2, [r3, #0]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800a0ac:	f001 fa8a 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskSuspend(Pc_Cmv_Handler);
 800a0b0:	4b4f      	ldr	r3, [pc, #316]	; (800a1f0 <VC_CMV_Initial_Flags_SET+0x25c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f010 fffd 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800a0ba:	4b4e      	ldr	r3, [pc, #312]	; (800a1f4 <VC_CMV_Initial_Flags_SET+0x260>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f010 fff8 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800a0c4:	4b4c      	ldr	r3, [pc, #304]	; (800a1f8 <VC_CMV_Initial_Flags_SET+0x264>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f010 fff3 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800a0ce:	4b4b      	ldr	r3, [pc, #300]	; (800a1fc <VC_CMV_Initial_Flags_SET+0x268>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f010 ffee 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800a0d8:	4b49      	ldr	r3, [pc, #292]	; (800a200 <VC_CMV_Initial_Flags_SET+0x26c>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f010 ffe9 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800a0e2:	4b48      	ldr	r3, [pc, #288]	; (800a204 <VC_CMV_Initial_Flags_SET+0x270>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f010 ffe4 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800a0ec:	4b46      	ldr	r3, [pc, #280]	; (800a208 <VC_CMV_Initial_Flags_SET+0x274>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f010 ffdf 	bl	801b0b4 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 800a0f6:	4b45      	ldr	r3, [pc, #276]	; (800a20c <VC_CMV_Initial_Flags_SET+0x278>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f010 ffda 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800a100:	4b43      	ldr	r3, [pc, #268]	; (800a210 <VC_CMV_Initial_Flags_SET+0x27c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4618      	mov	r0, r3
 800a106:	f010 ffd5 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800a10a:	4b42      	ldr	r3, [pc, #264]	; (800a214 <VC_CMV_Initial_Flags_SET+0x280>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4618      	mov	r0, r3
 800a110:	f010 ffd0 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800a114:	4b40      	ldr	r3, [pc, #256]	; (800a218 <VC_CMV_Initial_Flags_SET+0x284>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4618      	mov	r0, r3
 800a11a:	f010 ffcb 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800a11e:	4b3f      	ldr	r3, [pc, #252]	; (800a21c <VC_CMV_Initial_Flags_SET+0x288>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4618      	mov	r0, r3
 800a124:	f010 ffc6 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800a128:	4b3d      	ldr	r3, [pc, #244]	; (800a220 <VC_CMV_Initial_Flags_SET+0x28c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f010 ffc1 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800a132:	4b3c      	ldr	r3, [pc, #240]	; (800a224 <VC_CMV_Initial_Flags_SET+0x290>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4618      	mov	r0, r3
 800a138:	f010 ffbc 	bl	801b0b4 <vTaskSuspend>
	vTaskResume(Alert_Handler);
 800a13c:	4b3a      	ldr	r3, [pc, #232]	; (800a228 <VC_CMV_Initial_Flags_SET+0x294>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4618      	mov	r0, r3
 800a142:	f011 f87b 	bl	801b23c <vTaskResume>
	vTaskResume(One_Time_Handler);
 800a146:	4b39      	ldr	r3, [pc, #228]	; (800a22c <VC_CMV_Initial_Flags_SET+0x298>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f011 f876 	bl	801b23c <vTaskResume>
	vTaskResume(Vc_Cmv_Handler);
 800a150:	4b37      	ldr	r3, [pc, #220]	; (800a230 <VC_CMV_Initial_Flags_SET+0x29c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4618      	mov	r0, r3
 800a156:	f011 f871 	bl	801b23c <vTaskResume>
	vTaskResume(Volume_Control_Task_Handler);
 800a15a:	4b36      	ldr	r3, [pc, #216]	; (800a234 <VC_CMV_Initial_Flags_SET+0x2a0>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4618      	mov	r0, r3
 800a160:	f011 f86c 	bl	801b23c <vTaskResume>
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800a164:	4b34      	ldr	r3, [pc, #208]	; (800a238 <VC_CMV_Initial_Flags_SET+0x2a4>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f010 ffa3 	bl	801b0b4 <vTaskSuspend>
}
 800a16e:	bf00      	nop
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20012369 	.word	0x20012369
 800a178:	20012804 	.word	0x20012804
 800a17c:	2000001c 	.word	0x2000001c
 800a180:	200128a0 	.word	0x200128a0
 800a184:	200122f8 	.word	0x200122f8
 800a188:	20012a0a 	.word	0x20012a0a
 800a18c:	20012474 	.word	0x20012474
 800a190:	200123ce 	.word	0x200123ce
 800a194:	20012b71 	.word	0x20012b71
 800a198:	20012c08 	.word	0x20012c08
 800a19c:	20012a35 	.word	0x20012a35
 800a1a0:	20012aa1 	.word	0x20012aa1
 800a1a4:	20012a3b 	.word	0x20012a3b
 800a1a8:	2001263c 	.word	0x2001263c
 800a1ac:	20012a10 	.word	0x20012a10
 800a1b0:	20012c28 	.word	0x20012c28
 800a1b4:	20012c9c 	.word	0x20012c9c
 800a1b8:	200124f0 	.word	0x200124f0
 800a1bc:	20012a37 	.word	0x20012a37
 800a1c0:	20012a34 	.word	0x20012a34
 800a1c4:	20012c74 	.word	0x20012c74
 800a1c8:	40400000 	.word	0x40400000
 800a1cc:	200125d4 	.word	0x200125d4
 800a1d0:	200129b0 	.word	0x200129b0
 800a1d4:	20012360 	.word	0x20012360
 800a1d8:	200129f8 	.word	0x200129f8
 800a1dc:	20012840 	.word	0x20012840
 800a1e0:	2001269e 	.word	0x2001269e
 800a1e4:	20012870 	.word	0x20012870
 800a1e8:	20012829 	.word	0x20012829
 800a1ec:	20012cb1 	.word	0x20012cb1
 800a1f0:	20012874 	.word	0x20012874
 800a1f4:	200124ec 	.word	0x200124ec
 800a1f8:	20012638 	.word	0x20012638
 800a1fc:	20012cb4 	.word	0x20012cb4
 800a200:	20012c50 	.word	0x20012c50
 800a204:	20012824 	.word	0x20012824
 800a208:	20012500 	.word	0x20012500
 800a20c:	200128a8 	.word	0x200128a8
 800a210:	200127a8 	.word	0x200127a8
 800a214:	20012d38 	.word	0x20012d38
 800a218:	20012364 	.word	0x20012364
 800a21c:	20012b04 	.word	0x20012b04
 800a220:	20012810 	.word	0x20012810
 800a224:	20012a84 	.word	0x20012a84
 800a228:	20012968 	.word	0x20012968
 800a22c:	200129cc 	.word	0x200129cc
 800a230:	20012c68 	.word	0x20012c68
 800a234:	20012248 	.word	0x20012248
 800a238:	200129ac 	.word	0x200129ac

0800a23c <PC_SIMV_Initial_Flags_SET>:
/**
 * \brief PC_SIMV_Initial_Flags_SET.
 * This function resets flags for PC SIMV mode and also starts PC SIMV mode.
 * */
void PC_SIMV_Initial_Flags_SET()
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	af00      	add	r7, sp, #0
	controlsys_Init(&Parker_valve_tune);          //parker
 800a240:	4876      	ldr	r0, [pc, #472]	; (800a41c <PC_SIMV_Initial_Flags_SET+0x1e0>)
 800a242:	f006 f909 	bl	8010458 <controlsys_Init>
	Avg_Flow                                              = 1;
 800a246:	4b76      	ldr	r3, [pc, #472]	; (800a420 <PC_SIMV_Initial_Flags_SET+0x1e4>)
 800a248:	2201      	movs	r2, #1
 800a24a:	801a      	strh	r2, [r3, #0]
	Flow_Count                                            = 0;
 800a24c:	4b75      	ldr	r3, [pc, #468]	; (800a424 <PC_SIMV_Initial_Flags_SET+0x1e8>)
 800a24e:	f04f 0200 	mov.w	r2, #0
 800a252:	601a      	str	r2, [r3, #0]
	Flow_Cummulative_Val                                  = 0;
 800a254:	4b74      	ldr	r3, [pc, #464]	; (800a428 <PC_SIMV_Initial_Flags_SET+0x1ec>)
 800a256:	f04f 0200 	mov.w	r2, #0
 800a25a:	601a      	str	r2, [r3, #0]
	Check_Oxygen_Count                                    = 0;        //new
 800a25c:	4b73      	ldr	r3, [pc, #460]	; (800a42c <PC_SIMV_Initial_Flags_SET+0x1f0>)
 800a25e:	2200      	movs	r2, #0
 800a260:	701a      	strb	r2, [r3, #0]
	Temp_Dac                                              = 1400;     //new
 800a262:	4b73      	ldr	r3, [pc, #460]	; (800a430 <PC_SIMV_Initial_Flags_SET+0x1f4>)
 800a264:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800a268:	801a      	strh	r2, [r3, #0]
	inc_dac                                               = 2;        //new
 800a26a:	4b72      	ldr	r3, [pc, #456]	; (800a434 <PC_SIMV_Initial_Flags_SET+0x1f8>)
 800a26c:	2202      	movs	r2, #2
 800a26e:	801a      	strh	r2, [r3, #0]
	Oxygen_Blending_Status                                = OXYGEN_NOT_ACHIEVED;  //new
 800a270:	4b71      	ldr	r3, [pc, #452]	; (800a438 <PC_SIMV_Initial_Flags_SET+0x1fc>)
 800a272:	2201      	movs	r2, #1
 800a274:	701a      	strb	r2, [r3, #0]

	Reset_Flow_Offset();
 800a276:	f001 fc1f 	bl	800bab8 <Reset_Flow_Offset>
    OLD.last_vent_type                                    = ET_TUBE_MODE;
 800a27a:	4b70      	ldr	r3, [pc, #448]	; (800a43c <PC_SIMV_Initial_Flags_SET+0x200>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	779a      	strb	r2, [r3, #30]
	Maximum_Limit                                         = 6;
 800a280:	4b6f      	ldr	r3, [pc, #444]	; (800a440 <PC_SIMV_Initial_Flags_SET+0x204>)
 800a282:	2206      	movs	r2, #6
 800a284:	701a      	strb	r2, [r3, #0]
	Apnea_Mode                                            = OFF;
 800a286:	4b6f      	ldr	r3, [pc, #444]	; (800a444 <PC_SIMV_Initial_Flags_SET+0x208>)
 800a288:	2201      	movs	r2, #1
 800a28a:	701a      	strb	r2, [r3, #0]
	O2_DAC_AS_PER_FLOW_RATE_Count                         = 0;
 800a28c:	4b6e      	ldr	r3, [pc, #440]	; (800a448 <PC_SIMV_Initial_Flags_SET+0x20c>)
 800a28e:	2200      	movs	r2, #0
 800a290:	701a      	strb	r2, [r3, #0]
	TIME_Base_parameter._EXPIRATION_TIME                  = 0;
 800a292:	4b6e      	ldr	r3, [pc, #440]	; (800a44c <PC_SIMV_Initial_Flags_SET+0x210>)
 800a294:	2200      	movs	r2, #0
 800a296:	605a      	str	r2, [r3, #4]
	APRV_current_breathe                                  = APRV_IDLE;
 800a298:	4b6d      	ldr	r3, [pc, #436]	; (800a450 <PC_SIMV_Initial_Flags_SET+0x214>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                                     = APRV_Idle;
 800a29e:	4b6d      	ldr	r3, [pc, #436]	; (800a454 <PC_SIMV_Initial_Flags_SET+0x218>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PIP_Val                        = PC_SIMV.PIP_Val;
 800a2a4:	4b6c      	ldr	r3, [pc, #432]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a2a6:	781a      	ldrb	r2, [r3, #0]
 800a2a8:	4b6c      	ldr	r3, [pc, #432]	; (800a45c <PC_SIMV_Initial_Flags_SET+0x220>)
 800a2aa:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = PC_SIMV.PEEP_Val;
 800a2ac:	4b6a      	ldr	r3, [pc, #424]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a2ae:	785a      	ldrb	r2, [r3, #1]
 800a2b0:	4b6a      	ldr	r3, [pc, #424]	; (800a45c <PC_SIMV_Initial_Flags_SET+0x220>)
 800a2b2:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._RESPIRATORY_RATE_Val           = PC_SIMV.RESPIRATORY_RATE_Val;
 800a2b4:	4b68      	ldr	r3, [pc, #416]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a2b6:	789a      	ldrb	r2, [r3, #2]
 800a2b8:	4b68      	ldr	r3, [pc, #416]	; (800a45c <PC_SIMV_Initial_Flags_SET+0x220>)
 800a2ba:	709a      	strb	r2, [r3, #2]
	Common_Mode_Parameter._FIO2_Val                       = PC_SIMV.FIO2_Val;
 800a2bc:	4b66      	ldr	r3, [pc, #408]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a2be:	78da      	ldrb	r2, [r3, #3]
 800a2c0:	4b66      	ldr	r3, [pc, #408]	; (800a45c <PC_SIMV_Initial_Flags_SET+0x220>)
 800a2c2:	70da      	strb	r2, [r3, #3]
	Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 800a2c4:	4b66      	ldr	r3, [pc, #408]	; (800a460 <PC_SIMV_Initial_Flags_SET+0x224>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			              = OPENED;
 800a2ca:	4b66      	ldr	r3, [pc, #408]	; (800a464 <PC_SIMV_Initial_Flags_SET+0x228>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 800a2d0:	4b65      	ldr	r3, [pc, #404]	; (800a468 <PC_SIMV_Initial_Flags_SET+0x22c>)
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 800a2d6:	4b64      	ldr	r3, [pc, #400]	; (800a468 <PC_SIMV_Initial_Flags_SET+0x22c>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	60da      	str	r2, [r3, #12]
	PEEP_Maintain_Parameter.PEEP_Temp                     = (PC_SIMV.PEEP_Val / 2);
 800a2dc:	4b5e      	ldr	r3, [pc, #376]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a2de:	785b      	ldrb	r3, [r3, #1]
 800a2e0:	085b      	lsrs	r3, r3, #1
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2ec:	4b5e      	ldr	r3, [pc, #376]	; (800a468 <PC_SIMV_Initial_Flags_SET+0x22c>)
 800a2ee:	edc3 7a00 	vstr	s15, [r3]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    = 0;
 800a2f2:	4b5d      	ldr	r3, [pc, #372]	; (800a468 <PC_SIMV_Initial_Flags_SET+0x22c>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	809a      	strh	r2, [r3, #4]
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(PC_SIMV.PIP_Val);
 800a2f8:	4b57      	ldr	r3, [pc, #348]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe fe85 	bl	800900c <DAC_VAL>
 800a302:	4603      	mov	r3, r0
 800a304:	461a      	mov	r2, r3
 800a306:	4b59      	ldr	r3, [pc, #356]	; (800a46c <PC_SIMV_Initial_Flags_SET+0x230>)
 800a308:	811a      	strh	r2, [r3, #8]


	PIP_control_Task.PIP_Control_Task_Delay           = 10;              //new
 800a30a:	4b59      	ldr	r3, [pc, #356]	; (800a470 <PC_SIMV_Initial_Flags_SET+0x234>)
 800a30c:	220a      	movs	r2, #10
 800a30e:	801a      	strh	r2, [r3, #0]
	PIP_control_Task.Increase_Each_DAC_SET_CONST      = 30;              //new
 800a310:	4b57      	ldr	r3, [pc, #348]	; (800a470 <PC_SIMV_Initial_Flags_SET+0x234>)
 800a312:	221e      	movs	r2, #30
 800a314:	80da      	strh	r2, [r3, #6]
	PC_SIMV.RISE_TIME_MS_Val     = (PC_SIMV.Rise_Time *100);
 800a316:	4b50      	ldr	r3, [pc, #320]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a318:	7c9b      	ldrb	r3, [r3, #18]
 800a31a:	461a      	mov	r2, r3
 800a31c:	2364      	movs	r3, #100	; 0x64
 800a31e:	fb03 f302 	mul.w	r3, r3, r2
 800a322:	ee07 3a90 	vmov	s15, r3
 800a326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a32a:	4b4b      	ldr	r3, [pc, #300]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a32c:	edc3 7a01 	vstr	s15, [r3, #4]
	if(PC_SIMV.RISE_TIME_MS_Val >= PC_SIMV.INSPIRATION_TIME)               //new
 800a330:	4b49      	ldr	r3, [pc, #292]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a332:	ed93 7a01 	vldr	s14, [r3, #4]
 800a336:	4b48      	ldr	r3, [pc, #288]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a34a:	db08      	blt.n	800a35e <PC_SIMV_Initial_Flags_SET+0x122>
	{
		PC_SIMV.RISE_TIME_MS_Val =PC_SIMV.INSPIRATION_TIME;
 800a34c:	4b42      	ldr	r3, [pc, #264]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	ee07 3a90 	vmov	s15, r3
 800a354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a358:	4b3f      	ldr	r3, [pc, #252]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a35a:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	if(PC_SIMV.RISE_TIME_MS_Val <=600)
 800a35e:	4b3e      	ldr	r3, [pc, #248]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a360:	edd3 7a01 	vldr	s15, [r3, #4]
 800a364:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800a474 <PC_SIMV_Initial_Flags_SET+0x238>
 800a368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a370:	d802      	bhi.n	800a378 <PC_SIMV_Initial_Flags_SET+0x13c>
	{
		PC_SIMV.RISE_TIME_MS_Val =600;
 800a372:	4b39      	ldr	r3, [pc, #228]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a374:	4a40      	ldr	r2, [pc, #256]	; (800a478 <PC_SIMV_Initial_Flags_SET+0x23c>)
 800a376:	605a      	str	r2, [r3, #4]
	}
	PC_SIMV.Rise_Time_percentage   = ((float)PC_SIMV.RISE_TIME_MS_Val /PC_SIMV.INSPIRATION_TIME) * 100.00;     //new
 800a378:	4b37      	ldr	r3, [pc, #220]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a37a:	ed93 7a01 	vldr	s14, [r3, #4]
 800a37e:	4b36      	ldr	r3, [pc, #216]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	ee07 3a90 	vmov	s15, r3
 800a386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a38e:	ee16 0a90 	vmov	r0, s13
 800a392:	f7f6 f881 	bl	8000498 <__aeabi_f2d>
 800a396:	f04f 0200 	mov.w	r2, #0
 800a39a:	4b38      	ldr	r3, [pc, #224]	; (800a47c <PC_SIMV_Initial_Flags_SET+0x240>)
 800a39c:	f7f6 f8d4 	bl	8000548 <__aeabi_dmul>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	f7f6 fb90 	bl	8000acc <__aeabi_d2uiz>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	4b29      	ldr	r3, [pc, #164]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a3b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	PIP_control_Task.PIP_Acheived_Time_Ms      	 =  (PC_SIMV.RISE_TIME_MS_Val * 2);
 800a3b6:	4b28      	ldr	r3, [pc, #160]	; (800a458 <PC_SIMV_Initial_Flags_SET+0x21c>)
 800a3b8:	edd3 7a01 	vldr	s15, [r3, #4]
 800a3bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3c4:	ee17 3a90 	vmov	r3, s15
 800a3c8:	b21a      	sxth	r2, r3
 800a3ca:	4b29      	ldr	r3, [pc, #164]	; (800a470 <PC_SIMV_Initial_Flags_SET+0x234>)
 800a3cc:	809a      	strh	r2, [r3, #4]



	Need_PID_Task_Delay                                   = NO;
 800a3ce:	4b2c      	ldr	r3, [pc, #176]	; (800a480 <PC_SIMV_Initial_Flags_SET+0x244>)
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	701a      	strb	r2, [r3, #0]
	Tune_PID_Task_Delay                                   = T_OPEN;
 800a3d4:	4b2b      	ldr	r3, [pc, #172]	; (800a484 <PC_SIMV_Initial_Flags_SET+0x248>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.Low_PIP_Count                        = RESET;
 800a3da:	4b25      	ldr	r3, [pc, #148]	; (800a470 <PC_SIMV_Initial_Flags_SET+0x234>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	729a      	strb	r2, [r3, #10]
	PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = RESET;
 800a3e0:	4b23      	ldr	r3, [pc, #140]	; (800a470 <PC_SIMV_Initial_Flags_SET+0x234>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	725a      	strb	r2, [r3, #9]
	Smooth_Ramp_Time_Val_Count = 0;
 800a3e6:	4b28      	ldr	r3, [pc, #160]	; (800a488 <PC_SIMV_Initial_Flags_SET+0x24c>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	701a      	strb	r2, [r3, #0]
	Smooth_Ramp_Time_Val       = 15;
 800a3ec:	4b27      	ldr	r3, [pc, #156]	; (800a48c <PC_SIMV_Initial_Flags_SET+0x250>)
 800a3ee:	220f      	movs	r2, #15
 800a3f0:	701a      	strb	r2, [r3, #0]
	if(Common_Mode_Parameter._PEEP_Val >= 15)
 800a3f2:	4b1a      	ldr	r3, [pc, #104]	; (800a45c <PC_SIMV_Initial_Flags_SET+0x220>)
 800a3f4:	785b      	ldrb	r3, [r3, #1]
 800a3f6:	2b0e      	cmp	r3, #14
 800a3f8:	d903      	bls.n	800a402 <PC_SIMV_Initial_Flags_SET+0x1c6>
	{
	  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800a3fa:	4b25      	ldr	r3, [pc, #148]	; (800a490 <PC_SIMV_Initial_Flags_SET+0x254>)
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	701a      	strb	r2, [r3, #0]
 800a400:	e04b      	b.n	800a49a <PC_SIMV_Initial_Flags_SET+0x25e>
	}
	else if( (Common_Mode_Parameter._PEEP_Val < 15) && (Common_Mode_Parameter._PEEP_Val >= 9))
 800a402:	4b16      	ldr	r3, [pc, #88]	; (800a45c <PC_SIMV_Initial_Flags_SET+0x220>)
 800a404:	785b      	ldrb	r3, [r3, #1]
 800a406:	2b0e      	cmp	r3, #14
 800a408:	d844      	bhi.n	800a494 <PC_SIMV_Initial_Flags_SET+0x258>
 800a40a:	4b14      	ldr	r3, [pc, #80]	; (800a45c <PC_SIMV_Initial_Flags_SET+0x220>)
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	2b08      	cmp	r3, #8
 800a410:	d940      	bls.n	800a494 <PC_SIMV_Initial_Flags_SET+0x258>
	{
	  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Pending;
 800a412:	4b1f      	ldr	r3, [pc, #124]	; (800a490 <PC_SIMV_Initial_Flags_SET+0x254>)
 800a414:	2200      	movs	r2, #0
 800a416:	701a      	strb	r2, [r3, #0]
 800a418:	e03f      	b.n	800a49a <PC_SIMV_Initial_Flags_SET+0x25e>
 800a41a:	bf00      	nop
 800a41c:	2000001c 	.word	0x2000001c
 800a420:	2001283c 	.word	0x2001283c
 800a424:	200128a0 	.word	0x200128a0
 800a428:	200122f8 	.word	0x200122f8
 800a42c:	20012a0a 	.word	0x20012a0a
 800a430:	20012474 	.word	0x20012474
 800a434:	200123ce 	.word	0x200123ce
 800a438:	20012b71 	.word	0x20012b71
 800a43c:	20012c08 	.word	0x20012c08
 800a440:	20012a35 	.word	0x20012a35
 800a444:	20012aa1 	.word	0x20012aa1
 800a448:	20012a3b 	.word	0x20012a3b
 800a44c:	20012b38 	.word	0x20012b38
 800a450:	2001263c 	.word	0x2001263c
 800a454:	20012a10 	.word	0x20012a10
 800a458:	20012c2c 	.word	0x20012c2c
 800a45c:	200124f0 	.word	0x200124f0
 800a460:	20012a37 	.word	0x20012a37
 800a464:	20012a34 	.word	0x20012a34
 800a468:	20012c74 	.word	0x20012c74
 800a46c:	20012978 	.word	0x20012978
 800a470:	200123d0 	.word	0x200123d0
 800a474:	44160000 	.word	0x44160000
 800a478:	44160000 	.word	0x44160000
 800a47c:	40590000 	.word	0x40590000
 800a480:	20012a38 	.word	0x20012a38
 800a484:	20012620 	.word	0x20012620
 800a488:	200129f6 	.word	0x200129f6
 800a48c:	200129a1 	.word	0x200129a1
 800a490:	200124ce 	.word	0x200124ce
	}
	else
	{
		Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800a494:	4b55      	ldr	r3, [pc, #340]	; (800a5ec <PC_SIMV_Initial_Flags_SET+0x3b0>)
 800a496:	2201      	movs	r2, #1
 800a498:	701a      	strb	r2, [r3, #0]
	}

	Fio2_Blending_Method  = PRESSURE_CONTROLLED;
 800a49a:	4b55      	ldr	r3, [pc, #340]	; (800a5f0 <PC_SIMV_Initial_Flags_SET+0x3b4>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	701a      	strb	r2, [r3, #0]
	O2_Initial_Parameter(PC_SIMV.FIO2_Val,Dummy);
 800a4a0:	4b54      	ldr	r3, [pc, #336]	; (800a5f4 <PC_SIMV_Initial_Flags_SET+0x3b8>)
 800a4a2:	78db      	ldrb	r3, [r3, #3]
 800a4a4:	4a54      	ldr	r2, [pc, #336]	; (800a5f8 <PC_SIMV_Initial_Flags_SET+0x3bc>)
 800a4a6:	7812      	ldrb	r2, [r2, #0]
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f002 f844 	bl	800c538 <O2_Initial_Parameter>
	Alert_Flags_Reset();
 800a4b0:	f7f6 fdf6 	bl	80010a0 <Alert_Flags_Reset>
	Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 800a4b4:	4b51      	ldr	r3, [pc, #324]	; (800a5fc <PC_SIMV_Initial_Flags_SET+0x3c0>)
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                             = Run_Expiration_Cycle;
 800a4ba:	4b51      	ldr	r3, [pc, #324]	; (800a600 <PC_SIMV_Initial_Flags_SET+0x3c4>)
 800a4bc:	2202      	movs	r2, #2
 800a4be:	701a      	strb	r2, [r3, #0]
	Back_Up_Mode_Initial_Flag_Set     = CLOSE;
 800a4c0:	4b50      	ldr	r3, [pc, #320]	; (800a604 <PC_SIMV_Initial_Flags_SET+0x3c8>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set             = CLOSE;
 800a4c6:	4b50      	ldr	r3, [pc, #320]	; (800a608 <PC_SIMV_Initial_Flags_SET+0x3cc>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	701a      	strb	r2, [r3, #0]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800a4cc:	f001 f87a 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskSuspend(Pc_Cmv_Handler);
 800a4d0:	4b4e      	ldr	r3, [pc, #312]	; (800a60c <PC_SIMV_Initial_Flags_SET+0x3d0>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f010 fded 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800a4da:	4b4d      	ldr	r3, [pc, #308]	; (800a610 <PC_SIMV_Initial_Flags_SET+0x3d4>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f010 fde8 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800a4e4:	4b4b      	ldr	r3, [pc, #300]	; (800a614 <PC_SIMV_Initial_Flags_SET+0x3d8>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f010 fde3 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800a4ee:	4b4a      	ldr	r3, [pc, #296]	; (800a618 <PC_SIMV_Initial_Flags_SET+0x3dc>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f010 fdde 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800a4f8:	4b48      	ldr	r3, [pc, #288]	; (800a61c <PC_SIMV_Initial_Flags_SET+0x3e0>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f010 fdd9 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800a502:	4b47      	ldr	r3, [pc, #284]	; (800a620 <PC_SIMV_Initial_Flags_SET+0x3e4>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4618      	mov	r0, r3
 800a508:	f010 fdd4 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800a50c:	4b45      	ldr	r3, [pc, #276]	; (800a624 <PC_SIMV_Initial_Flags_SET+0x3e8>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4618      	mov	r0, r3
 800a512:	f010 fdcf 	bl	801b0b4 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 800a516:	4b44      	ldr	r3, [pc, #272]	; (800a628 <PC_SIMV_Initial_Flags_SET+0x3ec>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f010 fdca 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800a520:	4b42      	ldr	r3, [pc, #264]	; (800a62c <PC_SIMV_Initial_Flags_SET+0x3f0>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4618      	mov	r0, r3
 800a526:	f010 fdc5 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800a52a:	4b41      	ldr	r3, [pc, #260]	; (800a630 <PC_SIMV_Initial_Flags_SET+0x3f4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f010 fdc0 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800a534:	4b3f      	ldr	r3, [pc, #252]	; (800a634 <PC_SIMV_Initial_Flags_SET+0x3f8>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4618      	mov	r0, r3
 800a53a:	f010 fdbb 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800a53e:	4b3e      	ldr	r3, [pc, #248]	; (800a638 <PC_SIMV_Initial_Flags_SET+0x3fc>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f010 fdb6 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800a548:	4b3c      	ldr	r3, [pc, #240]	; (800a63c <PC_SIMV_Initial_Flags_SET+0x400>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f010 fdb1 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800a552:	4b3b      	ldr	r3, [pc, #236]	; (800a640 <PC_SIMV_Initial_Flags_SET+0x404>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4618      	mov	r0, r3
 800a558:	f010 fdac 	bl	801b0b4 <vTaskSuspend>
	vTaskResume(Alert_Handler);
 800a55c:	4b39      	ldr	r3, [pc, #228]	; (800a644 <PC_SIMV_Initial_Flags_SET+0x408>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4618      	mov	r0, r3
 800a562:	f010 fe6b 	bl	801b23c <vTaskResume>
	vTaskResume(One_Time_Handler);
 800a566:	4b38      	ldr	r3, [pc, #224]	; (800a648 <PC_SIMV_Initial_Flags_SET+0x40c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f010 fe66 	bl	801b23c <vTaskResume>
	if(Assist_Control == ASSIST_ON)
 800a570:	4b36      	ldr	r3, [pc, #216]	; (800a64c <PC_SIMV_Initial_Flags_SET+0x410>)
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10f      	bne.n	800a598 <PC_SIMV_Initial_Flags_SET+0x35c>
	{
		vTaskResume(Pc_Simv_Assist_ON_Handler);
 800a578:	4b35      	ldr	r3, [pc, #212]	; (800a650 <PC_SIMV_Initial_Flags_SET+0x414>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f010 fe5d 	bl	801b23c <vTaskResume>
		vTaskResume(PIP_Control_Task_Handler);
 800a582:	4b23      	ldr	r3, [pc, #140]	; (800a610 <PC_SIMV_Initial_Flags_SET+0x3d4>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4618      	mov	r0, r3
 800a588:	f010 fe58 	bl	801b23c <vTaskResume>
		vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800a58c:	4b31      	ldr	r3, [pc, #196]	; (800a654 <PC_SIMV_Initial_Flags_SET+0x418>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4618      	mov	r0, r3
 800a592:	f010 fd8f 	bl	801b0b4 <vTaskSuspend>
 800a596:	e022      	b.n	800a5de <PC_SIMV_Initial_Flags_SET+0x3a2>
	}
	else if(Assist_Control == ASSIST_OFF)
 800a598:	4b2c      	ldr	r3, [pc, #176]	; (800a64c <PC_SIMV_Initial_Flags_SET+0x410>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d11e      	bne.n	800a5de <PC_SIMV_Initial_Flags_SET+0x3a2>
	{
		Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL      = DAC_VAL(Common_Mode_Parameter._PEEP_Val);
 800a5a0:	4b2d      	ldr	r3, [pc, #180]	; (800a658 <PC_SIMV_Initial_Flags_SET+0x41c>)
 800a5a2:	785b      	ldrb	r3, [r3, #1]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fe fd31 	bl	800900c <DAC_VAL>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	4b2b      	ldr	r3, [pc, #172]	; (800a65c <PC_SIMV_Initial_Flags_SET+0x420>)
 800a5b0:	821a      	strh	r2, [r3, #16]
		Pressure_Mode_blower_control.LAST_PEEP_BLOWER_DAC_VAL = Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL;
 800a5b2:	4b2a      	ldr	r3, [pc, #168]	; (800a65c <PC_SIMV_Initial_Flags_SET+0x420>)
 800a5b4:	8a1a      	ldrh	r2, [r3, #16]
 800a5b6:	4b29      	ldr	r3, [pc, #164]	; (800a65c <PC_SIMV_Initial_Flags_SET+0x420>)
 800a5b8:	825a      	strh	r2, [r3, #18]
		vTaskResume(Pc_Simv_Assist_OFF_Handler);
 800a5ba:	4b26      	ldr	r3, [pc, #152]	; (800a654 <PC_SIMV_Initial_Flags_SET+0x418>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f010 fe3c 	bl	801b23c <vTaskResume>
		vTaskResume(PIP_Control_Task_Handler);
 800a5c4:	4b12      	ldr	r3, [pc, #72]	; (800a610 <PC_SIMV_Initial_Flags_SET+0x3d4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f010 fe37 	bl	801b23c <vTaskResume>
		vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800a5ce:	4b20      	ldr	r3, [pc, #128]	; (800a650 <PC_SIMV_Initial_Flags_SET+0x414>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f010 fd6e 	bl	801b0b4 <vTaskSuspend>
		Trigger_Process = ONE_TIME_TRIGGER;
 800a5d8:	4b21      	ldr	r3, [pc, #132]	; (800a660 <PC_SIMV_Initial_Flags_SET+0x424>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	701a      	strb	r2, [r3, #0]
	}
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800a5de:	4b21      	ldr	r3, [pc, #132]	; (800a664 <PC_SIMV_Initial_Flags_SET+0x428>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f010 fd66 	bl	801b0b4 <vTaskSuspend>
}
 800a5e8:	bf00      	nop
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	200124ce 	.word	0x200124ce
 800a5f0:	20012360 	.word	0x20012360
 800a5f4:	20012c2c 	.word	0x20012c2c
 800a5f8:	20012d74 	.word	0x20012d74
 800a5fc:	2001269e 	.word	0x2001269e
 800a600:	20012870 	.word	0x20012870
 800a604:	20012829 	.word	0x20012829
 800a608:	20012cb1 	.word	0x20012cb1
 800a60c:	20012874 	.word	0x20012874
 800a610:	200124ec 	.word	0x200124ec
 800a614:	20012c68 	.word	0x20012c68
 800a618:	20012248 	.word	0x20012248
 800a61c:	20012c50 	.word	0x20012c50
 800a620:	20012824 	.word	0x20012824
 800a624:	20012500 	.word	0x20012500
 800a628:	200128a8 	.word	0x200128a8
 800a62c:	200127a8 	.word	0x200127a8
 800a630:	20012d38 	.word	0x20012d38
 800a634:	20012364 	.word	0x20012364
 800a638:	20012b04 	.word	0x20012b04
 800a63c:	20012810 	.word	0x20012810
 800a640:	20012a84 	.word	0x20012a84
 800a644:	20012968 	.word	0x20012968
 800a648:	200129cc 	.word	0x200129cc
 800a64c:	200122cc 	.word	0x200122cc
 800a650:	20012cb4 	.word	0x20012cb4
 800a654:	20012638 	.word	0x20012638
 800a658:	200124f0 	.word	0x200124f0
 800a65c:	20012978 	.word	0x20012978
 800a660:	20012348 	.word	0x20012348
 800a664:	200129ac 	.word	0x200129ac

0800a668 <VC_SIMV_Initial_Flags_SET>:
/**
 * \brief VC_SIMV_Initial_Flags_SET.
 * This function resets flags for VC SIMV mode and also starts VC SIMV mode.
 * */
void VC_SIMV_Initial_Flags_SET()
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	af00      	add	r7, sp, #0
	Stop_Increment_Count                                  = 0;
 800a66c:	4b8e      	ldr	r3, [pc, #568]	; (800a8a8 <VC_SIMV_Initial_Flags_SET+0x240>)
 800a66e:	2200      	movs	r2, #0
 800a670:	701a      	strb	r2, [r3, #0]
	Last_Flow_increment                                   = 0;
 800a672:	4b8e      	ldr	r3, [pc, #568]	; (800a8ac <VC_SIMV_Initial_Flags_SET+0x244>)
 800a674:	2200      	movs	r2, #0
 800a676:	701a      	strb	r2, [r3, #0]
	controlsys_Init(&Parker_valve_tune);          //parker
 800a678:	488d      	ldr	r0, [pc, #564]	; (800a8b0 <VC_SIMV_Initial_Flags_SET+0x248>)
 800a67a:	f005 feed 	bl	8010458 <controlsys_Init>
	Flow_Count                                            = 0;
 800a67e:	4b8d      	ldr	r3, [pc, #564]	; (800a8b4 <VC_SIMV_Initial_Flags_SET+0x24c>)
 800a680:	f04f 0200 	mov.w	r2, #0
 800a684:	601a      	str	r2, [r3, #0]
	Flow_Cummulative_Val                                  = 0;
 800a686:	4b8c      	ldr	r3, [pc, #560]	; (800a8b8 <VC_SIMV_Initial_Flags_SET+0x250>)
 800a688:	f04f 0200 	mov.w	r2, #0
 800a68c:	601a      	str	r2, [r3, #0]
	Check_Oxygen_Count                                    = 0;
 800a68e:	4b8b      	ldr	r3, [pc, #556]	; (800a8bc <VC_SIMV_Initial_Flags_SET+0x254>)
 800a690:	2200      	movs	r2, #0
 800a692:	701a      	strb	r2, [r3, #0]
	Temp_Dac                                              = 1400;
 800a694:	4b8a      	ldr	r3, [pc, #552]	; (800a8c0 <VC_SIMV_Initial_Flags_SET+0x258>)
 800a696:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800a69a:	801a      	strh	r2, [r3, #0]
	inc_dac                                               = 1;
 800a69c:	4b89      	ldr	r3, [pc, #548]	; (800a8c4 <VC_SIMV_Initial_Flags_SET+0x25c>)
 800a69e:	2201      	movs	r2, #1
 800a6a0:	801a      	strh	r2, [r3, #0]
	Oxygen_Blending_Status                                = OXYGEN_NOT_ACHIEVED;
 800a6a2:	4b89      	ldr	r3, [pc, #548]	; (800a8c8 <VC_SIMV_Initial_Flags_SET+0x260>)
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	701a      	strb	r2, [r3, #0]

    OLD.last_vent_type                                    = ET_TUBE_MODE;
 800a6a8:	4b88      	ldr	r3, [pc, #544]	; (800a8cc <VC_SIMV_Initial_Flags_SET+0x264>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	779a      	strb	r2, [r3, #30]
	Reset_Flow_Offset();
 800a6ae:	f001 fa03 	bl	800bab8 <Reset_Flow_Offset>
	Maximum_Limit                                         = 6;
 800a6b2:	4b87      	ldr	r3, [pc, #540]	; (800a8d0 <VC_SIMV_Initial_Flags_SET+0x268>)
 800a6b4:	2206      	movs	r2, #6
 800a6b6:	701a      	strb	r2, [r3, #0]
	Apnea_Mode                                            = OFF;
 800a6b8:	4b86      	ldr	r3, [pc, #536]	; (800a8d4 <VC_SIMV_Initial_Flags_SET+0x26c>)
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	701a      	strb	r2, [r3, #0]
	O2_DAC_AS_PER_FLOW_RATE_Count                         = 0;
 800a6be:	4b86      	ldr	r3, [pc, #536]	; (800a8d8 <VC_SIMV_Initial_Flags_SET+0x270>)
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	701a      	strb	r2, [r3, #0]
	Reset_Blower_Status();
 800a6c4:	f009 fb42 	bl	8013d4c <Reset_Blower_Status>
	TIME_Base_parameter._EXPIRATION_TIME                  = 0;
 800a6c8:	4b84      	ldr	r3, [pc, #528]	; (800a8dc <VC_SIMV_Initial_Flags_SET+0x274>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	605a      	str	r2, [r3, #4]
	APRV_current_breathe                                  = APRV_IDLE;
 800a6ce:	4b84      	ldr	r3, [pc, #528]	; (800a8e0 <VC_SIMV_Initial_Flags_SET+0x278>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                                     = APRV_Idle;
 800a6d4:	4b83      	ldr	r3, [pc, #524]	; (800a8e4 <VC_SIMV_Initial_Flags_SET+0x27c>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	701a      	strb	r2, [r3, #0]
	Total_Volume_Achieved_Time                            = 500;
 800a6da:	4b83      	ldr	r3, [pc, #524]	; (800a8e8 <VC_SIMV_Initial_Flags_SET+0x280>)
 800a6dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a6e0:	801a      	strh	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = VC_SIMV.PEEP_Val;
 800a6e2:	4b82      	ldr	r3, [pc, #520]	; (800a8ec <VC_SIMV_Initial_Flags_SET+0x284>)
 800a6e4:	789a      	ldrb	r2, [r3, #2]
 800a6e6:	4b82      	ldr	r3, [pc, #520]	; (800a8f0 <VC_SIMV_Initial_Flags_SET+0x288>)
 800a6e8:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._RESPIRATORY_RATE_Val           = VC_SIMV.RESPIRATORY_RATE_Val;
 800a6ea:	4b80      	ldr	r3, [pc, #512]	; (800a8ec <VC_SIMV_Initial_Flags_SET+0x284>)
 800a6ec:	78da      	ldrb	r2, [r3, #3]
 800a6ee:	4b80      	ldr	r3, [pc, #512]	; (800a8f0 <VC_SIMV_Initial_Flags_SET+0x288>)
 800a6f0:	709a      	strb	r2, [r3, #2]
	Common_Mode_Parameter._FIO2_Val                       = VC_SIMV.FIO2_Val;
 800a6f2:	4b7e      	ldr	r3, [pc, #504]	; (800a8ec <VC_SIMV_Initial_Flags_SET+0x284>)
 800a6f4:	791a      	ldrb	r2, [r3, #4]
 800a6f6:	4b7e      	ldr	r3, [pc, #504]	; (800a8f0 <VC_SIMV_Initial_Flags_SET+0x288>)
 800a6f8:	70da      	strb	r2, [r3, #3]
	Common_Mode_Parameter._VOLUME_Val                     = VC_SIMV.VOLUME_Val;
 800a6fa:	4b7c      	ldr	r3, [pc, #496]	; (800a8ec <VC_SIMV_Initial_Flags_SET+0x284>)
 800a6fc:	881a      	ldrh	r2, [r3, #0]
 800a6fe:	4b7c      	ldr	r3, [pc, #496]	; (800a8f0 <VC_SIMV_Initial_Flags_SET+0x288>)
 800a700:	809a      	strh	r2, [r3, #4]
	Common_Mode_Parameter._FLOW_RATE                      = VC_SIMV.FLOW_RATE_Val;
 800a702:	4b7a      	ldr	r3, [pc, #488]	; (800a8ec <VC_SIMV_Initial_Flags_SET+0x284>)
 800a704:	7c9a      	ldrb	r2, [r3, #18]
 800a706:	4b7a      	ldr	r3, [pc, #488]	; (800a8f0 <VC_SIMV_Initial_Flags_SET+0x288>)
 800a708:	719a      	strb	r2, [r3, #6]
	Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 800a70a:	4b7a      	ldr	r3, [pc, #488]	; (800a8f4 <VC_SIMV_Initial_Flags_SET+0x28c>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			              = OPENED;
 800a710:	4b79      	ldr	r3, [pc, #484]	; (800a8f8 <VC_SIMV_Initial_Flags_SET+0x290>)
 800a712:	2200      	movs	r2, #0
 800a714:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 800a716:	4b79      	ldr	r3, [pc, #484]	; (800a8fc <VC_SIMV_Initial_Flags_SET+0x294>)
 800a718:	2201      	movs	r2, #1
 800a71a:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 800a71c:	4b77      	ldr	r3, [pc, #476]	; (800a8fc <VC_SIMV_Initial_Flags_SET+0x294>)
 800a71e:	2201      	movs	r2, #1
 800a720:	60da      	str	r2, [r3, #12]
	PEEP_Maintain_Parameter.PEEP_Temp                     = 3;
 800a722:	4b76      	ldr	r3, [pc, #472]	; (800a8fc <VC_SIMV_Initial_Flags_SET+0x294>)
 800a724:	4a76      	ldr	r2, [pc, #472]	; (800a900 <VC_SIMV_Initial_Flags_SET+0x298>)
 800a726:	601a      	str	r2, [r3, #0]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time    = 0;
 800a728:	4b74      	ldr	r3, [pc, #464]	; (800a8fc <VC_SIMV_Initial_Flags_SET+0x294>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	809a      	strh	r2, [r3, #4]

	LOW_COMPLIANCE_DAC                                         = LOW_Compliance_DAC_value(Common_Mode_Parameter._FLOW_RATE);
 800a72e:	4b70      	ldr	r3, [pc, #448]	; (800a8f0 <VC_SIMV_Initial_Flags_SET+0x288>)
 800a730:	799b      	ldrb	r3, [r3, #6]
 800a732:	4618      	mov	r0, r3
 800a734:	f009 fd58 	bl	80141e8 <LOW_Compliance_DAC_value>
 800a738:	4603      	mov	r3, r0
 800a73a:	461a      	mov	r2, r3
 800a73c:	4b71      	ldr	r3, [pc, #452]	; (800a904 <VC_SIMV_Initial_Flags_SET+0x29c>)
 800a73e:	801a      	strh	r2, [r3, #0]
	Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL = LOW_COMPLIANCE_DAC;
 800a740:	4b70      	ldr	r3, [pc, #448]	; (800a904 <VC_SIMV_Initial_Flags_SET+0x29c>)
 800a742:	881a      	ldrh	r2, [r3, #0]
 800a744:	4b70      	ldr	r3, [pc, #448]	; (800a908 <VC_SIMV_Initial_Flags_SET+0x2a0>)
 800a746:	80da      	strh	r2, [r3, #6]


	Volume_control_Task.Volume_Stop_Value                = 10;
 800a748:	4b70      	ldr	r3, [pc, #448]	; (800a90c <VC_SIMV_Initial_Flags_SET+0x2a4>)
 800a74a:	220a      	movs	r2, #10
 800a74c:	701a      	strb	r2, [r3, #0]
	INCREMENT_DAC_VAL_PER_ITERATION                      = 3;
 800a74e:	4b70      	ldr	r3, [pc, #448]	; (800a910 <VC_SIMV_Initial_Flags_SET+0x2a8>)
 800a750:	2203      	movs	r2, #3
 800a752:	701a      	strb	r2, [r3, #0]
	Fio2_Blending_Method                                 = VOLUME_CONTROLLED;
 800a754:	4b6f      	ldr	r3, [pc, #444]	; (800a914 <VC_SIMV_Initial_Flags_SET+0x2ac>)
 800a756:	2201      	movs	r2, #1
 800a758:	701a      	strb	r2, [r3, #0]
	O2_Initial_Parameter(VC_SIMV.FIO2_Val,Common_Mode_Parameter._FLOW_RATE);
 800a75a:	4b64      	ldr	r3, [pc, #400]	; (800a8ec <VC_SIMV_Initial_Flags_SET+0x284>)
 800a75c:	791b      	ldrb	r3, [r3, #4]
 800a75e:	4a64      	ldr	r2, [pc, #400]	; (800a8f0 <VC_SIMV_Initial_Flags_SET+0x288>)
 800a760:	7992      	ldrb	r2, [r2, #6]
 800a762:	4611      	mov	r1, r2
 800a764:	4618      	mov	r0, r3
 800a766:	f001 fee7 	bl	800c538 <O2_Initial_Parameter>
	Alert_Flags_Reset();
 800a76a:	f7f6 fc99 	bl	80010a0 <Alert_Flags_Reset>
	Next_Half_Breath_Cycle                              = Generate_Expiration_Cycle;
 800a76e:	4b6a      	ldr	r3, [pc, #424]	; (800a918 <VC_SIMV_Initial_Flags_SET+0x2b0>)
 800a770:	2201      	movs	r2, #1
 800a772:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 800a774:	4b69      	ldr	r3, [pc, #420]	; (800a91c <VC_SIMV_Initial_Flags_SET+0x2b4>)
 800a776:	2202      	movs	r2, #2
 800a778:	701a      	strb	r2, [r3, #0]
	Back_Up_Mode_Initial_Flag_Set                       = CLOSE;
 800a77a:	4b69      	ldr	r3, [pc, #420]	; (800a920 <VC_SIMV_Initial_Flags_SET+0x2b8>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set                               = CLOSE;
 800a780:	4b68      	ldr	r3, [pc, #416]	; (800a924 <VC_SIMV_Initial_Flags_SET+0x2bc>)
 800a782:	2200      	movs	r2, #0
 800a784:	701a      	strb	r2, [r3, #0]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800a786:	f000 ff1d 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	vTaskSuspend(Pc_Cmv_Handler);
 800a78a:	4b67      	ldr	r3, [pc, #412]	; (800a928 <VC_SIMV_Initial_Flags_SET+0x2c0>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4618      	mov	r0, r3
 800a790:	f010 fc90 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800a794:	4b65      	ldr	r3, [pc, #404]	; (800a92c <VC_SIMV_Initial_Flags_SET+0x2c4>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4618      	mov	r0, r3
 800a79a:	f010 fc8b 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800a79e:	4b64      	ldr	r3, [pc, #400]	; (800a930 <VC_SIMV_Initial_Flags_SET+0x2c8>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f010 fc86 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800a7a8:	4b62      	ldr	r3, [pc, #392]	; (800a934 <VC_SIMV_Initial_Flags_SET+0x2cc>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f010 fc81 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800a7b2:	4b61      	ldr	r3, [pc, #388]	; (800a938 <VC_SIMV_Initial_Flags_SET+0x2d0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f010 fc7c 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800a7bc:	4b5f      	ldr	r3, [pc, #380]	; (800a93c <VC_SIMV_Initial_Flags_SET+0x2d4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f010 fc77 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800a7c6:	4b5e      	ldr	r3, [pc, #376]	; (800a940 <VC_SIMV_Initial_Flags_SET+0x2d8>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f010 fc72 	bl	801b0b4 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 800a7d0:	4b5c      	ldr	r3, [pc, #368]	; (800a944 <VC_SIMV_Initial_Flags_SET+0x2dc>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f010 fc6d 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800a7da:	4b5b      	ldr	r3, [pc, #364]	; (800a948 <VC_SIMV_Initial_Flags_SET+0x2e0>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f010 fc68 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800a7e4:	4b59      	ldr	r3, [pc, #356]	; (800a94c <VC_SIMV_Initial_Flags_SET+0x2e4>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f010 fc63 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800a7ee:	4b58      	ldr	r3, [pc, #352]	; (800a950 <VC_SIMV_Initial_Flags_SET+0x2e8>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f010 fc5e 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800a7f8:	4b56      	ldr	r3, [pc, #344]	; (800a954 <VC_SIMV_Initial_Flags_SET+0x2ec>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f010 fc59 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800a802:	4b55      	ldr	r3, [pc, #340]	; (800a958 <VC_SIMV_Initial_Flags_SET+0x2f0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4618      	mov	r0, r3
 800a808:	f010 fc54 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800a80c:	4b53      	ldr	r3, [pc, #332]	; (800a95c <VC_SIMV_Initial_Flags_SET+0x2f4>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4618      	mov	r0, r3
 800a812:	f010 fc4f 	bl	801b0b4 <vTaskSuspend>
	vTaskResume(Alert_Handler);
 800a816:	4b52      	ldr	r3, [pc, #328]	; (800a960 <VC_SIMV_Initial_Flags_SET+0x2f8>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f010 fd0e 	bl	801b23c <vTaskResume>
	vTaskResume(One_Time_Handler);
 800a820:	4b50      	ldr	r3, [pc, #320]	; (800a964 <VC_SIMV_Initial_Flags_SET+0x2fc>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f010 fd09 	bl	801b23c <vTaskResume>
	if(Assist_Control == ASSIST_ON)
 800a82a:	4b4f      	ldr	r3, [pc, #316]	; (800a968 <VC_SIMV_Initial_Flags_SET+0x300>)
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10f      	bne.n	800a852 <VC_SIMV_Initial_Flags_SET+0x1ea>
	{
		vTaskResume(Vc_Simv_Assist_ON_Handler);
 800a832:	4b4e      	ldr	r3, [pc, #312]	; (800a96c <VC_SIMV_Initial_Flags_SET+0x304>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f010 fd00 	bl	801b23c <vTaskResume>
		vTaskResume(Volume_Control_Task_Handler);
 800a83c:	4b3f      	ldr	r3, [pc, #252]	; (800a93c <VC_SIMV_Initial_Flags_SET+0x2d4>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4618      	mov	r0, r3
 800a842:	f010 fcfb 	bl	801b23c <vTaskResume>
		vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800a846:	4b4a      	ldr	r3, [pc, #296]	; (800a970 <VC_SIMV_Initial_Flags_SET+0x308>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f010 fc32 	bl	801b0b4 <vTaskSuspend>
 800a850:	e022      	b.n	800a898 <VC_SIMV_Initial_Flags_SET+0x230>
	}
	else if(Assist_Control == ASSIST_OFF)
 800a852:	4b45      	ldr	r3, [pc, #276]	; (800a968 <VC_SIMV_Initial_Flags_SET+0x300>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d11e      	bne.n	800a898 <VC_SIMV_Initial_Flags_SET+0x230>
	{
		Volume_Mode_Blower_control.PEEP_BLOWER_DAC_VAL      = DAC_VAL(Common_Mode_Parameter._PEEP_Val);
 800a85a:	4b25      	ldr	r3, [pc, #148]	; (800a8f0 <VC_SIMV_Initial_Flags_SET+0x288>)
 800a85c:	785b      	ldrb	r3, [r3, #1]
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe fbd4 	bl	800900c <DAC_VAL>
 800a864:	4603      	mov	r3, r0
 800a866:	461a      	mov	r2, r3
 800a868:	4b27      	ldr	r3, [pc, #156]	; (800a908 <VC_SIMV_Initial_Flags_SET+0x2a0>)
 800a86a:	819a      	strh	r2, [r3, #12]
		Volume_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL = Volume_Mode_Blower_control.PEEP_BLOWER_DAC_VAL;
 800a86c:	4b26      	ldr	r3, [pc, #152]	; (800a908 <VC_SIMV_Initial_Flags_SET+0x2a0>)
 800a86e:	899a      	ldrh	r2, [r3, #12]
 800a870:	4b25      	ldr	r3, [pc, #148]	; (800a908 <VC_SIMV_Initial_Flags_SET+0x2a0>)
 800a872:	81da      	strh	r2, [r3, #14]
		vTaskResume(Vc_Simv_Assist_OFF_Handler);
 800a874:	4b3e      	ldr	r3, [pc, #248]	; (800a970 <VC_SIMV_Initial_Flags_SET+0x308>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4618      	mov	r0, r3
 800a87a:	f010 fcdf 	bl	801b23c <vTaskResume>
		vTaskResume(Volume_Control_Task_Handler);
 800a87e:	4b2f      	ldr	r3, [pc, #188]	; (800a93c <VC_SIMV_Initial_Flags_SET+0x2d4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4618      	mov	r0, r3
 800a884:	f010 fcda 	bl	801b23c <vTaskResume>
		vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800a888:	4b38      	ldr	r3, [pc, #224]	; (800a96c <VC_SIMV_Initial_Flags_SET+0x304>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f010 fc11 	bl	801b0b4 <vTaskSuspend>
		Trigger_Process = ONE_TIME_TRIGGER;
 800a892:	4b38      	ldr	r3, [pc, #224]	; (800a974 <VC_SIMV_Initial_Flags_SET+0x30c>)
 800a894:	2200      	movs	r2, #0
 800a896:	701a      	strb	r2, [r3, #0]
	}
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800a898:	4b37      	ldr	r3, [pc, #220]	; (800a978 <VC_SIMV_Initial_Flags_SET+0x310>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f010 fc09 	bl	801b0b4 <vTaskSuspend>
}
 800a8a2:	bf00      	nop
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20012369 	.word	0x20012369
 800a8ac:	20012804 	.word	0x20012804
 800a8b0:	2000001c 	.word	0x2000001c
 800a8b4:	200128a0 	.word	0x200128a0
 800a8b8:	200122f8 	.word	0x200122f8
 800a8bc:	20012a0a 	.word	0x20012a0a
 800a8c0:	20012474 	.word	0x20012474
 800a8c4:	200123ce 	.word	0x200123ce
 800a8c8:	20012b71 	.word	0x20012b71
 800a8cc:	20012c08 	.word	0x20012c08
 800a8d0:	20012a35 	.word	0x20012a35
 800a8d4:	20012aa1 	.word	0x20012aa1
 800a8d8:	20012a3b 	.word	0x20012a3b
 800a8dc:	20012b38 	.word	0x20012b38
 800a8e0:	2001263c 	.word	0x2001263c
 800a8e4:	20012a10 	.word	0x20012a10
 800a8e8:	20012c28 	.word	0x20012c28
 800a8ec:	20012cb8 	.word	0x20012cb8
 800a8f0:	200124f0 	.word	0x200124f0
 800a8f4:	20012a37 	.word	0x20012a37
 800a8f8:	20012a34 	.word	0x20012a34
 800a8fc:	20012c74 	.word	0x20012c74
 800a900:	40400000 	.word	0x40400000
 800a904:	200125d4 	.word	0x200125d4
 800a908:	200129b0 	.word	0x200129b0
 800a90c:	20012840 	.word	0x20012840
 800a910:	200129f8 	.word	0x200129f8
 800a914:	20012360 	.word	0x20012360
 800a918:	2001269e 	.word	0x2001269e
 800a91c:	20012870 	.word	0x20012870
 800a920:	20012829 	.word	0x20012829
 800a924:	20012cb1 	.word	0x20012cb1
 800a928:	20012874 	.word	0x20012874
 800a92c:	200124ec 	.word	0x200124ec
 800a930:	20012638 	.word	0x20012638
 800a934:	20012cb4 	.word	0x20012cb4
 800a938:	20012c68 	.word	0x20012c68
 800a93c:	20012248 	.word	0x20012248
 800a940:	20012500 	.word	0x20012500
 800a944:	200128a8 	.word	0x200128a8
 800a948:	200127a8 	.word	0x200127a8
 800a94c:	20012d38 	.word	0x20012d38
 800a950:	20012364 	.word	0x20012364
 800a954:	20012b04 	.word	0x20012b04
 800a958:	20012810 	.word	0x20012810
 800a95c:	20012a84 	.word	0x20012a84
 800a960:	20012968 	.word	0x20012968
 800a964:	200129cc 	.word	0x200129cc
 800a968:	200122cc 	.word	0x200122cc
 800a96c:	20012824 	.word	0x20012824
 800a970:	20012c50 	.word	0x20012c50
 800a974:	20012348 	.word	0x20012348
 800a978:	200129ac 	.word	0x200129ac

0800a97c <PSV_Initial_Flags_SET>:
/**
 * \brief PSV_Initial_Flags_SET.
 * This function resets flags for PSV mode and also starts PSV mode.
 * */
void PSV_Initial_Flags_SET()
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	af00      	add	r7, sp, #0
	controlsys_Init(&Parker_valve_tune);          //parker
 800a980:	480e      	ldr	r0, [pc, #56]	; (800a9bc <PSV_Initial_Flags_SET+0x40>)
 800a982:	f005 fd69 	bl	8010458 <controlsys_Init>
	Reset_Flow_Offset();
 800a986:	f001 f897 	bl	800bab8 <Reset_Flow_Offset>
	O2_Control_PSV=0;
 800a98a:	4b0d      	ldr	r3, [pc, #52]	; (800a9c0 <PSV_Initial_Flags_SET+0x44>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	701a      	strb	r2, [r3, #0]
	GRAPH_VALUES.Maximum_oxygen_flow       = RESET;             //new O2
 800a990:	4b0c      	ldr	r3, [pc, #48]	; (800a9c4 <PSV_Initial_Flags_SET+0x48>)
 800a992:	2200      	movs	r2, #0
 800a994:	829a      	strh	r2, [r3, #20]
	Check_O2_Supply_Alert_Count_in_Apnea   = RESET;             //new O2
 800a996:	4b0c      	ldr	r3, [pc, #48]	; (800a9c8 <PSV_Initial_Flags_SET+0x4c>)
 800a998:	2200      	movs	r2, #0
 800a99a:	801a      	strh	r2, [r3, #0]
	if(Vent_Type == MASK_MODE)
 800a99c:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <PSV_Initial_Flags_SET+0x50>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d102      	bne.n	800a9aa <PSV_Initial_Flags_SET+0x2e>
	{
		PSV_Mask_Mode_initial_flags_sets();
 800a9a4:	f000 fe2a 	bl	800b5fc <PSV_Mask_Mode_initial_flags_sets>
	}
	else if(Vent_Type == ET_TUBE_MODE)
	{
		PSV_ET_TUBE_Mode_initial_flags_sets();
	}
}
 800a9a8:	e005      	b.n	800a9b6 <PSV_Initial_Flags_SET+0x3a>
	else if(Vent_Type == ET_TUBE_MODE)
 800a9aa:	4b08      	ldr	r3, [pc, #32]	; (800a9cc <PSV_Initial_Flags_SET+0x50>)
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <PSV_Initial_Flags_SET+0x3a>
		PSV_ET_TUBE_Mode_initial_flags_sets();
 800a9b2:	f000 ff41 	bl	800b838 <PSV_ET_TUBE_Mode_initial_flags_sets>
}
 800a9b6:	bf00      	nop
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	2000001c 	.word	0x2000001c
 800a9c0:	2001280d 	.word	0x2001280d
 800a9c4:	200125f8 	.word	0x200125f8
 800a9c8:	20012b66 	.word	0x20012b66
 800a9cc:	200129f4 	.word	0x200129f4

0800a9d0 <CPAP_Initial_Flags_SET>:
/**
 * \brief CPAP_Initial_Flags_SET.
 * This function resets flags for CPAP mode and also starts CPAP mode.
 * */
void CPAP_Initial_Flags_SET()
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
	controlsys_Init(&Parker_valve_tune);          //parker
 800a9d4:	4883      	ldr	r0, [pc, #524]	; (800abe4 <CPAP_Initial_Flags_SET+0x214>)
 800a9d6:	f005 fd3f 	bl	8010458 <controlsys_Init>
	Apnea_Mode                             = ON;
 800a9da:	4b83      	ldr	r3, [pc, #524]	; (800abe8 <CPAP_Initial_Flags_SET+0x218>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	701a      	strb	r2, [r3, #0]
	Reset_Flow_Offset();
 800a9e0:	f001 f86a 	bl	800bab8 <Reset_Flow_Offset>
	CPAP_Average.CPAP_O2_Event_Count       = RESET;
 800a9e4:	4b81      	ldr	r3, [pc, #516]	; (800abec <CPAP_Initial_Flags_SET+0x21c>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	609a      	str	r2, [r3, #8]
	Cpap_Flow_Cummulative_val              = RESET;
 800a9ea:	4981      	ldr	r1, [pc, #516]	; (800abf0 <CPAP_Initial_Flags_SET+0x220>)
 800a9ec:	f04f 0200 	mov.w	r2, #0
 800a9f0:	f04f 0300 	mov.w	r3, #0
 800a9f4:	e9c1 2300 	strd	r2, r3, [r1]
	Flow_Sensor_Count                      = RESET;
 800a9f8:	4b7e      	ldr	r3, [pc, #504]	; (800abf4 <CPAP_Initial_Flags_SET+0x224>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	601a      	str	r2, [r3, #0]

	GRAPH_VALUES.Maximum_oxygen_flow       = RESET;             //new O2
 800a9fe:	4b7e      	ldr	r3, [pc, #504]	; (800abf8 <CPAP_Initial_Flags_SET+0x228>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	829a      	strh	r2, [r3, #20]
	Check_O2_Supply_Alert_Count_in_Apnea   = RESET;             //new O2
 800aa04:	4b7d      	ldr	r3, [pc, #500]	; (800abfc <CPAP_Initial_Flags_SET+0x22c>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	801a      	strh	r2, [r3, #0]

	ExpValve_OPEN();
 800aa0a:	4b7d      	ldr	r3, [pc, #500]	; (800ac00 <CPAP_Initial_Flags_SET+0x230>)
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	4a7c      	ldr	r2, [pc, #496]	; (800ac00 <CPAP_Initial_Flags_SET+0x230>)
 800aa10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa14:	6153      	str	r3, [r2, #20]
	APRV_current_breathe                   = APRV_IDLE;
 800aa16:	4b7b      	ldr	r3, [pc, #492]	; (800ac04 <CPAP_Initial_Flags_SET+0x234>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                      = APRV_Idle;
 800aa1c:	4b7a      	ldr	r3, [pc, #488]	; (800ac08 <CPAP_Initial_Flags_SET+0x238>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	701a      	strb	r2, [r3, #0]
	CPAP_Control.CPAP_Settle_Time          = 3000;
 800aa22:	4b7a      	ldr	r3, [pc, #488]	; (800ac0c <CPAP_Initial_Flags_SET+0x23c>)
 800aa24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800aa28:	601a      	str	r2, [r3, #0]
	Common_Mode_Parameter.TOLERANCE_EWAVE  = CPAP.TOLERANCE_EWAVE;
 800aa2a:	4b79      	ldr	r3, [pc, #484]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aa2c:	899a      	ldrh	r2, [r3, #12]
 800aa2e:	4b79      	ldr	r3, [pc, #484]	; (800ac14 <CPAP_Initial_Flags_SET+0x244>)
 800aa30:	811a      	strh	r2, [r3, #8]
	Common_Mode_Parameter.TRIG_WINDOW      = CPAP.TRIG_WINDOW;
 800aa32:	4b77      	ldr	r3, [pc, #476]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aa34:	89da      	ldrh	r2, [r3, #14]
 800aa36:	4b77      	ldr	r3, [pc, #476]	; (800ac14 <CPAP_Initial_Flags_SET+0x244>)
 800aa38:	815a      	strh	r2, [r3, #10]
	Common_Mode_Parameter.TRIG_LMT         = CPAP.TRIG_LMT;
 800aa3a:	4b75      	ldr	r3, [pc, #468]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aa3c:	edd3 7a01 	vldr	s15, [r3, #4]
 800aa40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa44:	ee17 3a90 	vmov	r3, s15
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	4b72      	ldr	r3, [pc, #456]	; (800ac14 <CPAP_Initial_Flags_SET+0x244>)
 800aa4c:	819a      	strh	r2, [r3, #12]
	//Common_Mode_Parameter.TRIG_TIME        = CPAP.TRIG_TIME;
	Patient_Trigger_Count                  = 0;
 800aa4e:	4b72      	ldr	r3, [pc, #456]	; (800ac18 <CPAP_Initial_Flags_SET+0x248>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	601a      	str	r2, [r3, #0]
	Adjust_O2_DAC_AS_PER_FLOW_RATE_Count   = 0;
 800aa54:	4b71      	ldr	r3, [pc, #452]	; (800ac1c <CPAP_Initial_Flags_SET+0x24c>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	701a      	strb	r2, [r3, #0]

	if(CPAP.CPAP_O2_Val > 21)
 800aa5a:	4b6d      	ldr	r3, [pc, #436]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	2b15      	cmp	r3, #21
 800aa60:	dd39      	ble.n	800aad6 <CPAP_Initial_Flags_SET+0x106>
	{
			if( (CPAP.CPAP_O2_Val == 100) && (CPAP.CPAP_Val >=25) )
 800aa62:	4b6b      	ldr	r3, [pc, #428]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	2b64      	cmp	r3, #100	; 0x64
 800aa68:	d11c      	bne.n	800aaa4 <CPAP_Initial_Flags_SET+0xd4>
 800aa6a:	4b69      	ldr	r3, [pc, #420]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2b18      	cmp	r3, #24
 800aa70:	d918      	bls.n	800aaa4 <CPAP_Initial_Flags_SET+0xd4>
			{
				CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL           = APNEA_DAC_VAL(CPAP.CPAP_Val );
 800aa72:	4b67      	ldr	r3, [pc, #412]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fe fe8c 	bl	8009794 <APNEA_DAC_VAL>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	461a      	mov	r2, r3
 800aa80:	4b67      	ldr	r3, [pc, #412]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aa82:	805a      	strh	r2, [r3, #2]
				CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL           = (CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL - 400);
 800aa84:	4b66      	ldr	r3, [pc, #408]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aa86:	885b      	ldrh	r3, [r3, #2]
 800aa88:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	4b64      	ldr	r3, [pc, #400]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aa90:	805a      	strh	r2, [r3, #2]
				CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL      = CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL;
 800aa92:	4b63      	ldr	r3, [pc, #396]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aa94:	885a      	ldrh	r2, [r3, #2]
 800aa96:	4b62      	ldr	r3, [pc, #392]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aa98:	809a      	strh	r2, [r3, #4]
				CPAP_Average.CPAP_AVG_VAL                              = CPAP.CPAP_Val;
 800aa9a:	4b5d      	ldr	r3, [pc, #372]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aa9c:	781a      	ldrb	r2, [r3, #0]
 800aa9e:	4b53      	ldr	r3, [pc, #332]	; (800abec <CPAP_Initial_Flags_SET+0x21c>)
 800aaa0:	731a      	strb	r2, [r3, #12]
 800aaa2:	e032      	b.n	800ab0a <CPAP_Initial_Flags_SET+0x13a>
			}
			else
			{
				CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL           = APNEA_DAC_VAL(CPAP.CPAP_Val );
 800aaa4:	4b5a      	ldr	r3, [pc, #360]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe fe73 	bl	8009794 <APNEA_DAC_VAL>
 800aaae:	4603      	mov	r3, r0
 800aab0:	461a      	mov	r2, r3
 800aab2:	4b5b      	ldr	r3, [pc, #364]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aab4:	805a      	strh	r2, [r3, #2]
				CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL      = CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL;
 800aab6:	4b5a      	ldr	r3, [pc, #360]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aab8:	885a      	ldrh	r2, [r3, #2]
 800aaba:	4b59      	ldr	r3, [pc, #356]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aabc:	809a      	strh	r2, [r3, #4]
				CPAP_Average.CPAP_AVG_VAL                              = CPAP.CPAP_Val;
 800aabe:	4b54      	ldr	r3, [pc, #336]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aac0:	781a      	ldrb	r2, [r3, #0]
 800aac2:	4b4a      	ldr	r3, [pc, #296]	; (800abec <CPAP_Initial_Flags_SET+0x21c>)
 800aac4:	731a      	strb	r2, [r3, #12]
				Oxygen_Parameter.CPAP_O2_DAC                           = 0;
 800aac6:	4b57      	ldr	r3, [pc, #348]	; (800ac24 <CPAP_Initial_Flags_SET+0x254>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	611a      	str	r2, [r3, #16]
				Parkar_valve_Signal(Oxygen_Parameter.CPAP_O2_DAC);
 800aacc:	4b55      	ldr	r3, [pc, #340]	; (800ac24 <CPAP_Initial_Flags_SET+0x254>)
 800aace:	691a      	ldr	r2, [r3, #16]
 800aad0:	4b55      	ldr	r3, [pc, #340]	; (800ac28 <CPAP_Initial_Flags_SET+0x258>)
 800aad2:	615a      	str	r2, [r3, #20]
 800aad4:	e019      	b.n	800ab0a <CPAP_Initial_Flags_SET+0x13a>
			}

	}
	else
	{
		CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL           = APNEA_DAC_VAL(CPAP.CPAP_Val );
 800aad6:	4b4e      	ldr	r3, [pc, #312]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fe fe5a 	bl	8009794 <APNEA_DAC_VAL>
 800aae0:	4603      	mov	r3, r0
 800aae2:	461a      	mov	r2, r3
 800aae4:	4b4e      	ldr	r3, [pc, #312]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aae6:	805a      	strh	r2, [r3, #2]
		CPAP_Mode_Blower_control.LAST_CPAP_BLOWER_DAC_VAL      = CPAP_Mode_Blower_control.CPAP_BLOWER_DAC_VAL;
 800aae8:	4b4d      	ldr	r3, [pc, #308]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aaea:	885a      	ldrh	r2, [r3, #2]
 800aaec:	4b4c      	ldr	r3, [pc, #304]	; (800ac20 <CPAP_Initial_Flags_SET+0x250>)
 800aaee:	809a      	strh	r2, [r3, #4]
		CPAP_Average.CPAP_AVG_VAL                              = CPAP.CPAP_Val;
 800aaf0:	4b47      	ldr	r3, [pc, #284]	; (800ac10 <CPAP_Initial_Flags_SET+0x240>)
 800aaf2:	781a      	ldrb	r2, [r3, #0]
 800aaf4:	4b3d      	ldr	r3, [pc, #244]	; (800abec <CPAP_Initial_Flags_SET+0x21c>)
 800aaf6:	731a      	strb	r2, [r3, #12]
		Valve_Condition                                        = OPEN;
 800aaf8:	4b4c      	ldr	r3, [pc, #304]	; (800ac2c <CPAP_Initial_Flags_SET+0x25c>)
 800aafa:	2201      	movs	r2, #1
 800aafc:	701a      	strb	r2, [r3, #0]
		Oxygen_Parameter.Achieved_Oxygen                       = 21;
 800aafe:	4b49      	ldr	r3, [pc, #292]	; (800ac24 <CPAP_Initial_Flags_SET+0x254>)
 800ab00:	2215      	movs	r2, #21
 800ab02:	721a      	strb	r2, [r3, #8]
	    Parkar_valve_Signal(0);
 800ab04:	4b48      	ldr	r3, [pc, #288]	; (800ac28 <CPAP_Initial_Flags_SET+0x258>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	615a      	str	r2, [r3, #20]
	}



	vTaskSuspend(Pc_Cmv_Handler);
 800ab0a:	4b49      	ldr	r3, [pc, #292]	; (800ac30 <CPAP_Initial_Flags_SET+0x260>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f010 fad0 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800ab14:	4b47      	ldr	r3, [pc, #284]	; (800ac34 <CPAP_Initial_Flags_SET+0x264>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f010 facb 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800ab1e:	4b46      	ldr	r3, [pc, #280]	; (800ac38 <CPAP_Initial_Flags_SET+0x268>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f010 fac6 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800ab28:	4b44      	ldr	r3, [pc, #272]	; (800ac3c <CPAP_Initial_Flags_SET+0x26c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f010 fac1 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800ab32:	4b43      	ldr	r3, [pc, #268]	; (800ac40 <CPAP_Initial_Flags_SET+0x270>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f010 fabc 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800ab3c:	4b41      	ldr	r3, [pc, #260]	; (800ac44 <CPAP_Initial_Flags_SET+0x274>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f010 fab7 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800ab46:	4b40      	ldr	r3, [pc, #256]	; (800ac48 <CPAP_Initial_Flags_SET+0x278>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f010 fab2 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800ab50:	4b3e      	ldr	r3, [pc, #248]	; (800ac4c <CPAP_Initial_Flags_SET+0x27c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f010 faad 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800ab5a:	4b3d      	ldr	r3, [pc, #244]	; (800ac50 <CPAP_Initial_Flags_SET+0x280>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f010 faa8 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800ab64:	4b3b      	ldr	r3, [pc, #236]	; (800ac54 <CPAP_Initial_Flags_SET+0x284>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f010 faa3 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800ab6e:	4b3a      	ldr	r3, [pc, #232]	; (800ac58 <CPAP_Initial_Flags_SET+0x288>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f010 fa9e 	bl	801b0b4 <vTaskSuspend>

	vTaskSuspend(PSV_Handler);
 800ab78:	4b38      	ldr	r3, [pc, #224]	; (800ac5c <CPAP_Initial_Flags_SET+0x28c>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f010 fa99 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800ab82:	4b37      	ldr	r3, [pc, #220]	; (800ac60 <CPAP_Initial_Flags_SET+0x290>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4618      	mov	r0, r3
 800ab88:	f010 fa94 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800ab8c:	4b35      	ldr	r3, [pc, #212]	; (800ac64 <CPAP_Initial_Flags_SET+0x294>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f010 fa8f 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800ab96:	4b34      	ldr	r3, [pc, #208]	; (800ac68 <CPAP_Initial_Flags_SET+0x298>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f010 fa8a 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800aba0:	4b32      	ldr	r3, [pc, #200]	; (800ac6c <CPAP_Initial_Flags_SET+0x29c>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f010 fa85 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800abaa:	4b31      	ldr	r3, [pc, #196]	; (800ac70 <CPAP_Initial_Flags_SET+0x2a0>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4618      	mov	r0, r3
 800abb0:	f010 fa80 	bl	801b0b4 <vTaskSuspend>

	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800abb4:	f000 fd06 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	Blower_Signal(0);
 800abb8:	4b1b      	ldr	r3, [pc, #108]	; (800ac28 <CPAP_Initial_Flags_SET+0x258>)
 800abba:	2200      	movs	r2, #0
 800abbc:	609a      	str	r2, [r3, #8]

	vTaskResume(CPAP_Handler);
 800abbe:	4b2d      	ldr	r3, [pc, #180]	; (800ac74 <CPAP_Initial_Flags_SET+0x2a4>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f010 fb3a 	bl	801b23c <vTaskResume>
	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800abc8:	4b2b      	ldr	r3, [pc, #172]	; (800ac78 <CPAP_Initial_Flags_SET+0x2a8>)
 800abca:	2200      	movs	r2, #0
 800abcc:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set           = CLOSE;
 800abce:	4b2b      	ldr	r3, [pc, #172]	; (800ac7c <CPAP_Initial_Flags_SET+0x2ac>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800abd4:	4b2a      	ldr	r3, [pc, #168]	; (800ac80 <CPAP_Initial_Flags_SET+0x2b0>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4618      	mov	r0, r3
 800abda:	f010 fa6b 	bl	801b0b4 <vTaskSuspend>
}
 800abde:	bf00      	nop
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	2000001c 	.word	0x2000001c
 800abe8:	20012aa1 	.word	0x20012aa1
 800abec:	20012880 	.word	0x20012880
 800abf0:	20012ac0 	.word	0x20012ac0
 800abf4:	20012a04 	.word	0x20012a04
 800abf8:	200125f8 	.word	0x200125f8
 800abfc:	20012b66 	.word	0x20012b66
 800ac00:	40020400 	.word	0x40020400
 800ac04:	2001263c 	.word	0x2001263c
 800ac08:	20012a10 	.word	0x20012a10
 800ac0c:	20012628 	.word	0x20012628
 800ac10:	200123e0 	.word	0x200123e0
 800ac14:	200124f0 	.word	0x200124f0
 800ac18:	20012a0c 	.word	0x20012a0c
 800ac1c:	20012ab8 	.word	0x20012ab8
 800ac20:	20012350 	.word	0x20012350
 800ac24:	200129d4 	.word	0x200129d4
 800ac28:	40007400 	.word	0x40007400
 800ac2c:	200000a8 	.word	0x200000a8
 800ac30:	20012874 	.word	0x20012874
 800ac34:	200124ec 	.word	0x200124ec
 800ac38:	20012c68 	.word	0x20012c68
 800ac3c:	20012248 	.word	0x20012248
 800ac40:	20012638 	.word	0x20012638
 800ac44:	20012cb4 	.word	0x20012cb4
 800ac48:	20012c50 	.word	0x20012c50
 800ac4c:	20012824 	.word	0x20012824
 800ac50:	20012968 	.word	0x20012968
 800ac54:	200129cc 	.word	0x200129cc
 800ac58:	20012500 	.word	0x20012500
 800ac5c:	200128a8 	.word	0x200128a8
 800ac60:	200127a8 	.word	0x200127a8
 800ac64:	20012364 	.word	0x20012364
 800ac68:	20012b04 	.word	0x20012b04
 800ac6c:	20012810 	.word	0x20012810
 800ac70:	20012a84 	.word	0x20012a84
 800ac74:	20012d38 	.word	0x20012d38
 800ac78:	20012829 	.word	0x20012829
 800ac7c:	20012cb1 	.word	0x20012cb1
 800ac80:	200129ac 	.word	0x200129ac

0800ac84 <BIBAP_Initial_Flags_SET>:
/**
 * \brief BIBAP_Initial_Flags_SET.
 * This function resets flags for BIPAP mode and also starts BIPAP mode.
 * */
void BIBAP_Initial_Flags_SET()
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	af00      	add	r7, sp, #0
	controlsys_Init(&Parker_valve_tune);          //parker
 800ac88:	486c      	ldr	r0, [pc, #432]	; (800ae3c <BIBAP_Initial_Flags_SET+0x1b8>)
 800ac8a:	f005 fbe5 	bl	8010458 <controlsys_Init>
	BIPAP_Peep_Average.BIPAP_O2_Event_Count = 0;
 800ac8e:	4b6c      	ldr	r3, [pc, #432]	; (800ae40 <BIBAP_Initial_Flags_SET+0x1bc>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	60da      	str	r2, [r3, #12]
	O2_Control_Bipap                        = 0;    //new
 800ac94:	4b6b      	ldr	r3, [pc, #428]	; (800ae44 <BIBAP_Initial_Flags_SET+0x1c0>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	701a      	strb	r2, [r3, #0]
	GRAPH_VALUES.Maximum_oxygen_flow       = RESET;             //new O2
 800ac9a:	4b6b      	ldr	r3, [pc, #428]	; (800ae48 <BIBAP_Initial_Flags_SET+0x1c4>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	829a      	strh	r2, [r3, #20]
	Check_O2_Supply_Alert_Count_in_Apnea   = RESET;             //new O2
 800aca0:	4b6a      	ldr	r3, [pc, #424]	; (800ae4c <BIBAP_Initial_Flags_SET+0x1c8>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	801a      	strh	r2, [r3, #0]
	Apnea_Mode                              = ON;
 800aca6:	4b6a      	ldr	r3, [pc, #424]	; (800ae50 <BIBAP_Initial_Flags_SET+0x1cc>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	701a      	strb	r2, [r3, #0]
	Reset_Flow_Offset();
 800acac:	f000 ff04 	bl	800bab8 <Reset_Flow_Offset>
	ExpValve_OPEN();
 800acb0:	4b68      	ldr	r3, [pc, #416]	; (800ae54 <BIBAP_Initial_Flags_SET+0x1d0>)
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	4a67      	ldr	r2, [pc, #412]	; (800ae54 <BIBAP_Initial_Flags_SET+0x1d0>)
 800acb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acba:	6153      	str	r3, [r2, #20]
	Wait_Time                              = 1000;
 800acbc:	4b66      	ldr	r3, [pc, #408]	; (800ae58 <BIBAP_Initial_Flags_SET+0x1d4>)
 800acbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800acc2:	601a      	str	r2, [r3, #0]
	APRV_current_breathe                   = APRV_IDLE;
 800acc4:	4b65      	ldr	r3, [pc, #404]	; (800ae5c <BIBAP_Initial_Flags_SET+0x1d8>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                      = APRV_Idle;
 800acca:	4b65      	ldr	r3, [pc, #404]	; (800ae60 <BIBAP_Initial_Flags_SET+0x1dc>)
 800accc:	2200      	movs	r2, #0
 800acce:	701a      	strb	r2, [r3, #0]
	BIPAP_Control.BIPAP_EPAP_Settle_Time   = 2000;
 800acd0:	4b64      	ldr	r3, [pc, #400]	; (800ae64 <BIBAP_Initial_Flags_SET+0x1e0>)
 800acd2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800acd6:	601a      	str	r2, [r3, #0]
	Common_Mode_Parameter.TOLERANCE_EWAVE  = BIPAP.TOLERANCE_EWAVE;
 800acd8:	4b63      	ldr	r3, [pc, #396]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800acda:	8a1a      	ldrh	r2, [r3, #16]
 800acdc:	4b63      	ldr	r3, [pc, #396]	; (800ae6c <BIBAP_Initial_Flags_SET+0x1e8>)
 800acde:	811a      	strh	r2, [r3, #8]
	Common_Mode_Parameter.TRIG_WINDOW      = BIPAP.TRIG_WINDOW;
 800ace0:	4b61      	ldr	r3, [pc, #388]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800ace2:	8a5a      	ldrh	r2, [r3, #18]
 800ace4:	4b61      	ldr	r3, [pc, #388]	; (800ae6c <BIBAP_Initial_Flags_SET+0x1e8>)
 800ace6:	815a      	strh	r2, [r3, #10]
	Common_Mode_Parameter.TRIG_LMT         = BIPAP.TRIG_LMT;
 800ace8:	4b5f      	ldr	r3, [pc, #380]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800acea:	edd3 7a02 	vldr	s15, [r3, #8]
 800acee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acf2:	ee17 3a90 	vmov	r3, s15
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	4b5c      	ldr	r3, [pc, #368]	; (800ae6c <BIBAP_Initial_Flags_SET+0x1e8>)
 800acfa:	819a      	strh	r2, [r3, #12]
	//Common_Mode_Parameter.TRIG_TIME        = BIPAP.TRIG_TIME;
	BIPAP.EPAP_COUNTER                     = BIPAP.EPAP_TIME;
 800acfc:	4b5a      	ldr	r3, [pc, #360]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800acfe:	6a1b      	ldr	r3, [r3, #32]
 800ad00:	4a59      	ldr	r2, [pc, #356]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800ad02:	62d3      	str	r3, [r2, #44]	; 0x2c
	BIPAP_Control.Trigger_Check_Wait_Time = 500+ BIPAP.TRIG_TIME ;
 800ad04:	4b58      	ldr	r3, [pc, #352]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800ad06:	899b      	ldrh	r3, [r3, #12]
 800ad08:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ad0c:	4a55      	ldr	r2, [pc, #340]	; (800ae64 <BIBAP_Initial_Flags_SET+0x1e0>)
 800ad0e:	6093      	str	r3, [r2, #8]

	if(BIPAP.BIPAP_O2_Val > 21)
 800ad10:	4b55      	ldr	r3, [pc, #340]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800ad12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad14:	2b15      	cmp	r3, #21
 800ad16:	dd03      	ble.n	800ad20 <BIBAP_Initial_Flags_SET+0x9c>
	{
		onetime                             = 1;
 800ad18:	4b55      	ldr	r3, [pc, #340]	; (800ae70 <BIBAP_Initial_Flags_SET+0x1ec>)
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	701a      	strb	r2, [r3, #0]
 800ad1e:	e005      	b.n	800ad2c <BIBAP_Initial_Flags_SET+0xa8>
	}
	else
	{
		Oxygen_Parameter.Achieved_Oxygen   = 21;
 800ad20:	4b54      	ldr	r3, [pc, #336]	; (800ae74 <BIBAP_Initial_Flags_SET+0x1f0>)
 800ad22:	2215      	movs	r2, #21
 800ad24:	721a      	strb	r2, [r3, #8]
	    Parkar_valve_Signal(0);
 800ad26:	4b54      	ldr	r3, [pc, #336]	; (800ae78 <BIBAP_Initial_Flags_SET+0x1f4>)
 800ad28:	2200      	movs	r2, #0
 800ad2a:	615a      	str	r2, [r3, #20]
	}
	vTaskSuspend(Pc_Cmv_Handler);
 800ad2c:	4b53      	ldr	r3, [pc, #332]	; (800ae7c <BIBAP_Initial_Flags_SET+0x1f8>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f010 f9bf 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800ad36:	4b52      	ldr	r3, [pc, #328]	; (800ae80 <BIBAP_Initial_Flags_SET+0x1fc>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f010 f9ba 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800ad40:	4b50      	ldr	r3, [pc, #320]	; (800ae84 <BIBAP_Initial_Flags_SET+0x200>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f010 f9b5 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800ad4a:	4b4f      	ldr	r3, [pc, #316]	; (800ae88 <BIBAP_Initial_Flags_SET+0x204>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f010 f9b0 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800ad54:	4b4d      	ldr	r3, [pc, #308]	; (800ae8c <BIBAP_Initial_Flags_SET+0x208>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f010 f9ab 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800ad5e:	4b4c      	ldr	r3, [pc, #304]	; (800ae90 <BIBAP_Initial_Flags_SET+0x20c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f010 f9a6 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800ad68:	4b4a      	ldr	r3, [pc, #296]	; (800ae94 <BIBAP_Initial_Flags_SET+0x210>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f010 f9a1 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800ad72:	4b49      	ldr	r3, [pc, #292]	; (800ae98 <BIBAP_Initial_Flags_SET+0x214>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f010 f99c 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800ad7c:	4b47      	ldr	r3, [pc, #284]	; (800ae9c <BIBAP_Initial_Flags_SET+0x218>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4618      	mov	r0, r3
 800ad82:	f010 f997 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800ad86:	4b46      	ldr	r3, [pc, #280]	; (800aea0 <BIBAP_Initial_Flags_SET+0x21c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f010 f992 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800ad90:	4b44      	ldr	r3, [pc, #272]	; (800aea4 <BIBAP_Initial_Flags_SET+0x220>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f010 f98d 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_Handler);
 800ad9a:	4b43      	ldr	r3, [pc, #268]	; (800aea8 <BIBAP_Initial_Flags_SET+0x224>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f010 f988 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800ada4:	4b41      	ldr	r3, [pc, #260]	; (800aeac <BIBAP_Initial_Flags_SET+0x228>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f010 f983 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800adae:	4b40      	ldr	r3, [pc, #256]	; (800aeb0 <BIBAP_Initial_Flags_SET+0x22c>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f010 f97e 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800adb8:	4b3e      	ldr	r3, [pc, #248]	; (800aeb4 <BIBAP_Initial_Flags_SET+0x230>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f010 f979 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800adc2:	4b3d      	ldr	r3, [pc, #244]	; (800aeb8 <BIBAP_Initial_Flags_SET+0x234>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f010 f974 	bl	801b0b4 <vTaskSuspend>
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL   = APNEA_DAC_VAL(BIPAP.IPAP_Val );
 800adcc:	4b26      	ldr	r3, [pc, #152]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800adce:	881b      	ldrh	r3, [r3, #0]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe fcde 	bl	8009794 <APNEA_DAC_VAL>
 800add8:	4603      	mov	r3, r0
 800adda:	461a      	mov	r2, r3
 800addc:	4b37      	ldr	r3, [pc, #220]	; (800aebc <BIBAP_Initial_Flags_SET+0x238>)
 800adde:	811a      	strh	r2, [r3, #8]
	BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL           = APNEA_DAC_VAL(BIPAP.EPAP_Val );
 800ade0:	4b21      	ldr	r3, [pc, #132]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800ade2:	789b      	ldrb	r3, [r3, #2]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fe fcd5 	bl	8009794 <APNEA_DAC_VAL>
 800adea:	4603      	mov	r3, r0
 800adec:	461a      	mov	r2, r3
 800adee:	4b34      	ldr	r3, [pc, #208]	; (800aec0 <BIBAP_Initial_Flags_SET+0x23c>)
 800adf0:	80da      	strh	r2, [r3, #6]
	BIPAP_Mode_Blower_control.LAST_EPAP_BLOWER_DAC_VAL      = BIPAP_Mode_Blower_control.EPAP_BLOWER_DAC_VAL;
 800adf2:	4b33      	ldr	r3, [pc, #204]	; (800aec0 <BIBAP_Initial_Flags_SET+0x23c>)
 800adf4:	88da      	ldrh	r2, [r3, #6]
 800adf6:	4b32      	ldr	r3, [pc, #200]	; (800aec0 <BIBAP_Initial_Flags_SET+0x23c>)
 800adf8:	811a      	strh	r2, [r3, #8]
	BIPAP_Pip_average.IPAP_AVG_VAL                          = BIPAP.IPAP_Val;
 800adfa:	4b1b      	ldr	r3, [pc, #108]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	4b30      	ldr	r3, [pc, #192]	; (800aec4 <BIBAP_Initial_Flags_SET+0x240>)
 800ae02:	731a      	strb	r2, [r3, #12]
	BIPAP_Peep_Average.EPAP_AVG_VAL                         = BIPAP.EPAP_Val;
 800ae04:	4b18      	ldr	r3, [pc, #96]	; (800ae68 <BIBAP_Initial_Flags_SET+0x1e4>)
 800ae06:	789a      	ldrb	r2, [r3, #2]
 800ae08:	4b0d      	ldr	r3, [pc, #52]	; (800ae40 <BIBAP_Initial_Flags_SET+0x1bc>)
 800ae0a:	721a      	strb	r2, [r3, #8]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800ae0c:	f000 fbda 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	Blower_Signal(0);
 800ae10:	4b19      	ldr	r3, [pc, #100]	; (800ae78 <BIBAP_Initial_Flags_SET+0x1f4>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	609a      	str	r2, [r3, #8]
	vTaskResume(BIPAP_Handler);
 800ae16:	4b2c      	ldr	r3, [pc, #176]	; (800aec8 <BIBAP_Initial_Flags_SET+0x244>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f010 fa0e 	bl	801b23c <vTaskResume>
	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800ae20:	4b2a      	ldr	r3, [pc, #168]	; (800aecc <BIBAP_Initial_Flags_SET+0x248>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set           = CLOSE;
 800ae26:	4b2a      	ldr	r3, [pc, #168]	; (800aed0 <BIBAP_Initial_Flags_SET+0x24c>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800ae2c:	4b29      	ldr	r3, [pc, #164]	; (800aed4 <BIBAP_Initial_Flags_SET+0x250>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f010 f93f 	bl	801b0b4 <vTaskSuspend>
}
 800ae36:	bf00      	nop
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	2000001c 	.word	0x2000001c
 800ae40:	200122bc 	.word	0x200122bc
 800ae44:	200122d8 	.word	0x200122d8
 800ae48:	200125f8 	.word	0x200125f8
 800ae4c:	20012b66 	.word	0x20012b66
 800ae50:	20012aa1 	.word	0x20012aa1
 800ae54:	40020400 	.word	0x40020400
 800ae58:	20012698 	.word	0x20012698
 800ae5c:	2001263c 	.word	0x2001263c
 800ae60:	20012a10 	.word	0x20012a10
 800ae64:	20012990 	.word	0x20012990
 800ae68:	20012484 	.word	0x20012484
 800ae6c:	200124f0 	.word	0x200124f0
 800ae70:	2001269c 	.word	0x2001269c
 800ae74:	200129d4 	.word	0x200129d4
 800ae78:	40007400 	.word	0x40007400
 800ae7c:	20012874 	.word	0x20012874
 800ae80:	200124ec 	.word	0x200124ec
 800ae84:	20012c68 	.word	0x20012c68
 800ae88:	20012248 	.word	0x20012248
 800ae8c:	20012638 	.word	0x20012638
 800ae90:	20012cb4 	.word	0x20012cb4
 800ae94:	20012c50 	.word	0x20012c50
 800ae98:	20012824 	.word	0x20012824
 800ae9c:	20012968 	.word	0x20012968
 800aea0:	200129cc 	.word	0x200129cc
 800aea4:	20012500 	.word	0x20012500
 800aea8:	200128a8 	.word	0x200128a8
 800aeac:	200127a8 	.word	0x200127a8
 800aeb0:	20012d38 	.word	0x20012d38
 800aeb4:	20012810 	.word	0x20012810
 800aeb8:	20012a84 	.word	0x20012a84
 800aebc:	20012978 	.word	0x20012978
 800aec0:	200126a4 	.word	0x200126a4
 800aec4:	20012b08 	.word	0x20012b08
 800aec8:	20012364 	.word	0x20012364
 800aecc:	20012829 	.word	0x20012829
 800aed0:	20012cb1 	.word	0x20012cb1
 800aed4:	200129ac 	.word	0x200129ac

0800aed8 <APRV_Initial_Flags_SET>:
/**
 * \brief APRV_Initial_Flags_SET.
 * This function resets flags for APRV mode and also starts APRV mode.
 * */
void APRV_Initial_Flags_SET()
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
	controlsys_Init(&Parker_valve_tune);          //parker
 800aedc:	4864      	ldr	r0, [pc, #400]	; (800b070 <APRV_Initial_Flags_SET+0x198>)
 800aede:	f005 fabb 	bl	8010458 <controlsys_Init>
	Avg_Flow                                              = 1;
 800aee2:	4b64      	ldr	r3, [pc, #400]	; (800b074 <APRV_Initial_Flags_SET+0x19c>)
 800aee4:	2201      	movs	r2, #1
 800aee6:	801a      	strh	r2, [r3, #0]
	Flow_Count                                            = 0;
 800aee8:	4b63      	ldr	r3, [pc, #396]	; (800b078 <APRV_Initial_Flags_SET+0x1a0>)
 800aeea:	f04f 0200 	mov.w	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]
	Flow_Cummulative_Val                                  = 0;
 800aef0:	4b62      	ldr	r3, [pc, #392]	; (800b07c <APRV_Initial_Flags_SET+0x1a4>)
 800aef2:	f04f 0200 	mov.w	r2, #0
 800aef6:	601a      	str	r2, [r3, #0]
	Check_Oxygen_Count                                    = 0;        //new
 800aef8:	4b61      	ldr	r3, [pc, #388]	; (800b080 <APRV_Initial_Flags_SET+0x1a8>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	701a      	strb	r2, [r3, #0]
	Temp_Dac                                              = 1400;     //new
 800aefe:	4b61      	ldr	r3, [pc, #388]	; (800b084 <APRV_Initial_Flags_SET+0x1ac>)
 800af00:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800af04:	801a      	strh	r2, [r3, #0]
	inc_dac                                               = 2;        //new
 800af06:	4b60      	ldr	r3, [pc, #384]	; (800b088 <APRV_Initial_Flags_SET+0x1b0>)
 800af08:	2202      	movs	r2, #2
 800af0a:	801a      	strh	r2, [r3, #0]
	Oxygen_Blending_Status                                = OXYGEN_NOT_ACHIEVED;  //new
 800af0c:	4b5f      	ldr	r3, [pc, #380]	; (800b08c <APRV_Initial_Flags_SET+0x1b4>)
 800af0e:	2201      	movs	r2, #1
 800af10:	701a      	strb	r2, [r3, #0]
	Reset_Flow_Offset();
 800af12:	f000 fdd1 	bl	800bab8 <Reset_Flow_Offset>
	OLD.last_vent_type                                    = ET_TUBE_MODE;
 800af16:	4b5e      	ldr	r3, [pc, #376]	; (800b090 <APRV_Initial_Flags_SET+0x1b8>)
 800af18:	2200      	movs	r2, #0
 800af1a:	779a      	strb	r2, [r3, #30]
	Maximum_Limit                                         = 6;
 800af1c:	4b5d      	ldr	r3, [pc, #372]	; (800b094 <APRV_Initial_Flags_SET+0x1bc>)
 800af1e:	2206      	movs	r2, #6
 800af20:	701a      	strb	r2, [r3, #0]
	Apnea_Mode                                            = OFF;
 800af22:	4b5d      	ldr	r3, [pc, #372]	; (800b098 <APRV_Initial_Flags_SET+0x1c0>)
 800af24:	2201      	movs	r2, #1
 800af26:	701a      	strb	r2, [r3, #0]
	O2_DAC_AS_PER_FLOW_RATE_Count                         = 0;
 800af28:	4b5c      	ldr	r3, [pc, #368]	; (800b09c <APRV_Initial_Flags_SET+0x1c4>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PIP_Val                        = APRV.P_HIGH;
 800af2e:	4b5c      	ldr	r3, [pc, #368]	; (800b0a0 <APRV_Initial_Flags_SET+0x1c8>)
 800af30:	781a      	ldrb	r2, [r3, #0]
 800af32:	4b5c      	ldr	r3, [pc, #368]	; (800b0a4 <APRV_Initial_Flags_SET+0x1cc>)
 800af34:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = APRV.P_LOW;
 800af36:	4b5a      	ldr	r3, [pc, #360]	; (800b0a0 <APRV_Initial_Flags_SET+0x1c8>)
 800af38:	785a      	ldrb	r2, [r3, #1]
 800af3a:	4b5a      	ldr	r3, [pc, #360]	; (800b0a4 <APRV_Initial_Flags_SET+0x1cc>)
 800af3c:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._FIO2_Val                       = APRV.FIO2_VAL;
 800af3e:	4b58      	ldr	r3, [pc, #352]	; (800b0a0 <APRV_Initial_Flags_SET+0x1c8>)
 800af40:	7d1a      	ldrb	r2, [r3, #20]
 800af42:	4b58      	ldr	r3, [pc, #352]	; (800b0a4 <APRV_Initial_Flags_SET+0x1cc>)
 800af44:	70da      	strb	r2, [r3, #3]
	vTaskSuspend(Pc_Cmv_Handler);
 800af46:	4b58      	ldr	r3, [pc, #352]	; (800b0a8 <APRV_Initial_Flags_SET+0x1d0>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f010 f8b2 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800af50:	4b56      	ldr	r3, [pc, #344]	; (800b0ac <APRV_Initial_Flags_SET+0x1d4>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4618      	mov	r0, r3
 800af56:	f010 f8ad 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800af5a:	4b55      	ldr	r3, [pc, #340]	; (800b0b0 <APRV_Initial_Flags_SET+0x1d8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4618      	mov	r0, r3
 800af60:	f010 f8a8 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800af64:	4b53      	ldr	r3, [pc, #332]	; (800b0b4 <APRV_Initial_Flags_SET+0x1dc>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4618      	mov	r0, r3
 800af6a:	f010 f8a3 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800af6e:	4b52      	ldr	r3, [pc, #328]	; (800b0b8 <APRV_Initial_Flags_SET+0x1e0>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4618      	mov	r0, r3
 800af74:	f010 f89e 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800af78:	4b50      	ldr	r3, [pc, #320]	; (800b0bc <APRV_Initial_Flags_SET+0x1e4>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f010 f899 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800af82:	4b4f      	ldr	r3, [pc, #316]	; (800b0c0 <APRV_Initial_Flags_SET+0x1e8>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4618      	mov	r0, r3
 800af88:	f010 f894 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800af8c:	4b4d      	ldr	r3, [pc, #308]	; (800b0c4 <APRV_Initial_Flags_SET+0x1ec>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4618      	mov	r0, r3
 800af92:	f010 f88f 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800af96:	4b4c      	ldr	r3, [pc, #304]	; (800b0c8 <APRV_Initial_Flags_SET+0x1f0>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f010 f88a 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800afa0:	4b4a      	ldr	r3, [pc, #296]	; (800b0cc <APRV_Initial_Flags_SET+0x1f4>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f010 f885 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800afaa:	4b49      	ldr	r3, [pc, #292]	; (800b0d0 <APRV_Initial_Flags_SET+0x1f8>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4618      	mov	r0, r3
 800afb0:	f010 f880 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_Handler);
 800afb4:	4b47      	ldr	r3, [pc, #284]	; (800b0d4 <APRV_Initial_Flags_SET+0x1fc>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4618      	mov	r0, r3
 800afba:	f010 f87b 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 800afbe:	4b46      	ldr	r3, [pc, #280]	; (800b0d8 <APRV_Initial_Flags_SET+0x200>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f010 f876 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800afc8:	4b44      	ldr	r3, [pc, #272]	; (800b0dc <APRV_Initial_Flags_SET+0x204>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4618      	mov	r0, r3
 800afce:	f010 f871 	bl	801b0b4 <vTaskSuspend>
	APRV_PIP_average.PIP_Cumulative_Val                 = 1;
 800afd2:	4b43      	ldr	r3, [pc, #268]	; (800b0e0 <APRV_Initial_Flags_SET+0x208>)
 800afd4:	2201      	movs	r2, #1
 800afd6:	601a      	str	r2, [r3, #0]
	APRV_PIP_average.PIP_Event_Count                    = 1;
 800afd8:	4b41      	ldr	r3, [pc, #260]	; (800b0e0 <APRV_Initial_Flags_SET+0x208>)
 800afda:	2201      	movs	r2, #1
 800afdc:	605a      	str	r2, [r3, #4]
	APRV_PEEP_average.PEEP_Cumulative_Val               = 1;
 800afde:	4b41      	ldr	r3, [pc, #260]	; (800b0e4 <APRV_Initial_Flags_SET+0x20c>)
 800afe0:	2201      	movs	r2, #1
 800afe2:	601a      	str	r2, [r3, #0]
	APRV_PEEP_average.PEEP_Event_Count                  = 1;
 800afe4:	4b3f      	ldr	r3, [pc, #252]	; (800b0e4 <APRV_Initial_Flags_SET+0x20c>)
 800afe6:	2201      	movs	r2, #1
 800afe8:	605a      	str	r2, [r3, #4]
	APRV_Next_Breathe                                   = APRV_EXPIRATION;
 800afea:	4b3f      	ldr	r3, [pc, #252]	; (800b0e8 <APRV_Initial_Flags_SET+0x210>)
 800afec:	2202      	movs	r2, #2
 800afee:	701a      	strb	r2, [r3, #0]
	APRV_current_breathe                                = APRV_EXP;
 800aff0:	4b3e      	ldr	r3, [pc, #248]	; (800b0ec <APRV_Initial_Flags_SET+0x214>)
 800aff2:	2202      	movs	r2, #2
 800aff4:	701a      	strb	r2, [r3, #0]
	APRV.T_LOW_VAL_COUNTER                              = APRV.T_LOW_VAL;
 800aff6:	4b2a      	ldr	r3, [pc, #168]	; (800b0a0 <APRV_Initial_Flags_SET+0x1c8>)
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	4a29      	ldr	r2, [pc, #164]	; (800b0a0 <APRV_Initial_Flags_SET+0x1c8>)
 800affc:	60d3      	str	r3, [r2, #12]
	PEEP_Maintain_Parameter.PEEP_Temp                   = APRV.P_LOW;
 800affe:	4b28      	ldr	r3, [pc, #160]	; (800b0a0 <APRV_Initial_Flags_SET+0x1c8>)
 800b000:	785b      	ldrb	r3, [r3, #1]
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00a:	4b39      	ldr	r3, [pc, #228]	; (800b0f0 <APRV_Initial_Flags_SET+0x218>)
 800b00c:	edc3 7a00 	vstr	s15, [r3]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  =1;
 800b010:	4b37      	ldr	r3, [pc, #220]	; (800b0f0 <APRV_Initial_Flags_SET+0x218>)
 800b012:	2201      	movs	r2, #1
 800b014:	809a      	strh	r2, [r3, #4]
	APRV_mode_blower_control.BLOWER_DAC_VAL = DAC_VAL(APRV.P_HIGH );
 800b016:	4b22      	ldr	r3, [pc, #136]	; (800b0a0 <APRV_Initial_Flags_SET+0x1c8>)
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fd fff6 	bl	800900c <DAC_VAL>
 800b020:	4603      	mov	r3, r0
 800b022:	461a      	mov	r2, r3
 800b024:	4b33      	ldr	r3, [pc, #204]	; (800b0f4 <APRV_Initial_Flags_SET+0x21c>)
 800b026:	801a      	strh	r2, [r3, #0]
	Alert_Flags_Reset();
 800b028:	f7f6 f83a 	bl	80010a0 <Alert_Flags_Reset>
	Fio2_Blending_Method  = PRESSURE_CONTROLLED;
 800b02c:	4b32      	ldr	r3, [pc, #200]	; (800b0f8 <APRV_Initial_Flags_SET+0x220>)
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
	O2_Initial_Parameter(APRV.FIO2_VAL,Dummy);
 800b032:	4b1b      	ldr	r3, [pc, #108]	; (800b0a0 <APRV_Initial_Flags_SET+0x1c8>)
 800b034:	7d1b      	ldrb	r3, [r3, #20]
 800b036:	4a31      	ldr	r2, [pc, #196]	; (800b0fc <APRV_Initial_Flags_SET+0x224>)
 800b038:	7812      	ldrb	r2, [r2, #0]
 800b03a:	4611      	mov	r1, r2
 800b03c:	4618      	mov	r0, r3
 800b03e:	f001 fa7b 	bl	800c538 <O2_Initial_Parameter>
	vTaskResume(APRV_ONE_TIME_Handler);
 800b042:	4b2f      	ldr	r3, [pc, #188]	; (800b100 <APRV_Initial_Flags_SET+0x228>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4618      	mov	r0, r3
 800b048:	f010 f8f8 	bl	801b23c <vTaskResume>
	vTaskResume(APRV_Handler);
 800b04c:	4b2d      	ldr	r3, [pc, #180]	; (800b104 <APRV_Initial_Flags_SET+0x22c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4618      	mov	r0, r3
 800b052:	f010 f8f3 	bl	801b23c <vTaskResume>
	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800b056:	4b2c      	ldr	r3, [pc, #176]	; (800b108 <APRV_Initial_Flags_SET+0x230>)
 800b058:	2200      	movs	r2, #0
 800b05a:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set           = CLOSE;
 800b05c:	4b2b      	ldr	r3, [pc, #172]	; (800b10c <APRV_Initial_Flags_SET+0x234>)
 800b05e:	2200      	movs	r2, #0
 800b060:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800b062:	4b2b      	ldr	r3, [pc, #172]	; (800b110 <APRV_Initial_Flags_SET+0x238>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4618      	mov	r0, r3
 800b068:	f010 f824 	bl	801b0b4 <vTaskSuspend>
}
 800b06c:	bf00      	nop
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	2000001c 	.word	0x2000001c
 800b074:	2001283c 	.word	0x2001283c
 800b078:	200128a0 	.word	0x200128a0
 800b07c:	200122f8 	.word	0x200122f8
 800b080:	20012a0a 	.word	0x20012a0a
 800b084:	20012474 	.word	0x20012474
 800b088:	200123ce 	.word	0x200123ce
 800b08c:	20012b71 	.word	0x20012b71
 800b090:	20012c08 	.word	0x20012c08
 800b094:	20012a35 	.word	0x20012a35
 800b098:	20012aa1 	.word	0x20012aa1
 800b09c:	20012a3b 	.word	0x20012a3b
 800b0a0:	20012a14 	.word	0x20012a14
 800b0a4:	200124f0 	.word	0x200124f0
 800b0a8:	20012874 	.word	0x20012874
 800b0ac:	200124ec 	.word	0x200124ec
 800b0b0:	20012c68 	.word	0x20012c68
 800b0b4:	20012248 	.word	0x20012248
 800b0b8:	20012638 	.word	0x20012638
 800b0bc:	20012cb4 	.word	0x20012cb4
 800b0c0:	20012c50 	.word	0x20012c50
 800b0c4:	20012824 	.word	0x20012824
 800b0c8:	20012968 	.word	0x20012968
 800b0cc:	200129cc 	.word	0x200129cc
 800b0d0:	20012500 	.word	0x20012500
 800b0d4:	200128a8 	.word	0x200128a8
 800b0d8:	200127a8 	.word	0x200127a8
 800b0dc:	20012d38 	.word	0x20012d38
 800b0e0:	20012a8c 	.word	0x20012a8c
 800b0e4:	20012818 	.word	0x20012818
 800b0e8:	20012a10 	.word	0x20012a10
 800b0ec:	2001263c 	.word	0x2001263c
 800b0f0:	20012c74 	.word	0x20012c74
 800b0f4:	200122e4 	.word	0x200122e4
 800b0f8:	20012360 	.word	0x20012360
 800b0fc:	20012d74 	.word	0x20012d74
 800b100:	20012a84 	.word	0x20012a84
 800b104:	20012810 	.word	0x20012810
 800b108:	20012829 	.word	0x20012829
 800b10c:	20012cb1 	.word	0x20012cb1
 800b110:	200129ac 	.word	0x200129ac

0800b114 <Backup_PC_CMV_Initial_Flags_SET>:
/**
 * \brief Backup_PC_CMV_Initial_Flags_SET.
 * This function resets flags for Backup PCCMV mode and also starts Backup PC CMV mode.
 * */
void Backup_PC_CMV_Initial_Flags_SET()
{
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
	controlsys_Init(&Parker_valve_tune);          //parker
 800b118:	485b      	ldr	r0, [pc, #364]	; (800b288 <Backup_PC_CMV_Initial_Flags_SET+0x174>)
 800b11a:	f005 f99d 	bl	8010458 <controlsys_Init>
	Common_Mode_Parameter._PIP_Val                        = BACKUP_PC_CMV.PIP_Val;
 800b11e:	4b5b      	ldr	r3, [pc, #364]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b120:	781a      	ldrb	r2, [r3, #0]
 800b122:	4b5b      	ldr	r3, [pc, #364]	; (800b290 <Backup_PC_CMV_Initial_Flags_SET+0x17c>)
 800b124:	701a      	strb	r2, [r3, #0]
	Common_Mode_Parameter._PEEP_Val                       = BACKUP_PC_CMV.PEEP_Val;
 800b126:	4b59      	ldr	r3, [pc, #356]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b128:	785a      	ldrb	r2, [r3, #1]
 800b12a:	4b59      	ldr	r3, [pc, #356]	; (800b290 <Backup_PC_CMV_Initial_Flags_SET+0x17c>)
 800b12c:	705a      	strb	r2, [r3, #1]
	Common_Mode_Parameter._RESPIRATORY_RATE_Val           = BACKUP_PC_CMV.RESPIRATORY_RATE_Val;
 800b12e:	4b57      	ldr	r3, [pc, #348]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b130:	789a      	ldrb	r2, [r3, #2]
 800b132:	4b57      	ldr	r3, [pc, #348]	; (800b290 <Backup_PC_CMV_Initial_Flags_SET+0x17c>)
 800b134:	709a      	strb	r2, [r3, #2]
	Common_Mode_Parameter._FIO2_Val                       = BACKUP_PC_CMV.FIO2_Val;
 800b136:	4b55      	ldr	r3, [pc, #340]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b138:	78da      	ldrb	r2, [r3, #3]
 800b13a:	4b55      	ldr	r3, [pc, #340]	; (800b290 <Backup_PC_CMV_Initial_Flags_SET+0x17c>)
 800b13c:	70da      	strb	r2, [r3, #3]


	if(Vent_Type == MASK_MODE)
 800b13e:	4b55      	ldr	r3, [pc, #340]	; (800b294 <Backup_PC_CMV_Initial_Flags_SET+0x180>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d109      	bne.n	800b15a <Backup_PC_CMV_Initial_Flags_SET+0x46>
	{
		Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL      = APNEA_DAC_VAL(Common_Mode_Parameter._PEEP_Val);
 800b146:	4b52      	ldr	r3, [pc, #328]	; (800b290 <Backup_PC_CMV_Initial_Flags_SET+0x17c>)
 800b148:	785b      	ldrb	r3, [r3, #1]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fe fb22 	bl	8009794 <APNEA_DAC_VAL>
 800b150:	4603      	mov	r3, r0
 800b152:	461a      	mov	r2, r3
 800b154:	4b50      	ldr	r3, [pc, #320]	; (800b298 <Backup_PC_CMV_Initial_Flags_SET+0x184>)
 800b156:	821a      	strh	r2, [r3, #16]
 800b158:	e00c      	b.n	800b174 <Backup_PC_CMV_Initial_Flags_SET+0x60>
	}
	else if(Vent_Type == ET_TUBE_MODE)
 800b15a:	4b4e      	ldr	r3, [pc, #312]	; (800b294 <Backup_PC_CMV_Initial_Flags_SET+0x180>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d108      	bne.n	800b174 <Backup_PC_CMV_Initial_Flags_SET+0x60>
	{
		Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL      = DAC_VAL(Common_Mode_Parameter._PEEP_Val);
 800b162:	4b4b      	ldr	r3, [pc, #300]	; (800b290 <Backup_PC_CMV_Initial_Flags_SET+0x17c>)
 800b164:	785b      	ldrb	r3, [r3, #1]
 800b166:	4618      	mov	r0, r3
 800b168:	f7fd ff50 	bl	800900c <DAC_VAL>
 800b16c:	4603      	mov	r3, r0
 800b16e:	461a      	mov	r2, r3
 800b170:	4b49      	ldr	r3, [pc, #292]	; (800b298 <Backup_PC_CMV_Initial_Flags_SET+0x184>)
 800b172:	821a      	strh	r2, [r3, #16]
	}


	Pressure_Mode_blower_control.LAST_PEEP_BLOWER_DAC_VAL = Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL;
 800b174:	4b48      	ldr	r3, [pc, #288]	; (800b298 <Backup_PC_CMV_Initial_Flags_SET+0x184>)
 800b176:	8a1a      	ldrh	r2, [r3, #16]
 800b178:	4b47      	ldr	r3, [pc, #284]	; (800b298 <Backup_PC_CMV_Initial_Flags_SET+0x184>)
 800b17a:	825a      	strh	r2, [r3, #18]
	Reset_PC_CMV_BACKUP_Old_Flags_Reset();
 800b17c:	f000 fa04 	bl	800b588 <Reset_PC_CMV_BACKUP_Old_Flags_Reset>
    if(  (OLD.Last_RR_Val_PC_CMV_BACKUP != BACKUP_PC_CMV.RESPIRATORY_RATE_Val) || (OLD.Last_PIP_Val_PC_CMV_BACKUP    != BACKUP_PC_CMV.PIP_Val)
 800b180:	4b46      	ldr	r3, [pc, #280]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b182:	791a      	ldrb	r2, [r3, #4]
 800b184:	4b41      	ldr	r3, [pc, #260]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b186:	789b      	ldrb	r3, [r3, #2]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d12a      	bne.n	800b1e2 <Backup_PC_CMV_Initial_Flags_SET+0xce>
 800b18c:	4b43      	ldr	r3, [pc, #268]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b18e:	785a      	ldrb	r2, [r3, #1]
 800b190:	4b3e      	ldr	r3, [pc, #248]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	429a      	cmp	r2, r3
 800b196:	d124      	bne.n	800b1e2 <Backup_PC_CMV_Initial_Flags_SET+0xce>
    		                                                                   || (OLD.Last_Rise_Time_PC_CMV_BACKUP  != BACKUP_PC_CMV.Rise_Time )
 800b198:	4b40      	ldr	r3, [pc, #256]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b19a:	789a      	ldrb	r2, [r3, #2]
 800b19c:	4b3b      	ldr	r3, [pc, #236]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b19e:	7c9b      	ldrb	r3, [r3, #18]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d11e      	bne.n	800b1e2 <Backup_PC_CMV_Initial_Flags_SET+0xce>
																		       || (OLD.Last_I_Val_PC_CMV_BACKUP      != BACKUP_PC_CMV.Inspiration_Time_Ratio)
 800b1a4:	4b3d      	ldr	r3, [pc, #244]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b1a6:	795a      	ldrb	r2, [r3, #5]
 800b1a8:	4b38      	ldr	r3, [pc, #224]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b1aa:	7c1b      	ldrb	r3, [r3, #16]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d118      	bne.n	800b1e2 <Backup_PC_CMV_Initial_Flags_SET+0xce>
																		       || (OLD.Last_E_Val_PC_CMV_BACKUP      != BACKUP_PC_CMV.Expiration_Time_Ratio)
 800b1b0:	4b3a      	ldr	r3, [pc, #232]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b1b2:	799a      	ldrb	r2, [r3, #6]
 800b1b4:	4b35      	ldr	r3, [pc, #212]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b1b6:	7c5b      	ldrb	r3, [r3, #17]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d112      	bne.n	800b1e2 <Backup_PC_CMV_Initial_Flags_SET+0xce>
																			   || (OLD.Last_PEEP_Val_PC_CMV_BACKUP   != BACKUP_PC_CMV.PEEP_Val)
 800b1bc:	4b37      	ldr	r3, [pc, #220]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b1be:	781a      	ldrb	r2, [r3, #0]
 800b1c0:	4b32      	ldr	r3, [pc, #200]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b1c2:	785b      	ldrb	r3, [r3, #1]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d10c      	bne.n	800b1e2 <Backup_PC_CMV_Initial_Flags_SET+0xce>
																			   || (OLD.Last_O2_Val_PC_CMV_BACKUP     != BACKUP_PC_CMV.FIO2_Val )
 800b1c8:	4b34      	ldr	r3, [pc, #208]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b1ca:	78da      	ldrb	r2, [r3, #3]
 800b1cc:	4b2f      	ldr	r3, [pc, #188]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b1ce:	78db      	ldrb	r3, [r3, #3]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d106      	bne.n	800b1e2 <Backup_PC_CMV_Initial_Flags_SET+0xce>
																			   || (OLD.last_vent_type                != Vent_Type) )
 800b1d4:	4b31      	ldr	r3, [pc, #196]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b1d6:	7f9a      	ldrb	r2, [r3, #30]
 800b1d8:	4b2e      	ldr	r3, [pc, #184]	; (800b294 <Backup_PC_CMV_Initial_Flags_SET+0x180>)
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	f000 812e 	beq.w	800b43e <Backup_PC_CMV_Initial_Flags_SET+0x32a>

    {
    	//BACKUP_PC_CMV.RISE_TIME_MS_Val       = ((float)BACKUP_PC_CMV.Rise_Time/100.00)*(BACKUP_PC_CMV.INSPIRATION_TIME) ;
    	PIP_control_Task.PIP_Acheived_Time_Ms          = (BACKUP_PC_CMV.RISE_TIME_MS_Val * 2);
 800b1e2:	4b2a      	ldr	r3, [pc, #168]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b1e4:	edd3 7a01 	vldr	s15, [r3, #4]
 800b1e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b1ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1f0:	ee17 3a90 	vmov	r3, s15
 800b1f4:	b21a      	sxth	r2, r3
 800b1f6:	4b2a      	ldr	r3, [pc, #168]	; (800b2a0 <Backup_PC_CMV_Initial_Flags_SET+0x18c>)
 800b1f8:	809a      	strh	r2, [r3, #4]
    	OLD.Last_RR_Val_PC_CMV_BACKUP                  = BACKUP_PC_CMV.RESPIRATORY_RATE_Val;
 800b1fa:	4b24      	ldr	r3, [pc, #144]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b1fc:	789a      	ldrb	r2, [r3, #2]
 800b1fe:	4b27      	ldr	r3, [pc, #156]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b200:	711a      	strb	r2, [r3, #4]
    	OLD.Last_PIP_Val_PC_CMV_BACKUP                 = BACKUP_PC_CMV.PIP_Val;
 800b202:	4b22      	ldr	r3, [pc, #136]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b204:	781a      	ldrb	r2, [r3, #0]
 800b206:	4b25      	ldr	r3, [pc, #148]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b208:	705a      	strb	r2, [r3, #1]
    	OLD.Last_Rise_Time_PC_CMV_BACKUP               = BACKUP_PC_CMV.Rise_Time;
 800b20a:	4b20      	ldr	r3, [pc, #128]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b20c:	7c9a      	ldrb	r2, [r3, #18]
 800b20e:	4b23      	ldr	r3, [pc, #140]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b210:	709a      	strb	r2, [r3, #2]
    	OLD.Last_I_Val_PC_CMV_BACKUP                   = BACKUP_PC_CMV.Inspiration_Time_Ratio;
 800b212:	4b1e      	ldr	r3, [pc, #120]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b214:	7c1a      	ldrb	r2, [r3, #16]
 800b216:	4b21      	ldr	r3, [pc, #132]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b218:	715a      	strb	r2, [r3, #5]
    	OLD.Last_E_Val_PC_CMV_BACKUP                   = BACKUP_PC_CMV.Expiration_Time_Ratio;
 800b21a:	4b1c      	ldr	r3, [pc, #112]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b21c:	7c5a      	ldrb	r2, [r3, #17]
 800b21e:	4b1f      	ldr	r3, [pc, #124]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b220:	719a      	strb	r2, [r3, #6]
    	OLD.Last_PEEP_Val_PC_CMV_BACKUP                = BACKUP_PC_CMV.PEEP_Val;
 800b222:	4b1a      	ldr	r3, [pc, #104]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b224:	785a      	ldrb	r2, [r3, #1]
 800b226:	4b1d      	ldr	r3, [pc, #116]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b228:	701a      	strb	r2, [r3, #0]
    	OLD.Last_O2_Val_PC_CMV_BACKUP                  = BACKUP_PC_CMV.FIO2_Val;
 800b22a:	4b18      	ldr	r3, [pc, #96]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b22c:	78da      	ldrb	r2, [r3, #3]
 800b22e:	4b1b      	ldr	r3, [pc, #108]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b230:	70da      	strb	r2, [r3, #3]
    	OLD.last_vent_type                             = Vent_Type;
 800b232:	4b18      	ldr	r3, [pc, #96]	; (800b294 <Backup_PC_CMV_Initial_Flags_SET+0x180>)
 800b234:	781a      	ldrb	r2, [r3, #0]
 800b236:	4b19      	ldr	r3, [pc, #100]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b238:	779a      	strb	r2, [r3, #30]

    	Avg_Flow                                              = 1;
 800b23a:	4b1a      	ldr	r3, [pc, #104]	; (800b2a4 <Backup_PC_CMV_Initial_Flags_SET+0x190>)
 800b23c:	2201      	movs	r2, #1
 800b23e:	801a      	strh	r2, [r3, #0]
    	Flow_Count                                            = 0;
 800b240:	4b19      	ldr	r3, [pc, #100]	; (800b2a8 <Backup_PC_CMV_Initial_Flags_SET+0x194>)
 800b242:	f04f 0200 	mov.w	r2, #0
 800b246:	601a      	str	r2, [r3, #0]
    	Flow_Cummulative_Val                                  = 0;
 800b248:	4b18      	ldr	r3, [pc, #96]	; (800b2ac <Backup_PC_CMV_Initial_Flags_SET+0x198>)
 800b24a:	f04f 0200 	mov.w	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]
    	Check_Oxygen_Count                                    = 0;        //new
 800b250:	4b17      	ldr	r3, [pc, #92]	; (800b2b0 <Backup_PC_CMV_Initial_Flags_SET+0x19c>)
 800b252:	2200      	movs	r2, #0
 800b254:	701a      	strb	r2, [r3, #0]
    	Temp_Dac                                              = 1400;     //new
 800b256:	4b17      	ldr	r3, [pc, #92]	; (800b2b4 <Backup_PC_CMV_Initial_Flags_SET+0x1a0>)
 800b258:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800b25c:	801a      	strh	r2, [r3, #0]
    	inc_dac                                               = 2;        //new
 800b25e:	4b16      	ldr	r3, [pc, #88]	; (800b2b8 <Backup_PC_CMV_Initial_Flags_SET+0x1a4>)
 800b260:	2202      	movs	r2, #2
 800b262:	801a      	strh	r2, [r3, #0]
    	Oxygen_Blending_Status                                = OXYGEN_NOT_ACHIEVED;  //new
 800b264:	4b15      	ldr	r3, [pc, #84]	; (800b2bc <Backup_PC_CMV_Initial_Flags_SET+0x1a8>)
 800b266:	2201      	movs	r2, #1
 800b268:	701a      	strb	r2, [r3, #0]

    	if(Vent_Type == MASK_MODE)
 800b26a:	4b0a      	ldr	r3, [pc, #40]	; (800b294 <Backup_PC_CMV_Initial_Flags_SET+0x180>)
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d126      	bne.n	800b2c0 <Backup_PC_CMV_Initial_Flags_SET+0x1ac>
    	{
    		OLD.LAST_BLOWER_ENDING_DAC_SIGNAL              =  APNEA_DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 800b272:	4b06      	ldr	r3, [pc, #24]	; (800b28c <Backup_PC_CMV_Initial_Flags_SET+0x178>)
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe fa8c 	bl	8009794 <APNEA_DAC_VAL>
 800b27c:	4603      	mov	r3, r0
 800b27e:	461a      	mov	r2, r3
 800b280:	4b06      	ldr	r3, [pc, #24]	; (800b29c <Backup_PC_CMV_Initial_Flags_SET+0x188>)
 800b282:	829a      	strh	r2, [r3, #20]
 800b284:	e029      	b.n	800b2da <Backup_PC_CMV_Initial_Flags_SET+0x1c6>
 800b286:	bf00      	nop
 800b288:	2000001c 	.word	0x2000001c
 800b28c:	200121b8 	.word	0x200121b8
 800b290:	200124f0 	.word	0x200124f0
 800b294:	200129f4 	.word	0x200129f4
 800b298:	20012978 	.word	0x20012978
 800b29c:	20012c08 	.word	0x20012c08
 800b2a0:	200123d0 	.word	0x200123d0
 800b2a4:	2001283c 	.word	0x2001283c
 800b2a8:	200128a0 	.word	0x200128a0
 800b2ac:	200122f8 	.word	0x200122f8
 800b2b0:	20012a0a 	.word	0x20012a0a
 800b2b4:	20012474 	.word	0x20012474
 800b2b8:	200123ce 	.word	0x200123ce
 800b2bc:	20012b71 	.word	0x20012b71
    	}
    	else if(Vent_Type == ET_TUBE_MODE)
 800b2c0:	4b94      	ldr	r3, [pc, #592]	; (800b514 <Backup_PC_CMV_Initial_Flags_SET+0x400>)
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d108      	bne.n	800b2da <Backup_PC_CMV_Initial_Flags_SET+0x1c6>
    	{
    		OLD.LAST_BLOWER_ENDING_DAC_SIGNAL              =  DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 800b2c8:	4b93      	ldr	r3, [pc, #588]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fd fe9d 	bl	800900c <DAC_VAL>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	4b91      	ldr	r3, [pc, #580]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b2d8:	829a      	strh	r2, [r3, #20]
    	}



    	PIP_control_Task.PIP_Control_Task_Delay           = 10;              //new
 800b2da:	4b91      	ldr	r3, [pc, #580]	; (800b520 <Backup_PC_CMV_Initial_Flags_SET+0x40c>)
 800b2dc:	220a      	movs	r2, #10
 800b2de:	801a      	strh	r2, [r3, #0]
    	PIP_control_Task.Increase_Each_DAC_SET_CONST      = 30;              //new
 800b2e0:	4b8f      	ldr	r3, [pc, #572]	; (800b520 <Backup_PC_CMV_Initial_Flags_SET+0x40c>)
 800b2e2:	221e      	movs	r2, #30
 800b2e4:	80da      	strh	r2, [r3, #6]
    	BACKUP_PC_CMV.RISE_TIME_MS_Val                    = (BACKUP_PC_CMV.Rise_Time *100);
 800b2e6:	4b8c      	ldr	r3, [pc, #560]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b2e8:	7c9b      	ldrb	r3, [r3, #18]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	2364      	movs	r3, #100	; 0x64
 800b2ee:	fb03 f302 	mul.w	r3, r3, r2
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2fa:	4b87      	ldr	r3, [pc, #540]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b2fc:	edc3 7a01 	vstr	s15, [r3, #4]

    	if(BACKUP_PC_CMV.RISE_TIME_MS_Val >= BACKUP_PC_CMV.INSPIRATION_TIME)               //new
 800b300:	4b85      	ldr	r3, [pc, #532]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b302:	ed93 7a01 	vldr	s14, [r3, #4]
 800b306:	4b84      	ldr	r3, [pc, #528]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b312:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b31a:	db08      	blt.n	800b32e <Backup_PC_CMV_Initial_Flags_SET+0x21a>
    	{
    		BACKUP_PC_CMV.RISE_TIME_MS_Val =BACKUP_PC_CMV.INSPIRATION_TIME;
 800b31c:	4b7e      	ldr	r3, [pc, #504]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	ee07 3a90 	vmov	s15, r3
 800b324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b328:	4b7b      	ldr	r3, [pc, #492]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b32a:	edc3 7a01 	vstr	s15, [r3, #4]
    	}
    	if(BACKUP_PC_CMV.RISE_TIME_MS_Val <=600)
 800b32e:	4b7a      	ldr	r3, [pc, #488]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b330:	edd3 7a01 	vldr	s15, [r3, #4]
 800b334:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800b524 <Backup_PC_CMV_Initial_Flags_SET+0x410>
 800b338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b340:	d802      	bhi.n	800b348 <Backup_PC_CMV_Initial_Flags_SET+0x234>
    	{
    		BACKUP_PC_CMV.RISE_TIME_MS_Val =600;
 800b342:	4b75      	ldr	r3, [pc, #468]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b344:	4a78      	ldr	r2, [pc, #480]	; (800b528 <Backup_PC_CMV_Initial_Flags_SET+0x414>)
 800b346:	605a      	str	r2, [r3, #4]
    	}
    	BACKUP_PC_CMV.Rise_Time_percentage   = ((float)BACKUP_PC_CMV.RISE_TIME_MS_Val /BACKUP_PC_CMV.INSPIRATION_TIME) * 100.00;     //new
 800b348:	4b73      	ldr	r3, [pc, #460]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b34a:	ed93 7a01 	vldr	s14, [r3, #4]
 800b34e:	4b72      	ldr	r3, [pc, #456]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b35e:	ee16 0a90 	vmov	r0, s13
 800b362:	f7f5 f899 	bl	8000498 <__aeabi_f2d>
 800b366:	f04f 0200 	mov.w	r2, #0
 800b36a:	4b70      	ldr	r3, [pc, #448]	; (800b52c <Backup_PC_CMV_Initial_Flags_SET+0x418>)
 800b36c:	f7f5 f8ec 	bl	8000548 <__aeabi_dmul>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4610      	mov	r0, r2
 800b376:	4619      	mov	r1, r3
 800b378:	f7f5 fba8 	bl	8000acc <__aeabi_d2uiz>
 800b37c:	4603      	mov	r3, r0
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	4b65      	ldr	r3, [pc, #404]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b382:	74da      	strb	r2, [r3, #19]
    	PIP_control_Task.PIP_Acheived_Time_Ms      	 =  (BACKUP_PC_CMV.RISE_TIME_MS_Val * 2);
 800b384:	4b64      	ldr	r3, [pc, #400]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b386:	edd3 7a01 	vldr	s15, [r3, #4]
 800b38a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b38e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b392:	ee17 3a90 	vmov	r3, s15
 800b396:	b21a      	sxth	r2, r3
 800b398:	4b61      	ldr	r3, [pc, #388]	; (800b520 <Backup_PC_CMV_Initial_Flags_SET+0x40c>)
 800b39a:	809a      	strh	r2, [r3, #4]


    	OLD.LAST_Need_PID_Task_Delay                   =  NO;
 800b39c:	4b5f      	ldr	r3, [pc, #380]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	769a      	strb	r2, [r3, #26]
    	OLD.LAST_Tune_PID_Task_Delay                   =  T_OPEN;
 800b3a2:	4b5e      	ldr	r3, [pc, #376]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	76da      	strb	r2, [r3, #27]
    	OLD.LAST_Low_PIP_Count                         =  RESET;
 800b3a8:	4b5c      	ldr	r3, [pc, #368]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	771a      	strb	r2, [r3, #28]
    	OLD.LAST_Early_Acheived_Ramp_Time_Percentage   =  RESET;
 800b3ae:	4b5b      	ldr	r3, [pc, #364]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	775a      	strb	r2, [r3, #29]
    	OLD.Last_Ramp_Time_PC_CMV_BACKUP               =  BACKUP_PC_CMV.RISE_TIME_MS_Val;
 800b3b4:	4b58      	ldr	r3, [pc, #352]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	4a58      	ldr	r2, [pc, #352]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b3ba:	6093      	str	r3, [r2, #8]
		PIP_Average_Parameter.PIP_Cumulative_Val       = 1;
 800b3bc:	4b5c      	ldr	r3, [pc, #368]	; (800b530 <Backup_PC_CMV_Initial_Flags_SET+0x41c>)
 800b3be:	2201      	movs	r2, #1
 800b3c0:	605a      	str	r2, [r3, #4]
		PIP_Average_Parameter.PIP_Event_Count          = 1;
 800b3c2:	4b5b      	ldr	r3, [pc, #364]	; (800b530 <Backup_PC_CMV_Initial_Flags_SET+0x41c>)
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val    = 1;
 800b3c8:	4b5a      	ldr	r3, [pc, #360]	; (800b534 <Backup_PC_CMV_Initial_Flags_SET+0x420>)
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count       = 1;
 800b3ce:	4b59      	ldr	r3, [pc, #356]	; (800b534 <Backup_PC_CMV_Initial_Flags_SET+0x420>)
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	60da      	str	r2, [r3, #12]
	    PEEP_Maintain_Parameter.PEEP_AVG_VAL           = 1;
 800b3d4:	4b57      	ldr	r3, [pc, #348]	; (800b534 <Backup_PC_CMV_Initial_Flags_SET+0x420>)
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	741a      	strb	r2, [r3, #16]
	    PEEP_Maintain_Parameter.PEEP_Temp              = (BACKUP_PC_CMV.PEEP_Val / 2);
 800b3da:	4b4f      	ldr	r3, [pc, #316]	; (800b518 <Backup_PC_CMV_Initial_Flags_SET+0x404>)
 800b3dc:	785b      	ldrb	r3, [r3, #1]
 800b3de:	085b      	lsrs	r3, r3, #1
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	ee07 3a90 	vmov	s15, r3
 800b3e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3ea:	4b52      	ldr	r3, [pc, #328]	; (800b534 <Backup_PC_CMV_Initial_Flags_SET+0x420>)
 800b3ec:	edc3 7a00 	vstr	s15, [r3]
	    PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  = 0;
 800b3f0:	4b50      	ldr	r3, [pc, #320]	; (800b534 <Backup_PC_CMV_Initial_Flags_SET+0x420>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	809a      	strh	r2, [r3, #4]
		Smooth_Ramp_Time_Val_Count                     = 0;
 800b3f6:	4b50      	ldr	r3, [pc, #320]	; (800b538 <Backup_PC_CMV_Initial_Flags_SET+0x424>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	701a      	strb	r2, [r3, #0]
		Smooth_Ramp_Time_Val                           = 15;
 800b3fc:	4b4f      	ldr	r3, [pc, #316]	; (800b53c <Backup_PC_CMV_Initial_Flags_SET+0x428>)
 800b3fe:	220f      	movs	r2, #15
 800b400:	701a      	strb	r2, [r3, #0]
		if(Common_Mode_Parameter._PEEP_Val >= 15)
 800b402:	4b4f      	ldr	r3, [pc, #316]	; (800b540 <Backup_PC_CMV_Initial_Flags_SET+0x42c>)
 800b404:	785b      	ldrb	r3, [r3, #1]
 800b406:	2b0e      	cmp	r3, #14
 800b408:	d903      	bls.n	800b412 <Backup_PC_CMV_Initial_Flags_SET+0x2fe>
		{
		  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800b40a:	4b4e      	ldr	r3, [pc, #312]	; (800b544 <Backup_PC_CMV_Initial_Flags_SET+0x430>)
 800b40c:	2201      	movs	r2, #1
 800b40e:	701a      	strb	r2, [r3, #0]
 800b410:	e00e      	b.n	800b430 <Backup_PC_CMV_Initial_Flags_SET+0x31c>
		}
		else if( (Common_Mode_Parameter._PEEP_Val < 15) && (Common_Mode_Parameter._PEEP_Val >= 9))
 800b412:	4b4b      	ldr	r3, [pc, #300]	; (800b540 <Backup_PC_CMV_Initial_Flags_SET+0x42c>)
 800b414:	785b      	ldrb	r3, [r3, #1]
 800b416:	2b0e      	cmp	r3, #14
 800b418:	d807      	bhi.n	800b42a <Backup_PC_CMV_Initial_Flags_SET+0x316>
 800b41a:	4b49      	ldr	r3, [pc, #292]	; (800b540 <Backup_PC_CMV_Initial_Flags_SET+0x42c>)
 800b41c:	785b      	ldrb	r3, [r3, #1]
 800b41e:	2b08      	cmp	r3, #8
 800b420:	d903      	bls.n	800b42a <Backup_PC_CMV_Initial_Flags_SET+0x316>
		{
		  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Pending;
 800b422:	4b48      	ldr	r3, [pc, #288]	; (800b544 <Backup_PC_CMV_Initial_Flags_SET+0x430>)
 800b424:	2200      	movs	r2, #0
 800b426:	701a      	strb	r2, [r3, #0]
 800b428:	e002      	b.n	800b430 <Backup_PC_CMV_Initial_Flags_SET+0x31c>
		}
		else
		{
			Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800b42a:	4b46      	ldr	r3, [pc, #280]	; (800b544 <Backup_PC_CMV_Initial_Flags_SET+0x430>)
 800b42c:	2201      	movs	r2, #1
 800b42e:	701a      	strb	r2, [r3, #0]
		}
    	Fio2_Blending_Method                           = PRESSURE_CONTROLLED;
 800b430:	4b45      	ldr	r3, [pc, #276]	; (800b548 <Backup_PC_CMV_Initial_Flags_SET+0x434>)
 800b432:	2200      	movs	r2, #0
 800b434:	701a      	strb	r2, [r3, #0]
		Backup_PC_CMV_SET_VALUE = CHANGE_HAPPEN;
 800b436:	4b45      	ldr	r3, [pc, #276]	; (800b54c <Backup_PC_CMV_Initial_Flags_SET+0x438>)
 800b438:	2201      	movs	r2, #1
 800b43a:	701a      	strb	r2, [r3, #0]
 800b43c:	e022      	b.n	800b484 <Backup_PC_CMV_Initial_Flags_SET+0x370>

    }
    else
    {
    	OLD.LAST_BLOWER_ENDING_DAC_SIGNAL              =  OLD.LAST_BLOWER_ENDING_DAC_SIGNAL;
 800b43e:	4b37      	ldr	r3, [pc, #220]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b440:	8a9a      	ldrh	r2, [r3, #20]
 800b442:	4b36      	ldr	r3, [pc, #216]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b444:	829a      	strh	r2, [r3, #20]
    	OLD.LAST_PIP_Control_Task_Delay                =  OLD.LAST_PIP_Control_Task_Delay;
 800b446:	4b35      	ldr	r3, [pc, #212]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b448:	8ada      	ldrh	r2, [r3, #22]
 800b44a:	4b34      	ldr	r3, [pc, #208]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b44c:	82da      	strh	r2, [r3, #22]
    	OLD.LAST_Increase_Each_DAC_SET_CONST           =  OLD.LAST_Increase_Each_DAC_SET_CONST;
 800b44e:	4b33      	ldr	r3, [pc, #204]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b450:	8b1a      	ldrh	r2, [r3, #24]
 800b452:	4b32      	ldr	r3, [pc, #200]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b454:	831a      	strh	r2, [r3, #24]
    	OLD.LAST_Need_PID_Task_Delay                   =  OLD.LAST_Need_PID_Task_Delay;
 800b456:	4b31      	ldr	r3, [pc, #196]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b458:	7e9a      	ldrb	r2, [r3, #26]
 800b45a:	4b30      	ldr	r3, [pc, #192]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b45c:	769a      	strb	r2, [r3, #26]
    	OLD.LAST_Tune_PID_Task_Delay                   =  OLD.LAST_Tune_PID_Task_Delay;
 800b45e:	4b2f      	ldr	r3, [pc, #188]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b460:	7eda      	ldrb	r2, [r3, #27]
 800b462:	4b2e      	ldr	r3, [pc, #184]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b464:	76da      	strb	r2, [r3, #27]
    	OLD.LAST_Low_PIP_Count                         =  OLD.LAST_Low_PIP_Count;
 800b466:	4b2d      	ldr	r3, [pc, #180]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b468:	7f1a      	ldrb	r2, [r3, #28]
 800b46a:	4b2c      	ldr	r3, [pc, #176]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b46c:	771a      	strb	r2, [r3, #28]
    	OLD.LAST_Early_Acheived_Ramp_Time_Percentage   =  OLD.LAST_Early_Acheived_Ramp_Time_Percentage;
 800b46e:	4b2b      	ldr	r3, [pc, #172]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b470:	7f5a      	ldrb	r2, [r3, #29]
 800b472:	4b2a      	ldr	r3, [pc, #168]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b474:	775a      	strb	r2, [r3, #29]
    	OLD.Last_Ramp_Time_PC_CMV_BACKUP               =  OLD.Last_Ramp_Time_PC_CMV_BACKUP;
 800b476:	4b29      	ldr	r3, [pc, #164]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	4a28      	ldr	r2, [pc, #160]	; (800b51c <Backup_PC_CMV_Initial_Flags_SET+0x408>)
 800b47c:	6093      	str	r3, [r2, #8]
    	Backup_PC_CMV_SET_VALUE = NO_CHANGES;
 800b47e:	4b33      	ldr	r3, [pc, #204]	; (800b54c <Backup_PC_CMV_Initial_Flags_SET+0x438>)
 800b480:	2200      	movs	r2, #0
 800b482:	701a      	strb	r2, [r3, #0]
    }
    Alert_Flags_Reset();
 800b484:	f7f5 fe0c 	bl	80010a0 <Alert_Flags_Reset>
	vTaskSuspend(Pc_Cmv_Handler);
 800b488:	4b31      	ldr	r3, [pc, #196]	; (800b550 <Backup_PC_CMV_Initial_Flags_SET+0x43c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f00f fe11 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800b492:	4b30      	ldr	r3, [pc, #192]	; (800b554 <Backup_PC_CMV_Initial_Flags_SET+0x440>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4618      	mov	r0, r3
 800b498:	f00f fe0c 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800b49c:	4b2e      	ldr	r3, [pc, #184]	; (800b558 <Backup_PC_CMV_Initial_Flags_SET+0x444>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f00f fe07 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800b4a6:	4b2d      	ldr	r3, [pc, #180]	; (800b55c <Backup_PC_CMV_Initial_Flags_SET+0x448>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f00f fe02 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800b4b0:	4b2b      	ldr	r3, [pc, #172]	; (800b560 <Backup_PC_CMV_Initial_Flags_SET+0x44c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f00f fdfd 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800b4ba:	4b2a      	ldr	r3, [pc, #168]	; (800b564 <Backup_PC_CMV_Initial_Flags_SET+0x450>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f00f fdf8 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800b4c4:	4b28      	ldr	r3, [pc, #160]	; (800b568 <Backup_PC_CMV_Initial_Flags_SET+0x454>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f00f fdf3 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800b4ce:	4b27      	ldr	r3, [pc, #156]	; (800b56c <Backup_PC_CMV_Initial_Flags_SET+0x458>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f00f fdee 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800b4d8:	4b25      	ldr	r3, [pc, #148]	; (800b570 <Backup_PC_CMV_Initial_Flags_SET+0x45c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f00f fde9 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800b4e2:	4b24      	ldr	r3, [pc, #144]	; (800b574 <Backup_PC_CMV_Initial_Flags_SET+0x460>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f00f fde4 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800b4ec:	4b22      	ldr	r3, [pc, #136]	; (800b578 <Backup_PC_CMV_Initial_Flags_SET+0x464>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f00f fddf 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Oxygen_Blending_Handler);
 800b4f6:	4b21      	ldr	r3, [pc, #132]	; (800b57c <Backup_PC_CMV_Initial_Flags_SET+0x468>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f00f fdda 	bl	801b0b4 <vTaskSuspend>

	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800b500:	4b1f      	ldr	r3, [pc, #124]	; (800b580 <Backup_PC_CMV_Initial_Flags_SET+0x46c>)
 800b502:	2200      	movs	r2, #0
 800b504:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800b506:	4b1f      	ldr	r3, [pc, #124]	; (800b584 <Backup_PC_CMV_Initial_Flags_SET+0x470>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f00f fdd2 	bl	801b0b4 <vTaskSuspend>
}
 800b510:	bf00      	nop
 800b512:	bd80      	pop	{r7, pc}
 800b514:	200129f4 	.word	0x200129f4
 800b518:	200121b8 	.word	0x200121b8
 800b51c:	20012c08 	.word	0x20012c08
 800b520:	200123d0 	.word	0x200123d0
 800b524:	44160000 	.word	0x44160000
 800b528:	44160000 	.word	0x44160000
 800b52c:	40590000 	.word	0x40590000
 800b530:	200124bc 	.word	0x200124bc
 800b534:	20012c74 	.word	0x20012c74
 800b538:	200129f6 	.word	0x200129f6
 800b53c:	200129a1 	.word	0x200129a1
 800b540:	200124f0 	.word	0x200124f0
 800b544:	200124ce 	.word	0x200124ce
 800b548:	20012360 	.word	0x20012360
 800b54c:	20012594 	.word	0x20012594
 800b550:	20012874 	.word	0x20012874
 800b554:	200124ec 	.word	0x200124ec
 800b558:	20012c68 	.word	0x20012c68
 800b55c:	20012248 	.word	0x20012248
 800b560:	20012638 	.word	0x20012638
 800b564:	20012cb4 	.word	0x20012cb4
 800b568:	20012c50 	.word	0x20012c50
 800b56c:	20012824 	.word	0x20012824
 800b570:	20012968 	.word	0x20012968
 800b574:	200129cc 	.word	0x200129cc
 800b578:	20012500 	.word	0x20012500
 800b57c:	200127ac 	.word	0x200127ac
 800b580:	20012829 	.word	0x20012829
 800b584:	200129ac 	.word	0x200129ac

0800b588 <Reset_PC_CMV_BACKUP_Old_Flags_Reset>:
	OLD.Last_Volume_Val_VC_CMV_BACKUP= 0;
}


void Reset_PC_CMV_BACKUP_Old_Flags_Reset()
{
 800b588:	b480      	push	{r7}
 800b58a:	af00      	add	r7, sp, #0
	OLD.Last_PEEP_Val_VC_CMV_BACKUP  = 0;
 800b58c:	4b0c      	ldr	r3, [pc, #48]	; (800b5c0 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b58e:	2200      	movs	r2, #0
 800b590:	739a      	strb	r2, [r3, #14]
	OLD.Last_FLOW_Val_VC_CMV_BACKUP  = 0;
 800b592:	4b0b      	ldr	r3, [pc, #44]	; (800b5c0 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b594:	2200      	movs	r2, #0
 800b596:	73da      	strb	r2, [r3, #15]
	OLD.Last_O2_Val_VC_CMV_BACKUP    = 0;
 800b598:	4b09      	ldr	r3, [pc, #36]	; (800b5c0 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b59a:	2200      	movs	r2, #0
 800b59c:	741a      	strb	r2, [r3, #16]
	OLD.Last_RR_Val_VC_CMV_BACKUP    = 0;
 800b59e:	4b08      	ldr	r3, [pc, #32]	; (800b5c0 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	745a      	strb	r2, [r3, #17]
	OLD.Last_I_Val_VC_CMV_BACKUP     = 0;
 800b5a4:	4b06      	ldr	r3, [pc, #24]	; (800b5c0 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	749a      	strb	r2, [r3, #18]
	OLD.Last_E_Val_VC_CMV_BACKUP     = 0;
 800b5aa:	4b05      	ldr	r3, [pc, #20]	; (800b5c0 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	74da      	strb	r2, [r3, #19]
	OLD.Last_Volume_Val_VC_CMV_BACKUP= 0;
 800b5b0:	4b03      	ldr	r3, [pc, #12]	; (800b5c0 <Reset_PC_CMV_BACKUP_Old_Flags_Reset+0x38>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	819a      	strh	r2, [r3, #12]
}
 800b5b6:	bf00      	nop
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	20012c08 	.word	0x20012c08

0800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>:

/**
 * \brief Reset_Patient_Circuit_Diconnceted_Alert_Flags.
 * */
void Reset_Patient_Circuit_Diconnceted_Alert_Flags()
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	af00      	add	r7, sp, #0
	PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK             = CHECK;
 800b5c8:	4b08      	ldr	r3, [pc, #32]	; (800b5ec <Reset_Patient_Circuit_Diconnceted_Alert_Flags+0x28>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	701a      	strb	r2, [r3, #0]
	Alert_Count.Patient_Circuit_disconnected_Alert_Count = 0;
 800b5ce:	4b08      	ldr	r3, [pc, #32]	; (800b5f0 <Reset_Patient_Circuit_Diconnceted_Alert_Flags+0x2c>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	80da      	strh	r2, [r3, #6]
	Alert_Status                                         = NO_ALERT;
 800b5d4:	4b07      	ldr	r3, [pc, #28]	; (800b5f4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags+0x30>)
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	701a      	strb	r2, [r3, #0]
	LED_Alert();
 800b5da:	f7f6 faf3 	bl	8001bc4 <LED_Alert>
	CLEAR_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 800b5de:	4a06      	ldr	r2, [pc, #24]	; (800b5f8 <Reset_Patient_Circuit_Diconnceted_Alert_Flags+0x34>)
 800b5e0:	78d3      	ldrb	r3, [r2, #3]
 800b5e2:	f36f 1304 	bfc	r3, #4, #1
 800b5e6:	70d3      	strb	r3, [r2, #3]
	//Send_Frame                                           = First_Frame;
	//Send_Bluetooth_Data_Farme                            = SEND_SAMPLED_PARAMETER_FRAME;
}
 800b5e8:	bf00      	nop
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	20012349 	.word	0x20012349
 800b5f0:	20012b98 	.word	0x20012b98
 800b5f4:	2001287c 	.word	0x2001287c
 800b5f8:	20012408 	.word	0x20012408

0800b5fc <PSV_Mask_Mode_initial_flags_sets>:
/**
 * \brief PSV_Initial_Flags_SET.
 * This function resets flags for PSV MASK mode and also starts PSV MASK mode.
 * */
void PSV_Mask_Mode_initial_flags_sets()
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
	Apnea_Mode                            = ON;
 800b600:	4b67      	ldr	r3, [pc, #412]	; (800b7a0 <PSV_Mask_Mode_initial_flags_sets+0x1a4>)
 800b602:	2200      	movs	r2, #0
 800b604:	701a      	strb	r2, [r3, #0]
	PSV_Flow_Cummulative_val              = RESET;
 800b606:	4967      	ldr	r1, [pc, #412]	; (800b7a4 <PSV_Mask_Mode_initial_flags_sets+0x1a8>)
 800b608:	f04f 0200 	mov.w	r2, #0
 800b60c:	f04f 0300 	mov.w	r3, #0
 800b610:	e9c1 2300 	strd	r2, r3, [r1]
	PSV_Flow_Sensor_Count                 = RESET;
 800b614:	4b64      	ldr	r3, [pc, #400]	; (800b7a8 <PSV_Mask_Mode_initial_flags_sets+0x1ac>)
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]

	ExpValve_OPEN();
 800b61a:	4b64      	ldr	r3, [pc, #400]	; (800b7ac <PSV_Mask_Mode_initial_flags_sets+0x1b0>)
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	4a63      	ldr	r2, [pc, #396]	; (800b7ac <PSV_Mask_Mode_initial_flags_sets+0x1b0>)
 800b620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b624:	6153      	str	r3, [r2, #20]
	Wait_Time                              = 1000;
 800b626:	4b62      	ldr	r3, [pc, #392]	; (800b7b0 <PSV_Mask_Mode_initial_flags_sets+0x1b4>)
 800b628:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b62c:	601a      	str	r2, [r3, #0]
	APRV_current_breathe                   = APRV_IDLE;
 800b62e:	4b61      	ldr	r3, [pc, #388]	; (800b7b4 <PSV_Mask_Mode_initial_flags_sets+0x1b8>)
 800b630:	2200      	movs	r2, #0
 800b632:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                      = APRV_Idle;
 800b634:	4b60      	ldr	r3, [pc, #384]	; (800b7b8 <PSV_Mask_Mode_initial_flags_sets+0x1bc>)
 800b636:	2200      	movs	r2, #0
 800b638:	701a      	strb	r2, [r3, #0]
	PSV_Control.PSV_PEEP_Settle_Time       = 2000;
 800b63a:	4b60      	ldr	r3, [pc, #384]	; (800b7bc <PSV_Mask_Mode_initial_flags_sets+0x1c0>)
 800b63c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b640:	601a      	str	r2, [r3, #0]
	Common_Mode_Parameter.TOLERANCE_EWAVE  = PSV.TOLERANCE_EWAVE;
 800b642:	4b5f      	ldr	r3, [pc, #380]	; (800b7c0 <PSV_Mask_Mode_initial_flags_sets+0x1c4>)
 800b644:	8a1a      	ldrh	r2, [r3, #16]
 800b646:	4b5f      	ldr	r3, [pc, #380]	; (800b7c4 <PSV_Mask_Mode_initial_flags_sets+0x1c8>)
 800b648:	811a      	strh	r2, [r3, #8]
	Common_Mode_Parameter.TRIG_WINDOW      = PSV.TRIG_WINDOW;
 800b64a:	4b5d      	ldr	r3, [pc, #372]	; (800b7c0 <PSV_Mask_Mode_initial_flags_sets+0x1c4>)
 800b64c:	8a5a      	ldrh	r2, [r3, #18]
 800b64e:	4b5d      	ldr	r3, [pc, #372]	; (800b7c4 <PSV_Mask_Mode_initial_flags_sets+0x1c8>)
 800b650:	815a      	strh	r2, [r3, #10]
	Common_Mode_Parameter.TRIG_LMT         = PSV.TRIG_LMT;
 800b652:	4b5b      	ldr	r3, [pc, #364]	; (800b7c0 <PSV_Mask_Mode_initial_flags_sets+0x1c4>)
 800b654:	edd3 7a02 	vldr	s15, [r3, #8]
 800b658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b65c:	ee17 3a90 	vmov	r3, s15
 800b660:	b29a      	uxth	r2, r3
 800b662:	4b58      	ldr	r3, [pc, #352]	; (800b7c4 <PSV_Mask_Mode_initial_flags_sets+0x1c8>)
 800b664:	819a      	strh	r2, [r3, #12]
	//Common_Mode_Parameter.TRIG_TIME        = PSV.TRIG_TIME;


	if(PSV.PSV_O2_Val > 21)
 800b666:	4b56      	ldr	r3, [pc, #344]	; (800b7c0 <PSV_Mask_Mode_initial_flags_sets+0x1c4>)
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	2b15      	cmp	r3, #21
 800b66c:	dd0e      	ble.n	800b68c <PSV_Mask_Mode_initial_flags_sets+0x90>
	{
		Adjust_O2_DAC_AS_PER_FLOW_RATE_Count   = 0;
 800b66e:	4b56      	ldr	r3, [pc, #344]	; (800b7c8 <PSV_Mask_Mode_initial_flags_sets+0x1cc>)
 800b670:	2200      	movs	r2, #0
 800b672:	701a      	strb	r2, [r3, #0]
		onetime                                = 1;
 800b674:	4b55      	ldr	r3, [pc, #340]	; (800b7cc <PSV_Mask_Mode_initial_flags_sets+0x1d0>)
 800b676:	2201      	movs	r2, #1
 800b678:	701a      	strb	r2, [r3, #0]
		Oxygen_Parameter.PSV_O2_DAC            = 1700;
 800b67a:	4b55      	ldr	r3, [pc, #340]	; (800b7d0 <PSV_Mask_Mode_initial_flags_sets+0x1d4>)
 800b67c:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800b680:	615a      	str	r2, [r3, #20]
		Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 800b682:	4b53      	ldr	r3, [pc, #332]	; (800b7d0 <PSV_Mask_Mode_initial_flags_sets+0x1d4>)
 800b684:	695a      	ldr	r2, [r3, #20]
 800b686:	4b53      	ldr	r3, [pc, #332]	; (800b7d4 <PSV_Mask_Mode_initial_flags_sets+0x1d8>)
 800b688:	615a      	str	r2, [r3, #20]
 800b68a:	e002      	b.n	800b692 <PSV_Mask_Mode_initial_flags_sets+0x96>
	}
	else
	{
	    Parkar_valve_Signal(0);
 800b68c:	4b51      	ldr	r3, [pc, #324]	; (800b7d4 <PSV_Mask_Mode_initial_flags_sets+0x1d8>)
 800b68e:	2200      	movs	r2, #0
 800b690:	615a      	str	r2, [r3, #20]
	}

	vTaskSuspend(Pc_Cmv_Handler);
 800b692:	4b51      	ldr	r3, [pc, #324]	; (800b7d8 <PSV_Mask_Mode_initial_flags_sets+0x1dc>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4618      	mov	r0, r3
 800b698:	f00f fd0c 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800b69c:	4b4f      	ldr	r3, [pc, #316]	; (800b7dc <PSV_Mask_Mode_initial_flags_sets+0x1e0>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f00f fd07 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800b6a6:	4b4e      	ldr	r3, [pc, #312]	; (800b7e0 <PSV_Mask_Mode_initial_flags_sets+0x1e4>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f00f fd02 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800b6b0:	4b4c      	ldr	r3, [pc, #304]	; (800b7e4 <PSV_Mask_Mode_initial_flags_sets+0x1e8>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f00f fcfd 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800b6ba:	4b4b      	ldr	r3, [pc, #300]	; (800b7e8 <PSV_Mask_Mode_initial_flags_sets+0x1ec>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f00f fcf8 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800b6c4:	4b49      	ldr	r3, [pc, #292]	; (800b7ec <PSV_Mask_Mode_initial_flags_sets+0x1f0>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f00f fcf3 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800b6ce:	4b48      	ldr	r3, [pc, #288]	; (800b7f0 <PSV_Mask_Mode_initial_flags_sets+0x1f4>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f00f fcee 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800b6d8:	4b46      	ldr	r3, [pc, #280]	; (800b7f4 <PSV_Mask_Mode_initial_flags_sets+0x1f8>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f00f fce9 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800b6e2:	4b45      	ldr	r3, [pc, #276]	; (800b7f8 <PSV_Mask_Mode_initial_flags_sets+0x1fc>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f00f fce4 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800b6ec:	4b43      	ldr	r3, [pc, #268]	; (800b7fc <PSV_Mask_Mode_initial_flags_sets+0x200>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f00f fcdf 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800b6f6:	4b42      	ldr	r3, [pc, #264]	; (800b800 <PSV_Mask_Mode_initial_flags_sets+0x204>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f00f fcda 	bl	801b0b4 <vTaskSuspend>

	vTaskSuspend(CPAP_Handler);
 800b700:	4b40      	ldr	r3, [pc, #256]	; (800b804 <PSV_Mask_Mode_initial_flags_sets+0x208>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4618      	mov	r0, r3
 800b706:	f00f fcd5 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800b70a:	4b3f      	ldr	r3, [pc, #252]	; (800b808 <PSV_Mask_Mode_initial_flags_sets+0x20c>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4618      	mov	r0, r3
 800b710:	f00f fcd0 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800b714:	4b3d      	ldr	r3, [pc, #244]	; (800b80c <PSV_Mask_Mode_initial_flags_sets+0x210>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4618      	mov	r0, r3
 800b71a:	f00f fccb 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800b71e:	4b3c      	ldr	r3, [pc, #240]	; (800b810 <PSV_Mask_Mode_initial_flags_sets+0x214>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4618      	mov	r0, r3
 800b724:	f00f fcc6 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800b728:	4b3a      	ldr	r3, [pc, #232]	; (800b814 <PSV_Mask_Mode_initial_flags_sets+0x218>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f00f fcc1 	bl	801b0b4 <vTaskSuspend>
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = APNEA_DAC_VAL(PSV.PRESSURE_SUPPORT_Val );
 800b732:	4b23      	ldr	r3, [pc, #140]	; (800b7c0 <PSV_Mask_Mode_initial_flags_sets+0x1c4>)
 800b734:	881b      	ldrh	r3, [r3, #0]
 800b736:	b2db      	uxtb	r3, r3
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fe f82b 	bl	8009794 <APNEA_DAC_VAL>
 800b73e:	4603      	mov	r3, r0
 800b740:	461a      	mov	r2, r3
 800b742:	4b35      	ldr	r3, [pc, #212]	; (800b818 <PSV_Mask_Mode_initial_flags_sets+0x21c>)
 800b744:	811a      	strh	r2, [r3, #8]
	PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL           = APNEA_DAC_VAL(PSV.PEEP_Val );
 800b746:	4b1e      	ldr	r3, [pc, #120]	; (800b7c0 <PSV_Mask_Mode_initial_flags_sets+0x1c4>)
 800b748:	789b      	ldrb	r3, [r3, #2]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe f822 	bl	8009794 <APNEA_DAC_VAL>
 800b750:	4603      	mov	r3, r0
 800b752:	461a      	mov	r2, r3
 800b754:	4b31      	ldr	r3, [pc, #196]	; (800b81c <PSV_Mask_Mode_initial_flags_sets+0x220>)
 800b756:	80da      	strh	r2, [r3, #6]
	PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL      = (PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);
 800b758:	4b30      	ldr	r3, [pc, #192]	; (800b81c <PSV_Mask_Mode_initial_flags_sets+0x220>)
 800b75a:	88da      	ldrh	r2, [r3, #6]
 800b75c:	4b2f      	ldr	r3, [pc, #188]	; (800b81c <PSV_Mask_Mode_initial_flags_sets+0x220>)
 800b75e:	811a      	strh	r2, [r3, #8]
	PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL              = PSV.PRESSURE_SUPPORT_Val;
 800b760:	4b17      	ldr	r3, [pc, #92]	; (800b7c0 <PSV_Mask_Mode_initial_flags_sets+0x1c4>)
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	b2da      	uxtb	r2, r3
 800b766:	4b2e      	ldr	r3, [pc, #184]	; (800b820 <PSV_Mask_Mode_initial_flags_sets+0x224>)
 800b768:	731a      	strb	r2, [r3, #12]
	PSV_Peep_Average.PEEP_AVG_VAL                         = PSV.PEEP_Val;
 800b76a:	4b15      	ldr	r3, [pc, #84]	; (800b7c0 <PSV_Mask_Mode_initial_flags_sets+0x1c4>)
 800b76c:	789a      	ldrb	r2, [r3, #2]
 800b76e:	4b2d      	ldr	r3, [pc, #180]	; (800b824 <PSV_Mask_Mode_initial_flags_sets+0x228>)
 800b770:	721a      	strb	r2, [r3, #8]
	//Oxygen_Parameter.Achieved_Oxygen                      = (1 <<7) | Oxygen_Parameter.Achieved_Oxygen;
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800b772:	f7ff ff27 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	Blower_Signal(0);
 800b776:	4b17      	ldr	r3, [pc, #92]	; (800b7d4 <PSV_Mask_Mode_initial_flags_sets+0x1d8>)
 800b778:	2200      	movs	r2, #0
 800b77a:	609a      	str	r2, [r3, #8]
	vTaskResume(PSV_Handler);
 800b77c:	4b2a      	ldr	r3, [pc, #168]	; (800b828 <PSV_Mask_Mode_initial_flags_sets+0x22c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4618      	mov	r0, r3
 800b782:	f00f fd5b 	bl	801b23c <vTaskResume>
	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800b786:	4b29      	ldr	r3, [pc, #164]	; (800b82c <PSV_Mask_Mode_initial_flags_sets+0x230>)
 800b788:	2200      	movs	r2, #0
 800b78a:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set           = CLOSE;
 800b78c:	4b28      	ldr	r3, [pc, #160]	; (800b830 <PSV_Mask_Mode_initial_flags_sets+0x234>)
 800b78e:	2200      	movs	r2, #0
 800b790:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800b792:	4b28      	ldr	r3, [pc, #160]	; (800b834 <PSV_Mask_Mode_initial_flags_sets+0x238>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4618      	mov	r0, r3
 800b798:	f00f fc8c 	bl	801b0b4 <vTaskSuspend>
}
 800b79c:	bf00      	nop
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20012aa1 	.word	0x20012aa1
 800b7a4:	20012ab0 	.word	0x20012ab0
 800b7a8:	20012470 	.word	0x20012470
 800b7ac:	40020400 	.word	0x40020400
 800b7b0:	20012698 	.word	0x20012698
 800b7b4:	2001263c 	.word	0x2001263c
 800b7b8:	20012a10 	.word	0x20012a10
 800b7bc:	20012b78 	.word	0x20012b78
 800b7c0:	20012710 	.word	0x20012710
 800b7c4:	200124f0 	.word	0x200124f0
 800b7c8:	20012ab8 	.word	0x20012ab8
 800b7cc:	2001269c 	.word	0x2001269c
 800b7d0:	200129d4 	.word	0x200129d4
 800b7d4:	40007400 	.word	0x40007400
 800b7d8:	20012874 	.word	0x20012874
 800b7dc:	200124ec 	.word	0x200124ec
 800b7e0:	20012c68 	.word	0x20012c68
 800b7e4:	20012248 	.word	0x20012248
 800b7e8:	20012638 	.word	0x20012638
 800b7ec:	20012cb4 	.word	0x20012cb4
 800b7f0:	20012c50 	.word	0x20012c50
 800b7f4:	20012824 	.word	0x20012824
 800b7f8:	20012968 	.word	0x20012968
 800b7fc:	200129cc 	.word	0x200129cc
 800b800:	20012500 	.word	0x20012500
 800b804:	20012d38 	.word	0x20012d38
 800b808:	20012364 	.word	0x20012364
 800b80c:	20012b04 	.word	0x20012b04
 800b810:	20012810 	.word	0x20012810
 800b814:	20012a84 	.word	0x20012a84
 800b818:	20012978 	.word	0x20012978
 800b81c:	20012bf4 	.word	0x20012bf4
 800b820:	200124d0 	.word	0x200124d0
 800b824:	20012b88 	.word	0x20012b88
 800b828:	200128a8 	.word	0x200128a8
 800b82c:	20012829 	.word	0x20012829
 800b830:	20012cb1 	.word	0x20012cb1
 800b834:	200129ac 	.word	0x200129ac

0800b838 <PSV_ET_TUBE_Mode_initial_flags_sets>:
/**
 * \brief PSV_Initial_Flags_SET.
 * This function resets flags for PSV ET TUBE mode and also starts PSV ET TUBE mode.
 * */
void PSV_ET_TUBE_Mode_initial_flags_sets()
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	af00      	add	r7, sp, #0
	Oxygen_Blending_Status = OXYGEN_NOT_ACHIEVED;
 800b83c:	4b71      	ldr	r3, [pc, #452]	; (800ba04 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1cc>)
 800b83e:	2201      	movs	r2, #1
 800b840:	701a      	strb	r2, [r3, #0]
	Apnea_Mode                            = ON;
 800b842:	4b71      	ldr	r3, [pc, #452]	; (800ba08 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1d0>)
 800b844:	2200      	movs	r2, #0
 800b846:	701a      	strb	r2, [r3, #0]
	PSV_Flow_Cummulative_val              = RESET;
 800b848:	4970      	ldr	r1, [pc, #448]	; (800ba0c <PSV_ET_TUBE_Mode_initial_flags_sets+0x1d4>)
 800b84a:	f04f 0200 	mov.w	r2, #0
 800b84e:	f04f 0300 	mov.w	r3, #0
 800b852:	e9c1 2300 	strd	r2, r3, [r1]
	PSV_Flow_Sensor_Count                 = RESET;
 800b856:	4b6e      	ldr	r3, [pc, #440]	; (800ba10 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1d8>)
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]

	ExpValve_OPEN();
 800b85c:	4b6d      	ldr	r3, [pc, #436]	; (800ba14 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1dc>)
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	4a6c      	ldr	r2, [pc, #432]	; (800ba14 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1dc>)
 800b862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b866:	6153      	str	r3, [r2, #20]
	Wait_Time                              = 500;
 800b868:	4b6b      	ldr	r3, [pc, #428]	; (800ba18 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1e0>)
 800b86a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b86e:	601a      	str	r2, [r3, #0]
	Last_Wait_Time                         = Wait_Time;
 800b870:	4b69      	ldr	r3, [pc, #420]	; (800ba18 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1e0>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a69      	ldr	r2, [pc, #420]	; (800ba1c <PSV_ET_TUBE_Mode_initial_flags_sets+0x1e4>)
 800b876:	6013      	str	r3, [r2, #0]
	APRV_current_breathe                   = APRV_IDLE;
 800b878:	4b69      	ldr	r3, [pc, #420]	; (800ba20 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1e8>)
 800b87a:	2200      	movs	r2, #0
 800b87c:	701a      	strb	r2, [r3, #0]
	APRV_Next_Breathe                      = APRV_Idle;
 800b87e:	4b69      	ldr	r3, [pc, #420]	; (800ba24 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1ec>)
 800b880:	2200      	movs	r2, #0
 800b882:	701a      	strb	r2, [r3, #0]
	PSV_Control.PSV_PEEP_Settle_Time       = 2000;
 800b884:	4b68      	ldr	r3, [pc, #416]	; (800ba28 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f0>)
 800b886:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b88a:	601a      	str	r2, [r3, #0]
	Common_Mode_Parameter.TOLERANCE_EWAVE  = PSV.TOLERANCE_EWAVE;
 800b88c:	4b67      	ldr	r3, [pc, #412]	; (800ba2c <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f4>)
 800b88e:	8a1a      	ldrh	r2, [r3, #16]
 800b890:	4b67      	ldr	r3, [pc, #412]	; (800ba30 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f8>)
 800b892:	811a      	strh	r2, [r3, #8]
	Common_Mode_Parameter.TRIG_WINDOW      = PSV.TRIG_WINDOW;
 800b894:	4b65      	ldr	r3, [pc, #404]	; (800ba2c <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f4>)
 800b896:	8a5a      	ldrh	r2, [r3, #18]
 800b898:	4b65      	ldr	r3, [pc, #404]	; (800ba30 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f8>)
 800b89a:	815a      	strh	r2, [r3, #10]
	Common_Mode_Parameter.TRIG_LMT         = PSV.TRIG_LMT;
 800b89c:	4b63      	ldr	r3, [pc, #396]	; (800ba2c <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f4>)
 800b89e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b8a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8a6:	ee17 3a90 	vmov	r3, s15
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	4b60      	ldr	r3, [pc, #384]	; (800ba30 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f8>)
 800b8ae:	819a      	strh	r2, [r3, #12]
	//Common_Mode_Parameter.TRIG_TIME        = PSV.TRIG_TIME;


	if(PSV.PSV_O2_Val > 21)
 800b8b0:	4b5e      	ldr	r3, [pc, #376]	; (800ba2c <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f4>)
 800b8b2:	69db      	ldr	r3, [r3, #28]
 800b8b4:	2b15      	cmp	r3, #21
 800b8b6:	dd18      	ble.n	800b8ea <PSV_ET_TUBE_Mode_initial_flags_sets+0xb2>
	{
		onetime                                = 1;
 800b8b8:	4b5e      	ldr	r3, [pc, #376]	; (800ba34 <PSV_ET_TUBE_Mode_initial_flags_sets+0x1fc>)
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	701a      	strb	r2, [r3, #0]
		Avg_Flow                               = 1;
 800b8be:	4b5e      	ldr	r3, [pc, #376]	; (800ba38 <PSV_ET_TUBE_Mode_initial_flags_sets+0x200>)
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	801a      	strh	r2, [r3, #0]
		Flow_Count                             = 0;
 800b8c4:	4b5d      	ldr	r3, [pc, #372]	; (800ba3c <PSV_ET_TUBE_Mode_initial_flags_sets+0x204>)
 800b8c6:	f04f 0200 	mov.w	r2, #0
 800b8ca:	601a      	str	r2, [r3, #0]
		Flow_Cummulative_Val                   = 0;
 800b8cc:	4b5c      	ldr	r3, [pc, #368]	; (800ba40 <PSV_ET_TUBE_Mode_initial_flags_sets+0x208>)
 800b8ce:	f04f 0200 	mov.w	r2, #0
 800b8d2:	601a      	str	r2, [r3, #0]
		Check_Oxygen_Count                     = 0;        //new
 800b8d4:	4b5b      	ldr	r3, [pc, #364]	; (800ba44 <PSV_ET_TUBE_Mode_initial_flags_sets+0x20c>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	701a      	strb	r2, [r3, #0]
		Temp_Dac                               = 1400;     //new
 800b8da:	4b5b      	ldr	r3, [pc, #364]	; (800ba48 <PSV_ET_TUBE_Mode_initial_flags_sets+0x210>)
 800b8dc:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800b8e0:	801a      	strh	r2, [r3, #0]
		inc_dac                                = 2;        //new
 800b8e2:	4b5a      	ldr	r3, [pc, #360]	; (800ba4c <PSV_ET_TUBE_Mode_initial_flags_sets+0x214>)
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	801a      	strh	r2, [r3, #0]
 800b8e8:	e005      	b.n	800b8f6 <PSV_ET_TUBE_Mode_initial_flags_sets+0xbe>

	}
	else
	{
		Oxygen_Parameter.Achieved_Oxygen   = 21;
 800b8ea:	4b59      	ldr	r3, [pc, #356]	; (800ba50 <PSV_ET_TUBE_Mode_initial_flags_sets+0x218>)
 800b8ec:	2215      	movs	r2, #21
 800b8ee:	721a      	strb	r2, [r3, #8]
	    Parkar_valve_Signal(0);
 800b8f0:	4b58      	ldr	r3, [pc, #352]	; (800ba54 <PSV_ET_TUBE_Mode_initial_flags_sets+0x21c>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	615a      	str	r2, [r3, #20]
	}

	vTaskSuspend(Pc_Cmv_Handler);
 800b8f6:	4b58      	ldr	r3, [pc, #352]	; (800ba58 <PSV_ET_TUBE_Mode_initial_flags_sets+0x220>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f00f fbda 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 800b900:	4b56      	ldr	r3, [pc, #344]	; (800ba5c <PSV_ET_TUBE_Mode_initial_flags_sets+0x224>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4618      	mov	r0, r3
 800b906:	f00f fbd5 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Cmv_Handler);
 800b90a:	4b55      	ldr	r3, [pc, #340]	; (800ba60 <PSV_ET_TUBE_Mode_initial_flags_sets+0x228>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4618      	mov	r0, r3
 800b910:	f00f fbd0 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 800b914:	4b53      	ldr	r3, [pc, #332]	; (800ba64 <PSV_ET_TUBE_Mode_initial_flags_sets+0x22c>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4618      	mov	r0, r3
 800b91a:	f00f fbcb 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 800b91e:	4b52      	ldr	r3, [pc, #328]	; (800ba68 <PSV_ET_TUBE_Mode_initial_flags_sets+0x230>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4618      	mov	r0, r3
 800b924:	f00f fbc6 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 800b928:	4b50      	ldr	r3, [pc, #320]	; (800ba6c <PSV_ET_TUBE_Mode_initial_flags_sets+0x234>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f00f fbc1 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 800b932:	4b4f      	ldr	r3, [pc, #316]	; (800ba70 <PSV_ET_TUBE_Mode_initial_flags_sets+0x238>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4618      	mov	r0, r3
 800b938:	f00f fbbc 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 800b93c:	4b4d      	ldr	r3, [pc, #308]	; (800ba74 <PSV_ET_TUBE_Mode_initial_flags_sets+0x23c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4618      	mov	r0, r3
 800b942:	f00f fbb7 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Alert_Handler);
 800b946:	4b4c      	ldr	r3, [pc, #304]	; (800ba78 <PSV_ET_TUBE_Mode_initial_flags_sets+0x240>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f00f fbb2 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 800b950:	4b4a      	ldr	r3, [pc, #296]	; (800ba7c <PSV_ET_TUBE_Mode_initial_flags_sets+0x244>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4618      	mov	r0, r3
 800b956:	f00f fbad 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 800b95a:	4b49      	ldr	r3, [pc, #292]	; (800ba80 <PSV_ET_TUBE_Mode_initial_flags_sets+0x248>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4618      	mov	r0, r3
 800b960:	f00f fba8 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 800b964:	4b47      	ldr	r3, [pc, #284]	; (800ba84 <PSV_ET_TUBE_Mode_initial_flags_sets+0x24c>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4618      	mov	r0, r3
 800b96a:	f00f fba3 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 800b96e:	4b46      	ldr	r3, [pc, #280]	; (800ba88 <PSV_ET_TUBE_Mode_initial_flags_sets+0x250>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4618      	mov	r0, r3
 800b974:	f00f fb9e 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 800b978:	4b44      	ldr	r3, [pc, #272]	; (800ba8c <PSV_ET_TUBE_Mode_initial_flags_sets+0x254>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4618      	mov	r0, r3
 800b97e:	f00f fb99 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 800b982:	4b43      	ldr	r3, [pc, #268]	; (800ba90 <PSV_ET_TUBE_Mode_initial_flags_sets+0x258>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4618      	mov	r0, r3
 800b988:	f00f fb94 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 800b98c:	4b41      	ldr	r3, [pc, #260]	; (800ba94 <PSV_ET_TUBE_Mode_initial_flags_sets+0x25c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4618      	mov	r0, r3
 800b992:	f00f fb8f 	bl	801b0b4 <vTaskSuspend>
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = ( DAC_VAL(PSV.PRESSURE_SUPPORT_Val ));
 800b996:	4b25      	ldr	r3, [pc, #148]	; (800ba2c <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f4>)
 800b998:	881b      	ldrh	r3, [r3, #0]
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fd fb35 	bl	800900c <DAC_VAL>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	4b3c      	ldr	r3, [pc, #240]	; (800ba98 <PSV_ET_TUBE_Mode_initial_flags_sets+0x260>)
 800b9a8:	811a      	strh	r2, [r3, #8]
	PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL           = ( DAC_VAL(PSV.PEEP_Val ) );
 800b9aa:	4b20      	ldr	r3, [pc, #128]	; (800ba2c <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f4>)
 800b9ac:	789b      	ldrb	r3, [r3, #2]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fd fb2c 	bl	800900c <DAC_VAL>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	4b38      	ldr	r3, [pc, #224]	; (800ba9c <PSV_ET_TUBE_Mode_initial_flags_sets+0x264>)
 800b9ba:	80da      	strh	r2, [r3, #6]
	PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL      = (PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);
 800b9bc:	4b37      	ldr	r3, [pc, #220]	; (800ba9c <PSV_ET_TUBE_Mode_initial_flags_sets+0x264>)
 800b9be:	88da      	ldrh	r2, [r3, #6]
 800b9c0:	4b36      	ldr	r3, [pc, #216]	; (800ba9c <PSV_ET_TUBE_Mode_initial_flags_sets+0x264>)
 800b9c2:	811a      	strh	r2, [r3, #8]
	PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL              = PSV.PRESSURE_SUPPORT_Val;
 800b9c4:	4b19      	ldr	r3, [pc, #100]	; (800ba2c <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f4>)
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	4b35      	ldr	r3, [pc, #212]	; (800baa0 <PSV_ET_TUBE_Mode_initial_flags_sets+0x268>)
 800b9cc:	731a      	strb	r2, [r3, #12]
	PSV_Peep_Average.PEEP_AVG_VAL                         = PSV.PEEP_Val;
 800b9ce:	4b17      	ldr	r3, [pc, #92]	; (800ba2c <PSV_ET_TUBE_Mode_initial_flags_sets+0x1f4>)
 800b9d0:	789a      	ldrb	r2, [r3, #2]
 800b9d2:	4b34      	ldr	r3, [pc, #208]	; (800baa4 <PSV_ET_TUBE_Mode_initial_flags_sets+0x26c>)
 800b9d4:	721a      	strb	r2, [r3, #8]
	Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800b9d6:	f7ff fdf5 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
	Blower_Signal(0);
 800b9da:	4b1e      	ldr	r3, [pc, #120]	; (800ba54 <PSV_ET_TUBE_Mode_initial_flags_sets+0x21c>)
 800b9dc:	2200      	movs	r2, #0
 800b9de:	609a      	str	r2, [r3, #8]
	vTaskResume(PSV_Handler);
 800b9e0:	4b31      	ldr	r3, [pc, #196]	; (800baa8 <PSV_ET_TUBE_Mode_initial_flags_sets+0x270>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f00f fc29 	bl	801b23c <vTaskResume>
	Back_Up_Mode_Initial_Flag_Set   = CLOSE;
 800b9ea:	4b30      	ldr	r3, [pc, #192]	; (800baac <PSV_ET_TUBE_Mode_initial_flags_sets+0x274>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	701a      	strb	r2, [r3, #0]
	Mode_Initial_Flag_Set           = CLOSE;
 800b9f0:	4b2f      	ldr	r3, [pc, #188]	; (800bab0 <PSV_ET_TUBE_Mode_initial_flags_sets+0x278>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(Mode_initial_Flag_Set_Handler);
 800b9f6:	4b2f      	ldr	r3, [pc, #188]	; (800bab4 <PSV_ET_TUBE_Mode_initial_flags_sets+0x27c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f00f fb5a 	bl	801b0b4 <vTaskSuspend>
}
 800ba00:	bf00      	nop
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	20012b71 	.word	0x20012b71
 800ba08:	20012aa1 	.word	0x20012aa1
 800ba0c:	20012ab0 	.word	0x20012ab0
 800ba10:	20012470 	.word	0x20012470
 800ba14:	40020400 	.word	0x40020400
 800ba18:	20012698 	.word	0x20012698
 800ba1c:	20012210 	.word	0x20012210
 800ba20:	2001263c 	.word	0x2001263c
 800ba24:	20012a10 	.word	0x20012a10
 800ba28:	20012b78 	.word	0x20012b78
 800ba2c:	20012710 	.word	0x20012710
 800ba30:	200124f0 	.word	0x200124f0
 800ba34:	2001269c 	.word	0x2001269c
 800ba38:	2001283c 	.word	0x2001283c
 800ba3c:	200128a0 	.word	0x200128a0
 800ba40:	200122f8 	.word	0x200122f8
 800ba44:	20012a0a 	.word	0x20012a0a
 800ba48:	20012474 	.word	0x20012474
 800ba4c:	200123ce 	.word	0x200123ce
 800ba50:	200129d4 	.word	0x200129d4
 800ba54:	40007400 	.word	0x40007400
 800ba58:	20012874 	.word	0x20012874
 800ba5c:	200124ec 	.word	0x200124ec
 800ba60:	20012c68 	.word	0x20012c68
 800ba64:	20012248 	.word	0x20012248
 800ba68:	20012638 	.word	0x20012638
 800ba6c:	20012cb4 	.word	0x20012cb4
 800ba70:	20012c50 	.word	0x20012c50
 800ba74:	20012824 	.word	0x20012824
 800ba78:	20012968 	.word	0x20012968
 800ba7c:	200129cc 	.word	0x200129cc
 800ba80:	20012500 	.word	0x20012500
 800ba84:	20012d38 	.word	0x20012d38
 800ba88:	20012364 	.word	0x20012364
 800ba8c:	20012b04 	.word	0x20012b04
 800ba90:	20012810 	.word	0x20012810
 800ba94:	20012a84 	.word	0x20012a84
 800ba98:	20012978 	.word	0x20012978
 800ba9c:	20012bf4 	.word	0x20012bf4
 800baa0:	200124d0 	.word	0x200124d0
 800baa4:	20012b88 	.word	0x20012b88
 800baa8:	200128a8 	.word	0x200128a8
 800baac:	20012829 	.word	0x20012829
 800bab0:	20012cb1 	.word	0x20012cb1
 800bab4:	200129ac 	.word	0x200129ac

0800bab8 <Reset_Flow_Offset>:
/**
 * \brief PSV_Initial_Flags_SET.
 * This function get offset values of sensor.
 * */
void Reset_Flow_Offset()
{
 800bab8:	b480      	push	{r7}
 800baba:	af00      	add	r7, sp, #0
	if(Vent_Type == MASK_MODE)
 800babc:	4b14      	ldr	r3, [pc, #80]	; (800bb10 <Reset_Flow_Offset+0x58>)
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d10b      	bne.n	800badc <Reset_Flow_Offset+0x24>
	{
		if(OLD.last_vent_type == ET_TUBE_MODE)
 800bac4:	4b13      	ldr	r3, [pc, #76]	; (800bb14 <Reset_Flow_Offset+0x5c>)
 800bac6:	7f9b      	ldrb	r3, [r3, #30]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d11b      	bne.n	800bb04 <Reset_Flow_Offset+0x4c>
		{
			MPX7002.offset                = MPX7002.current_reading;
 800bacc:	4b12      	ldr	r3, [pc, #72]	; (800bb18 <Reset_Flow_Offset+0x60>)
 800bace:	899a      	ldrh	r2, [r3, #12]
 800bad0:	4b11      	ldr	r3, [pc, #68]	; (800bb18 <Reset_Flow_Offset+0x60>)
 800bad2:	801a      	strh	r2, [r3, #0]
			//MPX5010.offset                = MPX5010.current_reading;
			Backup_PC_CMV_SET_VALUE       = CHANGE_HAPPEN;
 800bad4:	4b11      	ldr	r3, [pc, #68]	; (800bb1c <Reset_Flow_Offset+0x64>)
 800bad6:	2201      	movs	r2, #1
 800bad8:	701a      	strb	r2, [r3, #0]
	else
	{
		MPX7002.offset           = MPX7002.current_reading;
	}

}
 800bada:	e013      	b.n	800bb04 <Reset_Flow_Offset+0x4c>
	else if(Vent_Type == ET_TUBE_MODE)
 800badc:	4b0c      	ldr	r3, [pc, #48]	; (800bb10 <Reset_Flow_Offset+0x58>)
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10b      	bne.n	800bafc <Reset_Flow_Offset+0x44>
		if(OLD.last_vent_type == MASK_MODE)
 800bae4:	4b0b      	ldr	r3, [pc, #44]	; (800bb14 <Reset_Flow_Offset+0x5c>)
 800bae6:	7f9b      	ldrb	r3, [r3, #30]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d10b      	bne.n	800bb04 <Reset_Flow_Offset+0x4c>
			MPX7002.offset                = MPX7002.current_reading;
 800baec:	4b0a      	ldr	r3, [pc, #40]	; (800bb18 <Reset_Flow_Offset+0x60>)
 800baee:	899a      	ldrh	r2, [r3, #12]
 800baf0:	4b09      	ldr	r3, [pc, #36]	; (800bb18 <Reset_Flow_Offset+0x60>)
 800baf2:	801a      	strh	r2, [r3, #0]
			Backup_PC_CMV_SET_VALUE       = CHANGE_HAPPEN;
 800baf4:	4b09      	ldr	r3, [pc, #36]	; (800bb1c <Reset_Flow_Offset+0x64>)
 800baf6:	2201      	movs	r2, #1
 800baf8:	701a      	strb	r2, [r3, #0]
}
 800bafa:	e003      	b.n	800bb04 <Reset_Flow_Offset+0x4c>
		MPX7002.offset           = MPX7002.current_reading;
 800bafc:	4b06      	ldr	r3, [pc, #24]	; (800bb18 <Reset_Flow_Offset+0x60>)
 800bafe:	899a      	ldrh	r2, [r3, #12]
 800bb00:	4b05      	ldr	r3, [pc, #20]	; (800bb18 <Reset_Flow_Offset+0x60>)
 800bb02:	801a      	strh	r2, [r3, #0]
}
 800bb04:	bf00      	nop
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	200129f4 	.word	0x200129f4
 800bb14:	20012c08 	.word	0x20012c08
 800bb18:	20012dc4 	.word	0x20012dc4
 800bb1c:	20012594 	.word	0x20012594

0800bb20 <Time_Trace_Task>:
 * This task controls all time-based functions
 * */


void Time_Trace_Task (void *argument)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
	while (1)
	{

		INSPIRATION_TIME_TRACE();
 800bb28:	f000 f838 	bl	800bb9c <INSPIRATION_TIME_TRACE>
		EXPIRATION_TIME_TRACE();
 800bb2c:	f000 f8b4 	bl	800bc98 <EXPIRATION_TIME_TRACE>
		BREATH_COUNT();
 800bb30:	f000 faf8 	bl	800c124 <BREATH_COUNT>
		Nebuliser_Timing();
 800bb34:	f000 fb32 	bl	800c19c <Nebuliser_Timing>
		INITIAL_WAIT_TIME();
 800bb38:	f000 fb4a 	bl	800c1d0 <INITIAL_WAIT_TIME>


		if(Running_Mode == Pcsimv)
 800bb3c:	4b16      	ldr	r3, [pc, #88]	; (800bb98 <Time_Trace_Task+0x78>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b05      	cmp	r3, #5
 800bb42:	d102      	bne.n	800bb4a <Time_Trace_Task+0x2a>
		{
			PC_SIMV_BLOWER_WAIT_TIME_TRACE();
 800bb44:	f000 f8fa 	bl	800bd3c <PC_SIMV_BLOWER_WAIT_TIME_TRACE>
 800bb48:	e021      	b.n	800bb8e <Time_Trace_Task+0x6e>
		}
		else if(Running_Mode == Vcsimv)
 800bb4a:	4b13      	ldr	r3, [pc, #76]	; (800bb98 <Time_Trace_Task+0x78>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b06      	cmp	r3, #6
 800bb50:	d102      	bne.n	800bb58 <Time_Trace_Task+0x38>
		{
			VC_SIMV_BLOWER_WAIT_TIME_TRACE();
 800bb52:	f000 f925 	bl	800bda0 <VC_SIMV_BLOWER_WAIT_TIME_TRACE>
 800bb56:	e01a      	b.n	800bb8e <Time_Trace_Task+0x6e>
		}
		else if(Running_Mode == Psv)
 800bb58:	4b0f      	ldr	r3, [pc, #60]	; (800bb98 <Time_Trace_Task+0x78>)
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	2b07      	cmp	r3, #7
 800bb5e:	d102      	bne.n	800bb66 <Time_Trace_Task+0x46>
		{
			PSV_APNEA_COUNTER_TRACE();
 800bb60:	f000 f950 	bl	800be04 <PSV_APNEA_COUNTER_TRACE>
 800bb64:	e013      	b.n	800bb8e <Time_Trace_Task+0x6e>
		}
		else if(Running_Mode == Cpap)
 800bb66:	4b0c      	ldr	r3, [pc, #48]	; (800bb98 <Time_Trace_Task+0x78>)
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b0b      	cmp	r3, #11
 800bb6c:	d102      	bne.n	800bb74 <Time_Trace_Task+0x54>
		{
			CPAP_APNEA_COUNTER_TRACE();
 800bb6e:	f000 fa17 	bl	800bfa0 <CPAP_APNEA_COUNTER_TRACE>
 800bb72:	e00c      	b.n	800bb8e <Time_Trace_Task+0x6e>
		}
		else if(Running_Mode == BiPap)
 800bb74:	4b08      	ldr	r3, [pc, #32]	; (800bb98 <Time_Trace_Task+0x78>)
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b0c      	cmp	r3, #12
 800bb7a:	d102      	bne.n	800bb82 <Time_Trace_Task+0x62>
		{
			BIPAP_APNEA_COUNTER_TRACE();
 800bb7c:	f000 f9a6 	bl	800becc <BIPAP_APNEA_COUNTER_TRACE>
 800bb80:	e005      	b.n	800bb8e <Time_Trace_Task+0x6e>
		}
		else if(Running_Mode == Aprv)
 800bb82:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <Time_Trace_Task+0x78>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b04      	cmp	r3, #4
 800bb88:	d101      	bne.n	800bb8e <Time_Trace_Task+0x6e>
		{
			APRV_APNEA_COUNTER_TRACE();
 800bb8a:	f000 fa65 	bl	800c058 <APRV_APNEA_COUNTER_TRACE>
		}

		vTaskDelay(Two_Millisecond_Delay);
 800bb8e:	2002      	movs	r0, #2
 800bb90:	f00f fa5c 	bl	801b04c <vTaskDelay>
		INSPIRATION_TIME_TRACE();
 800bb94:	e7c8      	b.n	800bb28 <Time_Trace_Task+0x8>
 800bb96:	bf00      	nop
 800bb98:	20012b68 	.word	0x20012b68

0800bb9c <INSPIRATION_TIME_TRACE>:
 * @brief INSPIRATION_TIME_TRACE.
 * This function tracks the time achieved during the inspiration phase.
 * @param None.
 * */
void INSPIRATION_TIME_TRACE()
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
	if(TIME_Base_parameter._INSPIRATION_TIME > 0)
 800bba2:	4b37      	ldr	r3, [pc, #220]	; (800bc80 <INSPIRATION_TIME_TRACE+0xe4>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	dd66      	ble.n	800bc78 <INSPIRATION_TIME_TRACE+0xdc>
	{
		TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED  = TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED+2;
 800bbaa:	4b35      	ldr	r3, [pc, #212]	; (800bc80 <INSPIRATION_TIME_TRACE+0xe4>)
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	3302      	adds	r3, #2
 800bbb0:	4a33      	ldr	r2, [pc, #204]	; (800bc80 <INSPIRATION_TIME_TRACE+0xe4>)
 800bbb2:	6093      	str	r3, [r2, #8]
		TIME_Base_parameter._INSPIRATION_TIME          = TIME_Base_parameter._INSPIRATION_TIME -2;
 800bbb4:	4b32      	ldr	r3, [pc, #200]	; (800bc80 <INSPIRATION_TIME_TRACE+0xe4>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	3b02      	subs	r3, #2
 800bbba:	4a31      	ldr	r2, [pc, #196]	; (800bc80 <INSPIRATION_TIME_TRACE+0xe4>)
 800bbbc:	6013      	str	r3, [r2, #0]
		if(TIME_Base_parameter._INSPIRATION_TIME<0)
 800bbbe:	4b30      	ldr	r3, [pc, #192]	; (800bc80 <INSPIRATION_TIME_TRACE+0xe4>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	da02      	bge.n	800bbcc <INSPIRATION_TIME_TRACE+0x30>
			TIME_Base_parameter._INSPIRATION_TIME=0;
 800bbc6:	4b2e      	ldr	r3, [pc, #184]	; (800bc80 <INSPIRATION_TIME_TRACE+0xe4>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	601a      	str	r2, [r3, #0]

		if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED > 100)
 800bbcc:	4b2c      	ldr	r3, [pc, #176]	; (800bc80 <INSPIRATION_TIME_TRACE+0xe4>)
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	2b64      	cmp	r3, #100	; 0x64
 800bbd2:	dd01      	ble.n	800bbd8 <INSPIRATION_TIME_TRACE+0x3c>
		{
			Find_Max_PIP();
 800bbd4:	f7fd f87c 	bl	8008cd0 <Find_Max_PIP>
		}
		if(TIME_Base_parameter._INSPIRATION_TIME <200)
 800bbd8:	4b29      	ldr	r3, [pc, #164]	; (800bc80 <INSPIRATION_TIME_TRACE+0xe4>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2bc7      	cmp	r3, #199	; 0xc7
 800bbde:	dc0b      	bgt.n	800bbf8 <INSPIRATION_TIME_TRACE+0x5c>
		{
			PIP_Average_Parameter.PIP_Cumulative_Val += GRAPH_VALUES.pressure;
 800bbe0:	4b28      	ldr	r3, [pc, #160]	; (800bc84 <INSPIRATION_TIME_TRACE+0xe8>)
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	4a28      	ldr	r2, [pc, #160]	; (800bc88 <INSPIRATION_TIME_TRACE+0xec>)
 800bbe6:	7812      	ldrb	r2, [r2, #0]
 800bbe8:	4413      	add	r3, r2
 800bbea:	4a26      	ldr	r2, [pc, #152]	; (800bc84 <INSPIRATION_TIME_TRACE+0xe8>)
 800bbec:	6053      	str	r3, [r2, #4]
			PIP_Average_Parameter.PIP_Event_Count++;
 800bbee:	4b25      	ldr	r3, [pc, #148]	; (800bc84 <INSPIRATION_TIME_TRACE+0xe8>)
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	4a23      	ldr	r2, [pc, #140]	; (800bc84 <INSPIRATION_TIME_TRACE+0xe8>)
 800bbf6:	6093      	str	r3, [r2, #8]
//		if(TIME_Base_parameter.FLOW_ACHIEVED_TIMER > 0)
//		{
//			TIME_Base_parameter.FLOW_ACHIEVED_TIMER = (TIME_Base_parameter.FLOW_ACHIEVED_TIMER -2);
//			if(TIME_Base_parameter.FLOW_ACHIEVED_TIMER < 0)
//				TIME_Base_parameter.FLOW_ACHIEVED_TIMER = 0;
		if(Maximum_Flow_Achieved      == FLOW_ACHIEVED )
 800bbf8:	4b24      	ldr	r3, [pc, #144]	; (800bc8c <INSPIRATION_TIME_TRACE+0xf0>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d118      	bne.n	800bc32 <INSPIRATION_TIME_TRACE+0x96>
		{
			if(GRAPH_VALUES.flow > Volume_control_Task.Flow_Max_Achieved)
 800bc00:	4b21      	ldr	r3, [pc, #132]	; (800bc88 <INSPIRATION_TIME_TRACE+0xec>)
 800bc02:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc06:	4b22      	ldr	r3, [pc, #136]	; (800bc90 <INSPIRATION_TIME_TRACE+0xf4>)
 800bc08:	785b      	ldrb	r3, [r3, #1]
 800bc0a:	ee07 3a90 	vmov	s15, r3
 800bc0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc1a:	dd0a      	ble.n	800bc32 <INSPIRATION_TIME_TRACE+0x96>
		    {
			  Volume_control_Task.Flow_Max_Achieved = GRAPH_VALUES.flow;
 800bc1c:	4b1a      	ldr	r3, [pc, #104]	; (800bc88 <INSPIRATION_TIME_TRACE+0xec>)
 800bc1e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc26:	edc7 7a01 	vstr	s15, [r7, #4]
 800bc2a:	793b      	ldrb	r3, [r7, #4]
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	4b18      	ldr	r3, [pc, #96]	; (800bc90 <INSPIRATION_TIME_TRACE+0xf4>)
 800bc30:	705a      	strb	r2, [r3, #1]
		    }
		}

		if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED < 200)
 800bc32:	4b13      	ldr	r3, [pc, #76]	; (800bc80 <INSPIRATION_TIME_TRACE+0xe4>)
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	2bc7      	cmp	r3, #199	; 0xc7
 800bc38:	dc04      	bgt.n	800bc44 <INSPIRATION_TIME_TRACE+0xa8>
		{
			Current_Pressure   = GRAPH_VALUES.pressure;
 800bc3a:	4b13      	ldr	r3, [pc, #76]	; (800bc88 <INSPIRATION_TIME_TRACE+0xec>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	4b14      	ldr	r3, [pc, #80]	; (800bc94 <INSPIRATION_TIME_TRACE+0xf8>)
 800bc42:	601a      	str	r2, [r3, #0]
		}

		if(GRAPH_VALUES.flow > Volume_control_Task.LOW_Flow_Max_Achieved)
 800bc44:	4b10      	ldr	r3, [pc, #64]	; (800bc88 <INSPIRATION_TIME_TRACE+0xec>)
 800bc46:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc4a:	4b11      	ldr	r3, [pc, #68]	; (800bc90 <INSPIRATION_TIME_TRACE+0xf4>)
 800bc4c:	791b      	ldrb	r3, [r3, #4]
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc5e:	dc00      	bgt.n	800bc62 <INSPIRATION_TIME_TRACE+0xc6>
	    {
		  Volume_control_Task.LOW_Flow_Max_Achieved = GRAPH_VALUES.flow;
	    }
	}
}
 800bc60:	e00a      	b.n	800bc78 <INSPIRATION_TIME_TRACE+0xdc>
		  Volume_control_Task.LOW_Flow_Max_Achieved = GRAPH_VALUES.flow;
 800bc62:	4b09      	ldr	r3, [pc, #36]	; (800bc88 <INSPIRATION_TIME_TRACE+0xec>)
 800bc64:	edd3 7a01 	vldr	s15, [r3, #4]
 800bc68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc6c:	edc7 7a01 	vstr	s15, [r7, #4]
 800bc70:	793b      	ldrb	r3, [r7, #4]
 800bc72:	b2da      	uxtb	r2, r3
 800bc74:	4b06      	ldr	r3, [pc, #24]	; (800bc90 <INSPIRATION_TIME_TRACE+0xf4>)
 800bc76:	711a      	strb	r2, [r3, #4]
}
 800bc78:	bf00      	nop
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	20012b38 	.word	0x20012b38
 800bc84:	200124bc 	.word	0x200124bc
 800bc88:	200125f8 	.word	0x200125f8
 800bc8c:	200126b9 	.word	0x200126b9
 800bc90:	20012840 	.word	0x20012840
 800bc94:	200121d0 	.word	0x200121d0

0800bc98 <EXPIRATION_TIME_TRACE>:
 * @brief EXPIRATION_TIME_TRACE.
 * This function tracks the time achieved during the expiration phase.
 * @param None.
 * */
void EXPIRATION_TIME_TRACE()
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	af00      	add	r7, sp, #0
	if(TIME_Base_parameter._EXPIRATION_TIME > 0)
 800bc9c:	4b24      	ldr	r3, [pc, #144]	; (800bd30 <EXPIRATION_TIME_TRACE+0x98>)
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	dd43      	ble.n	800bd2c <EXPIRATION_TIME_TRACE+0x94>
	{
		TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED   = TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED+2;
 800bca4:	4b22      	ldr	r3, [pc, #136]	; (800bd30 <EXPIRATION_TIME_TRACE+0x98>)
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	3302      	adds	r3, #2
 800bcaa:	4a21      	ldr	r2, [pc, #132]	; (800bd30 <EXPIRATION_TIME_TRACE+0x98>)
 800bcac:	60d3      	str	r3, [r2, #12]
		TIME_Base_parameter._EXPIRATION_TIME           = TIME_Base_parameter._EXPIRATION_TIME -2;
 800bcae:	4b20      	ldr	r3, [pc, #128]	; (800bd30 <EXPIRATION_TIME_TRACE+0x98>)
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	3b02      	subs	r3, #2
 800bcb4:	4a1e      	ldr	r2, [pc, #120]	; (800bd30 <EXPIRATION_TIME_TRACE+0x98>)
 800bcb6:	6053      	str	r3, [r2, #4]
		if(TIME_Base_parameter._EXPIRATION_TIME<0)
 800bcb8:	4b1d      	ldr	r3, [pc, #116]	; (800bd30 <EXPIRATION_TIME_TRACE+0x98>)
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	da02      	bge.n	800bcc6 <EXPIRATION_TIME_TRACE+0x2e>
			TIME_Base_parameter._EXPIRATION_TIME=0;
 800bcc0:	4b1b      	ldr	r3, [pc, #108]	; (800bd30 <EXPIRATION_TIME_TRACE+0x98>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	605a      	str	r2, [r3, #4]
		if(TIME_Base_parameter._EXPIRATION_TIME <100)
 800bcc6:	4b1a      	ldr	r3, [pc, #104]	; (800bd30 <EXPIRATION_TIME_TRACE+0x98>)
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	2b63      	cmp	r3, #99	; 0x63
 800bccc:	dc0d      	bgt.n	800bcea <EXPIRATION_TIME_TRACE+0x52>
		{
			PEEP_Maintain_Parameter.PEEP_Cumulative_Val += GRAPH_VALUES.pressure;
 800bcce:	4b19      	ldr	r3, [pc, #100]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	4a19      	ldr	r2, [pc, #100]	; (800bd38 <EXPIRATION_TIME_TRACE+0xa0>)
 800bcd4:	7812      	ldrb	r2, [r2, #0]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	4a16      	ldr	r2, [pc, #88]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bcda:	6093      	str	r3, [r2, #8]
			PEEP_Maintain_Parameter.PEEP_Event_Count++;
 800bcdc:	4b15      	ldr	r3, [pc, #84]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	3301      	adds	r3, #1
 800bce2:	4a14      	ldr	r2, [pc, #80]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bce4:	60d3      	str	r3, [r2, #12]
			Find_Maximum_PEEP();
 800bce6:	f7fd f809 	bl	8008cfc <Find_Maximum_PEEP>
		}

		if(TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED > 500)
 800bcea:	4b11      	ldr	r3, [pc, #68]	; (800bd30 <EXPIRATION_TIME_TRACE+0x98>)
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800bcf2:	dd0b      	ble.n	800bd0c <EXPIRATION_TIME_TRACE+0x74>
		{
			PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger += GRAPH_VALUES.pressure;
 800bcf4:	4b0f      	ldr	r3, [pc, #60]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bcf6:	695b      	ldr	r3, [r3, #20]
 800bcf8:	4a0f      	ldr	r2, [pc, #60]	; (800bd38 <EXPIRATION_TIME_TRACE+0xa0>)
 800bcfa:	7812      	ldrb	r2, [r2, #0]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	4a0d      	ldr	r2, [pc, #52]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bd00:	6153      	str	r3, [r2, #20]
			PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger++;
 800bd02:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bd04:	699b      	ldr	r3, [r3, #24]
 800bd06:	3301      	adds	r3, #1
 800bd08:	4a0a      	ldr	r2, [pc, #40]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bd0a:	6193      	str	r3, [r2, #24]
		}

		if(PEEP_Maintain_Parameter.CHECK_TRIGGER > 0)
 800bd0c:	4b09      	ldr	r3, [pc, #36]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bd0e:	69db      	ldr	r3, [r3, #28]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dd0b      	ble.n	800bd2c <EXPIRATION_TIME_TRACE+0x94>
		{
			PEEP_Maintain_Parameter.CHECK_TRIGGER = (PEEP_Maintain_Parameter.CHECK_TRIGGER-2);
 800bd14:	4b07      	ldr	r3, [pc, #28]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bd16:	69db      	ldr	r3, [r3, #28]
 800bd18:	3b02      	subs	r3, #2
 800bd1a:	4a06      	ldr	r2, [pc, #24]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bd1c:	61d3      	str	r3, [r2, #28]
			if(PEEP_Maintain_Parameter.CHECK_TRIGGER<0)
 800bd1e:	4b05      	ldr	r3, [pc, #20]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bd20:	69db      	ldr	r3, [r3, #28]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	da02      	bge.n	800bd2c <EXPIRATION_TIME_TRACE+0x94>
				PEEP_Maintain_Parameter.CHECK_TRIGGER=0;
 800bd26:	4b03      	ldr	r3, [pc, #12]	; (800bd34 <EXPIRATION_TIME_TRACE+0x9c>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	61da      	str	r2, [r3, #28]
		}
	}
}
 800bd2c:	bf00      	nop
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20012b38 	.word	0x20012b38
 800bd34:	20012c74 	.word	0x20012c74
 800bd38:	200125f8 	.word	0x200125f8

0800bd3c <PC_SIMV_BLOWER_WAIT_TIME_TRACE>:
 * This function controls the blower to hold for a few milliseconds to pause operations.
 * @param None.
 * */

void PC_SIMV_BLOWER_WAIT_TIME_TRACE()
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	af00      	add	r7, sp, #0
	if(PCsimv.Blower_Wait_Time_Milli_Second > 0)
 800bd40:	4b16      	ldr	r3, [pc, #88]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	dd13      	ble.n	800bd70 <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x34>
	{
		PCsimv.Blower_Wait_Time_Milli_Second = (PCsimv.Blower_Wait_Time_Milli_Second -2);
 800bd48:	4b14      	ldr	r3, [pc, #80]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3b02      	subs	r3, #2
 800bd4e:	4a13      	ldr	r2, [pc, #76]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd50:	6013      	str	r3, [r2, #0]
		if(PCsimv.Blower_Wait_Time_Milli_Second < 0)
 800bd52:	4b12      	ldr	r3, [pc, #72]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	da02      	bge.n	800bd60 <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x24>
			PCsimv.Blower_Wait_Time_Milli_Second=0;
 800bd5a:	4b10      	ldr	r3, [pc, #64]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
		if(PCsimv.Blower_Wait_Time_Milli_Second < 100)
 800bd60:	4b0e      	ldr	r3, [pc, #56]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b63      	cmp	r3, #99	; 0x63
 800bd66:	dc03      	bgt.n	800bd70 <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x34>
			PCsimv.Trigger_Check_Wait_Time = 500;
 800bd68:	4b0c      	ldr	r3, [pc, #48]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bd6e:	605a      	str	r2, [r3, #4]
	}

	if(PCsimv.Trigger_Check_Wait_Time > 0 )
 800bd70:	4b0a      	ldr	r3, [pc, #40]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	dd0b      	ble.n	800bd90 <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x54>
	{
		PCsimv.Trigger_Check_Wait_Time = (PCsimv.Trigger_Check_Wait_Time -2);
 800bd78:	4b08      	ldr	r3, [pc, #32]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	3b02      	subs	r3, #2
 800bd7e:	4a07      	ldr	r2, [pc, #28]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd80:	6053      	str	r3, [r2, #4]
		 if(PCsimv.Trigger_Check_Wait_Time < 0)
 800bd82:	4b06      	ldr	r3, [pc, #24]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	da02      	bge.n	800bd90 <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x54>
			 PCsimv.Trigger_Check_Wait_Time =0;
 800bd8a:	4b04      	ldr	r3, [pc, #16]	; (800bd9c <PC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	605a      	str	r2, [r3, #4]
	}
}
 800bd90:	bf00      	nop
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	200124e4 	.word	0x200124e4

0800bda0 <VC_SIMV_BLOWER_WAIT_TIME_TRACE>:
 * @brief VC_SIMV_BLOWER_WAIT_TIME_TRACE.
 * This function controls the blower to hold for a few milliseconds to pause operations.
 * @param None.
 * */
void VC_SIMV_BLOWER_WAIT_TIME_TRACE()
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
	if(VCsimv.Blower_Wait_Time_Milli_Second > 0)
 800bda4:	4b16      	ldr	r3, [pc, #88]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	dd13      	ble.n	800bdd4 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x34>
	{
		VCsimv.Blower_Wait_Time_Milli_Second = (VCsimv.Blower_Wait_Time_Milli_Second -2);
 800bdac:	4b14      	ldr	r3, [pc, #80]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	3b02      	subs	r3, #2
 800bdb2:	4a13      	ldr	r2, [pc, #76]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bdb4:	6013      	str	r3, [r2, #0]
		if(VCsimv.Blower_Wait_Time_Milli_Second < 0)
 800bdb6:	4b12      	ldr	r3, [pc, #72]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	da02      	bge.n	800bdc4 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x24>
			VCsimv.Blower_Wait_Time_Milli_Second=0;
 800bdbe:	4b10      	ldr	r3, [pc, #64]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	601a      	str	r2, [r3, #0]
		if(VCsimv.Blower_Wait_Time_Milli_Second < 100)
 800bdc4:	4b0e      	ldr	r3, [pc, #56]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b63      	cmp	r3, #99	; 0x63
 800bdca:	dc03      	bgt.n	800bdd4 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x34>
			VCsimv.Trigger_Check_Wait_Time = 500;
 800bdcc:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bdce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800bdd2:	605a      	str	r2, [r3, #4]
	}

	if(VCsimv.Trigger_Check_Wait_Time > 0 )
 800bdd4:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	dd0b      	ble.n	800bdf4 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x54>
	{
		VCsimv.Trigger_Check_Wait_Time = (VCsimv.Trigger_Check_Wait_Time -2);
 800bddc:	4b08      	ldr	r3, [pc, #32]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	3b02      	subs	r3, #2
 800bde2:	4a07      	ldr	r2, [pc, #28]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bde4:	6053      	str	r3, [r2, #4]
		 if(VCsimv.Trigger_Check_Wait_Time < 0)
 800bde6:	4b06      	ldr	r3, [pc, #24]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	da02      	bge.n	800bdf4 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x54>
			 VCsimv.Trigger_Check_Wait_Time =0;
 800bdee:	4b04      	ldr	r3, [pc, #16]	; (800be00 <VC_SIMV_BLOWER_WAIT_TIME_TRACE+0x60>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	605a      	str	r2, [r3, #4]
	}
}
 800bdf4:	bf00      	nop
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	20012a98 	.word	0x20012a98

0800be04 <PSV_APNEA_COUNTER_TRACE>:
 * @brief PSV_APNEA_COUNTER_TRACE.
 * This function tracks the time elapsed during the apnea period in PSV mode
 * @param None.
 * */
void PSV_APNEA_COUNTER_TRACE()
{
 800be04:	b480      	push	{r7}
 800be06:	af00      	add	r7, sp, #0
	if(PSV.APNEA_COUNTER > 0)
 800be08:	4b2e      	ldr	r3, [pc, #184]	; (800bec4 <PSV_APNEA_COUNTER_TRACE+0xc0>)
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dd0b      	ble.n	800be28 <PSV_APNEA_COUNTER_TRACE+0x24>
	{
		PSV.APNEA_COUNTER = (PSV.APNEA_COUNTER -2);
 800be10:	4b2c      	ldr	r3, [pc, #176]	; (800bec4 <PSV_APNEA_COUNTER_TRACE+0xc0>)
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	3b02      	subs	r3, #2
 800be16:	4a2b      	ldr	r2, [pc, #172]	; (800bec4 <PSV_APNEA_COUNTER_TRACE+0xc0>)
 800be18:	6193      	str	r3, [r2, #24]
		if(PSV.APNEA_COUNTER < 0)
 800be1a:	4b2a      	ldr	r3, [pc, #168]	; (800bec4 <PSV_APNEA_COUNTER_TRACE+0xc0>)
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	da02      	bge.n	800be28 <PSV_APNEA_COUNTER_TRACE+0x24>
		{
			PSV.APNEA_COUNTER = 0;
 800be22:	4b28      	ldr	r3, [pc, #160]	; (800bec4 <PSV_APNEA_COUNTER_TRACE+0xc0>)
 800be24:	2200      	movs	r2, #0
 800be26:	619a      	str	r2, [r3, #24]
		}
	}
	if(PSV_Control.PSV_PEEP_Settle_Time > 0)
 800be28:	4b27      	ldr	r3, [pc, #156]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dd0b      	ble.n	800be48 <PSV_APNEA_COUNTER_TRACE+0x44>
	{
		PSV_Control.PSV_PEEP_Settle_Time = (PSV_Control.PSV_PEEP_Settle_Time -2);
 800be30:	4b25      	ldr	r3, [pc, #148]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	3b02      	subs	r3, #2
 800be36:	4a24      	ldr	r2, [pc, #144]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be38:	6013      	str	r3, [r2, #0]
		if(PSV_Control.PSV_PEEP_Settle_Time < 0)
 800be3a:	4b23      	ldr	r3, [pc, #140]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	da02      	bge.n	800be48 <PSV_APNEA_COUNTER_TRACE+0x44>
		{
			PSV_Control.PSV_PEEP_Settle_Time = 0;
 800be42:	4b21      	ldr	r3, [pc, #132]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be44:	2200      	movs	r2, #0
 800be46:	601a      	str	r2, [r3, #0]
		}
	}

	if(PSV_Control.Blower_Wait_Time_Milli_Second > 0)
 800be48:	4b1f      	ldr	r3, [pc, #124]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	dd13      	ble.n	800be78 <PSV_APNEA_COUNTER_TRACE+0x74>
	{
		PSV_Control.Blower_Wait_Time_Milli_Second = (PSV_Control.Blower_Wait_Time_Milli_Second -2);
 800be50:	4b1d      	ldr	r3, [pc, #116]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	3b02      	subs	r3, #2
 800be56:	4a1c      	ldr	r2, [pc, #112]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be58:	6053      	str	r3, [r2, #4]
		if(PSV_Control.Blower_Wait_Time_Milli_Second < 0)
 800be5a:	4b1b      	ldr	r3, [pc, #108]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	da02      	bge.n	800be68 <PSV_APNEA_COUNTER_TRACE+0x64>
			PSV_Control.Blower_Wait_Time_Milli_Second=0;
 800be62:	4b19      	ldr	r3, [pc, #100]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be64:	2200      	movs	r2, #0
 800be66:	605a      	str	r2, [r3, #4]
		if(PSV_Control.Blower_Wait_Time_Milli_Second < 100)
 800be68:	4b17      	ldr	r3, [pc, #92]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	2b63      	cmp	r3, #99	; 0x63
 800be6e:	dc03      	bgt.n	800be78 <PSV_APNEA_COUNTER_TRACE+0x74>
			PSV_Control.Trigger_Check_Wait_Time = 500;
 800be70:	4b15      	ldr	r3, [pc, #84]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be72:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800be76:	609a      	str	r2, [r3, #8]
	}

	if(PSV_Control.Trigger_Check_Wait_Time > 0 )
 800be78:	4b13      	ldr	r3, [pc, #76]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	dd0b      	ble.n	800be98 <PSV_APNEA_COUNTER_TRACE+0x94>
	{
		PSV_Control.Trigger_Check_Wait_Time = (PSV_Control.Trigger_Check_Wait_Time -2);
 800be80:	4b11      	ldr	r3, [pc, #68]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	3b02      	subs	r3, #2
 800be86:	4a10      	ldr	r2, [pc, #64]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be88:	6093      	str	r3, [r2, #8]
		 if(PSV_Control.Trigger_Check_Wait_Time < 0)
 800be8a:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	da02      	bge.n	800be98 <PSV_APNEA_COUNTER_TRACE+0x94>
			 PSV_Control.Trigger_Check_Wait_Time =0;
 800be92:	4b0d      	ldr	r3, [pc, #52]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be94:	2200      	movs	r2, #0
 800be96:	609a      	str	r2, [r3, #8]
	}

	if(PSV_Control._INSPIRATION_TIME  > 0)
 800be98:	4b0b      	ldr	r3, [pc, #44]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	dd0b      	ble.n	800beb8 <PSV_APNEA_COUNTER_TRACE+0xb4>
	{
		PSV_Control._INSPIRATION_TIME = (PSV_Control._INSPIRATION_TIME -2);
 800bea0:	4b09      	ldr	r3, [pc, #36]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	3b02      	subs	r3, #2
 800bea6:	4a08      	ldr	r2, [pc, #32]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800bea8:	60d3      	str	r3, [r2, #12]
		if(PSV_Control._INSPIRATION_TIME < 0)
 800beaa:	4b07      	ldr	r3, [pc, #28]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	da02      	bge.n	800beb8 <PSV_APNEA_COUNTER_TRACE+0xb4>
			PSV_Control._INSPIRATION_TIME =0;
 800beb2:	4b05      	ldr	r3, [pc, #20]	; (800bec8 <PSV_APNEA_COUNTER_TRACE+0xc4>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	60da      	str	r2, [r3, #12]
	}

}
 800beb8:	bf00      	nop
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	20012710 	.word	0x20012710
 800bec8:	20012b78 	.word	0x20012b78

0800becc <BIPAP_APNEA_COUNTER_TRACE>:
 * This function tracks the time elapsed during the apnea period in bipap mode.
 * @param None.
 * */

void BIPAP_APNEA_COUNTER_TRACE()
{
 800becc:	b580      	push	{r7, lr}
 800bece:	af00      	add	r7, sp, #0
	if(BIPAP.APNEA_COUNTER > 0)
 800bed0:	4b31      	ldr	r3, [pc, #196]	; (800bf98 <BIPAP_APNEA_COUNTER_TRACE+0xcc>)
 800bed2:	699b      	ldr	r3, [r3, #24]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	dd0b      	ble.n	800bef0 <BIPAP_APNEA_COUNTER_TRACE+0x24>
	{
		BIPAP.APNEA_COUNTER = (BIPAP.APNEA_COUNTER -2);
 800bed8:	4b2f      	ldr	r3, [pc, #188]	; (800bf98 <BIPAP_APNEA_COUNTER_TRACE+0xcc>)
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	3b02      	subs	r3, #2
 800bede:	4a2e      	ldr	r2, [pc, #184]	; (800bf98 <BIPAP_APNEA_COUNTER_TRACE+0xcc>)
 800bee0:	6193      	str	r3, [r2, #24]
		if(BIPAP.APNEA_COUNTER < 0)
 800bee2:	4b2d      	ldr	r3, [pc, #180]	; (800bf98 <BIPAP_APNEA_COUNTER_TRACE+0xcc>)
 800bee4:	699b      	ldr	r3, [r3, #24]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	da02      	bge.n	800bef0 <BIPAP_APNEA_COUNTER_TRACE+0x24>
		{
			BIPAP.APNEA_COUNTER = 0;
 800beea:	4b2b      	ldr	r3, [pc, #172]	; (800bf98 <BIPAP_APNEA_COUNTER_TRACE+0xcc>)
 800beec:	2200      	movs	r2, #0
 800beee:	619a      	str	r2, [r3, #24]
		}
	}
	if(BIPAP_Control.BIPAP_EPAP_Settle_Time > 0)
 800bef0:	4b2a      	ldr	r3, [pc, #168]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	dd0b      	ble.n	800bf10 <BIPAP_APNEA_COUNTER_TRACE+0x44>
	{
		BIPAP_Control.BIPAP_EPAP_Settle_Time = (BIPAP_Control.BIPAP_EPAP_Settle_Time -2);
 800bef8:	4b28      	ldr	r3, [pc, #160]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3b02      	subs	r3, #2
 800befe:	4a27      	ldr	r2, [pc, #156]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf00:	6013      	str	r3, [r2, #0]
		if(BIPAP_Control.BIPAP_EPAP_Settle_Time < 0)
 800bf02:	4b26      	ldr	r3, [pc, #152]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	da02      	bge.n	800bf10 <BIPAP_APNEA_COUNTER_TRACE+0x44>
		{
			BIPAP_Control.BIPAP_EPAP_Settle_Time = 0;
 800bf0a:	4b24      	ldr	r3, [pc, #144]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	601a      	str	r2, [r3, #0]
		}
	}

	if(BIPAP_Control.Blower_Wait_Time_Milli_Second > 0)
 800bf10:	4b22      	ldr	r3, [pc, #136]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	dd0b      	ble.n	800bf30 <BIPAP_APNEA_COUNTER_TRACE+0x64>
	{
		BIPAP_Control.Blower_Wait_Time_Milli_Second = (BIPAP_Control.Blower_Wait_Time_Milli_Second -2);
 800bf18:	4b20      	ldr	r3, [pc, #128]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	3b02      	subs	r3, #2
 800bf1e:	4a1f      	ldr	r2, [pc, #124]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf20:	6053      	str	r3, [r2, #4]
		if(BIPAP_Control.Blower_Wait_Time_Milli_Second < 0)
 800bf22:	4b1e      	ldr	r3, [pc, #120]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	da02      	bge.n	800bf30 <BIPAP_APNEA_COUNTER_TRACE+0x64>
			BIPAP_Control.Blower_Wait_Time_Milli_Second=0;
 800bf2a:	4b1c      	ldr	r3, [pc, #112]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	605a      	str	r2, [r3, #4]
		//if(BIPAP_Control.Blower_Wait_Time_Milli_Second < 100)
			//BIPAP_Control.Trigger_Check_Wait_Time = 500;
	}

	if(BIPAP_Control.Trigger_Check_Wait_Time > 0 )
 800bf30:	4b1a      	ldr	r3, [pc, #104]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	dd0b      	ble.n	800bf50 <BIPAP_APNEA_COUNTER_TRACE+0x84>
	{
		BIPAP_Control.Trigger_Check_Wait_Time = (BIPAP_Control.Trigger_Check_Wait_Time -2);
 800bf38:	4b18      	ldr	r3, [pc, #96]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	3b02      	subs	r3, #2
 800bf3e:	4a17      	ldr	r2, [pc, #92]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf40:	6093      	str	r3, [r2, #8]
		 if(BIPAP_Control.Trigger_Check_Wait_Time < 0)
 800bf42:	4b16      	ldr	r3, [pc, #88]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	da02      	bge.n	800bf50 <BIPAP_APNEA_COUNTER_TRACE+0x84>
			 BIPAP_Control.Trigger_Check_Wait_Time =0;
 800bf4a:	4b14      	ldr	r3, [pc, #80]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	609a      	str	r2, [r3, #8]
	}

	if(BIPAP_Control._INSPIRATION_TIME  > 0)
 800bf50:	4b12      	ldr	r3, [pc, #72]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	dd0b      	ble.n	800bf70 <BIPAP_APNEA_COUNTER_TRACE+0xa4>
	{
		BIPAP_Control._INSPIRATION_TIME = (BIPAP_Control._INSPIRATION_TIME -2);
 800bf58:	4b10      	ldr	r3, [pc, #64]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	3b02      	subs	r3, #2
 800bf5e:	4a0f      	ldr	r2, [pc, #60]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf60:	60d3      	str	r3, [r2, #12]
		if(BIPAP_Control._INSPIRATION_TIME < 0)
 800bf62:	4b0e      	ldr	r3, [pc, #56]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	da02      	bge.n	800bf70 <BIPAP_APNEA_COUNTER_TRACE+0xa4>
			BIPAP_Control._INSPIRATION_TIME =0;
 800bf6a:	4b0c      	ldr	r3, [pc, #48]	; (800bf9c <BIPAP_APNEA_COUNTER_TRACE+0xd0>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	60da      	str	r2, [r3, #12]
	}


	if(BIPAP.EPAP_COUNTER  > 0)
 800bf70:	4b09      	ldr	r3, [pc, #36]	; (800bf98 <BIPAP_APNEA_COUNTER_TRACE+0xcc>)
 800bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	dd0d      	ble.n	800bf94 <BIPAP_APNEA_COUNTER_TRACE+0xc8>
	{
		BIPAP.EPAP_COUNTER = (BIPAP.EPAP_COUNTER -2);
 800bf78:	4b07      	ldr	r3, [pc, #28]	; (800bf98 <BIPAP_APNEA_COUNTER_TRACE+0xcc>)
 800bf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7c:	3b02      	subs	r3, #2
 800bf7e:	4a06      	ldr	r2, [pc, #24]	; (800bf98 <BIPAP_APNEA_COUNTER_TRACE+0xcc>)
 800bf80:	62d3      	str	r3, [r2, #44]	; 0x2c
		if(BIPAP.EPAP_COUNTER <= 0)
 800bf82:	4b05      	ldr	r3, [pc, #20]	; (800bf98 <BIPAP_APNEA_COUNTER_TRACE+0xcc>)
 800bf84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	dc04      	bgt.n	800bf94 <BIPAP_APNEA_COUNTER_TRACE+0xc8>
		{
			BIPAP.EPAP_COUNTER =0;
 800bf8a:	4b03      	ldr	r3, [pc, #12]	; (800bf98 <BIPAP_APNEA_COUNTER_TRACE+0xcc>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	62da      	str	r2, [r3, #44]	; 0x2c
			INSPIRATION_PROCESS_BIPAP();
 800bf90:	f7f8 fb0e 	bl	80045b0 <INSPIRATION_PROCESS_BIPAP>

		}
	}
}
 800bf94:	bf00      	nop
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	20012484 	.word	0x20012484
 800bf9c:	20012990 	.word	0x20012990

0800bfa0 <CPAP_APNEA_COUNTER_TRACE>:
 * @brief CPAP_APNEA_COUNTER_TRACE.
 * This function tracks the time elapsed during the apnea period in cpap mode.
 * @param None.
 * */
void CPAP_APNEA_COUNTER_TRACE()
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	af00      	add	r7, sp, #0
	if(CPAP.APNEA_COUNTER > 0)
 800bfa4:	4b28      	ldr	r3, [pc, #160]	; (800c048 <CPAP_APNEA_COUNTER_TRACE+0xa8>)
 800bfa6:	695b      	ldr	r3, [r3, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	dd0b      	ble.n	800bfc4 <CPAP_APNEA_COUNTER_TRACE+0x24>
	{
		CPAP.APNEA_COUNTER = (CPAP.APNEA_COUNTER -2);
 800bfac:	4b26      	ldr	r3, [pc, #152]	; (800c048 <CPAP_APNEA_COUNTER_TRACE+0xa8>)
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	3b02      	subs	r3, #2
 800bfb2:	4a25      	ldr	r2, [pc, #148]	; (800c048 <CPAP_APNEA_COUNTER_TRACE+0xa8>)
 800bfb4:	6153      	str	r3, [r2, #20]
		if(CPAP.APNEA_COUNTER < 0)
 800bfb6:	4b24      	ldr	r3, [pc, #144]	; (800c048 <CPAP_APNEA_COUNTER_TRACE+0xa8>)
 800bfb8:	695b      	ldr	r3, [r3, #20]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	da02      	bge.n	800bfc4 <CPAP_APNEA_COUNTER_TRACE+0x24>
		{
			CPAP.APNEA_COUNTER = 0;
 800bfbe:	4b22      	ldr	r3, [pc, #136]	; (800c048 <CPAP_APNEA_COUNTER_TRACE+0xa8>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	615a      	str	r2, [r3, #20]
		}
	}
	if(CPAP_Control.CPAP_Settle_Time > 0)
 800bfc4:	4b21      	ldr	r3, [pc, #132]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	dd10      	ble.n	800bfee <CPAP_APNEA_COUNTER_TRACE+0x4e>
	{

		CPAP_Control.CPAP_Settle_Time = (CPAP_Control.CPAP_Settle_Time -2);
 800bfcc:	4b1f      	ldr	r3, [pc, #124]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3b02      	subs	r3, #2
 800bfd2:	4a1e      	ldr	r2, [pc, #120]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800bfd4:	6013      	str	r3, [r2, #0]
		if(CPAP_Control.CPAP_Settle_Time <= 0)
 800bfd6:	4b1d      	ldr	r3, [pc, #116]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	dc07      	bgt.n	800bfee <CPAP_APNEA_COUNTER_TRACE+0x4e>
		{
			Alert_Status                  = NO_ALERT;
 800bfde:	4b1c      	ldr	r3, [pc, #112]	; (800c050 <CPAP_APNEA_COUNTER_TRACE+0xb0>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	701a      	strb	r2, [r3, #0]
			LED_Alert();
 800bfe4:	f7f5 fdee 	bl	8001bc4 <LED_Alert>
			CPAP_Control.CPAP_Settle_Time = 0;
 800bfe8:	4b18      	ldr	r3, [pc, #96]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	601a      	str	r2, [r3, #0]
		}
	}

	if(CPAP_Control.Blower_Wait_Time_Milli_Second > 0)
 800bfee:	4b17      	ldr	r3, [pc, #92]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	dd16      	ble.n	800c024 <CPAP_APNEA_COUNTER_TRACE+0x84>
	{
		CPAP_Control.Blower_Wait_Time_Milli_Second = (CPAP_Control.Blower_Wait_Time_Milli_Second -2);
 800bff6:	4b15      	ldr	r3, [pc, #84]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	3b02      	subs	r3, #2
 800bffc:	4a13      	ldr	r2, [pc, #76]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800bffe:	6053      	str	r3, [r2, #4]
		if(CPAP_Control.Blower_Wait_Time_Milli_Second <= 0)
 800c000:	4b12      	ldr	r3, [pc, #72]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	dc02      	bgt.n	800c00e <CPAP_APNEA_COUNTER_TRACE+0x6e>
			CPAP_Control.Blower_Wait_Time_Milli_Second=0;
 800c008:	4b10      	ldr	r3, [pc, #64]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	605a      	str	r2, [r3, #4]
		if(CPAP_Control.Blower_Wait_Time_Milli_Second <= 100)
 800c00e:	4b0f      	ldr	r3, [pc, #60]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	2b64      	cmp	r3, #100	; 0x64
 800c014:	dc06      	bgt.n	800c024 <CPAP_APNEA_COUNTER_TRACE+0x84>
		{
			CPAP_Control.Trigger_Check_Wait_Time = 500;
 800c016:	4b0d      	ldr	r3, [pc, #52]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800c018:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c01c:	609a      	str	r2, [r3, #8]
			Patient_Trigger                      = NO_PATIENT_TRIGGER;
 800c01e:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <CPAP_APNEA_COUNTER_TRACE+0xb4>)
 800c020:	2200      	movs	r2, #0
 800c022:	701a      	strb	r2, [r3, #0]
		}
	}

	if(CPAP_Control.Trigger_Check_Wait_Time > 0 )
 800c024:	4b09      	ldr	r3, [pc, #36]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	dd0b      	ble.n	800c044 <CPAP_APNEA_COUNTER_TRACE+0xa4>
	{
		CPAP_Control.Trigger_Check_Wait_Time = (CPAP_Control.Trigger_Check_Wait_Time -2);
 800c02c:	4b07      	ldr	r3, [pc, #28]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	3b02      	subs	r3, #2
 800c032:	4a06      	ldr	r2, [pc, #24]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800c034:	6093      	str	r3, [r2, #8]
		 if(CPAP_Control.Trigger_Check_Wait_Time <= 0)
 800c036:	4b05      	ldr	r3, [pc, #20]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	dc02      	bgt.n	800c044 <CPAP_APNEA_COUNTER_TRACE+0xa4>
			 CPAP_Control.Trigger_Check_Wait_Time =0;
 800c03e:	4b03      	ldr	r3, [pc, #12]	; (800c04c <CPAP_APNEA_COUNTER_TRACE+0xac>)
 800c040:	2200      	movs	r2, #0
 800c042:	609a      	str	r2, [r3, #8]
	}
}
 800c044:	bf00      	nop
 800c046:	bd80      	pop	{r7, pc}
 800c048:	200123e0 	.word	0x200123e0
 800c04c:	20012628 	.word	0x20012628
 800c050:	2001287c 	.word	0x2001287c
 800c054:	2001263d 	.word	0x2001263d

0800c058 <APRV_APNEA_COUNTER_TRACE>:
 * @brief APRV_APNEA_COUNTER_TRACE.
 * This function tracks the time achieved during the aprv inspiration and expiration phase.
 * @param None.
 * */
void APRV_APNEA_COUNTER_TRACE()
{
 800c058:	b480      	push	{r7}
 800c05a:	af00      	add	r7, sp, #0
	if( APRV.T_HIGH_VAL_COUNTER >0)
 800c05c:	4b2b      	ldr	r3, [pc, #172]	; (800c10c <APRV_APNEA_COUNTER_TRACE+0xb4>)
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d014      	beq.n	800c08e <APRV_APNEA_COUNTER_TRACE+0x36>
	{
		APRV.T_HIGH_VAL_COUNTER = (APRV.T_HIGH_VAL_COUNTER- 2);
 800c064:	4b29      	ldr	r3, [pc, #164]	; (800c10c <APRV_APNEA_COUNTER_TRACE+0xb4>)
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	3b02      	subs	r3, #2
 800c06a:	4a28      	ldr	r2, [pc, #160]	; (800c10c <APRV_APNEA_COUNTER_TRACE+0xb4>)
 800c06c:	6113      	str	r3, [r2, #16]
		if( APRV.T_HIGH_VAL_COUNTER < 100)
 800c06e:	4b27      	ldr	r3, [pc, #156]	; (800c10c <APRV_APNEA_COUNTER_TRACE+0xb4>)
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	2b63      	cmp	r3, #99	; 0x63
 800c074:	d80b      	bhi.n	800c08e <APRV_APNEA_COUNTER_TRACE+0x36>
		{
			APRV_PIP_average.PIP_Cumulative_Val += GRAPH_VALUES.pressure;
 800c076:	4b26      	ldr	r3, [pc, #152]	; (800c110 <APRV_APNEA_COUNTER_TRACE+0xb8>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a26      	ldr	r2, [pc, #152]	; (800c114 <APRV_APNEA_COUNTER_TRACE+0xbc>)
 800c07c:	7812      	ldrb	r2, [r2, #0]
 800c07e:	4413      	add	r3, r2
 800c080:	4a23      	ldr	r2, [pc, #140]	; (800c110 <APRV_APNEA_COUNTER_TRACE+0xb8>)
 800c082:	6013      	str	r3, [r2, #0]
			APRV_PIP_average.PIP_Event_Count++;
 800c084:	4b22      	ldr	r3, [pc, #136]	; (800c110 <APRV_APNEA_COUNTER_TRACE+0xb8>)
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	3301      	adds	r3, #1
 800c08a:	4a21      	ldr	r2, [pc, #132]	; (800c110 <APRV_APNEA_COUNTER_TRACE+0xb8>)
 800c08c:	6053      	str	r3, [r2, #4]
		}
	}

	if( APRV.T_LOW_VAL_COUNTER >0)
 800c08e:	4b1f      	ldr	r3, [pc, #124]	; (800c10c <APRV_APNEA_COUNTER_TRACE+0xb4>)
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d014      	beq.n	800c0c0 <APRV_APNEA_COUNTER_TRACE+0x68>
	{
		APRV.T_LOW_VAL_COUNTER = (APRV.T_LOW_VAL_COUNTER- 2);
 800c096:	4b1d      	ldr	r3, [pc, #116]	; (800c10c <APRV_APNEA_COUNTER_TRACE+0xb4>)
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	3b02      	subs	r3, #2
 800c09c:	4a1b      	ldr	r2, [pc, #108]	; (800c10c <APRV_APNEA_COUNTER_TRACE+0xb4>)
 800c09e:	60d3      	str	r3, [r2, #12]
		if( APRV.T_LOW_VAL_COUNTER < 100)
 800c0a0:	4b1a      	ldr	r3, [pc, #104]	; (800c10c <APRV_APNEA_COUNTER_TRACE+0xb4>)
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	2b63      	cmp	r3, #99	; 0x63
 800c0a6:	d80b      	bhi.n	800c0c0 <APRV_APNEA_COUNTER_TRACE+0x68>
		{
			APRV_PEEP_average.PEEP_Cumulative_Val += GRAPH_VALUES.pressure;
 800c0a8:	4b1b      	ldr	r3, [pc, #108]	; (800c118 <APRV_APNEA_COUNTER_TRACE+0xc0>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a19      	ldr	r2, [pc, #100]	; (800c114 <APRV_APNEA_COUNTER_TRACE+0xbc>)
 800c0ae:	7812      	ldrb	r2, [r2, #0]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	4a19      	ldr	r2, [pc, #100]	; (800c118 <APRV_APNEA_COUNTER_TRACE+0xc0>)
 800c0b4:	6013      	str	r3, [r2, #0]
			APRV_PEEP_average.PEEP_Event_Count++;
 800c0b6:	4b18      	ldr	r3, [pc, #96]	; (800c118 <APRV_APNEA_COUNTER_TRACE+0xc0>)
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	4a16      	ldr	r2, [pc, #88]	; (800c118 <APRV_APNEA_COUNTER_TRACE+0xc0>)
 800c0be:	6053      	str	r3, [r2, #4]
		}
	}
	if( Blower_Wait_Time >0)
 800c0c0:	4b16      	ldr	r3, [pc, #88]	; (800c11c <APRV_APNEA_COUNTER_TRACE+0xc4>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	dd0b      	ble.n	800c0e0 <APRV_APNEA_COUNTER_TRACE+0x88>
	{
		Blower_Wait_Time = (Blower_Wait_Time- 2);
 800c0c8:	4b14      	ldr	r3, [pc, #80]	; (800c11c <APRV_APNEA_COUNTER_TRACE+0xc4>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3b02      	subs	r3, #2
 800c0ce:	4a13      	ldr	r2, [pc, #76]	; (800c11c <APRV_APNEA_COUNTER_TRACE+0xc4>)
 800c0d0:	6013      	str	r3, [r2, #0]
		if( Blower_Wait_Time < 0)
 800c0d2:	4b12      	ldr	r3, [pc, #72]	; (800c11c <APRV_APNEA_COUNTER_TRACE+0xc4>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	da02      	bge.n	800c0e0 <APRV_APNEA_COUNTER_TRACE+0x88>
		{
			Blower_Wait_Time = 0;
 800c0da:	4b10      	ldr	r3, [pc, #64]	; (800c11c <APRV_APNEA_COUNTER_TRACE+0xc4>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	601a      	str	r2, [r3, #0]
		}
	}

	if(APRV_Trigger_Check_Time>=0)
 800c0e0:	4b0f      	ldr	r3, [pc, #60]	; (800c120 <APRV_APNEA_COUNTER_TRACE+0xc8>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	db0b      	blt.n	800c100 <APRV_APNEA_COUNTER_TRACE+0xa8>
	{
		APRV_Trigger_Check_Time = APRV_Trigger_Check_Time -2;
 800c0e8:	4b0d      	ldr	r3, [pc, #52]	; (800c120 <APRV_APNEA_COUNTER_TRACE+0xc8>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	3b02      	subs	r3, #2
 800c0ee:	4a0c      	ldr	r2, [pc, #48]	; (800c120 <APRV_APNEA_COUNTER_TRACE+0xc8>)
 800c0f0:	6013      	str	r3, [r2, #0]
		if(APRV_Trigger_Check_Time<0)
 800c0f2:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <APRV_APNEA_COUNTER_TRACE+0xc8>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	da02      	bge.n	800c100 <APRV_APNEA_COUNTER_TRACE+0xa8>
			APRV_Trigger_Check_Time=0;
 800c0fa:	4b09      	ldr	r3, [pc, #36]	; (800c120 <APRV_APNEA_COUNTER_TRACE+0xc8>)
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	601a      	str	r2, [r3, #0]
	}

}
 800c100:	bf00      	nop
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	20012a14 	.word	0x20012a14
 800c110:	20012a8c 	.word	0x20012a8c
 800c114:	200125f8 	.word	0x200125f8
 800c118:	20012818 	.word	0x20012818
 800c11c:	20012b50 	.word	0x20012b50
 800c120:	20012b30 	.word	0x20012b30

0800c124 <BREATH_COUNT>:
 * This function calculates the number of breaths delivered by the machine
 * and the number of patient breaths per minute.
 * @param None.
 * */
void BREATH_COUNT()
{
 800c124:	b480      	push	{r7}
 800c126:	af00      	add	r7, sp, #0
	if(One_Minite_Or_60000_Ms>0)
 800c128:	4b17      	ldr	r3, [pc, #92]	; (800c188 <BREATH_COUNT+0x64>)
 800c12a:	881b      	ldrh	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d026      	beq.n	800c17e <BREATH_COUNT+0x5a>
	{
		One_Minite_Or_60000_Ms=One_Minite_Or_60000_Ms-2;
 800c130:	4b15      	ldr	r3, [pc, #84]	; (800c188 <BREATH_COUNT+0x64>)
 800c132:	881b      	ldrh	r3, [r3, #0]
 800c134:	3b02      	subs	r3, #2
 800c136:	b29a      	uxth	r2, r3
 800c138:	4b13      	ldr	r3, [pc, #76]	; (800c188 <BREATH_COUNT+0x64>)
 800c13a:	801a      	strh	r2, [r3, #0]

		if(One_Minite_Or_60000_Ms==0)
 800c13c:	4b12      	ldr	r3, [pc, #72]	; (800c188 <BREATH_COUNT+0x64>)
 800c13e:	881b      	ldrh	r3, [r3, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <BREATH_COUNT+0x36>
		{
			Breath_In_Minite          = Breath;
 800c144:	4b11      	ldr	r3, [pc, #68]	; (800c18c <BREATH_COUNT+0x68>)
 800c146:	781a      	ldrb	r2, [r3, #0]
 800c148:	4b11      	ldr	r3, [pc, #68]	; (800c190 <BREATH_COUNT+0x6c>)
 800c14a:	701a      	strb	r2, [r3, #0]
			One_Minite_Or_60000_Ms    = 60000;
 800c14c:	4b0e      	ldr	r3, [pc, #56]	; (800c188 <BREATH_COUNT+0x64>)
 800c14e:	f64e 2260 	movw	r2, #60000	; 0xea60
 800c152:	801a      	strh	r2, [r3, #0]
			Breath                    = 0;
 800c154:	4b0d      	ldr	r3, [pc, #52]	; (800c18c <BREATH_COUNT+0x68>)
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
		}

			if(  ( ! ( BREATH_STATE >> 8) & 1)  )
 800c15a:	4b0e      	ldr	r3, [pc, #56]	; (800c194 <BREATH_COUNT+0x70>)
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	121b      	asrs	r3, r3, #8
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10c      	bne.n	800c17e <BREATH_COUNT+0x5a>
			{
				if(Breath_Count == Count_The_Breath)
 800c164:	4b0c      	ldr	r3, [pc, #48]	; (800c198 <BREATH_COUNT+0x74>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d108      	bne.n	800c17e <BREATH_COUNT+0x5a>
				{
					Breath++;
 800c16c:	4b07      	ldr	r3, [pc, #28]	; (800c18c <BREATH_COUNT+0x68>)
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	3301      	adds	r3, #1
 800c172:	b2da      	uxtb	r2, r3
 800c174:	4b05      	ldr	r3, [pc, #20]	; (800c18c <BREATH_COUNT+0x68>)
 800c176:	701a      	strb	r2, [r3, #0]
					Breath_Count = Leave_Count_The_Breath;
 800c178:	4b07      	ldr	r3, [pc, #28]	; (800c198 <BREATH_COUNT+0x74>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	701a      	strb	r2, [r3, #0]
				}
			}
	}
}
 800c17e:	bf00      	nop
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	200128a4 	.word	0x200128a4
 800c18c:	200129ab 	.word	0x200129ab
 800c190:	20012890 	.word	0x20012890
 800c194:	20012a3c 	.word	0x20012a3c
 800c198:	200122a8 	.word	0x200122a8

0800c19c <Nebuliser_Timing>:
 * @brief Nebuliser_Timing.
 * This function tracks the running time of the nebulizer."
 * @param None.
 * */
void Nebuliser_Timing()
{
 800c19c:	b480      	push	{r7}
 800c19e:	af00      	add	r7, sp, #0
	if(Nebuliser.NEBULISER_TIMER>0)
 800c1a0:	4b0a      	ldr	r3, [pc, #40]	; (800c1cc <Nebuliser_Timing+0x30>)
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dd0b      	ble.n	800c1c0 <Nebuliser_Timing+0x24>
	{
		Nebuliser.NEBULISER_TIMER = (Nebuliser.NEBULISER_TIMER - 2);
 800c1a8:	4b08      	ldr	r3, [pc, #32]	; (800c1cc <Nebuliser_Timing+0x30>)
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	3b02      	subs	r3, #2
 800c1ae:	4a07      	ldr	r2, [pc, #28]	; (800c1cc <Nebuliser_Timing+0x30>)
 800c1b0:	6093      	str	r3, [r2, #8]

		if(Nebuliser.NEBULISER_TIMER < 0)
 800c1b2:	4b06      	ldr	r3, [pc, #24]	; (800c1cc <Nebuliser_Timing+0x30>)
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	da02      	bge.n	800c1c0 <Nebuliser_Timing+0x24>
		{
			Nebuliser.NEBULISER_TIMER = 0;
 800c1ba:	4b04      	ldr	r3, [pc, #16]	; (800c1cc <Nebuliser_Timing+0x30>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	609a      	str	r2, [r3, #8]
		}
	}
}
 800c1c0:	bf00      	nop
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	2001282c 	.word	0x2001282c

0800c1d0 <INITIAL_WAIT_TIME>:
 * @brief INITIAL_WAIT_TIME.
 * This function control initial wait time of PSV and BIPAP.
 * @param None.
 * */
void INITIAL_WAIT_TIME()
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	af00      	add	r7, sp, #0
	if(Wait_Time>0)
 800c1d4:	4b0a      	ldr	r3, [pc, #40]	; (800c200 <INITIAL_WAIT_TIME+0x30>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	dd0b      	ble.n	800c1f4 <INITIAL_WAIT_TIME+0x24>
	{
		Wait_Time = (Wait_Time - 2);
 800c1dc:	4b08      	ldr	r3, [pc, #32]	; (800c200 <INITIAL_WAIT_TIME+0x30>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	3b02      	subs	r3, #2
 800c1e2:	4a07      	ldr	r2, [pc, #28]	; (800c200 <INITIAL_WAIT_TIME+0x30>)
 800c1e4:	6013      	str	r3, [r2, #0]

		if(Wait_Time < 0)
 800c1e6:	4b06      	ldr	r3, [pc, #24]	; (800c200 <INITIAL_WAIT_TIME+0x30>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	da02      	bge.n	800c1f4 <INITIAL_WAIT_TIME+0x24>
		{
			Wait_Time = 0;
 800c1ee:	4b04      	ldr	r3, [pc, #16]	; (800c200 <INITIAL_WAIT_TIME+0x30>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	601a      	str	r2, [r3, #0]
		}
	}
}
 800c1f4:	bf00      	nop
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	20012698 	.word	0x20012698

0800c204 <Oxygen_Blending_Task>:
 * @brief Oxygen_Blending_Task.
 * This Task calls the Oxygen_Blending function.
 * */

void Oxygen_Blending_Task(void *argument)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
	while(1)
	{
			Oxygen_Blending(Common_Mode_Parameter._FIO2_Val);
 800c20c:	4b04      	ldr	r3, [pc, #16]	; (800c220 <Oxygen_Blending_Task+0x1c>)
 800c20e:	78db      	ldrb	r3, [r3, #3]
 800c210:	4618      	mov	r0, r3
 800c212:	f000 f807 	bl	800c224 <Oxygen_Blending>
			vTaskDelay(Two_Millisecond_Delay);
 800c216:	2002      	movs	r0, #2
 800c218:	f00e ff18 	bl	801b04c <vTaskDelay>
			Oxygen_Blending(Common_Mode_Parameter._FIO2_Val);
 800c21c:	e7f6      	b.n	800c20c <Oxygen_Blending_Task+0x8>
 800c21e:	bf00      	nop
 800c220:	200124f0 	.word	0x200124f0

0800c224 <Oxygen_Blending>:
 * This function mixes the oxygen level in the air during the mode to achieve a set value of FIO2.
 * @param FIO2_Val Set fio2 value from mode.
 * */

void Oxygen_Blending(uint8_t FIO2_Val)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	4603      	mov	r3, r0
 800c22c:	71fb      	strb	r3, [r7, #7]
	if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 800c22e:	4b92      	ldr	r3, [pc, #584]	; (800c478 <Oxygen_Blending+0x254>)
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	2b01      	cmp	r3, #1
 800c234:	f040 8108 	bne.w	800c448 <Oxygen_Blending+0x224>
	{
		if(Fio2_Blending_Method == PRESSURE_CONTROLLED)
 800c238:	4b90      	ldr	r3, [pc, #576]	; (800c47c <Oxygen_Blending+0x258>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f040 8081 	bne.w	800c344 <Oxygen_Blending+0x120>
		{
			if(GRAPH_VALUES.pressure >= Common_Mode_Parameter._PIP_Val )
 800c242:	4b8f      	ldr	r3, [pc, #572]	; (800c480 <Oxygen_Blending+0x25c>)
 800c244:	781a      	ldrb	r2, [r3, #0]
 800c246:	4b8f      	ldr	r3, [pc, #572]	; (800c484 <Oxygen_Blending+0x260>)
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d311      	bcc.n	800c272 <Oxygen_Blending+0x4e>
			{
				 if(Vent_Type == MASK_MODE)
 800c24e:	4b8e      	ldr	r3, [pc, #568]	; (800c488 <Oxygen_Blending+0x264>)
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d103      	bne.n	800c25e <Oxygen_Blending+0x3a>
				 {
					 Oxygen_Blending_Status   =  OXYGEN_ACHIEVED;
 800c256:	4b8d      	ldr	r3, [pc, #564]	; (800c48c <Oxygen_Blending+0x268>)
 800c258:	2200      	movs	r2, #0
 800c25a:	701a      	strb	r2, [r3, #0]
 800c25c:	e009      	b.n	800c272 <Oxygen_Blending+0x4e>
				 }
				 else if(Vent_Type == ET_TUBE_MODE)
 800c25e:	4b8a      	ldr	r3, [pc, #552]	; (800c488 <Oxygen_Blending+0x264>)
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d105      	bne.n	800c272 <Oxygen_Blending+0x4e>
				 {
					 Parkar_valve_Signal(0);
 800c266:	4b8a      	ldr	r3, [pc, #552]	; (800c490 <Oxygen_Blending+0x26c>)
 800c268:	2200      	movs	r2, #0
 800c26a:	615a      	str	r2, [r3, #20]
				     Oxygen_Blending_Status   =  OXYGEN_ACHIEVED;
 800c26c:	4b87      	ldr	r3, [pc, #540]	; (800c48c <Oxygen_Blending+0x268>)
 800c26e:	2200      	movs	r2, #0
 800c270:	701a      	strb	r2, [r3, #0]
				 }

			}
			if(GRAPH_VALUES.pressure>= 60 )
 800c272:	4b83      	ldr	r3, [pc, #524]	; (800c480 <Oxygen_Blending+0x25c>)
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	2b3b      	cmp	r3, #59	; 0x3b
 800c278:	d906      	bls.n	800c288 <Oxygen_Blending+0x64>
			{
				Parkar_valve_Signal(0);
 800c27a:	4b85      	ldr	r3, [pc, #532]	; (800c490 <Oxygen_Blending+0x26c>)
 800c27c:	2200      	movs	r2, #0
 800c27e:	615a      	str	r2, [r3, #20]
				Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 800c280:	4b82      	ldr	r3, [pc, #520]	; (800c48c <Oxygen_Blending+0x268>)
 800c282:	2200      	movs	r2, #0
 800c284:	701a      	strb	r2, [r3, #0]
 800c286:	e0f2      	b.n	800c46e <Oxygen_Blending+0x24a>
			}
			else
			{
				if(FIO2_Val > 21)
 800c288:	79fb      	ldrb	r3, [r7, #7]
 800c28a:	2b15      	cmp	r3, #21
 800c28c:	f240 80ef 	bls.w	800c46e <Oxygen_Blending+0x24a>
				{
						if( (O2_Check < 4) && (Check_Oxygen_Count < 10) )
 800c290:	4b80      	ldr	r3, [pc, #512]	; (800c494 <Oxygen_Blending+0x270>)
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b03      	cmp	r3, #3
 800c296:	f200 80ea 	bhi.w	800c46e <Oxygen_Blending+0x24a>
 800c29a:	4b7f      	ldr	r3, [pc, #508]	; (800c498 <Oxygen_Blending+0x274>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2b09      	cmp	r3, #9
 800c2a0:	f200 80e5 	bhi.w	800c46e <Oxygen_Blending+0x24a>
						{
							if(Oxygen_Blending_Status !=OXYGEN_ACHIEVED)
 800c2a4:	4b79      	ldr	r3, [pc, #484]	; (800c48c <Oxygen_Blending+0x268>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f000 80e0 	beq.w	800c46e <Oxygen_Blending+0x24a>
							{
								if(GRAPH_VALUES.oxygen_flow <= O2_Flow_Rate)
 800c2ae:	4b74      	ldr	r3, [pc, #464]	; (800c480 <Oxygen_Blending+0x25c>)
 800c2b0:	ed93 7a04 	vldr	s14, [r3, #16]
 800c2b4:	4b79      	ldr	r3, [pc, #484]	; (800c49c <Oxygen_Blending+0x278>)
 800c2b6:	f993 3000 	ldrsb.w	r3, [r3]
 800c2ba:	ee07 3a90 	vmov	s15, r3
 800c2be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ca:	d81d      	bhi.n	800c308 <Oxygen_Blending+0xe4>
								{
									Oxygen_Parameter.O2_DAC=controlsys_Update(&Parker_valve_tune, O2_Flow_Rate , GRAPH_VALUES.oxygen_flow);
 800c2cc:	4b73      	ldr	r3, [pc, #460]	; (800c49c <Oxygen_Blending+0x278>)
 800c2ce:	f993 3000 	ldrsb.w	r3, [r3]
 800c2d2:	ee07 3a90 	vmov	s15, r3
 800c2d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2da:	4b69      	ldr	r3, [pc, #420]	; (800c480 <Oxygen_Blending+0x25c>)
 800c2dc:	ed93 7a04 	vldr	s14, [r3, #16]
 800c2e0:	eef0 0a47 	vmov.f32	s1, s14
 800c2e4:	eeb0 0a67 	vmov.f32	s0, s15
 800c2e8:	486d      	ldr	r0, [pc, #436]	; (800c4a0 <Oxygen_Blending+0x27c>)
 800c2ea:	f004 f8d5 	bl	8010498 <controlsys_Update>
 800c2ee:	eef0 7a40 	vmov.f32	s15, s0
 800c2f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2f6:	ee17 2a90 	vmov	r2, s15
 800c2fa:	4b6a      	ldr	r3, [pc, #424]	; (800c4a4 <Oxygen_Blending+0x280>)
 800c2fc:	60da      	str	r2, [r3, #12]
									Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800c2fe:	4b69      	ldr	r3, [pc, #420]	; (800c4a4 <Oxygen_Blending+0x280>)
 800c300:	68da      	ldr	r2, [r3, #12]
 800c302:	4b63      	ldr	r3, [pc, #396]	; (800c490 <Oxygen_Blending+0x26c>)
 800c304:	615a      	str	r2, [r3, #20]
 800c306:	e0b2      	b.n	800c46e <Oxygen_Blending+0x24a>
								}
								else
								{
									Oxygen_Parameter.O2_DAC=controlsys_Update(&Parker_valve_tune, O2_Flow_Rate , GRAPH_VALUES.oxygen_flow);
 800c308:	4b64      	ldr	r3, [pc, #400]	; (800c49c <Oxygen_Blending+0x278>)
 800c30a:	f993 3000 	ldrsb.w	r3, [r3]
 800c30e:	ee07 3a90 	vmov	s15, r3
 800c312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c316:	4b5a      	ldr	r3, [pc, #360]	; (800c480 <Oxygen_Blending+0x25c>)
 800c318:	ed93 7a04 	vldr	s14, [r3, #16]
 800c31c:	eef0 0a47 	vmov.f32	s1, s14
 800c320:	eeb0 0a67 	vmov.f32	s0, s15
 800c324:	485e      	ldr	r0, [pc, #376]	; (800c4a0 <Oxygen_Blending+0x27c>)
 800c326:	f004 f8b7 	bl	8010498 <controlsys_Update>
 800c32a:	eef0 7a40 	vmov.f32	s15, s0
 800c32e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c332:	ee17 2a90 	vmov	r2, s15
 800c336:	4b5b      	ldr	r3, [pc, #364]	; (800c4a4 <Oxygen_Blending+0x280>)
 800c338:	60da      	str	r2, [r3, #12]
									Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800c33a:	4b5a      	ldr	r3, [pc, #360]	; (800c4a4 <Oxygen_Blending+0x280>)
 800c33c:	68da      	ldr	r2, [r3, #12]
 800c33e:	4b54      	ldr	r3, [pc, #336]	; (800c490 <Oxygen_Blending+0x26c>)
 800c340:	615a      	str	r2, [r3, #20]
 800c342:	e094      	b.n	800c46e <Oxygen_Blending+0x24a>
				}

			}

		}
		else if(Fio2_Blending_Method == VOLUME_CONTROLLED)
 800c344:	4b4d      	ldr	r3, [pc, #308]	; (800c47c <Oxygen_Blending+0x258>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	f040 8090 	bne.w	800c46e <Oxygen_Blending+0x24a>
		{
			if(GRAPH_VALUES.volume >= (Common_Mode_Parameter._VOLUME_Val-Volume_control_Task.Volume_Stop_Value))
 800c34e:	4b4c      	ldr	r3, [pc, #304]	; (800c480 <Oxygen_Blending+0x25c>)
 800c350:	ed93 7a02 	vldr	s14, [r3, #8]
 800c354:	4b4b      	ldr	r3, [pc, #300]	; (800c484 <Oxygen_Blending+0x260>)
 800c356:	889b      	ldrh	r3, [r3, #4]
 800c358:	461a      	mov	r2, r3
 800c35a:	4b53      	ldr	r3, [pc, #332]	; (800c4a8 <Oxygen_Blending+0x284>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	ee07 3a90 	vmov	s15, r3
 800c364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c370:	db05      	blt.n	800c37e <Oxygen_Blending+0x15a>
			{
				Parkar_valve_Signal(0);
 800c372:	4b47      	ldr	r3, [pc, #284]	; (800c490 <Oxygen_Blending+0x26c>)
 800c374:	2200      	movs	r2, #0
 800c376:	615a      	str	r2, [r3, #20]
				Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 800c378:	4b44      	ldr	r3, [pc, #272]	; (800c48c <Oxygen_Blending+0x268>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	701a      	strb	r2, [r3, #0]
			}
			if(GRAPH_VALUES.pressure>= 60 )
 800c37e:	4b40      	ldr	r3, [pc, #256]	; (800c480 <Oxygen_Blending+0x25c>)
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	2b3b      	cmp	r3, #59	; 0x3b
 800c384:	d906      	bls.n	800c394 <Oxygen_Blending+0x170>
			{
				Parkar_valve_Signal(0);
 800c386:	4b42      	ldr	r3, [pc, #264]	; (800c490 <Oxygen_Blending+0x26c>)
 800c388:	2200      	movs	r2, #0
 800c38a:	615a      	str	r2, [r3, #20]
				Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 800c38c:	4b3f      	ldr	r3, [pc, #252]	; (800c48c <Oxygen_Blending+0x268>)
 800c38e:	2200      	movs	r2, #0
 800c390:	701a      	strb	r2, [r3, #0]
 800c392:	e06c      	b.n	800c46e <Oxygen_Blending+0x24a>
			}
			else
			{
				if(FIO2_Val > 21)
 800c394:	79fb      	ldrb	r3, [r7, #7]
 800c396:	2b15      	cmp	r3, #21
 800c398:	d969      	bls.n	800c46e <Oxygen_Blending+0x24a>
				{
						if( (O2_Check < 4) && (Check_Oxygen_Count < 10) )
 800c39a:	4b3e      	ldr	r3, [pc, #248]	; (800c494 <Oxygen_Blending+0x270>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	d865      	bhi.n	800c46e <Oxygen_Blending+0x24a>
 800c3a2:	4b3d      	ldr	r3, [pc, #244]	; (800c498 <Oxygen_Blending+0x274>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	2b09      	cmp	r3, #9
 800c3a8:	d861      	bhi.n	800c46e <Oxygen_Blending+0x24a>
						{
							if(Oxygen_Blending_Status !=OXYGEN_ACHIEVED)
 800c3aa:	4b38      	ldr	r3, [pc, #224]	; (800c48c <Oxygen_Blending+0x268>)
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d05d      	beq.n	800c46e <Oxygen_Blending+0x24a>
							{
								if(GRAPH_VALUES.oxygen_flow <= O2_Flow_Rate)
 800c3b2:	4b33      	ldr	r3, [pc, #204]	; (800c480 <Oxygen_Blending+0x25c>)
 800c3b4:	ed93 7a04 	vldr	s14, [r3, #16]
 800c3b8:	4b38      	ldr	r3, [pc, #224]	; (800c49c <Oxygen_Blending+0x278>)
 800c3ba:	f993 3000 	ldrsb.w	r3, [r3]
 800c3be:	ee07 3a90 	vmov	s15, r3
 800c3c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ce:	d81d      	bhi.n	800c40c <Oxygen_Blending+0x1e8>
								{
									Oxygen_Parameter.O2_DAC=controlsys_Update(&Parker_valve_tune, O2_Flow_Rate , GRAPH_VALUES.oxygen_flow);
 800c3d0:	4b32      	ldr	r3, [pc, #200]	; (800c49c <Oxygen_Blending+0x278>)
 800c3d2:	f993 3000 	ldrsb.w	r3, [r3]
 800c3d6:	ee07 3a90 	vmov	s15, r3
 800c3da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3de:	4b28      	ldr	r3, [pc, #160]	; (800c480 <Oxygen_Blending+0x25c>)
 800c3e0:	ed93 7a04 	vldr	s14, [r3, #16]
 800c3e4:	eef0 0a47 	vmov.f32	s1, s14
 800c3e8:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ec:	482c      	ldr	r0, [pc, #176]	; (800c4a0 <Oxygen_Blending+0x27c>)
 800c3ee:	f004 f853 	bl	8010498 <controlsys_Update>
 800c3f2:	eef0 7a40 	vmov.f32	s15, s0
 800c3f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3fa:	ee17 2a90 	vmov	r2, s15
 800c3fe:	4b29      	ldr	r3, [pc, #164]	; (800c4a4 <Oxygen_Blending+0x280>)
 800c400:	60da      	str	r2, [r3, #12]
									Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800c402:	4b28      	ldr	r3, [pc, #160]	; (800c4a4 <Oxygen_Blending+0x280>)
 800c404:	68da      	ldr	r2, [r3, #12]
 800c406:	4b22      	ldr	r3, [pc, #136]	; (800c490 <Oxygen_Blending+0x26c>)
 800c408:	615a      	str	r2, [r3, #20]
 800c40a:	e030      	b.n	800c46e <Oxygen_Blending+0x24a>
								}
								else
								{
									Oxygen_Parameter.O2_DAC=controlsys_Update(&Parker_valve_tune, O2_Flow_Rate , GRAPH_VALUES.oxygen_flow);
 800c40c:	4b23      	ldr	r3, [pc, #140]	; (800c49c <Oxygen_Blending+0x278>)
 800c40e:	f993 3000 	ldrsb.w	r3, [r3]
 800c412:	ee07 3a90 	vmov	s15, r3
 800c416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c41a:	4b19      	ldr	r3, [pc, #100]	; (800c480 <Oxygen_Blending+0x25c>)
 800c41c:	ed93 7a04 	vldr	s14, [r3, #16]
 800c420:	eef0 0a47 	vmov.f32	s1, s14
 800c424:	eeb0 0a67 	vmov.f32	s0, s15
 800c428:	481d      	ldr	r0, [pc, #116]	; (800c4a0 <Oxygen_Blending+0x27c>)
 800c42a:	f004 f835 	bl	8010498 <controlsys_Update>
 800c42e:	eef0 7a40 	vmov.f32	s15, s0
 800c432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c436:	ee17 2a90 	vmov	r2, s15
 800c43a:	4b1a      	ldr	r3, [pc, #104]	; (800c4a4 <Oxygen_Blending+0x280>)
 800c43c:	60da      	str	r2, [r3, #12]
									Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800c43e:	4b19      	ldr	r3, [pc, #100]	; (800c4a4 <Oxygen_Blending+0x280>)
 800c440:	68da      	ldr	r2, [r3, #12]
 800c442:	4b13      	ldr	r3, [pc, #76]	; (800c490 <Oxygen_Blending+0x26c>)
 800c444:	615a      	str	r2, [r3, #20]
 800c446:	e012      	b.n	800c46e <Oxygen_Blending+0x24a>
						}
				}
			}
		}
	}
	else if(Run_Current_Breathe_State == Run_Expiration_Cycle)
 800c448:	4b0b      	ldr	r3, [pc, #44]	; (800c478 <Oxygen_Blending+0x254>)
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d10e      	bne.n	800c46e <Oxygen_Blending+0x24a>
	{
		 if(Vent_Type == MASK_MODE)
 800c450:	4b0d      	ldr	r3, [pc, #52]	; (800c488 <Oxygen_Blending+0x264>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d00a      	beq.n	800c46e <Oxygen_Blending+0x24a>
		 {

		 }
		 else if(Vent_Type == ET_TUBE_MODE)
 800c458:	4b0b      	ldr	r3, [pc, #44]	; (800c488 <Oxygen_Blending+0x264>)
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d106      	bne.n	800c46e <Oxygen_Blending+0x24a>
		 {
			 if(Running_Mode == Aprv)
 800c460:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <Oxygen_Blending+0x288>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b04      	cmp	r3, #4
 800c466:	d002      	beq.n	800c46e <Oxygen_Blending+0x24a>
			 {

			 }
			 else
			 {
				 Parkar_valve_Signal(0);
 800c468:	4b09      	ldr	r3, [pc, #36]	; (800c490 <Oxygen_Blending+0x26c>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	615a      	str	r2, [r3, #20]
	}
	if(Oxygen_Blending_Status == OXYGEN_NOT_ACHIEVED)
	{

	}
}
 800c46e:	bf00      	nop
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20012870 	.word	0x20012870
 800c47c:	20012360 	.word	0x20012360
 800c480:	200125f8 	.word	0x200125f8
 800c484:	200124f0 	.word	0x200124f0
 800c488:	200129f4 	.word	0x200129f4
 800c48c:	20012b71 	.word	0x20012b71
 800c490:	40007400 	.word	0x40007400
 800c494:	2001220e 	.word	0x2001220e
 800c498:	20012a0a 	.word	0x20012a0a
 800c49c:	200122e1 	.word	0x200122e1
 800c4a0:	2000001c 	.word	0x2000001c
 800c4a4:	200129d4 	.word	0x200129d4
 800c4a8:	20012840 	.word	0x20012840
 800c4ac:	20012b68 	.word	0x20012b68

0800c4b0 <Calculate_O2>:
 * @return None.
 * */


void Calculate_O2(uint8_t FIO2_Val)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	71fb      	strb	r3, [r7, #7]
	if(FIO2_Val > 21)
 800c4ba:	79fb      	ldrb	r3, [r7, #7]
 800c4bc:	2b15      	cmp	r3, #21
 800c4be:	d914      	bls.n	800c4ea <Calculate_O2+0x3a>
	{
		Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 800c4c0:	4b1a      	ldr	r3, [pc, #104]	; (800c52c <Calculate_O2+0x7c>)
 800c4c2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	4b19      	ldr	r3, [pc, #100]	; (800c530 <Calculate_O2+0x80>)
 800c4ca:	721a      	strb	r2, [r3, #8]

		if(Oxygen_Parameter.Achieved_Oxygen >=100)
 800c4cc:	4b18      	ldr	r3, [pc, #96]	; (800c530 <Calculate_O2+0x80>)
 800c4ce:	7a1b      	ldrb	r3, [r3, #8]
 800c4d0:	2b63      	cmp	r3, #99	; 0x63
 800c4d2:	d902      	bls.n	800c4da <Calculate_O2+0x2a>
		    Oxygen_Parameter.Achieved_Oxygen = 100;
 800c4d4:	4b16      	ldr	r3, [pc, #88]	; (800c530 <Calculate_O2+0x80>)
 800c4d6:	2264      	movs	r2, #100	; 0x64
 800c4d8:	721a      	strb	r2, [r3, #8]
		if(Oxygen_Parameter.Achieved_Oxygen<=20)
 800c4da:	4b15      	ldr	r3, [pc, #84]	; (800c530 <Calculate_O2+0x80>)
 800c4dc:	7a1b      	ldrb	r3, [r3, #8]
 800c4de:	2b14      	cmp	r3, #20
 800c4e0:	d81d      	bhi.n	800c51e <Calculate_O2+0x6e>
			Oxygen_Parameter.Achieved_Oxygen = 20;
 800c4e2:	4b13      	ldr	r3, [pc, #76]	; (800c530 <Calculate_O2+0x80>)
 800c4e4:	2214      	movs	r2, #20
 800c4e6:	721a      	strb	r2, [r3, #8]
			Oxygen_Parameter.Achieved_Oxygen = 20;

		Oxygen_Parameter.O2_DAC=0;
		Parkar_valve_Signal(0);
	}
}
 800c4e8:	e019      	b.n	800c51e <Calculate_O2+0x6e>
		Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 800c4ea:	4b10      	ldr	r3, [pc, #64]	; (800c52c <Calculate_O2+0x7c>)
 800c4ec:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800c4f0:	b2da      	uxtb	r2, r3
 800c4f2:	4b0f      	ldr	r3, [pc, #60]	; (800c530 <Calculate_O2+0x80>)
 800c4f4:	721a      	strb	r2, [r3, #8]
		if(Oxygen_Parameter.Achieved_Oxygen >=100)
 800c4f6:	4b0e      	ldr	r3, [pc, #56]	; (800c530 <Calculate_O2+0x80>)
 800c4f8:	7a1b      	ldrb	r3, [r3, #8]
 800c4fa:	2b63      	cmp	r3, #99	; 0x63
 800c4fc:	d902      	bls.n	800c504 <Calculate_O2+0x54>
		    Oxygen_Parameter.Achieved_Oxygen = 100;
 800c4fe:	4b0c      	ldr	r3, [pc, #48]	; (800c530 <Calculate_O2+0x80>)
 800c500:	2264      	movs	r2, #100	; 0x64
 800c502:	721a      	strb	r2, [r3, #8]
		if(Oxygen_Parameter.Achieved_Oxygen<=20)
 800c504:	4b0a      	ldr	r3, [pc, #40]	; (800c530 <Calculate_O2+0x80>)
 800c506:	7a1b      	ldrb	r3, [r3, #8]
 800c508:	2b14      	cmp	r3, #20
 800c50a:	d802      	bhi.n	800c512 <Calculate_O2+0x62>
			Oxygen_Parameter.Achieved_Oxygen = 20;
 800c50c:	4b08      	ldr	r3, [pc, #32]	; (800c530 <Calculate_O2+0x80>)
 800c50e:	2214      	movs	r2, #20
 800c510:	721a      	strb	r2, [r3, #8]
		Oxygen_Parameter.O2_DAC=0;
 800c512:	4b07      	ldr	r3, [pc, #28]	; (800c530 <Calculate_O2+0x80>)
 800c514:	2200      	movs	r2, #0
 800c516:	60da      	str	r2, [r3, #12]
		Parkar_valve_Signal(0);
 800c518:	4b06      	ldr	r3, [pc, #24]	; (800c534 <Calculate_O2+0x84>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	615a      	str	r2, [r3, #20]
}
 800c51e:	bf00      	nop
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	200125f8 	.word	0x200125f8
 800c530:	200129d4 	.word	0x200129d4
 800c534:	40007400 	.word	0x40007400

0800c538 <O2_Initial_Parameter>:
 * This function calculates the required flow rate of O2 based on the set flow rate.
 * @param FIO2_Val Set fio2 value from mode.
 * @param Flowrate Set Flow rate to achieve a O2.
 * */
void O2_Initial_Parameter(uint8_t FIO2_Val,uint8_t Flowrate)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	4603      	mov	r3, r0
 800c540:	460a      	mov	r2, r1
 800c542:	71fb      	strb	r3, [r7, #7]
 800c544:	4613      	mov	r3, r2
 800c546:	71bb      	strb	r3, [r7, #6]

	if(Fio2_Blending_Method == PRESSURE_CONTROLLED)
 800c548:	4b19      	ldr	r3, [pc, #100]	; (800c5b0 <O2_Initial_Parameter+0x78>)
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d105      	bne.n	800c55c <O2_Initial_Parameter+0x24>
	{
		vTaskResume(Oxygen_Blending_Handler);
 800c550:	4b18      	ldr	r3, [pc, #96]	; (800c5b4 <O2_Initial_Parameter+0x7c>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4618      	mov	r0, r3
 800c556:	f00e fe71 	bl	801b23c <vTaskResume>
		}
		vTaskResume(Oxygen_Blending_Handler);
	}


}
 800c55a:	e025      	b.n	800c5a8 <O2_Initial_Parameter+0x70>
		O2_Flow_Rate   = ( Flowrate* ( (float)( FIO2_Val - 21) / 100) );
 800c55c:	79bb      	ldrb	r3, [r7, #6]
 800c55e:	ee07 3a90 	vmov	s15, r3
 800c562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c566:	79fb      	ldrb	r3, [r7, #7]
 800c568:	3b15      	subs	r3, #21
 800c56a:	ee07 3a90 	vmov	s15, r3
 800c56e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c572:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800c5b8 <O2_Initial_Parameter+0x80>
 800c576:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c57e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c582:	edc7 7a00 	vstr	s15, [r7]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	b25a      	sxtb	r2, r3
 800c58a:	4b0c      	ldr	r3, [pc, #48]	; (800c5bc <O2_Initial_Parameter+0x84>)
 800c58c:	701a      	strb	r2, [r3, #0]
		if(O2_Flow_Rate <10)
 800c58e:	4b0b      	ldr	r3, [pc, #44]	; (800c5bc <O2_Initial_Parameter+0x84>)
 800c590:	f993 3000 	ldrsb.w	r3, [r3]
 800c594:	2b09      	cmp	r3, #9
 800c596:	dc02      	bgt.n	800c59e <O2_Initial_Parameter+0x66>
			O2_Flow_Rate = 10;
 800c598:	4b08      	ldr	r3, [pc, #32]	; (800c5bc <O2_Initial_Parameter+0x84>)
 800c59a:	220a      	movs	r2, #10
 800c59c:	701a      	strb	r2, [r3, #0]
		vTaskResume(Oxygen_Blending_Handler);
 800c59e:	4b05      	ldr	r3, [pc, #20]	; (800c5b4 <O2_Initial_Parameter+0x7c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f00e fe4a 	bl	801b23c <vTaskResume>
}
 800c5a8:	bf00      	nop
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	20012360 	.word	0x20012360
 800c5b4:	200127ac 	.word	0x200127ac
 800c5b8:	42c80000 	.word	0x42c80000
 800c5bc:	200122e1 	.word	0x200122e1

0800c5c0 <Low_Oxygen_Achieved>:
 * @param Achieved_Oxygen Achieved Oxygen from previous breathe.
 * */


void Low_Oxygen_Achieved(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	460a      	mov	r2, r1
 800c5ca:	71fb      	strb	r3, [r7, #7]
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	71bb      	strb	r3, [r7, #6]

	O2_Low_Count++;
 800c5d0:	4b29      	ldr	r3, [pc, #164]	; (800c678 <Low_Oxygen_Achieved+0xb8>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	b2da      	uxtb	r2, r3
 800c5d8:	4b27      	ldr	r3, [pc, #156]	; (800c678 <Low_Oxygen_Achieved+0xb8>)
 800c5da:	701a      	strb	r2, [r3, #0]
	if(O2_Low_Count >1)
 800c5dc:	4b26      	ldr	r3, [pc, #152]	; (800c678 <Low_Oxygen_Achieved+0xb8>)
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d931      	bls.n	800c648 <Low_Oxygen_Achieved+0x88>
	{
		if(  ( Achieved_Oxygen)  < ( FIO2_Val) && (Achieved_Oxygen  >= (FIO2_Val - 2) ) )
 800c5e4:	79ba      	ldrb	r2, [r7, #6]
 800c5e6:	79fb      	ldrb	r3, [r7, #7]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d20c      	bcs.n	800c606 <Low_Oxygen_Achieved+0x46>
 800c5ec:	79ba      	ldrb	r2, [r7, #6]
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	3b02      	subs	r3, #2
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	db07      	blt.n	800c606 <Low_Oxygen_Achieved+0x46>
		{
			Oxygen_Parameter.O2_DAC = (Oxygen_Parameter.O2_DAC+ET_O2_Envitec_Tune_Value1);
 800c5f6:	4b21      	ldr	r3, [pc, #132]	; (800c67c <Low_Oxygen_Achieved+0xbc>)
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	4a21      	ldr	r2, [pc, #132]	; (800c680 <Low_Oxygen_Achieved+0xc0>)
 800c5fc:	7812      	ldrb	r2, [r2, #0]
 800c5fe:	4413      	add	r3, r2
 800c600:	4a1e      	ldr	r2, [pc, #120]	; (800c67c <Low_Oxygen_Achieved+0xbc>)
 800c602:	60d3      	str	r3, [r2, #12]
 800c604:	e01d      	b.n	800c642 <Low_Oxygen_Achieved+0x82>
		}
		else if(  ( Achieved_Oxygen)  < ( FIO2_Val - 2 ) && (Achieved_Oxygen  > (FIO2_Val - 5) ) )
 800c606:	79ba      	ldrb	r2, [r7, #6]
 800c608:	79fb      	ldrb	r3, [r7, #7]
 800c60a:	3b02      	subs	r3, #2
 800c60c:	429a      	cmp	r2, r3
 800c60e:	da0c      	bge.n	800c62a <Low_Oxygen_Achieved+0x6a>
 800c610:	79fb      	ldrb	r3, [r7, #7]
 800c612:	1f1a      	subs	r2, r3, #4
 800c614:	79bb      	ldrb	r3, [r7, #6]
 800c616:	429a      	cmp	r2, r3
 800c618:	dc07      	bgt.n	800c62a <Low_Oxygen_Achieved+0x6a>
		{
			Oxygen_Parameter.O2_DAC = (Oxygen_Parameter.O2_DAC+ET_O2_Envitec_Tune_Value2);
 800c61a:	4b18      	ldr	r3, [pc, #96]	; (800c67c <Low_Oxygen_Achieved+0xbc>)
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	4a19      	ldr	r2, [pc, #100]	; (800c684 <Low_Oxygen_Achieved+0xc4>)
 800c620:	7812      	ldrb	r2, [r2, #0]
 800c622:	4413      	add	r3, r2
 800c624:	4a15      	ldr	r2, [pc, #84]	; (800c67c <Low_Oxygen_Achieved+0xbc>)
 800c626:	60d3      	str	r3, [r2, #12]
 800c628:	e00b      	b.n	800c642 <Low_Oxygen_Achieved+0x82>
		}
		else if(  ( Achieved_Oxygen)  <= ( FIO2_Val - 5 )  )
 800c62a:	79fb      	ldrb	r3, [r7, #7]
 800c62c:	1f1a      	subs	r2, r3, #4
 800c62e:	79bb      	ldrb	r3, [r7, #6]
 800c630:	429a      	cmp	r2, r3
 800c632:	dd06      	ble.n	800c642 <Low_Oxygen_Achieved+0x82>
		{
			Oxygen_Parameter.O2_DAC = (Oxygen_Parameter.O2_DAC+ET_O2_Envitec_Tune_Value3);
 800c634:	4b11      	ldr	r3, [pc, #68]	; (800c67c <Low_Oxygen_Achieved+0xbc>)
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	4a13      	ldr	r2, [pc, #76]	; (800c688 <Low_Oxygen_Achieved+0xc8>)
 800c63a:	7812      	ldrb	r2, [r2, #0]
 800c63c:	4413      	add	r3, r2
 800c63e:	4a0f      	ldr	r2, [pc, #60]	; (800c67c <Low_Oxygen_Achieved+0xbc>)
 800c640:	60d3      	str	r3, [r2, #12]
		}
		O2_Low_Count = 0;
 800c642:	4b0d      	ldr	r3, [pc, #52]	; (800c678 <Low_Oxygen_Achieved+0xb8>)
 800c644:	2200      	movs	r2, #0
 800c646:	701a      	strb	r2, [r3, #0]
	}

	if(Oxygen_Parameter.O2_DAC>=3300)
 800c648:	4b0c      	ldr	r3, [pc, #48]	; (800c67c <Low_Oxygen_Achieved+0xbc>)
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	f640 42e3 	movw	r2, #3299	; 0xce3
 800c650:	4293      	cmp	r3, r2
 800c652:	dd03      	ble.n	800c65c <Low_Oxygen_Achieved+0x9c>
	{
		Oxygen_Parameter.O2_DAC=3300;
 800c654:	4b09      	ldr	r3, [pc, #36]	; (800c67c <Low_Oxygen_Achieved+0xbc>)
 800c656:	f640 42e4 	movw	r2, #3300	; 0xce4
 800c65a:	60da      	str	r2, [r3, #12]
	}
	O2_High_Count = 0;
 800c65c:	4b0b      	ldr	r3, [pc, #44]	; (800c68c <Low_Oxygen_Achieved+0xcc>)
 800c65e:	2200      	movs	r2, #0
 800c660:	701a      	strb	r2, [r3, #0]
	Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800c662:	4b06      	ldr	r3, [pc, #24]	; (800c67c <Low_Oxygen_Achieved+0xbc>)
 800c664:	68da      	ldr	r2, [r3, #12]
 800c666:	4b0a      	ldr	r3, [pc, #40]	; (800c690 <Low_Oxygen_Achieved+0xd0>)
 800c668:	615a      	str	r2, [r3, #20]
}
 800c66a:	bf00      	nop
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	200126b8 	.word	0x200126b8
 800c67c:	200129d4 	.word	0x200129d4
 800c680:	20012508 	.word	0x20012508
 800c684:	20012220 	.word	0x20012220
 800c688:	20012a36 	.word	0x20012a36
 800c68c:	20012368 	.word	0x20012368
 800c690:	40007400 	.word	0x40007400

0800c694 <High_Oxygen_Achieved>:
 * This function is used to decrease the proportional valve opening when high oxygen levels are detected.
 * @param FIO2_Val Set fio2 value from mode.
 * @param Achieved_Oxygen Achieved Oxygen from previous breathe.
 * */
void High_Oxygen_Achieved(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	460a      	mov	r2, r1
 800c69e:	71fb      	strb	r3, [r7, #7]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	71bb      	strb	r3, [r7, #6]
		O2_High_Count++;
 800c6a4:	4b28      	ldr	r3, [pc, #160]	; (800c748 <High_Oxygen_Achieved+0xb4>)
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	b2da      	uxtb	r2, r3
 800c6ac:	4b26      	ldr	r3, [pc, #152]	; (800c748 <High_Oxygen_Achieved+0xb4>)
 800c6ae:	701a      	strb	r2, [r3, #0]
		if(O2_High_Count >1)
 800c6b0:	4b25      	ldr	r3, [pc, #148]	; (800c748 <High_Oxygen_Achieved+0xb4>)
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d931      	bls.n	800c71c <High_Oxygen_Achieved+0x88>
		{
			if(  ( Achieved_Oxygen)  > ( FIO2_Val ) && (Achieved_Oxygen  <= (FIO2_Val + 2) ) )
 800c6b8:	79ba      	ldrb	r2, [r7, #6]
 800c6ba:	79fb      	ldrb	r3, [r7, #7]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d90c      	bls.n	800c6da <High_Oxygen_Achieved+0x46>
 800c6c0:	79ba      	ldrb	r2, [r7, #6]
 800c6c2:	79fb      	ldrb	r3, [r7, #7]
 800c6c4:	3302      	adds	r3, #2
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	dc07      	bgt.n	800c6da <High_Oxygen_Achieved+0x46>
			{
				Oxygen_Parameter.O2_DAC = (Oxygen_Parameter.O2_DAC-ET_O2_Envitec_Tune_Value1);
 800c6ca:	4b20      	ldr	r3, [pc, #128]	; (800c74c <High_Oxygen_Achieved+0xb8>)
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	4a20      	ldr	r2, [pc, #128]	; (800c750 <High_Oxygen_Achieved+0xbc>)
 800c6d0:	7812      	ldrb	r2, [r2, #0]
 800c6d2:	1a9b      	subs	r3, r3, r2
 800c6d4:	4a1d      	ldr	r2, [pc, #116]	; (800c74c <High_Oxygen_Achieved+0xb8>)
 800c6d6:	60d3      	str	r3, [r2, #12]
 800c6d8:	e01d      	b.n	800c716 <High_Oxygen_Achieved+0x82>
			}
			else if(  ( Achieved_Oxygen)  > ( FIO2_Val + 2 ) && (Achieved_Oxygen  < (FIO2_Val + 5) ) )
 800c6da:	79ba      	ldrb	r2, [r7, #6]
 800c6dc:	79fb      	ldrb	r3, [r7, #7]
 800c6de:	3302      	adds	r3, #2
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	dd0c      	ble.n	800c6fe <High_Oxygen_Achieved+0x6a>
 800c6e4:	79fb      	ldrb	r3, [r7, #7]
 800c6e6:	1d1a      	adds	r2, r3, #4
 800c6e8:	79bb      	ldrb	r3, [r7, #6]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	db07      	blt.n	800c6fe <High_Oxygen_Achieved+0x6a>
			{
				Oxygen_Parameter.O2_DAC = (Oxygen_Parameter.O2_DAC-ET_O2_Envitec_Tune_Value2);
 800c6ee:	4b17      	ldr	r3, [pc, #92]	; (800c74c <High_Oxygen_Achieved+0xb8>)
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	4a18      	ldr	r2, [pc, #96]	; (800c754 <High_Oxygen_Achieved+0xc0>)
 800c6f4:	7812      	ldrb	r2, [r2, #0]
 800c6f6:	1a9b      	subs	r3, r3, r2
 800c6f8:	4a14      	ldr	r2, [pc, #80]	; (800c74c <High_Oxygen_Achieved+0xb8>)
 800c6fa:	60d3      	str	r3, [r2, #12]
 800c6fc:	e00b      	b.n	800c716 <High_Oxygen_Achieved+0x82>
			}
			else if(  ( Achieved_Oxygen)  >= ( FIO2_Val + 5 )  )
 800c6fe:	79fb      	ldrb	r3, [r7, #7]
 800c700:	1d1a      	adds	r2, r3, #4
 800c702:	79bb      	ldrb	r3, [r7, #6]
 800c704:	429a      	cmp	r2, r3
 800c706:	da06      	bge.n	800c716 <High_Oxygen_Achieved+0x82>
			{
				Oxygen_Parameter.O2_DAC = (Oxygen_Parameter.O2_DAC-ET_O2_Envitec_Tune_Value3);
 800c708:	4b10      	ldr	r3, [pc, #64]	; (800c74c <High_Oxygen_Achieved+0xb8>)
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	4a12      	ldr	r2, [pc, #72]	; (800c758 <High_Oxygen_Achieved+0xc4>)
 800c70e:	7812      	ldrb	r2, [r2, #0]
 800c710:	1a9b      	subs	r3, r3, r2
 800c712:	4a0e      	ldr	r2, [pc, #56]	; (800c74c <High_Oxygen_Achieved+0xb8>)
 800c714:	60d3      	str	r3, [r2, #12]
			}
			O2_High_Count = 0;
 800c716:	4b0c      	ldr	r3, [pc, #48]	; (800c748 <High_Oxygen_Achieved+0xb4>)
 800c718:	2200      	movs	r2, #0
 800c71a:	701a      	strb	r2, [r3, #0]
		}

		if(Oxygen_Parameter.O2_DAC<=1400)
 800c71c:	4b0b      	ldr	r3, [pc, #44]	; (800c74c <High_Oxygen_Achieved+0xb8>)
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800c724:	dc03      	bgt.n	800c72e <High_Oxygen_Achieved+0x9a>
		{
			Oxygen_Parameter.O2_DAC=1400;
 800c726:	4b09      	ldr	r3, [pc, #36]	; (800c74c <High_Oxygen_Achieved+0xb8>)
 800c728:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800c72c:	60da      	str	r2, [r3, #12]
		}
		O2_Low_Count = 0;
 800c72e:	4b0b      	ldr	r3, [pc, #44]	; (800c75c <High_Oxygen_Achieved+0xc8>)
 800c730:	2200      	movs	r2, #0
 800c732:	701a      	strb	r2, [r3, #0]

	Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800c734:	4b05      	ldr	r3, [pc, #20]	; (800c74c <High_Oxygen_Achieved+0xb8>)
 800c736:	68da      	ldr	r2, [r3, #12]
 800c738:	4b09      	ldr	r3, [pc, #36]	; (800c760 <High_Oxygen_Achieved+0xcc>)
 800c73a:	615a      	str	r2, [r3, #20]
}
 800c73c:	bf00      	nop
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr
 800c748:	20012368 	.word	0x20012368
 800c74c:	200129d4 	.word	0x200129d4
 800c750:	20012508 	.word	0x20012508
 800c754:	20012220 	.word	0x20012220
 800c758:	20012a36 	.word	0x20012a36
 800c75c:	200126b8 	.word	0x200126b8
 800c760:	40007400 	.word	0x40007400

0800c764 <Tune_O2>:
 *This function checks whether the achieved O2 value is high or low."
 * @param FIO2_Val Set fio2 value from mode.
 * @param Achieved_Oxygen Achieved Oxygen from previous breathe.
 * */
static void Tune_O2(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	460a      	mov	r2, r1
 800c76e:	71fb      	strb	r3, [r7, #7]
 800c770:	4613      	mov	r3, r2
 800c772:	71bb      	strb	r3, [r7, #6]
	    if (Achieved_Oxygen < (FIO2_Val-1))
 800c774:	79ba      	ldrb	r2, [r7, #6]
 800c776:	79fb      	ldrb	r3, [r7, #7]
 800c778:	3b01      	subs	r3, #1
 800c77a:	429a      	cmp	r2, r3
 800c77c:	da06      	bge.n	800c78c <Tune_O2+0x28>
		{
			Low_Oxygen_Achieved(FIO2_Val,Achieved_Oxygen);
 800c77e:	79ba      	ldrb	r2, [r7, #6]
 800c780:	79fb      	ldrb	r3, [r7, #7]
 800c782:	4611      	mov	r1, r2
 800c784:	4618      	mov	r0, r3
 800c786:	f7ff ff1b 	bl	800c5c0 <Low_Oxygen_Achieved>
 800c78a:	e00e      	b.n	800c7aa <Tune_O2+0x46>
		}
		else if (Achieved_Oxygen > (FIO2_Val))
 800c78c:	79ba      	ldrb	r2, [r7, #6]
 800c78e:	79fb      	ldrb	r3, [r7, #7]
 800c790:	429a      	cmp	r2, r3
 800c792:	d906      	bls.n	800c7a2 <Tune_O2+0x3e>
		{
			High_Oxygen_Achieved(FIO2_Val,Achieved_Oxygen);
 800c794:	79ba      	ldrb	r2, [r7, #6]
 800c796:	79fb      	ldrb	r3, [r7, #7]
 800c798:	4611      	mov	r1, r2
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff ff7a 	bl	800c694 <High_Oxygen_Achieved>
 800c7a0:	e003      	b.n	800c7aa <Tune_O2+0x46>
		}
		else
			Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800c7a2:	4b08      	ldr	r3, [pc, #32]	; (800c7c4 <Tune_O2+0x60>)
 800c7a4:	68da      	ldr	r2, [r3, #12]
 800c7a6:	4b08      	ldr	r3, [pc, #32]	; (800c7c8 <Tune_O2+0x64>)
 800c7a8:	615a      	str	r2, [r3, #20]

		Last_O2_Dac_Val = Oxygen_Parameter.O2_DAC;
 800c7aa:	4b06      	ldr	r3, [pc, #24]	; (800c7c4 <Tune_O2+0x60>)
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	4b06      	ldr	r3, [pc, #24]	; (800c7cc <Tune_O2+0x68>)
 800c7b2:	801a      	strh	r2, [r3, #0]

		Parkar_valve_Signal(Oxygen_Parameter.O2_DAC);
 800c7b4:	4b03      	ldr	r3, [pc, #12]	; (800c7c4 <Tune_O2+0x60>)
 800c7b6:	68da      	ldr	r2, [r3, #12]
 800c7b8:	4b03      	ldr	r3, [pc, #12]	; (800c7c8 <Tune_O2+0x64>)
 800c7ba:	615a      	str	r2, [r3, #20]
}
 800c7bc:	bf00      	nop
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	200129d4 	.word	0x200129d4
 800c7c8:	40007400 	.word	0x40007400
 800c7cc:	20012a08 	.word	0x20012a08

0800c7d0 <Adjust_O2_Flow>:
 * This function calculates the flow percentage required to achieve the desired O2 level.
 * @param FIO2_Val Set fio2 value from mode.
 * */

float Adjust_O2_Flow(uint8_t FIO2_Val)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	71fb      	strb	r3, [r7, #7]
	if(FIO2_Val >= 80)
 800c7da:	79fb      	ldrb	r3, [r7, #7]
 800c7dc:	2b4f      	cmp	r3, #79	; 0x4f
 800c7de:	d923      	bls.n	800c828 <Adjust_O2_Flow+0x58>
	{
		return (((FIO2_Val - 25)*0.25)/75)+0.85;
 800c7e0:	79fb      	ldrb	r3, [r7, #7]
 800c7e2:	3b19      	subs	r3, #25
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7f3 fe45 	bl	8000474 <__aeabi_i2d>
 800c7ea:	f04f 0200 	mov.w	r2, #0
 800c7ee:	4b28      	ldr	r3, [pc, #160]	; (800c890 <Adjust_O2_Flow+0xc0>)
 800c7f0:	f7f3 feaa 	bl	8000548 <__aeabi_dmul>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	a320      	add	r3, pc, #128	; (adr r3, 800c880 <Adjust_O2_Flow+0xb0>)
 800c7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c802:	f7f3 ffcb 	bl	800079c <__aeabi_ddiv>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	4610      	mov	r0, r2
 800c80c:	4619      	mov	r1, r3
 800c80e:	a31e      	add	r3, pc, #120	; (adr r3, 800c888 <Adjust_O2_Flow+0xb8>)
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	f7f3 fce2 	bl	80001dc <__adddf3>
 800c818:	4602      	mov	r2, r0
 800c81a:	460b      	mov	r3, r1
 800c81c:	4610      	mov	r0, r2
 800c81e:	4619      	mov	r1, r3
 800c820:	f7f4 f974 	bl	8000b0c <__aeabi_d2f>
 800c824:	4603      	mov	r3, r0
 800c826:	e022      	b.n	800c86e <Adjust_O2_Flow+0x9e>
	}
	else
	{
		return (((FIO2_Val - 25)*0.25)/75)+0.75;
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	3b19      	subs	r3, #25
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7f3 fe21 	bl	8000474 <__aeabi_i2d>
 800c832:	f04f 0200 	mov.w	r2, #0
 800c836:	4b16      	ldr	r3, [pc, #88]	; (800c890 <Adjust_O2_Flow+0xc0>)
 800c838:	f7f3 fe86 	bl	8000548 <__aeabi_dmul>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	4610      	mov	r0, r2
 800c842:	4619      	mov	r1, r3
 800c844:	a30e      	add	r3, pc, #56	; (adr r3, 800c880 <Adjust_O2_Flow+0xb0>)
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	f7f3 ffa7 	bl	800079c <__aeabi_ddiv>
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	4610      	mov	r0, r2
 800c854:	4619      	mov	r1, r3
 800c856:	f04f 0200 	mov.w	r2, #0
 800c85a:	4b0e      	ldr	r3, [pc, #56]	; (800c894 <Adjust_O2_Flow+0xc4>)
 800c85c:	f7f3 fcbe 	bl	80001dc <__adddf3>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	4610      	mov	r0, r2
 800c866:	4619      	mov	r1, r3
 800c868:	f7f4 f950 	bl	8000b0c <__aeabi_d2f>
 800c86c:	4603      	mov	r3, r0
 800c86e:	ee07 3a90 	vmov	s15, r3
	}

}
 800c872:	eeb0 0a67 	vmov.f32	s0, s15
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	f3af 8000 	nop.w
 800c880:	00000000 	.word	0x00000000
 800c884:	4052c000 	.word	0x4052c000
 800c888:	33333333 	.word	0x33333333
 800c88c:	3feb3333 	.word	0x3feb3333
 800c890:	3fd00000 	.word	0x3fd00000
 800c894:	3fe80000 	.word	0x3fe80000

0800c898 <O2_DAC_Control>:
 * @param FIO2_Val Set fio2 value from mode.
 * */


void O2_DAC_Control(uint8_t FIO2_Val)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4603      	mov	r3, r0
 800c8a0:	71fb      	strb	r3, [r7, #7]
	if(Fio2_Blending_Method == PRESSURE_CONTROLLED)
 800c8a2:	4b6f      	ldr	r3, [pc, #444]	; (800ca60 <O2_DAC_Control+0x1c8>)
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d16d      	bne.n	800c986 <O2_DAC_Control+0xee>
	{
		if(FIO2_Val  > 21)
 800c8aa:	79fb      	ldrb	r3, [r7, #7]
 800c8ac:	2b15      	cmp	r3, #21
 800c8ae:	d963      	bls.n	800c978 <O2_DAC_Control+0xe0>
		{
			Check_Oxygen_Count++;
 800c8b0:	4b6c      	ldr	r3, [pc, #432]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	4b6a      	ldr	r3, [pc, #424]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c8ba:	701a      	strb	r2, [r3, #0]

			if(Check_Oxygen_Count == 10)
 800c8bc:	4b69      	ldr	r3, [pc, #420]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2b0a      	cmp	r3, #10
 800c8c2:	d106      	bne.n	800c8d2 <O2_DAC_Control+0x3a>
			{
				Oxygen_Parameter.O2_DAC = (Oxygen_Parameter.O2_DAC + Additional_O2_DAC);
 800c8c4:	4b68      	ldr	r3, [pc, #416]	; (800ca68 <O2_DAC_Control+0x1d0>)
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	4a68      	ldr	r2, [pc, #416]	; (800ca6c <O2_DAC_Control+0x1d4>)
 800c8ca:	7812      	ldrb	r2, [r2, #0]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	4a66      	ldr	r2, [pc, #408]	; (800ca68 <O2_DAC_Control+0x1d0>)
 800c8d0:	60d3      	str	r3, [r2, #12]
			}

			if(Check_Oxygen_Count >= 10)
 800c8d2:	4b64      	ldr	r3, [pc, #400]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	2b09      	cmp	r3, #9
 800c8d8:	d912      	bls.n	800c900 <O2_DAC_Control+0x68>
			{
			   Oxygen_Blending_Status           = OXYGEN_NOT_ACHIEVED;
 800c8da:	4b65      	ldr	r3, [pc, #404]	; (800ca70 <O2_DAC_Control+0x1d8>)
 800c8dc:	2201      	movs	r2, #1
 800c8de:	701a      	strb	r2, [r3, #0]
			   Tune_O2(FIO2_Val,Oxygen_Parameter.Achieved_Oxygen);
 800c8e0:	4b61      	ldr	r3, [pc, #388]	; (800ca68 <O2_DAC_Control+0x1d0>)
 800c8e2:	7a1a      	ldrb	r2, [r3, #8]
 800c8e4:	79fb      	ldrb	r3, [r7, #7]
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7ff ff3b 	bl	800c764 <Tune_O2>
			   if(Check_Oxygen_Count>=13)
 800c8ee:	4b5d      	ldr	r3, [pc, #372]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	2b0c      	cmp	r3, #12
 800c8f4:	f240 80af 	bls.w	800ca56 <O2_DAC_Control+0x1be>
				   Check_Oxygen_Count=13;
 800c8f8:	4b5a      	ldr	r3, [pc, #360]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c8fa:	220d      	movs	r2, #13
 800c8fc:	701a      	strb	r2, [r3, #0]
		{
			Oxygen_Blending_Status=OXYGEN_NOT_ACHIEVED;
			Parkar_valve_Signal(0);
		}
	}
}
 800c8fe:	e0aa      	b.n	800ca56 <O2_DAC_Control+0x1be>
			else if( O2_Check < 4)
 800c900:	4b5c      	ldr	r3, [pc, #368]	; (800ca74 <O2_DAC_Control+0x1dc>)
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	2b03      	cmp	r3, #3
 800c906:	f200 80a6 	bhi.w	800ca56 <O2_DAC_Control+0x1be>
				Oxygen_Blending_Status=OXYGEN_NOT_ACHIEVED;
 800c90a:	4b59      	ldr	r3, [pc, #356]	; (800ca70 <O2_DAC_Control+0x1d8>)
 800c90c:	2201      	movs	r2, #1
 800c90e:	701a      	strb	r2, [r3, #0]
				O2_Flow_Rate   = (Adjust_O2_Flow(FIO2_Val)*Max_Flow* ( (float)( FIO2_Val - 21) / 100) );
 800c910:	79fb      	ldrb	r3, [r7, #7]
 800c912:	4618      	mov	r0, r3
 800c914:	f7ff ff5c 	bl	800c7d0 <Adjust_O2_Flow>
 800c918:	eeb0 7a40 	vmov.f32	s14, s0
 800c91c:	4b56      	ldr	r3, [pc, #344]	; (800ca78 <O2_DAC_Control+0x1e0>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	ee07 3a90 	vmov	s15, r3
 800c924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c92c:	79fb      	ldrb	r3, [r7, #7]
 800c92e:	3b15      	subs	r3, #21
 800c930:	ee07 3a90 	vmov	s15, r3
 800c934:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c938:	ed9f 6a50 	vldr	s12, [pc, #320]	; 800ca7c <O2_DAC_Control+0x1e4>
 800c93c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800c940:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c948:	edc7 7a00 	vstr	s15, [r7]
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	b25a      	sxtb	r2, r3
 800c950:	4b4b      	ldr	r3, [pc, #300]	; (800ca80 <O2_DAC_Control+0x1e8>)
 800c952:	701a      	strb	r2, [r3, #0]
				if(O2_Flow_Rate <=2)
 800c954:	4b4a      	ldr	r3, [pc, #296]	; (800ca80 <O2_DAC_Control+0x1e8>)
 800c956:	f993 3000 	ldrsb.w	r3, [r3]
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	dc02      	bgt.n	800c964 <O2_DAC_Control+0xcc>
					O2_Flow_Rate = 2;
 800c95e:	4b48      	ldr	r3, [pc, #288]	; (800ca80 <O2_DAC_Control+0x1e8>)
 800c960:	2202      	movs	r2, #2
 800c962:	701a      	strb	r2, [r3, #0]
				Last_Avg_Flow = Avg_Flow;
 800c964:	4b47      	ldr	r3, [pc, #284]	; (800ca84 <O2_DAC_Control+0x1ec>)
 800c966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c96a:	b2da      	uxtb	r2, r3
 800c96c:	4b46      	ldr	r3, [pc, #280]	; (800ca88 <O2_DAC_Control+0x1f0>)
 800c96e:	701a      	strb	r2, [r3, #0]
				Avg_Flow=0;
 800c970:	4b44      	ldr	r3, [pc, #272]	; (800ca84 <O2_DAC_Control+0x1ec>)
 800c972:	2200      	movs	r2, #0
 800c974:	801a      	strh	r2, [r3, #0]
}
 800c976:	e06e      	b.n	800ca56 <O2_DAC_Control+0x1be>
			Oxygen_Blending_Status=OXYGEN_NOT_ACHIEVED;
 800c978:	4b3d      	ldr	r3, [pc, #244]	; (800ca70 <O2_DAC_Control+0x1d8>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	701a      	strb	r2, [r3, #0]
			Parkar_valve_Signal(0);
 800c97e:	4b43      	ldr	r3, [pc, #268]	; (800ca8c <O2_DAC_Control+0x1f4>)
 800c980:	2200      	movs	r2, #0
 800c982:	615a      	str	r2, [r3, #20]
}
 800c984:	e067      	b.n	800ca56 <O2_DAC_Control+0x1be>
	else if(Fio2_Blending_Method == VOLUME_CONTROLLED)
 800c986:	4b36      	ldr	r3, [pc, #216]	; (800ca60 <O2_DAC_Control+0x1c8>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d163      	bne.n	800ca56 <O2_DAC_Control+0x1be>
		if(FIO2_Val  > 21)
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	2b15      	cmp	r3, #21
 800c992:	d95a      	bls.n	800ca4a <O2_DAC_Control+0x1b2>
			Check_Oxygen_Count++;
 800c994:	4b33      	ldr	r3, [pc, #204]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	3301      	adds	r3, #1
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	4b31      	ldr	r3, [pc, #196]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c99e:	701a      	strb	r2, [r3, #0]
			if(Check_Oxygen_Count == 10)
 800c9a0:	4b30      	ldr	r3, [pc, #192]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	2b0a      	cmp	r3, #10
 800c9a6:	d106      	bne.n	800c9b6 <O2_DAC_Control+0x11e>
				Oxygen_Parameter.O2_DAC = (Oxygen_Parameter.O2_DAC + Additional_O2_DAC);
 800c9a8:	4b2f      	ldr	r3, [pc, #188]	; (800ca68 <O2_DAC_Control+0x1d0>)
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	4a2f      	ldr	r2, [pc, #188]	; (800ca6c <O2_DAC_Control+0x1d4>)
 800c9ae:	7812      	ldrb	r2, [r2, #0]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	4a2d      	ldr	r2, [pc, #180]	; (800ca68 <O2_DAC_Control+0x1d0>)
 800c9b4:	60d3      	str	r3, [r2, #12]
			if(Check_Oxygen_Count >= 10)
 800c9b6:	4b2b      	ldr	r3, [pc, #172]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	2b09      	cmp	r3, #9
 800c9bc:	d911      	bls.n	800c9e2 <O2_DAC_Control+0x14a>
			   Oxygen_Blending_Status           = OXYGEN_NOT_ACHIEVED;
 800c9be:	4b2c      	ldr	r3, [pc, #176]	; (800ca70 <O2_DAC_Control+0x1d8>)
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	701a      	strb	r2, [r3, #0]
			   Tune_O2(FIO2_Val,Oxygen_Parameter.Achieved_Oxygen);
 800c9c4:	4b28      	ldr	r3, [pc, #160]	; (800ca68 <O2_DAC_Control+0x1d0>)
 800c9c6:	7a1a      	ldrb	r2, [r3, #8]
 800c9c8:	79fb      	ldrb	r3, [r7, #7]
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7ff fec9 	bl	800c764 <Tune_O2>
			   if(Check_Oxygen_Count>=13)
 800c9d2:	4b24      	ldr	r3, [pc, #144]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	2b0c      	cmp	r3, #12
 800c9d8:	d93d      	bls.n	800ca56 <O2_DAC_Control+0x1be>
				   Check_Oxygen_Count=13;
 800c9da:	4b22      	ldr	r3, [pc, #136]	; (800ca64 <O2_DAC_Control+0x1cc>)
 800c9dc:	220d      	movs	r2, #13
 800c9de:	701a      	strb	r2, [r3, #0]
}
 800c9e0:	e039      	b.n	800ca56 <O2_DAC_Control+0x1be>
			else if(O2_Check < 4)
 800c9e2:	4b24      	ldr	r3, [pc, #144]	; (800ca74 <O2_DAC_Control+0x1dc>)
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	2b03      	cmp	r3, #3
 800c9e8:	d835      	bhi.n	800ca56 <O2_DAC_Control+0x1be>
				Oxygen_Blending_Status=OXYGEN_NOT_ACHIEVED;
 800c9ea:	4b21      	ldr	r3, [pc, #132]	; (800ca70 <O2_DAC_Control+0x1d8>)
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	701a      	strb	r2, [r3, #0]
				O2_Flow_Rate   = ( Avg_Flow* ( (float)( FIO2_Val - 21) / 100) );
 800c9f0:	4b24      	ldr	r3, [pc, #144]	; (800ca84 <O2_DAC_Control+0x1ec>)
 800c9f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c9fe:	79fb      	ldrb	r3, [r7, #7]
 800ca00:	3b15      	subs	r3, #21
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ca0a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 800ca7c <O2_DAC_Control+0x1e4>
 800ca0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ca12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca1a:	edc7 7a00 	vstr	s15, [r7]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	b25a      	sxtb	r2, r3
 800ca22:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <O2_DAC_Control+0x1e8>)
 800ca24:	701a      	strb	r2, [r3, #0]
				if(O2_Flow_Rate <=2)
 800ca26:	4b16      	ldr	r3, [pc, #88]	; (800ca80 <O2_DAC_Control+0x1e8>)
 800ca28:	f993 3000 	ldrsb.w	r3, [r3]
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	dc02      	bgt.n	800ca36 <O2_DAC_Control+0x19e>
					O2_Flow_Rate = 2;
 800ca30:	4b13      	ldr	r3, [pc, #76]	; (800ca80 <O2_DAC_Control+0x1e8>)
 800ca32:	2202      	movs	r2, #2
 800ca34:	701a      	strb	r2, [r3, #0]
				Last_Avg_Flow = Avg_Flow;
 800ca36:	4b13      	ldr	r3, [pc, #76]	; (800ca84 <O2_DAC_Control+0x1ec>)
 800ca38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	4b12      	ldr	r3, [pc, #72]	; (800ca88 <O2_DAC_Control+0x1f0>)
 800ca40:	701a      	strb	r2, [r3, #0]
				Avg_Flow=0;
 800ca42:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <O2_DAC_Control+0x1ec>)
 800ca44:	2200      	movs	r2, #0
 800ca46:	801a      	strh	r2, [r3, #0]
}
 800ca48:	e005      	b.n	800ca56 <O2_DAC_Control+0x1be>
			Oxygen_Blending_Status=OXYGEN_NOT_ACHIEVED;
 800ca4a:	4b09      	ldr	r3, [pc, #36]	; (800ca70 <O2_DAC_Control+0x1d8>)
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	701a      	strb	r2, [r3, #0]
			Parkar_valve_Signal(0);
 800ca50:	4b0e      	ldr	r3, [pc, #56]	; (800ca8c <O2_DAC_Control+0x1f4>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	615a      	str	r2, [r3, #20]
}
 800ca56:	bf00      	nop
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	20012360 	.word	0x20012360
 800ca64:	20012a0a 	.word	0x20012a0a
 800ca68:	200129d4 	.word	0x200129d4
 800ca6c:	20000010 	.word	0x20000010
 800ca70:	20012b71 	.word	0x20012b71
 800ca74:	2001220e 	.word	0x2001220e
 800ca78:	200129a4 	.word	0x200129a4
 800ca7c:	42c80000 	.word	0x42c80000
 800ca80:	200122e1 	.word	0x200122e1
 800ca84:	2001283c 	.word	0x2001283c
 800ca88:	20012d78 	.word	0x20012d78
 800ca8c:	40007400 	.word	0x40007400

0800ca90 <Pc_Simv_Assist_OFF_Task>:
static void CHECK_TRIGGER_OFFSET();
static void Set_Blower_Val();
static void Trigger_Time_Monitor();

void Pc_Simv_Assist_OFF_Task(void *argument)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 800ca98:	4b13      	ldr	r3, [pc, #76]	; (800cae8 <Pc_Simv_Assist_OFF_Task+0x58>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d00b      	beq.n	800cab8 <Pc_Simv_Assist_OFF_Task+0x28>
 800caa0:	2b02      	cmp	r3, #2
 800caa2:	dc19      	bgt.n	800cad8 <Pc_Simv_Assist_OFF_Task+0x48>
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d019      	beq.n	800cadc <Pc_Simv_Assist_OFF_Task+0x4c>
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d115      	bne.n	800cad8 <Pc_Simv_Assist_OFF_Task+0x48>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 800caac:	4b0f      	ldr	r3, [pc, #60]	; (800caec <Pc_Simv_Assist_OFF_Task+0x5c>)
 800caae:	881b      	ldrh	r3, [r3, #0]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 f81f 	bl	800caf4 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF>
			break;
 800cab6:	e012      	b.n	800cade <Pc_Simv_Assist_OFF_Task+0x4e>
			case Run_Expiration_Cycle:
				Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800cab8:	4b0c      	ldr	r3, [pc, #48]	; (800caec <Pc_Simv_Assist_OFF_Task+0x5c>)
 800caba:	881b      	ldrh	r3, [r3, #0]
 800cabc:	4a0c      	ldr	r2, [pc, #48]	; (800caf0 <Pc_Simv_Assist_OFF_Task+0x60>)
 800cabe:	edd2 7a00 	vldr	s15, [r2]
											   PEEP_Maintain_Parameter.PEEP_Temp,
											   PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800cac2:	4a0b      	ldr	r2, [pc, #44]	; (800caf0 <Pc_Simv_Assist_OFF_Task+0x60>)
 800cac4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800cac8:	b292      	uxth	r2, r2
 800caca:	4611      	mov	r1, r2
 800cacc:	eeb0 0a67 	vmov.f32	s0, s15
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 f81f 	bl	800cb14 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF>
			break;
 800cad6:	e002      	b.n	800cade <Pc_Simv_Assist_OFF_Task+0x4e>
			case No_Run_State:
			break;
			default:
			break;
 800cad8:	bf00      	nop
 800cada:	e000      	b.n	800cade <Pc_Simv_Assist_OFF_Task+0x4e>
			break;
 800cadc:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 800cade:	2002      	movs	r0, #2
 800cae0:	f00e fab4 	bl	801b04c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 800cae4:	e7d8      	b.n	800ca98 <Pc_Simv_Assist_OFF_Task+0x8>
 800cae6:	bf00      	nop
 800cae8:	20012870 	.word	0x20012870
 800caec:	20012978 	.word	0x20012978
 800caf0:	20012c74 	.word	0x20012c74

0800caf4 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF>:
	}
}

static void Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF(uint16_t Blower_Signal)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	4603      	mov	r3, r0
 800cafc:	80fb      	strh	r3, [r7, #6]
	Blower_Signal(Blower_Signal);
 800cafe:	4a04      	ldr	r2, [pc, #16]	; (800cb10 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x1c>)
 800cb00:	88fb      	ldrh	r3, [r7, #6]
 800cb02:	6093      	str	r3, [r2, #8]
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	40007400 	.word	0x40007400

0800cb14 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF>:

static void Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	ed87 0a00 	vstr	s0, [r7]
 800cb20:	460a      	mov	r2, r1
 800cb22:	80fb      	strh	r3, [r7, #6]
 800cb24:	4613      	mov	r3, r2
 800cb26:	80bb      	strh	r3, [r7, #4]
	if(PCsimv.Blower_Wait_Time_Milli_Second ==0)
 800cb28:	4b23      	ldr	r3, [pc, #140]	; (800cbb8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xa4>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d102      	bne.n	800cb36 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x22>
	{
		Blower_Signal( Blower_Signal);
 800cb30:	4a22      	ldr	r2, [pc, #136]	; (800cbbc <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xa8>)
 800cb32:	88fb      	ldrh	r3, [r7, #6]
 800cb34:	6093      	str	r3, [r2, #8]
	}
		if(Peep_Status == PEEP_ACHEIVED)
		{

		}
		if(GRAPH_VALUES.pressure<= PEEP)
 800cb36:	4b22      	ldr	r3, [pc, #136]	; (800cbc0 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xac>)
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	ee07 3a90 	vmov	s15, r3
 800cb3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb42:	ed97 7a00 	vldr	s14, [r7]
 800cb46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4e:	db20      	blt.n	800cb92 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x7e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 800cb50:	4b1c      	ldr	r3, [pc, #112]	; (800cbc4 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb0>)
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d112      	bne.n	800cb7e <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x6a>
			{
				Expiratory_Valve_Lock_Delay=CLOSED;
 800cb58:	4b1a      	ldr	r3, [pc, #104]	; (800cbc4 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb0>)
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	701a      	strb	r2, [r3, #0]
				if(Trigger_Process == ONE_TIME_TRIGGER)
 800cb5e:	4b1a      	ldr	r3, [pc, #104]	; (800cbc8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb4>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d104      	bne.n	800cb70 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x5c>
				{
				   vTaskDelay(Expiratory_Valve_Open_Time);
 800cb66:	88bb      	ldrh	r3, [r7, #4]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f00e fa6f 	bl	801b04c <vTaskDelay>
 800cb6e:	e006      	b.n	800cb7e <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x6a>
				}
				else if(Trigger_Process == COUNTINOUS_TRIGGER)
 800cb70:	4b15      	ldr	r3, [pc, #84]	; (800cbc8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb4>)
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d102      	bne.n	800cb7e <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x6a>
				{
				   vTaskDelay(0);
 800cb78:	2000      	movs	r0, #0
 800cb7a:	f00e fa67 	bl	801b04c <vTaskDelay>
				}
			}
			Peep_Status=PEEP_ACHEIVED;
 800cb7e:	4b13      	ldr	r3, [pc, #76]	; (800cbcc <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb8>)
 800cb80:	2201      	movs	r2, #1
 800cb82:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 800cb84:	4b12      	ldr	r3, [pc, #72]	; (800cbd0 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xbc>)
 800cb86:	695b      	ldr	r3, [r3, #20]
 800cb88:	4a11      	ldr	r2, [pc, #68]	; (800cbd0 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xbc>)
 800cb8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cb8e:	6153      	str	r3, [r2, #20]
 800cb90:	e009      	b.n	800cba6 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x92>
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 800cb92:	4b0e      	ldr	r3, [pc, #56]	; (800cbcc <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xb8>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d105      	bne.n	800cba6 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0x92>
		{
			ExpValve_OPEN();
 800cb9a:	4b0d      	ldr	r3, [pc, #52]	; (800cbd0 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xbc>)
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	4a0c      	ldr	r2, [pc, #48]	; (800cbd0 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xbc>)
 800cba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cba4:	6153      	str	r3, [r2, #20]
		}

	CHECK_TRIGGER_ASSIST_OFF(PC_SIMV.TRIG_WINDOW);
 800cba6:	4b0b      	ldr	r3, [pc, #44]	; (800cbd4 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_OFF+0xc0>)
 800cba8:	8bdb      	ldrh	r3, [r3, #30]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 f814 	bl	800cbd8 <CHECK_TRIGGER_ASSIST_OFF>
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	200124e4 	.word	0x200124e4
 800cbbc:	40007400 	.word	0x40007400
 800cbc0:	200125f8 	.word	0x200125f8
 800cbc4:	20012a34 	.word	0x20012a34
 800cbc8:	20012348 	.word	0x20012348
 800cbcc:	20012a37 	.word	0x20012a37
 800cbd0:	40020400 	.word	0x40020400
 800cbd4:	20012c2c 	.word	0x20012c2c

0800cbd8 <CHECK_TRIGGER_ASSIST_OFF>:

static void CHECK_TRIGGER_ASSIST_OFF(uint16_t Trigger_Check_Time)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	80fb      	strh	r3, [r7, #6]
	if(Trigger_Process == ONE_TIME_TRIGGER)
 800cbe2:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <CHECK_TRIGGER_ASSIST_OFF+0x34>)
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d104      	bne.n	800cbf4 <CHECK_TRIGGER_ASSIST_OFF+0x1c>
	{
		Before_Trigger(Trigger_Check_Time);
 800cbea:	88fb      	ldrh	r3, [r7, #6]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 f80f 	bl	800cc10 <Before_Trigger>
	else if(Trigger_Process == COUNTINOUS_TRIGGER)
	{
		After_Trigger(Trigger_Check_Time);
	}

}
 800cbf2:	e007      	b.n	800cc04 <CHECK_TRIGGER_ASSIST_OFF+0x2c>
	else if(Trigger_Process == COUNTINOUS_TRIGGER)
 800cbf4:	4b05      	ldr	r3, [pc, #20]	; (800cc0c <CHECK_TRIGGER_ASSIST_OFF+0x34>)
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d103      	bne.n	800cc04 <CHECK_TRIGGER_ASSIST_OFF+0x2c>
		After_Trigger(Trigger_Check_Time);
 800cbfc:	88fb      	ldrh	r3, [r7, #6]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 f82e 	bl	800cc60 <After_Trigger>
}
 800cc04:	bf00      	nop
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	20012348 	.word	0x20012348

0800cc10 <Before_Trigger>:



static void Before_Trigger(uint16_t Trigger_Check_Time)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 800cc1a:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <Before_Trigger+0x48>)
 800cc1c:	685a      	ldr	r2, [r3, #4]
 800cc1e:	88fb      	ldrh	r3, [r7, #6]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	dc11      	bgt.n	800cc48 <Before_Trigger+0x38>
 800cc24:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <Before_Trigger+0x48>)
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00d      	beq.n	800cc48 <Before_Trigger+0x38>
	{

		if (Trigger_Type == Pressure_Trigger)
 800cc2c:	4b0b      	ldr	r3, [pc, #44]	; (800cc5c <Before_Trigger+0x4c>)
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d102      	bne.n	800cc3a <Before_Trigger+0x2a>
		{
			CHECK_PRESSURE_TRIGGER();
 800cc34:	f000 f9d6 	bl	800cfe4 <CHECK_PRESSURE_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 800cc38:	e009      	b.n	800cc4e <Before_Trigger+0x3e>
		}
		else if (Trigger_Type == Flow_Trigger)
 800cc3a:	4b08      	ldr	r3, [pc, #32]	; (800cc5c <Before_Trigger+0x4c>)
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d105      	bne.n	800cc4e <Before_Trigger+0x3e>
		{
			CHECK_FLOW_TRIGGER();
 800cc42:	f000 f9f7 	bl	800d034 <CHECK_FLOW_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 800cc46:	e002      	b.n	800cc4e <Before_Trigger+0x3e>

	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 800cc48:	f000 fa22 	bl	800d090 <CHECK_TRIGGER_OFFSET>
	}
}
 800cc4c:	e000      	b.n	800cc50 <Before_Trigger+0x40>
		if (Trigger_Type == Pressure_Trigger)
 800cc4e:	bf00      	nop
}
 800cc50:	bf00      	nop
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	20012b38 	.word	0x20012b38
 800cc5c:	20012244 	.word	0x20012244

0800cc60 <After_Trigger>:



static void After_Trigger(uint16_t Trigger_Check_Time)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	4603      	mov	r3, r0
 800cc68:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 800cc6a:	4b1a      	ldr	r3, [pc, #104]	; (800ccd4 <After_Trigger+0x74>)
 800cc6c:	685a      	ldr	r2, [r3, #4]
 800cc6e:	88fb      	ldrh	r3, [r7, #6]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	dc27      	bgt.n	800ccc4 <After_Trigger+0x64>
 800cc74:	4b17      	ldr	r3, [pc, #92]	; (800ccd4 <After_Trigger+0x74>)
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d023      	beq.n	800ccc4 <After_Trigger+0x64>
	{
		if( (GRAPH_VALUES.flow > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (PCsimv.Trigger_Check_Wait_Time == 0))
 800cc7c:	4b16      	ldr	r3, [pc, #88]	; (800ccd8 <After_Trigger+0x78>)
 800cc7e:	edd3 7a01 	vldr	s15, [r3, #4]
 800cc82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc8a:	dd1e      	ble.n	800ccca <After_Trigger+0x6a>
 800cc8c:	4b13      	ldr	r3, [pc, #76]	; (800ccdc <After_Trigger+0x7c>)
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d11a      	bne.n	800ccca <After_Trigger+0x6a>
 800cc94:	4b12      	ldr	r3, [pc, #72]	; (800cce0 <After_Trigger+0x80>)
 800cc96:	69db      	ldr	r3, [r3, #28]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d116      	bne.n	800ccca <After_Trigger+0x6a>
 800cc9c:	4b11      	ldr	r3, [pc, #68]	; (800cce4 <After_Trigger+0x84>)
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d112      	bne.n	800ccca <After_Trigger+0x6a>
		{
			STOP_BLOWER_IF_FLOW_SENSE();
 800cca4:	f000 fa30 	bl	800d108 <STOP_BLOWER_IF_FLOW_SENSE>

				if (Trigger_Type == Pressure_Trigger)
 800cca8:	4b0f      	ldr	r3, [pc, #60]	; (800cce8 <After_Trigger+0x88>)
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d102      	bne.n	800ccb6 <After_Trigger+0x56>
				{
					CHECK_PRESSURE_TRIGGER();
 800ccb0:	f000 f998 	bl	800cfe4 <CHECK_PRESSURE_TRIGGER>
		if( (GRAPH_VALUES.flow > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (PCsimv.Trigger_Check_Wait_Time == 0))
 800ccb4:	e009      	b.n	800ccca <After_Trigger+0x6a>
				}
				else if (Trigger_Type == Flow_Trigger)
 800ccb6:	4b0c      	ldr	r3, [pc, #48]	; (800cce8 <After_Trigger+0x88>)
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d105      	bne.n	800ccca <After_Trigger+0x6a>
				{
					CHECK_FLOW_TRIGGER();
 800ccbe:	f000 f9b9 	bl	800d034 <CHECK_FLOW_TRIGGER>
		if( (GRAPH_VALUES.flow > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (PCsimv.Trigger_Check_Wait_Time == 0))
 800ccc2:	e002      	b.n	800ccca <After_Trigger+0x6a>
				}
		 }
	}
	else
	{
		CHECK_TRIGGER_OFFSET();
 800ccc4:	f000 f9e4 	bl	800d090 <CHECK_TRIGGER_OFFSET>
	}
}
 800ccc8:	e000      	b.n	800cccc <After_Trigger+0x6c>
		if( (GRAPH_VALUES.flow > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (PCsimv.Trigger_Check_Wait_Time == 0))
 800ccca:	bf00      	nop
}
 800cccc:	bf00      	nop
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	20012b38 	.word	0x20012b38
 800ccd8:	200125f8 	.word	0x200125f8
 800ccdc:	20012a37 	.word	0x20012a37
 800cce0:	20012c74 	.word	0x20012c74
 800cce4:	200124e4 	.word	0x200124e4
 800cce8:	20012244 	.word	0x20012244

0800ccec <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset>:
void PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset()
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	af00      	add	r7, sp, #0
	if(Patient_Trigger == PATIENT_TRIGGER_HAPPEN)
 800ccf0:	4b09      	ldr	r3, [pc, #36]	; (800cd18 <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x2c>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d108      	bne.n	800cd0a <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x1e>
	{
		Trigger_Process = COUNTINOUS_TRIGGER;
 800ccf8:	4b08      	ldr	r3, [pc, #32]	; (800cd1c <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x30>)
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_DAC_VAL = RESET;
 800ccfe:	4b08      	ldr	r3, [pc, #32]	; (800cd20 <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x34>)
 800cd00:	2200      	movs	r2, #0
 800cd02:	801a      	strh	r2, [r3, #0]
		PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset();
 800cd04:	f000 f84a 	bl	800cd9c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset>
	else
	{
		Trigger_Process = ONE_TIME_TRIGGER;
		PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
	}
}
 800cd08:	e004      	b.n	800cd14 <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x28>
		Trigger_Process = ONE_TIME_TRIGGER;
 800cd0a:	4b04      	ldr	r3, [pc, #16]	; (800cd1c <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x30>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	701a      	strb	r2, [r3, #0]
		PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
 800cd10:	f000 fc3e 	bl	800d590 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>
}
 800cd14:	bf00      	nop
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	2001263d 	.word	0x2001263d
 800cd1c:	20012348 	.word	0x20012348
 800cd20:	20012978 	.word	0x20012978

0800cd24 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset>:



void PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset()
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	af00      	add	r7, sp, #0
	if(Patient_Trigger == PATIENT_TRIGGER_HAPPEN)
 800cd28:	4b06      	ldr	r3, [pc, #24]	; (800cd44 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x20>)
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d102      	bne.n	800cd36 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x12>
	{
		PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset();
 800cd30:	f000 f8cc 	bl	800cecc <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset>
	else
	{
		Pressure_Mode_blower_control.BLOWER_DAC_VAL=RESET;
		PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
	}
}
 800cd34:	e004      	b.n	800cd40 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x1c>
		Pressure_Mode_blower_control.BLOWER_DAC_VAL=RESET;
 800cd36:	4b04      	ldr	r3, [pc, #16]	; (800cd48 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x24>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	801a      	strh	r2, [r3, #0]
		PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
 800cd3c:	f000 fd06 	bl	800d74c <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>
}
 800cd40:	bf00      	nop
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	2001263d 	.word	0x2001263d
 800cd48:	20012978 	.word	0x20012978

0800cd4c <Switch_TASK_Inspiration_CYCLE>:


static void Switch_TASK_Inspiration_CYCLE()
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af02      	add	r7, sp, #8
	vTaskDelete(One_Time_Handler);
 800cd52:	4b0d      	ldr	r3, [pc, #52]	; (800cd88 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f00e f8e8 	bl	801af2c <vTaskDelete>
	TIME_Base_parameter._INSPIRATION_TIME = 0 ;
 800cd5c:	4b0b      	ldr	r3, [pc, #44]	; (800cd8c <Switch_TASK_Inspiration_CYCLE+0x40>)
 800cd5e:	2200      	movs	r2, #0
 800cd60:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter._EXPIRATION_TIME  = 0 ;
 800cd62:	4b0a      	ldr	r3, [pc, #40]	; (800cd8c <Switch_TASK_Inspiration_CYCLE+0x40>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	605a      	str	r2, [r3, #4]
	Next_Half_Breath_Cycle                = Generate_Inspiration_Cycle;
 800cd68:	4b09      	ldr	r3, [pc, #36]	; (800cd90 <Switch_TASK_Inspiration_CYCLE+0x44>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	701a      	strb	r2, [r3, #0]
	xTaskCreate(One_Time_Task,"One-Time-Task", 128, NULL,3, &One_Time_Handler);
 800cd6e:	4b06      	ldr	r3, [pc, #24]	; (800cd88 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	2303      	movs	r3, #3
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	2300      	movs	r3, #0
 800cd78:	2280      	movs	r2, #128	; 0x80
 800cd7a:	4906      	ldr	r1, [pc, #24]	; (800cd94 <Switch_TASK_Inspiration_CYCLE+0x48>)
 800cd7c:	4806      	ldr	r0, [pc, #24]	; (800cd98 <Switch_TASK_Inspiration_CYCLE+0x4c>)
 800cd7e:	f00d ff9e 	bl	801acbe <xTaskCreate>
}
 800cd82:	bf00      	nop
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	200129cc 	.word	0x200129cc
 800cd8c:	20012b38 	.word	0x20012b38
 800cd90:	2001269e 	.word	0x2001269e
 800cd94:	0801cfbc 	.word	0x0801cfbc
 800cd98:	08011609 	.word	0x08011609

0800cd9c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset>:

static void PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset()
{
 800cd9c:	b590      	push	{r4, r7, lr}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af02      	add	r7, sp, #8
	    Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 800cda2:	4b38      	ldr	r3, [pc, #224]	; (800ce84 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xe8>)
 800cda4:	2200      	movs	r2, #0
 800cda6:	701a      	strb	r2, [r3, #0]
		Blower_Status        = BlOWER_ON;
 800cda8:	4b37      	ldr	r3, [pc, #220]	; (800ce88 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xec>)
 800cdaa:	2200      	movs	r2, #0
 800cdac:	701a      	strb	r2, [r3, #0]
		Find_Average_Flow();
 800cdae:	f001 f86b 	bl	800de88 <Find_Average_Flow>
	    Breath_Count         = Count_The_Breath;
 800cdb2:	4b36      	ldr	r3, [pc, #216]	; (800ce8c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf0>)
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	701a      	strb	r2, [r3, #0]
		PIP_Not_Acheieved();
 800cdb8:	f001 f892 	bl	800dee0 <PIP_Not_Acheieved>
		ExpValve_CLOSE();
 800cdbc:	4b34      	ldr	r3, [pc, #208]	; (800ce90 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf4>)
 800cdbe:	695b      	ldr	r3, [r3, #20]
 800cdc0:	4a33      	ldr	r2, [pc, #204]	; (800ce90 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf4>)
 800cdc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cdc6:	6153      	str	r3, [r2, #20]
		PIP_AVERAGE();
 800cdc8:	f7fb ffae 	bl	8008d28 <PIP_AVERAGE>
		PEEP_AVERAGE();
 800cdcc:	f7fb ffd2 	bl	8008d74 <PEEP_AVERAGE>
		//Set_Blower_Val();
		O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 800cdd0:	4b30      	ldr	r3, [pc, #192]	; (800ce94 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf8>)
 800cdd2:	78db      	ldrb	r3, [r3, #3]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7ff fd5f 	bl	800c898 <O2_DAC_Control>
		Check_Alert();
 800cdda:	f7f4 f993 	bl	8001104 <Check_Alert>
		Alert_Inspiration_Time_Parameter();
 800cdde:	f7f4 fa49 	bl	8001274 <Alert_Inspiration_Time_Parameter>
		LED_Alert();
 800cde2:	f7f4 feef 	bl	8001bc4 <LED_Alert>
		Alert_Status = NO_ALERT;
 800cde6:	4b2c      	ldr	r3, [pc, #176]	; (800ce98 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xfc>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	701a      	strb	r2, [r3, #0]
		Sampled_Parameter_Inspiration_time();
 800cdec:	f005 f94c 	bl	8012088 <Sampled_Parameter_Inspiration_time>
		GRAPH_VALUES.Maximum_oxygen_flow   = 0;
 800cdf0:	4b2a      	ldr	r3, [pc, #168]	; (800ce9c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x100>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	829a      	strh	r2, [r3, #20]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 800cdf6:	4b2a      	ldr	r3, [pc, #168]	; (800cea0 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x104>)
 800cdf8:	7c18      	ldrb	r0, [r3, #16]
 800cdfa:	4b2a      	ldr	r3, [pc, #168]	; (800cea4 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800cdfc:	7899      	ldrb	r1, [r3, #2]
 800cdfe:	4b29      	ldr	r3, [pc, #164]	; (800cea4 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800ce00:	689a      	ldr	r2, [r3, #8]
 800ce02:	4b28      	ldr	r3, [pc, #160]	; (800cea4 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800ce04:	785c      	ldrb	r4, [r3, #1]
																															 PC_SIMV.RESPIRATORY_RATE_Val,
																															 PC_SIMV.INSPIRATION_TIME,
																															 PC_SIMV.PEEP_Val,
																															 PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800ce06:	4b26      	ldr	r3, [pc, #152]	; (800cea0 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x104>)
 800ce08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	4623      	mov	r3, r4
 800ce12:	f7fa fafd 	bl	8007410 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode>
 800ce16:	4603      	mov	r3, r0
 800ce18:	b21a      	sxth	r2, r3
 800ce1a:	4b21      	ldr	r3, [pc, #132]	; (800cea0 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x104>)
 800ce1c:	809a      	strh	r2, [r3, #4]

		if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 800ce1e:	4b22      	ldr	r3, [pc, #136]	; (800cea8 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x10c>)
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d103      	bne.n	800ce2e <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x92>
		{
			BREATH_STATE                                      = PATIENT_TRIGGER_INSPIRATION;
 800ce26:	4b21      	ldr	r3, [pc, #132]	; (800ceac <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x110>)
 800ce28:	2202      	movs	r2, #2
 800ce2a:	701a      	strb	r2, [r3, #0]
 800ce2c:	e002      	b.n	800ce34 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x98>
		}
		else
		{
			BREATH_STATE                                       = INSPIRATION_CYCLE;
 800ce2e:	4b1f      	ldr	r3, [pc, #124]	; (800ceac <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x110>)
 800ce30:	2200      	movs	r2, #0
 800ce32:	701a      	strb	r2, [r3, #0]
		}

		Peep_Status                   				         = PEEP_NOT_ACHEIVED;
 800ce34:	4b1e      	ldr	r3, [pc, #120]	; (800ceb0 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x114>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			             = OPENED;
 800ce3a:	4b1e      	ldr	r3, [pc, #120]	; (800ceb4 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x118>)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	701a      	strb	r2, [r3, #0]
		PIP_Average_Parameter.Maximum_PIP_Acheived           = RESET;
 800ce40:	4b1d      	ldr	r3, [pc, #116]	; (800ceb8 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x11c>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	701a      	strb	r2, [r3, #0]
		TIME_Base_parameter._INSPIRATION_TIME                = PC_SIMV.INSPIRATION_TIME;
 800ce46:	4b17      	ldr	r3, [pc, #92]	; (800cea4 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	4b1b      	ldr	r3, [pc, #108]	; (800cebc <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x120>)
 800ce4e:	601a      	str	r2, [r3, #0]

		TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED        = RESET;
 800ce50:	4b1a      	ldr	r3, [pc, #104]	; (800cebc <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x120>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	609a      	str	r2, [r3, #8]
		GRAPH_VALUES.volume                                   = RESET;
 800ce56:	4b11      	ldr	r3, [pc, #68]	; (800ce9c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x100>)
 800ce58:	f04f 0200 	mov.w	r2, #0
 800ce5c:	609a      	str	r2, [r3, #8]
		Volume_max                                           = RESET;
 800ce5e:	4b18      	ldr	r3, [pc, #96]	; (800cec0 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x124>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	601a      	str	r2, [r3, #0]
		Next_Half_Breath_Cycle                               = Generate_Expiration_Cycle;
 800ce64:	4b17      	ldr	r3, [pc, #92]	; (800cec4 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x128>)
 800ce66:	2201      	movs	r2, #1
 800ce68:	701a      	strb	r2, [r3, #0]
		Run_Current_Breathe_State                            = Run_Inspiration_Cycle;
 800ce6a:	4b17      	ldr	r3, [pc, #92]	; (800cec8 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x12c>)
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	701a      	strb	r2, [r3, #0]
		vTaskDelay(PC_SIMV.INSPIRATION_TIME);
 800ce70:	4b0c      	ldr	r3, [pc, #48]	; (800cea4 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f00e f8e9 	bl	801b04c <vTaskDelay>
}
 800ce7a:	bf00      	nop
 800ce7c:	3704      	adds	r7, #4
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd90      	pop	{r4, r7, pc}
 800ce82:	bf00      	nop
 800ce84:	20012b71 	.word	0x20012b71
 800ce88:	20012828 	.word	0x20012828
 800ce8c:	200122a8 	.word	0x200122a8
 800ce90:	40020400 	.word	0x40020400
 800ce94:	200124f0 	.word	0x200124f0
 800ce98:	2001287c 	.word	0x2001287c
 800ce9c:	200125f8 	.word	0x200125f8
 800cea0:	20012c74 	.word	0x20012c74
 800cea4:	20012c2c 	.word	0x20012c2c
 800cea8:	2001263d 	.word	0x2001263d
 800ceac:	20012a3c 	.word	0x20012a3c
 800ceb0:	20012a37 	.word	0x20012a37
 800ceb4:	20012a34 	.word	0x20012a34
 800ceb8:	200124bc 	.word	0x200124bc
 800cebc:	20012b38 	.word	0x20012b38
 800cec0:	20012c70 	.word	0x20012c70
 800cec4:	2001269e 	.word	0x2001269e
 800cec8:	20012870 	.word	0x20012870

0800cecc <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset>:

static void PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset()
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	af00      	add	r7, sp, #0
		if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 800ced0:	4b24      	ldr	r3, [pc, #144]	; (800cf64 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x98>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d103      	bne.n	800cee0 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x14>
		{
			BREATH_STATE                                      = PATIENT_TRIGGER_EXPIRATION;
 800ced8:	4b23      	ldr	r3, [pc, #140]	; (800cf68 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x9c>)
 800ceda:	2203      	movs	r2, #3
 800cedc:	701a      	strb	r2, [r3, #0]
 800cede:	e002      	b.n	800cee6 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x1a>
		}
		else
		{
			BREATH_STATE                                       = EXPIRATION_CYCLE;
 800cee0:	4b21      	ldr	r3, [pc, #132]	; (800cf68 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x9c>)
 800cee2:	2201      	movs	r2, #1
 800cee4:	701a      	strb	r2, [r3, #0]
		}
		PEEP_Maintain_Parameter.CHECK_TRIGGER               = 1500;
 800cee6:	4b21      	ldr	r3, [pc, #132]	; (800cf6c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa0>)
 800cee8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ceec:	61da      	str	r2, [r3, #28]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 800ceee:	4b1f      	ldr	r3, [pc, #124]	; (800cf6c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa0>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	615a      	str	r2, [r3, #20]
		PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 800cef4:	4b1d      	ldr	r3, [pc, #116]	; (800cf6c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa0>)
 800cef6:	2200      	movs	r2, #0
 800cef8:	619a      	str	r2, [r3, #24]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 800cefa:	4b1c      	ldr	r3, [pc, #112]	; (800cf6c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa0>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 800cf00:	4b1a      	ldr	r3, [pc, #104]	; (800cf6c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa0>)
 800cf02:	2200      	movs	r2, #0
 800cf04:	60da      	str	r2, [r3, #12]
		Patient_Trigger                                     = NO_PATIENT_TRIGGER;
 800cf06:	4b17      	ldr	r3, [pc, #92]	; (800cf64 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x98>)
 800cf08:	2200      	movs	r2, #0
 800cf0a:	701a      	strb	r2, [r3, #0]
		Trigger_Time_Monitor();
 800cf0c:	f000 f90e 	bl	800d12c <Trigger_Time_Monitor>
		Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL    = TUNE_PEEP_BLOWER(&Pressure_Mode_blower_control.LAST_PEEP_BLOWER_DAC_VAL,
 800cf10:	4b17      	ldr	r3, [pc, #92]	; (800cf70 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa4>)
 800cf12:	785b      	ldrb	r3, [r3, #1]
 800cf14:	4619      	mov	r1, r3
 800cf16:	4817      	ldr	r0, [pc, #92]	; (800cf74 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa8>)
 800cf18:	f000 f838 	bl	800cf8c <TUNE_PEEP_BLOWER>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	461a      	mov	r2, r3
 800cf20:	4b15      	ldr	r3, [pc, #84]	; (800cf78 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xac>)
 800cf22:	821a      	strh	r2, [r3, #16]
				                                                               Common_Mode_Parameter._PEEP_Val );
		Pressure_Mode_blower_control.BLOWER_DAC_VAL         = Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL;
 800cf24:	4b14      	ldr	r3, [pc, #80]	; (800cf78 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xac>)
 800cf26:	8a1a      	ldrh	r2, [r3, #16]
 800cf28:	4b13      	ldr	r3, [pc, #76]	; (800cf78 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xac>)
 800cf2a:	801a      	strh	r2, [r3, #0]
		Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 800cf2c:	4b10      	ldr	r3, [pc, #64]	; (800cf70 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa4>)
 800cf2e:	78db      	ldrb	r3, [r3, #3]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff fabd 	bl	800c4b0 <Calculate_O2>
		Alert_Expiration_Time_Parameter();
 800cf36:	f7f4 fa17 	bl	8001368 <Alert_Expiration_Time_Parameter>
		TIME_Base_parameter._EXPIRATION_TIME                = PC_SIMV.EXPIRATION_TIME;
 800cf3a:	4b10      	ldr	r3, [pc, #64]	; (800cf7c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xb0>)
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	4b0f      	ldr	r3, [pc, #60]	; (800cf80 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xb4>)
 800cf42:	605a      	str	r2, [r3, #4]

		TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 800cf44:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xb4>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	60da      	str	r2, [r3, #12]
		Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 800cf4a:	4b0e      	ldr	r3, [pc, #56]	; (800cf84 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xb8>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	701a      	strb	r2, [r3, #0]
		Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 800cf50:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xbc>)
 800cf52:	2202      	movs	r2, #2
 800cf54:	701a      	strb	r2, [r3, #0]
		vTaskDelay(PC_SIMV.EXPIRATION_TIME);
 800cf56:	4b09      	ldr	r3, [pc, #36]	; (800cf7c <PC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xb0>)
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f00e f876 	bl	801b04c <vTaskDelay>
}
 800cf60:	bf00      	nop
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	2001263d 	.word	0x2001263d
 800cf68:	20012a3c 	.word	0x20012a3c
 800cf6c:	20012c74 	.word	0x20012c74
 800cf70:	200124f0 	.word	0x200124f0
 800cf74:	2001298a 	.word	0x2001298a
 800cf78:	20012978 	.word	0x20012978
 800cf7c:	20012c2c 	.word	0x20012c2c
 800cf80:	20012b38 	.word	0x20012b38
 800cf84:	2001269e 	.word	0x2001269e
 800cf88:	20012870 	.word	0x20012870

0800cf8c <TUNE_PEEP_BLOWER>:




uint16_t TUNE_PEEP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PEEP)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	70fb      	strb	r3, [r7, #3]
	if(PEEP_Maintain_Parameter.PEEP_AVG_VAL  > Set_PEEP)
 800cf98:	4b11      	ldr	r3, [pc, #68]	; (800cfe0 <TUNE_PEEP_BLOWER+0x54>)
 800cf9a:	7c1b      	ldrb	r3, [r3, #16]
 800cf9c:	78fa      	ldrb	r2, [r7, #3]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d206      	bcs.n	800cfb0 <TUNE_PEEP_BLOWER+0x24>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	881b      	ldrh	r3, [r3, #0]
 800cfa6:	3b0a      	subs	r3, #10
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	801a      	strh	r2, [r3, #0]
 800cfae:	e00f      	b.n	800cfd0 <TUNE_PEEP_BLOWER+0x44>
	}
	else if(PEEP_Maintain_Parameter.PEEP_AVG_VAL  < Set_PEEP)
 800cfb0:	4b0b      	ldr	r3, [pc, #44]	; (800cfe0 <TUNE_PEEP_BLOWER+0x54>)
 800cfb2:	7c1b      	ldrb	r3, [r3, #16]
 800cfb4:	78fa      	ldrb	r2, [r7, #3]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d906      	bls.n	800cfc8 <TUNE_PEEP_BLOWER+0x3c>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	881b      	ldrh	r3, [r3, #0]
 800cfbe:	330a      	adds	r3, #10
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	801a      	strh	r2, [r3, #0]
 800cfc6:	e003      	b.n	800cfd0 <TUNE_PEEP_BLOWER+0x44>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	881a      	ldrh	r2, [r3, #0]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	881b      	ldrh	r3, [r3, #0]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	20012c74 	.word	0x20012c74

0800cfe4 <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	af00      	add	r7, sp, #0
	if (( GRAPH_VALUES.pressure < (Pressure_Trigger_Offset - PC_SIMV.TRIG_LMT )))
 800cfe8:	4b0e      	ldr	r3, [pc, #56]	; (800d024 <CHECK_PRESSURE_TRIGGER+0x40>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	ee07 3a90 	vmov	s15, r3
 800cff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cff4:	4b0c      	ldr	r3, [pc, #48]	; (800d028 <CHECK_PRESSURE_TRIGGER+0x44>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	ee07 3a90 	vmov	s15, r3
 800cffc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d000:	4b0a      	ldr	r3, [pc, #40]	; (800d02c <CHECK_PRESSURE_TRIGGER+0x48>)
 800d002:	edd3 7a05 	vldr	s15, [r3, #20]
 800d006:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d00a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d012:	d400      	bmi.n	800d016 <CHECK_PRESSURE_TRIGGER+0x32>
	{
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 800d014:	e004      	b.n	800d020 <CHECK_PRESSURE_TRIGGER+0x3c>
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
 800d016:	4b06      	ldr	r3, [pc, #24]	; (800d030 <CHECK_PRESSURE_TRIGGER+0x4c>)
 800d018:	2201      	movs	r2, #1
 800d01a:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 800d01c:	f7ff fe96 	bl	800cd4c <Switch_TASK_Inspiration_CYCLE>
}
 800d020:	bf00      	nop
 800d022:	bd80      	pop	{r7, pc}
 800d024:	200125f8 	.word	0x200125f8
 800d028:	2001296c 	.word	0x2001296c
 800d02c:	20012c2c 	.word	0x20012c2c
 800d030:	2001263d 	.word	0x2001263d

0800d034 <CHECK_FLOW_TRIGGER>:


static void CHECK_FLOW_TRIGGER()
{
 800d034:	b580      	push	{r7, lr}
 800d036:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+PC_SIMV.TRIG_LMT )))
 800d038:	4b10      	ldr	r3, [pc, #64]	; (800d07c <CHECK_FLOW_TRIGGER+0x48>)
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	ee07 3a90 	vmov	s15, r3
 800d040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d044:	4b0e      	ldr	r3, [pc, #56]	; (800d080 <CHECK_FLOW_TRIGGER+0x4c>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	ee07 3a90 	vmov	s15, r3
 800d04c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d050:	4b0c      	ldr	r3, [pc, #48]	; (800d084 <CHECK_FLOW_TRIGGER+0x50>)
 800d052:	edd3 7a05 	vldr	s15, [r3, #20]
 800d056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d05a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d062:	dc00      	bgt.n	800d066 <CHECK_FLOW_TRIGGER+0x32>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();

	}
}
 800d064:	e008      	b.n	800d078 <CHECK_FLOW_TRIGGER+0x44>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
 800d066:	4b05      	ldr	r3, [pc, #20]	; (800d07c <CHECK_FLOW_TRIGGER+0x48>)
 800d068:	781a      	ldrb	r2, [r3, #0]
 800d06a:	4b07      	ldr	r3, [pc, #28]	; (800d088 <CHECK_FLOW_TRIGGER+0x54>)
 800d06c:	701a      	strb	r2, [r3, #0]
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
 800d06e:	4b07      	ldr	r3, [pc, #28]	; (800d08c <CHECK_FLOW_TRIGGER+0x58>)
 800d070:	2201      	movs	r2, #1
 800d072:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 800d074:	f7ff fe6a 	bl	800cd4c <Switch_TASK_Inspiration_CYCLE>
}
 800d078:	bf00      	nop
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	200129aa 	.word	0x200129aa
 800d080:	20012900 	.word	0x20012900
 800d084:	20012c2c 	.word	0x20012c2c
 800d088:	20012b70 	.word	0x20012b70
 800d08c:	2001263d 	.word	0x2001263d

0800d090 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 800d090:	b480      	push	{r7}
 800d092:	af00      	add	r7, sp, #0
	if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 800d094:	4b18      	ldr	r3, [pc, #96]	; (800d0f8 <CHECK_TRIGGER_OFFSET+0x68>)
 800d096:	edd3 7a01 	vldr	s15, [r3, #4]
 800d09a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0a2:	d013      	beq.n	800d0cc <CHECK_TRIGGER_OFFSET+0x3c>
 800d0a4:	4b14      	ldr	r3, [pc, #80]	; (800d0f8 <CHECK_TRIGGER_OFFSET+0x68>)
 800d0a6:	edd3 7a01 	vldr	s15, [r3, #4]
 800d0aa:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 800d0ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b6:	da00      	bge.n	800d0ba <CHECK_TRIGGER_OFFSET+0x2a>
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
		FLOW_TRIGGER             =  0;

	}
}
 800d0b8:	e019      	b.n	800d0ee <CHECK_TRIGGER_OFFSET+0x5e>
	if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 800d0ba:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <CHECK_TRIGGER_OFFSET+0x68>)
 800d0bc:	edd3 7a01 	vldr	s15, [r3, #4]
 800d0c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c8:	d400      	bmi.n	800d0cc <CHECK_TRIGGER_OFFSET+0x3c>
}
 800d0ca:	e010      	b.n	800d0ee <CHECK_TRIGGER_OFFSET+0x5e>
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <CHECK_TRIGGER_OFFSET+0x68>)
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	4b0a      	ldr	r3, [pc, #40]	; (800d0fc <CHECK_TRIGGER_OFFSET+0x6c>)
 800d0d4:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 800d0d6:	4b08      	ldr	r3, [pc, #32]	; (800d0f8 <CHECK_TRIGGER_OFFSET+0x68>)
 800d0d8:	edd3 7a01 	vldr	s15, [r3, #4]
 800d0dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0e0:	ee17 2a90 	vmov	r2, s15
 800d0e4:	4b06      	ldr	r3, [pc, #24]	; (800d100 <CHECK_TRIGGER_OFFSET+0x70>)
 800d0e6:	601a      	str	r2, [r3, #0]
		FLOW_TRIGGER             =  0;
 800d0e8:	4b06      	ldr	r3, [pc, #24]	; (800d104 <CHECK_TRIGGER_OFFSET+0x74>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	701a      	strb	r2, [r3, #0]
}
 800d0ee:	bf00      	nop
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr
 800d0f8:	200125f8 	.word	0x200125f8
 800d0fc:	2001296c 	.word	0x2001296c
 800d100:	20012900 	.word	0x20012900
 800d104:	200129aa 	.word	0x200129aa

0800d108 <STOP_BLOWER_IF_FLOW_SENSE>:


static void STOP_BLOWER_IF_FLOW_SENSE()
{
 800d108:	b480      	push	{r7}
 800d10a:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 800d10c:	4b05      	ldr	r3, [pc, #20]	; (800d124 <STOP_BLOWER_IF_FLOW_SENSE+0x1c>)
 800d10e:	2200      	movs	r2, #0
 800d110:	609a      	str	r2, [r3, #8]
	PCsimv.Blower_Wait_Time_Milli_Second = 500;
 800d112:	4b05      	ldr	r3, [pc, #20]	; (800d128 <STOP_BLOWER_IF_FLOW_SENSE+0x20>)
 800d114:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800d118:	601a      	str	r2, [r3, #0]
}
 800d11a:	bf00      	nop
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	40007400 	.word	0x40007400
 800d128:	200124e4 	.word	0x200124e4

0800d12c <Trigger_Time_Monitor>:
}



static void Trigger_Time_Monitor()
{
 800d12c:	b480      	push	{r7}
 800d12e:	af00      	add	r7, sp, #0
	PC_SIMV.CALC_TRIG_VAL 	                 =  (PC_SIMV.EXPIRATION_TIME   - PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time );
 800d130:	4b11      	ldr	r3, [pc, #68]	; (800d178 <Trigger_Time_Monitor+0x4c>)
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	b29a      	uxth	r2, r3
 800d136:	4b11      	ldr	r3, [pc, #68]	; (800d17c <Trigger_Time_Monitor+0x50>)
 800d138:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	1ad3      	subs	r3, r2, r3
 800d140:	b29a      	uxth	r2, r3
 800d142:	4b0d      	ldr	r3, [pc, #52]	; (800d178 <Trigger_Time_Monitor+0x4c>)
 800d144:	835a      	strh	r2, [r3, #26]
	if(PC_SIMV.CALC_TRIG_VAL <0)
	{
		PC_SIMV.CALC_TRIG_VAL = (PC_SIMV.CALC_TRIG_VAL * (-1));
	}
	PC_SIMV.TOLERANCE_EWAVE =  PC_SIMV.TRIG_TIME;
 800d146:	4b0c      	ldr	r3, [pc, #48]	; (800d178 <Trigger_Time_Monitor+0x4c>)
 800d148:	8b1a      	ldrh	r2, [r3, #24]
 800d14a:	4b0b      	ldr	r3, [pc, #44]	; (800d178 <Trigger_Time_Monitor+0x4c>)
 800d14c:	839a      	strh	r2, [r3, #28]
	if(PC_SIMV.CALC_TRIG_VAL < PC_SIMV.TRIG_TIME )
 800d14e:	4b0a      	ldr	r3, [pc, #40]	; (800d178 <Trigger_Time_Monitor+0x4c>)
 800d150:	8b5a      	ldrh	r2, [r3, #26]
 800d152:	4b09      	ldr	r3, [pc, #36]	; (800d178 <Trigger_Time_Monitor+0x4c>)
 800d154:	8b1b      	ldrh	r3, [r3, #24]
 800d156:	429a      	cmp	r2, r3
 800d158:	d205      	bcs.n	800d166 <Trigger_Time_Monitor+0x3a>
	{
		PC_SIMV.TOLERANCE_EWAVE =  (PC_SIMV.TRIG_TIME - 200) ;
 800d15a:	4b07      	ldr	r3, [pc, #28]	; (800d178 <Trigger_Time_Monitor+0x4c>)
 800d15c:	8b1b      	ldrh	r3, [r3, #24]
 800d15e:	3bc8      	subs	r3, #200	; 0xc8
 800d160:	b29a      	uxth	r2, r3
 800d162:	4b05      	ldr	r3, [pc, #20]	; (800d178 <Trigger_Time_Monitor+0x4c>)
 800d164:	839a      	strh	r2, [r3, #28]
	}

	PC_SIMV.TRIG_WINDOW		                 = PC_SIMV.TOLERANCE_EWAVE;
 800d166:	4b04      	ldr	r3, [pc, #16]	; (800d178 <Trigger_Time_Monitor+0x4c>)
 800d168:	8b9a      	ldrh	r2, [r3, #28]
 800d16a:	4b03      	ldr	r3, [pc, #12]	; (800d178 <Trigger_Time_Monitor+0x4c>)
 800d16c:	83da      	strh	r2, [r3, #30]
}
 800d16e:	bf00      	nop
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	20012c2c 	.word	0x20012c2c
 800d17c:	20012c74 	.word	0x20012c74

0800d180 <Pc_Simv_Mode_Packet_Data>:
 * This task is to extract the Simv mode variable from NRF Bluetooth.
 * @param RECEIVE_GRAPH_PACKET structure pointer.
 */

void Pc_Simv_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
	uint32_t One_Breathe_time;
	PC_SIMV.PIP_Val                          = Receive_Graph_Packet->PIP_PS_Phigh;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	791a      	ldrb	r2, [r3, #4]
 800d18c:	4b65      	ldr	r3, [pc, #404]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d18e:	701a      	strb	r2, [r3, #0]
	PC_SIMV.PEEP_Val                         = Receive_Graph_Packet->PEEP_CPAP_Plow;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	795a      	ldrb	r2, [r3, #5]
 800d194:	4b63      	ldr	r3, [pc, #396]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d196:	705a      	strb	r2, [r3, #1]
	PC_SIMV.FIO2_Val                         =  Receive_Graph_Packet->FiO2;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	7a1a      	ldrb	r2, [r3, #8]
 800d19c:	4b61      	ldr	r3, [pc, #388]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d19e:	70da      	strb	r2, [r3, #3]


	PC_SIMV.RESPIRATORY_RATE_Val             = Receive_Graph_Packet->RR;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	7a5a      	ldrb	r2, [r3, #9]
 800d1a4:	4b5f      	ldr	r3, [pc, #380]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d1a6:	709a      	strb	r2, [r3, #2]
	One_Breathe_time                         = (One_Minite_In_MS / PC_SIMV.RESPIRATORY_RATE_Val);
 800d1a8:	4b5e      	ldr	r3, [pc, #376]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d1aa:	789b      	ldrb	r3, [r3, #2]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d1b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1b6:	60fb      	str	r3, [r7, #12]
	PC_SIMV.INSPIRATION_TIME                 = ( ( Receive_Graph_Packet->T_high) * 100 );
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	7a9b      	ldrb	r3, [r3, #10]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	2364      	movs	r3, #100	; 0x64
 800d1c0:	fb03 f302 	mul.w	r3, r3, r2
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	4b57      	ldr	r3, [pc, #348]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d1c8:	609a      	str	r2, [r3, #8]
	PC_SIMV.EXPIRATION_TIME                  = (One_Breathe_time - PC_SIMV.INSPIRATION_TIME);
 800d1ca:	4b56      	ldr	r3, [pc, #344]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	4a54      	ldr	r2, [pc, #336]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d1d4:	60d3      	str	r3, [r2, #12]


	PC_SIMV.Rise_Time                        = Receive_Graph_Packet->Rise_Time;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	7b1a      	ldrb	r2, [r3, #12]
 800d1da:	4b52      	ldr	r3, [pc, #328]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d1dc:	749a      	strb	r2, [r3, #18]
	PC_SIMV.RISE_TIME_MS_Val                 = (PC_SIMV.Rise_Time *100);
 800d1de:	4b51      	ldr	r3, [pc, #324]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d1e0:	7c9b      	ldrb	r3, [r3, #18]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	2364      	movs	r3, #100	; 0x64
 800d1e6:	fb03 f302 	mul.w	r3, r3, r2
 800d1ea:	ee07 3a90 	vmov	s15, r3
 800d1ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d1f2:	4b4c      	ldr	r3, [pc, #304]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d1f4:	edc3 7a01 	vstr	s15, [r3, #4]



	PC_SIMV.Assist_Control    	             = (0x80 & (Receive_Graph_Packet->Control_Byte))>>7;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	78db      	ldrb	r3, [r3, #3]
 800d1fc:	09db      	lsrs	r3, r3, #7
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	4b48      	ldr	r3, [pc, #288]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d202:	f883 2020 	strb.w	r2, [r3, #32]


	PC_SIMV.TRIG_TYPE     	                 = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	78db      	ldrb	r3, [r3, #3]
 800d20a:	099b      	lsrs	r3, r3, #6
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	b2da      	uxtb	r2, r3
 800d214:	4b43      	ldr	r3, [pc, #268]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d216:	74da      	strb	r2, [r3, #19]
	PC_SIMV.TRIG_LMT     	                 = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	7c1b      	ldrb	r3, [r3, #16]
 800d21c:	4a42      	ldr	r2, [pc, #264]	; (800d328 <Pc_Simv_Mode_Packet_Data+0x1a8>)
 800d21e:	fba2 2303 	umull	r2, r3, r2, r3
 800d222:	08db      	lsrs	r3, r3, #3
 800d224:	b2db      	uxtb	r3, r3
 800d226:	ee07 3a90 	vmov	s15, r3
 800d22a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d22e:	4b3d      	ldr	r3, [pc, #244]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d230:	edc3 7a05 	vstr	s15, [r3, #20]
	PC_SIMV.TRIG_TIME     	                 = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	7bdb      	ldrb	r3, [r3, #15]
 800d238:	b29b      	uxth	r3, r3
 800d23a:	461a      	mov	r2, r3
 800d23c:	0092      	lsls	r2, r2, #2
 800d23e:	4413      	add	r3, r2
 800d240:	461a      	mov	r2, r3
 800d242:	0091      	lsls	r1, r2, #2
 800d244:	461a      	mov	r2, r3
 800d246:	460b      	mov	r3, r1
 800d248:	4413      	add	r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	4b35      	ldr	r3, [pc, #212]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d250:	831a      	strh	r2, [r3, #24]



	PC_SIMV.CALC_TRIG_VAL 	                 =  (PC_SIMV.EXPIRATION_TIME   - Expiratory_Valve_Open_Time );
 800d252:	4b34      	ldr	r3, [pc, #208]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	b29a      	uxth	r2, r3
 800d258:	4b34      	ldr	r3, [pc, #208]	; (800d32c <Pc_Simv_Mode_Packet_Data+0x1ac>)
 800d25a:	881b      	ldrh	r3, [r3, #0]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	b29a      	uxth	r2, r3
 800d260:	4b30      	ldr	r3, [pc, #192]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d262:	835a      	strh	r2, [r3, #26]
	if(PC_SIMV.CALC_TRIG_VAL <0)
	{
		PC_SIMV.CALC_TRIG_VAL = (PC_SIMV.CALC_TRIG_VAL * (-1));
	}

	PC_SIMV.TOLERANCE_EWAVE =  PC_SIMV.TRIG_TIME;
 800d264:	4b2f      	ldr	r3, [pc, #188]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d266:	8b1a      	ldrh	r2, [r3, #24]
 800d268:	4b2e      	ldr	r3, [pc, #184]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d26a:	839a      	strh	r2, [r3, #28]
	if(PC_SIMV.CALC_TRIG_VAL < PC_SIMV.TRIG_TIME )
 800d26c:	4b2d      	ldr	r3, [pc, #180]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d26e:	8b5a      	ldrh	r2, [r3, #26]
 800d270:	4b2c      	ldr	r3, [pc, #176]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d272:	8b1b      	ldrh	r3, [r3, #24]
 800d274:	429a      	cmp	r2, r3
 800d276:	d205      	bcs.n	800d284 <Pc_Simv_Mode_Packet_Data+0x104>
	{
		PC_SIMV.TOLERANCE_EWAVE =  (PC_SIMV.TRIG_TIME - 200) ;
 800d278:	4b2a      	ldr	r3, [pc, #168]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d27a:	8b1b      	ldrh	r3, [r3, #24]
 800d27c:	3bc8      	subs	r3, #200	; 0xc8
 800d27e:	b29a      	uxth	r2, r3
 800d280:	4b28      	ldr	r3, [pc, #160]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d282:	839a      	strh	r2, [r3, #28]
	}
	PC_SIMV.TRIG_WINDOW		                 = PC_SIMV.TOLERANCE_EWAVE;
 800d284:	4b27      	ldr	r3, [pc, #156]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d286:	8b9a      	ldrh	r2, [r3, #28]
 800d288:	4b26      	ldr	r3, [pc, #152]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d28a:	83da      	strh	r2, [r3, #30]

	Alert_Check_Time              = ((float)PC_SIMV.INSPIRATION_TIME/3);
 800d28c:	4b25      	ldr	r3, [pc, #148]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	ee07 3a90 	vmov	s15, r3
 800d294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d298:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800d29c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d2a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2a4:	ee17 2a90 	vmov	r2, s15
 800d2a8:	4b21      	ldr	r3, [pc, #132]	; (800d330 <Pc_Simv_Mode_Packet_Data+0x1b0>)
 800d2aa:	601a      	str	r2, [r3, #0]

	if(PC_SIMV.Assist_Control == 1)
 800d2ac:	4b1d      	ldr	r3, [pc, #116]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d2ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d103      	bne.n	800d2be <Pc_Simv_Mode_Packet_Data+0x13e>
		Assist_Control=ASSIST_ON;
 800d2b6:	4b1f      	ldr	r3, [pc, #124]	; (800d334 <Pc_Simv_Mode_Packet_Data+0x1b4>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	701a      	strb	r2, [r3, #0]
 800d2bc:	e007      	b.n	800d2ce <Pc_Simv_Mode_Packet_Data+0x14e>
	else if(PC_SIMV.Assist_Control == 0)
 800d2be:	4b19      	ldr	r3, [pc, #100]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d2c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d102      	bne.n	800d2ce <Pc_Simv_Mode_Packet_Data+0x14e>
		Assist_Control=ASSIST_OFF;
 800d2c8:	4b1a      	ldr	r3, [pc, #104]	; (800d334 <Pc_Simv_Mode_Packet_Data+0x1b4>)
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	701a      	strb	r2, [r3, #0]
	if(PC_SIMV.TRIG_TYPE == 0)
 800d2ce:	4b15      	ldr	r3, [pc, #84]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d2d0:	7cdb      	ldrb	r3, [r3, #19]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d103      	bne.n	800d2de <Pc_Simv_Mode_Packet_Data+0x15e>
		Trigger_Type = Pressure_Trigger;
 800d2d6:	4b18      	ldr	r3, [pc, #96]	; (800d338 <Pc_Simv_Mode_Packet_Data+0x1b8>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	701a      	strb	r2, [r3, #0]
 800d2dc:	e006      	b.n	800d2ec <Pc_Simv_Mode_Packet_Data+0x16c>
	else if(PC_SIMV.TRIG_TYPE == 1)
 800d2de:	4b11      	ldr	r3, [pc, #68]	; (800d324 <Pc_Simv_Mode_Packet_Data+0x1a4>)
 800d2e0:	7cdb      	ldrb	r3, [r3, #19]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d102      	bne.n	800d2ec <Pc_Simv_Mode_Packet_Data+0x16c>
		Trigger_Type = Flow_Trigger;
 800d2e6:	4b14      	ldr	r3, [pc, #80]	; (800d338 <Pc_Simv_Mode_Packet_Data+0x1b8>)
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	701a      	strb	r2, [r3, #0]

	Vent_Type                     = ET_TUBE_MODE;
 800d2ec:	4b13      	ldr	r3, [pc, #76]	; (800d33c <Pc_Simv_Mode_Packet_Data+0x1bc>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	701a      	strb	r2, [r3, #0]
	OOM202.offset_minimum         = ( 0x7F & (Receive_Graph_Packet->Vent_Type_Min_O2));
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	7c5b      	ldrb	r3, [r3, #17]
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	4b10      	ldr	r3, [pc, #64]	; (800d340 <Pc_Simv_Mode_Packet_Data+0x1c0>)
 800d300:	805a      	strh	r2, [r3, #2]
	OOM202.offset_maximum         = Receive_Graph_Packet->Max_O2;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	7c9b      	ldrb	r3, [r3, #18]
 800d306:	b29a      	uxth	r2, r3
 800d308:	4b0d      	ldr	r3, [pc, #52]	; (800d340 <Pc_Simv_Mode_Packet_Data+0x1c0>)
 800d30a:	809a      	strh	r2, [r3, #4]

	Mode_Initial_Flag_Set                        = OPEN;
 800d30c:	4b0d      	ldr	r3, [pc, #52]	; (800d344 <Pc_Simv_Mode_Packet_Data+0x1c4>)
 800d30e:	2201      	movs	r2, #1
 800d310:	701a      	strb	r2, [r3, #0]
	vTaskResume(Mode_initial_Flag_Set_Handler);
 800d312:	4b0d      	ldr	r3, [pc, #52]	; (800d348 <Pc_Simv_Mode_Packet_Data+0x1c8>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4618      	mov	r0, r3
 800d318:	f00d ff90 	bl	801b23c <vTaskResume>
}
 800d31c:	bf00      	nop
 800d31e:	3710      	adds	r7, #16
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	20012c2c 	.word	0x20012c2c
 800d328:	cccccccd 	.word	0xcccccccd
 800d32c:	20000012 	.word	0x20000012
 800d330:	2001246c 	.word	0x2001246c
 800d334:	200122cc 	.word	0x200122cc
 800d338:	20012244 	.word	0x20012244
 800d33c:	200129f4 	.word	0x200129f4
 800d340:	20012224 	.word	0x20012224
 800d344:	20012cb1 	.word	0x20012cb1
 800d348:	200129ac 	.word	0x200129ac

0800d34c <Pc_Simv_Assist_ON_Task>:
/**
 * @brief Pc_Simv_Task.
 * This Task calls  two function based on inspiration and expiration time.
 * */
void Pc_Simv_Assist_ON_Task(void *argument)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 800d354:	4b14      	ldr	r3, [pc, #80]	; (800d3a8 <Pc_Simv_Assist_ON_Task+0x5c>)
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d00b      	beq.n	800d374 <Pc_Simv_Assist_ON_Task+0x28>
 800d35c:	2b02      	cmp	r3, #2
 800d35e:	dc1c      	bgt.n	800d39a <Pc_Simv_Assist_ON_Task+0x4e>
 800d360:	2b00      	cmp	r3, #0
 800d362:	d01c      	beq.n	800d39e <Pc_Simv_Assist_ON_Task+0x52>
 800d364:	2b01      	cmp	r3, #1
 800d366:	d118      	bne.n	800d39a <Pc_Simv_Assist_ON_Task+0x4e>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 800d368:	4b10      	ldr	r3, [pc, #64]	; (800d3ac <Pc_Simv_Assist_ON_Task+0x60>)
 800d36a:	881b      	ldrh	r3, [r3, #0]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f000 f849 	bl	800d404 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON>
			break;
 800d372:	e015      	b.n	800d3a0 <Pc_Simv_Assist_ON_Task+0x54>
			case Run_Expiration_Cycle:
				Pressure_Mode_blower_control.BLOWER_DAC_VAL=0;
 800d374:	4b0d      	ldr	r3, [pc, #52]	; (800d3ac <Pc_Simv_Assist_ON_Task+0x60>)
 800d376:	2200      	movs	r2, #0
 800d378:	801a      	strh	r2, [r3, #0]
				Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800d37a:	4b0c      	ldr	r3, [pc, #48]	; (800d3ac <Pc_Simv_Assist_ON_Task+0x60>)
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	4a0c      	ldr	r2, [pc, #48]	; (800d3b0 <Pc_Simv_Assist_ON_Task+0x64>)
 800d380:	edd2 7a00 	vldr	s15, [r2]
											   PEEP_Maintain_Parameter.PEEP_Temp,
											   PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800d384:	4a0a      	ldr	r2, [pc, #40]	; (800d3b0 <Pc_Simv_Assist_ON_Task+0x64>)
 800d386:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800d38a:	b292      	uxth	r2, r2
 800d38c:	4611      	mov	r1, r2
 800d38e:	eeb0 0a67 	vmov.f32	s0, s15
 800d392:	4618      	mov	r0, r3
 800d394:	f000 f846 	bl	800d424 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON>
			break;
 800d398:	e002      	b.n	800d3a0 <Pc_Simv_Assist_ON_Task+0x54>
			case No_Run_State:
			break;
			default:
			break;
 800d39a:	bf00      	nop
 800d39c:	e000      	b.n	800d3a0 <Pc_Simv_Assist_ON_Task+0x54>
			break;
 800d39e:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 800d3a0:	2002      	movs	r0, #2
 800d3a2:	f00d fe53 	bl	801b04c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 800d3a6:	e7d5      	b.n	800d354 <Pc_Simv_Assist_ON_Task+0x8>
 800d3a8:	20012870 	.word	0x20012870
 800d3ac:	20012978 	.word	0x20012978
 800d3b0:	20012c74 	.word	0x20012c74

0800d3b4 <PC_SIMV_Inspiration_Time_Variables_Reset>:
/**
 * @brief PC_SIMV_Expiration_Time_Variables_Reset.
 * This function decides which function needs to be called based on assist control.
 * */
void PC_SIMV_Inspiration_Time_Variables_Reset()
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	af00      	add	r7, sp, #0
	if(Assist_Control == ASSIST_ON)
 800d3b8:	4b07      	ldr	r3, [pc, #28]	; (800d3d8 <PC_SIMV_Inspiration_Time_Variables_Reset+0x24>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d102      	bne.n	800d3c6 <PC_SIMV_Inspiration_Time_Variables_Reset+0x12>
	{
		PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
 800d3c0:	f000 f8e6 	bl	800d590 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>
	}
	else if(Assist_Control == ASSIST_OFF)
	{
		PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset();
	}
}
 800d3c4:	e005      	b.n	800d3d2 <PC_SIMV_Inspiration_Time_Variables_Reset+0x1e>
	else if(Assist_Control == ASSIST_OFF)
 800d3c6:	4b04      	ldr	r3, [pc, #16]	; (800d3d8 <PC_SIMV_Inspiration_Time_Variables_Reset+0x24>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d101      	bne.n	800d3d2 <PC_SIMV_Inspiration_Time_Variables_Reset+0x1e>
		PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset();
 800d3ce:	f7ff fc8d 	bl	800ccec <PC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset>
}
 800d3d2:	bf00      	nop
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	200122cc 	.word	0x200122cc

0800d3dc <PC_SIMV_Expiration_Time_Variables_Reset>:
/**
 * @brief PC_SIMV_Expiration_Time_Variables_Reset.
 * This function decides which function needs to be called based on assist control.
 * */
void PC_SIMV_Expiration_Time_Variables_Reset()
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	af00      	add	r7, sp, #0
	if(Assist_Control == ASSIST_ON)
 800d3e0:	4b07      	ldr	r3, [pc, #28]	; (800d400 <PC_SIMV_Expiration_Time_Variables_Reset+0x24>)
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d102      	bne.n	800d3ee <PC_SIMV_Expiration_Time_Variables_Reset+0x12>
	{
		PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
 800d3e8:	f000 f9b0 	bl	800d74c <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>
	}
	else if(Assist_Control == ASSIST_OFF)
	{
		PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset();
	}
}
 800d3ec:	e005      	b.n	800d3fa <PC_SIMV_Expiration_Time_Variables_Reset+0x1e>
	else if(Assist_Control == ASSIST_OFF)
 800d3ee:	4b04      	ldr	r3, [pc, #16]	; (800d400 <PC_SIMV_Expiration_Time_Variables_Reset+0x24>)
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d101      	bne.n	800d3fa <PC_SIMV_Expiration_Time_Variables_Reset+0x1e>
		PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset();
 800d3f6:	f7ff fc95 	bl	800cd24 <PC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset>
}
 800d3fa:	bf00      	nop
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	200122cc 	.word	0x200122cc

0800d404 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON>:
 * @brief Inspiration_Time_Blower_Control_PC_SIMV.
 * This function uploads a DAC value to the DAC1 peripheral to control a blower every 2 milliseconds during inspiration time.
 * @param Blower_Signal as Pressure_Mode_blower_control.BLOWER_DAC_VAL.
 * */
static void Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON(uint16_t Blower_Signal)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	4603      	mov	r3, r0
 800d40c:	80fb      	strh	r3, [r7, #6]
	Blower_Signal(Blower_Signal);
 800d40e:	4a04      	ldr	r2, [pc, #16]	; (800d420 <Inspiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x1c>)
 800d410:	88fb      	ldrh	r3, [r7, #6]
 800d412:	6093      	str	r3, [r2, #8]
}
 800d414:	bf00      	nop
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr
 800d420:	40007400 	.word	0x40007400

0800d424 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON>:
 * @param  Blower_Signal as Pressure_Mode_blower_control.BLOWER_DAC_VAL.
 * @param  PEEP to lock the expiratory valve in peep area.
 * @param  Expiratory_Valve_Open_Time to control the expiratory valve lock delay.
 * */
static void Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4603      	mov	r3, r0
 800d42c:	ed87 0a00 	vstr	s0, [r7]
 800d430:	460a      	mov	r2, r1
 800d432:	80fb      	strh	r3, [r7, #6]
 800d434:	4613      	mov	r3, r2
 800d436:	80bb      	strh	r3, [r7, #4]
	Blower_Signal( Blower_Signal);
 800d438:	4a27      	ldr	r2, [pc, #156]	; (800d4d8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb4>)
 800d43a:	88fb      	ldrh	r3, [r7, #6]
 800d43c:	6093      	str	r3, [r2, #8]
		if(Peep_Status==PEEP_ACHEIVED)
 800d43e:	4b27      	ldr	r3, [pc, #156]	; (800d4dc <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb8>)
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	2b01      	cmp	r3, #1
 800d444:	d113      	bne.n	800d46e <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x4a>
		{
				if(GRAPH_VALUES.pressure < PEEP)
 800d446:	4b26      	ldr	r3, [pc, #152]	; (800d4e0 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xbc>)
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	ee07 3a90 	vmov	s15, r3
 800d44e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d452:	ed97 7a00 	vldr	s14, [r7]
 800d456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d45e:	dd03      	ble.n	800d468 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x44>
				{
					Blower_Signal( Blower_Signal);
 800d460:	4a1d      	ldr	r2, [pc, #116]	; (800d4d8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb4>)
 800d462:	88fb      	ldrh	r3, [r7, #6]
 800d464:	6093      	str	r3, [r2, #8]
 800d466:	e002      	b.n	800d46e <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x4a>
				}
				else
				{
					Blower_Signal( Blower_Signal);
 800d468:	4a1b      	ldr	r2, [pc, #108]	; (800d4d8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb4>)
 800d46a:	88fb      	ldrh	r3, [r7, #6]
 800d46c:	6093      	str	r3, [r2, #8]
				}
		 }
		if(GRAPH_VALUES.pressure<= PEEP)
 800d46e:	4b1c      	ldr	r3, [pc, #112]	; (800d4e0 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xbc>)
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	ee07 3a90 	vmov	s15, r3
 800d476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d47a:	ed97 7a00 	vldr	s14, [r7]
 800d47e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d486:	db14      	blt.n	800d4b2 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x8e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 800d488:	4b16      	ldr	r3, [pc, #88]	; (800d4e4 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc0>)
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d106      	bne.n	800d49e <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0x7a>
			{
				Expiratory_Valve_Lock_Delay=CLOSED;
 800d490:	4b14      	ldr	r3, [pc, #80]	; (800d4e4 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc0>)
 800d492:	2201      	movs	r2, #1
 800d494:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Expiratory_Valve_Open_Time);
 800d496:	88bb      	ldrh	r3, [r7, #4]
 800d498:	4618      	mov	r0, r3
 800d49a:	f00d fdd7 	bl	801b04c <vTaskDelay>
			}
			Peep_Status=PEEP_ACHEIVED;
 800d49e:	4b0f      	ldr	r3, [pc, #60]	; (800d4dc <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb8>)
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 800d4a4:	4b10      	ldr	r3, [pc, #64]	; (800d4e8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc4>)
 800d4a6:	695b      	ldr	r3, [r3, #20]
 800d4a8:	4a0f      	ldr	r2, [pc, #60]	; (800d4e8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc4>)
 800d4aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d4ae:	6153      	str	r3, [r2, #20]
 800d4b0:	e009      	b.n	800d4c6 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xa2>
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 800d4b2:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xb8>)
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d105      	bne.n	800d4c6 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xa2>
		{
			ExpValve_OPEN();
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc4>)
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	4a0a      	ldr	r2, [pc, #40]	; (800d4e8 <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc4>)
 800d4c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4c4:	6153      	str	r3, [r2, #20]
		}

		CHECK_TRIGGER_ASSIST_ON(PC_SIMV.TRIG_WINDOW);
 800d4c6:	4b09      	ldr	r3, [pc, #36]	; (800d4ec <Expiration_Time_Blower_Control_PC_SIMV_ASSIST_ON+0xc8>)
 800d4c8:	8bdb      	ldrh	r3, [r3, #30]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f000 f810 	bl	800d4f0 <CHECK_TRIGGER_ASSIST_ON>
}
 800d4d0:	bf00      	nop
 800d4d2:	3708      	adds	r7, #8
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	40007400 	.word	0x40007400
 800d4dc:	20012a37 	.word	0x20012a37
 800d4e0:	200125f8 	.word	0x200125f8
 800d4e4:	20012a34 	.word	0x20012a34
 800d4e8:	40020400 	.word	0x40020400
 800d4ec:	20012c2c 	.word	0x20012c2c

0800d4f0 <CHECK_TRIGGER_ASSIST_ON>:
/**
 * @brief CHECK_TRIGGER_ASSIST_ON.
 * This function senses the type of patient trigger that occurred during breath
 * */
static void CHECK_TRIGGER_ASSIST_ON(uint16_t Trigger_Check_Time)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 800d4fa:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <CHECK_TRIGGER_ASSIST_ON+0x48>)
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	88fb      	ldrh	r3, [r7, #6]
 800d500:	429a      	cmp	r2, r3
 800d502:	dc11      	bgt.n	800d528 <CHECK_TRIGGER_ASSIST_ON+0x38>
 800d504:	4b0c      	ldr	r3, [pc, #48]	; (800d538 <CHECK_TRIGGER_ASSIST_ON+0x48>)
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d00d      	beq.n	800d528 <CHECK_TRIGGER_ASSIST_ON+0x38>
	{
		if (Trigger_Type == Pressure_Trigger)
 800d50c:	4b0b      	ldr	r3, [pc, #44]	; (800d53c <CHECK_TRIGGER_ASSIST_ON+0x4c>)
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d102      	bne.n	800d51a <CHECK_TRIGGER_ASSIST_ON+0x2a>
		{
			CHECK_PRESSURE_TRIGGER();
 800d514:	f000 f964 	bl	800d7e0 <CHECK_PRESSURE_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 800d518:	e009      	b.n	800d52e <CHECK_TRIGGER_ASSIST_ON+0x3e>
		}
		else if (Trigger_Type == Flow_Trigger)
 800d51a:	4b08      	ldr	r3, [pc, #32]	; (800d53c <CHECK_TRIGGER_ASSIST_ON+0x4c>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d105      	bne.n	800d52e <CHECK_TRIGGER_ASSIST_ON+0x3e>
		{
			CHECK_FLOW_TRIGGER();
 800d522:	f000 f985 	bl	800d830 <CHECK_FLOW_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 800d526:	e002      	b.n	800d52e <CHECK_TRIGGER_ASSIST_ON+0x3e>
		}
	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 800d528:	f000 f9b0 	bl	800d88c <CHECK_TRIGGER_OFFSET>
	}
}
 800d52c:	e000      	b.n	800d530 <CHECK_TRIGGER_ASSIST_ON+0x40>
		if (Trigger_Type == Pressure_Trigger)
 800d52e:	bf00      	nop
}
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	20012b38 	.word	0x20012b38
 800d53c:	20012244 	.word	0x20012244

0800d540 <Switch_TASK_Inspiration_CYCLE>:



static void Switch_TASK_Inspiration_CYCLE()
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af02      	add	r7, sp, #8
	vTaskDelete(One_Time_Handler);
 800d546:	4b0d      	ldr	r3, [pc, #52]	; (800d57c <Switch_TASK_Inspiration_CYCLE+0x3c>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4618      	mov	r0, r3
 800d54c:	f00d fcee 	bl	801af2c <vTaskDelete>
	TIME_Base_parameter._INSPIRATION_TIME = 0;
 800d550:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <Switch_TASK_Inspiration_CYCLE+0x40>)
 800d552:	2200      	movs	r2, #0
 800d554:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter._EXPIRATION_TIME  = 0;
 800d556:	4b0a      	ldr	r3, [pc, #40]	; (800d580 <Switch_TASK_Inspiration_CYCLE+0x40>)
 800d558:	2200      	movs	r2, #0
 800d55a:	605a      	str	r2, [r3, #4]



	Next_Half_Breath_Cycle                = Generate_Inspiration_Cycle;
 800d55c:	4b09      	ldr	r3, [pc, #36]	; (800d584 <Switch_TASK_Inspiration_CYCLE+0x44>)
 800d55e:	2200      	movs	r2, #0
 800d560:	701a      	strb	r2, [r3, #0]
	xTaskCreate(One_Time_Task,"One-Time-Task", 128, NULL,3, &One_Time_Handler);
 800d562:	4b06      	ldr	r3, [pc, #24]	; (800d57c <Switch_TASK_Inspiration_CYCLE+0x3c>)
 800d564:	9301      	str	r3, [sp, #4]
 800d566:	2303      	movs	r3, #3
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	2300      	movs	r3, #0
 800d56c:	2280      	movs	r2, #128	; 0x80
 800d56e:	4906      	ldr	r1, [pc, #24]	; (800d588 <Switch_TASK_Inspiration_CYCLE+0x48>)
 800d570:	4806      	ldr	r0, [pc, #24]	; (800d58c <Switch_TASK_Inspiration_CYCLE+0x4c>)
 800d572:	f00d fba4 	bl	801acbe <xTaskCreate>
}
 800d576:	bf00      	nop
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	200129cc 	.word	0x200129cc
 800d580:	20012b38 	.word	0x20012b38
 800d584:	2001269e 	.word	0x2001269e
 800d588:	0801cfcc 	.word	0x0801cfcc
 800d58c:	08011609 	.word	0x08011609

0800d590 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>:
/**
 * @brief PC_SIMV_Inspiration_Time_Variables_Reset.
 * This function resets variables to start an inspiration cycle.
 * */
void PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset()
{
 800d590:	b590      	push	{r4, r7, lr}
 800d592:	b083      	sub	sp, #12
 800d594:	af02      	add	r7, sp, #8
	    Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 800d596:	4b56      	ldr	r3, [pc, #344]	; (800d6f0 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x160>)
 800d598:	2200      	movs	r2, #0
 800d59a:	701a      	strb	r2, [r3, #0]
		Blower_Status       = BlOWER_ON;
 800d59c:	4b55      	ldr	r3, [pc, #340]	; (800d6f4 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x164>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	701a      	strb	r2, [r3, #0]
		Find_Average_Flow();
 800d5a2:	f000 fc71 	bl	800de88 <Find_Average_Flow>
	    Breath_Count         = Count_The_Breath;
 800d5a6:	4b54      	ldr	r3, [pc, #336]	; (800d6f8 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x168>)
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	701a      	strb	r2, [r3, #0]
	    Smooth_Ramp_Pressure();
 800d5ac:	f000 f9aa 	bl	800d904 <Smooth_Ramp_Pressure>
	    PIP_Not_Acheieved();
 800d5b0:	f000 fc96 	bl	800dee0 <PIP_Not_Acheieved>
		ExpValve_CLOSE();
 800d5b4:	4b51      	ldr	r3, [pc, #324]	; (800d6fc <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x16c>)
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	4a50      	ldr	r2, [pc, #320]	; (800d6fc <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x16c>)
 800d5ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d5be:	6153      	str	r3, [r2, #20]
		PIP_AVERAGE();
 800d5c0:	f7fb fbb2 	bl	8008d28 <PIP_AVERAGE>
		PEEP_AVERAGE();
 800d5c4:	f7fb fbd6 	bl	8008d74 <PEEP_AVERAGE>
		//Set_Blower_Val();
		O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 800d5c8:	4b4d      	ldr	r3, [pc, #308]	; (800d700 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x170>)
 800d5ca:	78db      	ldrb	r3, [r3, #3]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7ff f963 	bl	800c898 <O2_DAC_Control>
		Check_Alert();
 800d5d2:	f7f3 fd97 	bl	8001104 <Check_Alert>
		Alert_Inspiration_Time_Parameter();
 800d5d6:	f7f3 fe4d 	bl	8001274 <Alert_Inspiration_Time_Parameter>
		LED_Alert();
 800d5da:	f7f4 faf3 	bl	8001bc4 <LED_Alert>
		Alert_Status = NO_ALERT;
 800d5de:	4b49      	ldr	r3, [pc, #292]	; (800d704 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x174>)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	701a      	strb	r2, [r3, #0]
		GRAPH_VALUES.Maximum_oxygen_flow   = 0;
 800d5e4:	4b48      	ldr	r3, [pc, #288]	; (800d708 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x178>)
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	829a      	strh	r2, [r3, #20]
		Sampled_Parameter_Inspiration_time();
 800d5ea:	f004 fd4d 	bl	8012088 <Sampled_Parameter_Inspiration_time>
		if( (PC_SIMV.PEEP_Val != PEEP_Maintain_Parameter.PEEP_AVG_VAL ) )
 800d5ee:	4b47      	ldr	r3, [pc, #284]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d5f0:	785a      	ldrb	r2, [r3, #1]
 800d5f2:	4b47      	ldr	r3, [pc, #284]	; (800d710 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800d5f4:	7c1b      	ldrb	r3, [r3, #16]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d013      	beq.n	800d622 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x92>
		{
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time        = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 800d5fa:	4b45      	ldr	r3, [pc, #276]	; (800d710 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800d5fc:	7c18      	ldrb	r0, [r3, #16]
 800d5fe:	4b43      	ldr	r3, [pc, #268]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d600:	7899      	ldrb	r1, [r3, #2]
 800d602:	4b42      	ldr	r3, [pc, #264]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d604:	689a      	ldr	r2, [r3, #8]
 800d606:	4b41      	ldr	r3, [pc, #260]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d608:	785c      	ldrb	r4, [r3, #1]
																																 PC_SIMV.RESPIRATORY_RATE_Val,
																																 PC_SIMV.INSPIRATION_TIME,
																																 PC_SIMV.PEEP_Val,
																												                 PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800d60a:	4b41      	ldr	r3, [pc, #260]	; (800d710 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800d60c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time        = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 800d610:	b29b      	uxth	r3, r3
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	4623      	mov	r3, r4
 800d616:	f7f9 fefb 	bl	8007410 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode>
 800d61a:	4603      	mov	r3, r0
 800d61c:	b21a      	sxth	r2, r3
 800d61e:	4b3c      	ldr	r3, [pc, #240]	; (800d710 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x180>)
 800d620:	809a      	strh	r2, [r3, #4]

		}
		INCREASE_EACH_DAC_SET_CONST(Common_Mode_Parameter._PIP_Val,PC_SIMV.RISE_TIME_MS_Val);
 800d622:	4b37      	ldr	r3, [pc, #220]	; (800d700 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x170>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	4a39      	ldr	r2, [pc, #228]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d628:	edd2 7a01 	vldr	s15, [r2, #4]
 800d62c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d630:	ee17 2a90 	vmov	r2, s15
 800d634:	b292      	uxth	r2, r2
 800d636:	4611      	mov	r1, r2
 800d638:	4618      	mov	r0, r3
 800d63a:	f000 fd43 	bl	800e0c4 <INCREASE_EACH_DAC_SET_CONST>
		BLOWER_ENDING_DAC_SIGNAL_TUNE(PC_SIMV.PIP_Val,PC_SIMV.INSPIRATION_TIME,PC_SIMV.Rise_Time_percentage);
 800d63e:	4b33      	ldr	r3, [pc, #204]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	4a32      	ldr	r2, [pc, #200]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d644:	6891      	ldr	r1, [r2, #8]
 800d646:	4a31      	ldr	r2, [pc, #196]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d648:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800d64c:	4618      	mov	r0, r3
 800d64e:	f000 ff95 	bl	800e57c <BLOWER_ENDING_DAC_SIGNAL_TUNE>

		if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 800d652:	4b30      	ldr	r3, [pc, #192]	; (800d714 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x184>)
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d103      	bne.n	800d662 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0xd2>
		{
			BREATH_STATE                                      = PATIENT_TRIGGER_INSPIRATION;
 800d65a:	4b2f      	ldr	r3, [pc, #188]	; (800d718 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x188>)
 800d65c:	2202      	movs	r2, #2
 800d65e:	701a      	strb	r2, [r3, #0]
 800d660:	e002      	b.n	800d668 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0xd8>
		}
		else
		{
			BREATH_STATE                                       = INSPIRATION_CYCLE;
 800d662:	4b2d      	ldr	r3, [pc, #180]	; (800d718 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x188>)
 800d664:	2200      	movs	r2, #0
 800d666:	701a      	strb	r2, [r3, #0]
		}
		Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 800d668:	4b2c      	ldr	r3, [pc, #176]	; (800d71c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x18c>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			                   = OPENED;
 800d66e:	4b2c      	ldr	r3, [pc, #176]	; (800d720 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x190>)
 800d670:	2200      	movs	r2, #0
 800d672:	701a      	strb	r2, [r3, #0]
		PIP_Status                    				               = PIP_NOT_ACHEIVED;
 800d674:	4b2b      	ldr	r3, [pc, #172]	; (800d724 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x194>)
 800d676:	2200      	movs	r2, #0
 800d678:	701a      	strb	r2, [r3, #0]
		Set_PIP_Status                                             = SET_PIP_VALUE_NOT_ACHEIVED;
 800d67a:	4b2b      	ldr	r3, [pc, #172]	; (800d728 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x198>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	701a      	strb	r2, [r3, #0]
		Read_Time_vs_Pressure                                      = READ_TIME_OPEN;
 800d680:	4b2a      	ldr	r3, [pc, #168]	; (800d72c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x19c>)
 800d682:	2200      	movs	r2, #0
 800d684:	701a      	strb	r2, [r3, #0]
		PIP_control_Task.PIP_Control_Event_Occured                 = RESET;
 800d686:	4b2a      	ldr	r3, [pc, #168]	; (800d730 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a0>)
 800d688:	2200      	movs	r2, #0
 800d68a:	805a      	strh	r2, [r3, #2]
		PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 800d68c:	4b29      	ldr	r3, [pc, #164]	; (800d734 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a4>)
 800d68e:	2200      	movs	r2, #0
 800d690:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_DAC_VAL                = DAC_VAL(PC_SIMV.PEEP_Val );
 800d692:	4b1e      	ldr	r3, [pc, #120]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d694:	785b      	ldrb	r3, [r3, #1]
 800d696:	4618      	mov	r0, r3
 800d698:	f7fb fcb8 	bl	800900c <DAC_VAL>
 800d69c:	4603      	mov	r3, r0
 800d69e:	461a      	mov	r2, r3
 800d6a0:	4b25      	ldr	r3, [pc, #148]	; (800d738 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a8>)
 800d6a2:	801a      	strh	r2, [r3, #0]
		Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL           = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800d6a4:	4b24      	ldr	r3, [pc, #144]	; (800d738 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a8>)
 800d6a6:	881a      	ldrh	r2, [r3, #0]
 800d6a8:	4b23      	ldr	r3, [pc, #140]	; (800d738 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a8>)
 800d6aa:	805a      	strh	r2, [r3, #2]
		TIME_Base_parameter._INSPIRATION_TIME                      = PC_SIMV.INSPIRATION_TIME;
 800d6ac:	4b17      	ldr	r3, [pc, #92]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	4b22      	ldr	r3, [pc, #136]	; (800d73c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1ac>)
 800d6b4:	601a      	str	r2, [r3, #0]


		TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 800d6b6:	4b21      	ldr	r3, [pc, #132]	; (800d73c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1ac>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	609a      	str	r2, [r3, #8]
		PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = PIP_control_Task.Early_Acheived_Ramp_Time_Percentage;
 800d6bc:	4b1c      	ldr	r3, [pc, #112]	; (800d730 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a0>)
 800d6be:	7a1a      	ldrb	r2, [r3, #8]
 800d6c0:	4b1b      	ldr	r3, [pc, #108]	; (800d730 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1a0>)
 800d6c2:	725a      	strb	r2, [r3, #9]
		GRAPH_VALUES.volume                                        = RESET;
 800d6c4:	4b10      	ldr	r3, [pc, #64]	; (800d708 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x178>)
 800d6c6:	f04f 0200 	mov.w	r2, #0
 800d6ca:	609a      	str	r2, [r3, #8]
		Volume_max                                                 = RESET;
 800d6cc:	4b1c      	ldr	r3, [pc, #112]	; (800d740 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b0>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	601a      	str	r2, [r3, #0]
		Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 800d6d2:	4b1c      	ldr	r3, [pc, #112]	; (800d744 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b4>)
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	701a      	strb	r2, [r3, #0]
		Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 800d6d8:	4b1b      	ldr	r3, [pc, #108]	; (800d748 <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b8>)
 800d6da:	2201      	movs	r2, #1
 800d6dc:	701a      	strb	r2, [r3, #0]
		vTaskDelay(PC_SIMV.INSPIRATION_TIME);
 800d6de:	4b0b      	ldr	r3, [pc, #44]	; (800d70c <PC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x17c>)
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f00d fcb2 	bl	801b04c <vTaskDelay>
}
 800d6e8:	bf00      	nop
 800d6ea:	3704      	adds	r7, #4
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd90      	pop	{r4, r7, pc}
 800d6f0:	20012b71 	.word	0x20012b71
 800d6f4:	20012828 	.word	0x20012828
 800d6f8:	200122a8 	.word	0x200122a8
 800d6fc:	40020400 	.word	0x40020400
 800d700:	200124f0 	.word	0x200124f0
 800d704:	2001287c 	.word	0x2001287c
 800d708:	200125f8 	.word	0x200125f8
 800d70c:	20012c2c 	.word	0x20012c2c
 800d710:	20012c74 	.word	0x20012c74
 800d714:	2001263d 	.word	0x2001263d
 800d718:	20012a3c 	.word	0x20012a3c
 800d71c:	20012a37 	.word	0x20012a37
 800d720:	20012a34 	.word	0x20012a34
 800d724:	200129f7 	.word	0x200129f7
 800d728:	20012b34 	.word	0x20012b34
 800d72c:	20012d34 	.word	0x20012d34
 800d730:	200123d0 	.word	0x200123d0
 800d734:	200124bc 	.word	0x200124bc
 800d738:	20012978 	.word	0x20012978
 800d73c:	20012b38 	.word	0x20012b38
 800d740:	20012c70 	.word	0x20012c70
 800d744:	2001269e 	.word	0x2001269e
 800d748:	20012870 	.word	0x20012870

0800d74c <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>:
/**
 * @brief PC_SIMV_Expiration_Time_Variables_Reset.
 * This function resets variables to start an expiration cycle.
 * */
void PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset()
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
		if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 800d750:	4b1b      	ldr	r3, [pc, #108]	; (800d7c0 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x74>)
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d103      	bne.n	800d760 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x14>
		{
			BREATH_STATE                                      = PATIENT_TRIGGER_EXPIRATION;
 800d758:	4b1a      	ldr	r3, [pc, #104]	; (800d7c4 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x78>)
 800d75a:	2203      	movs	r2, #3
 800d75c:	701a      	strb	r2, [r3, #0]
 800d75e:	e002      	b.n	800d766 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x1a>
		}
		else
		{
			BREATH_STATE                                       = EXPIRATION_CYCLE;
 800d760:	4b18      	ldr	r3, [pc, #96]	; (800d7c4 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x78>)
 800d762:	2201      	movs	r2, #1
 800d764:	701a      	strb	r2, [r3, #0]
		}

		PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 800d766:	4b18      	ldr	r3, [pc, #96]	; (800d7c8 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x7c>)
 800d768:	2200      	movs	r2, #0
 800d76a:	615a      	str	r2, [r3, #20]
		PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 800d76c:	4b16      	ldr	r3, [pc, #88]	; (800d7c8 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x7c>)
 800d76e:	2200      	movs	r2, #0
 800d770:	619a      	str	r2, [r3, #24]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 800d772:	4b15      	ldr	r3, [pc, #84]	; (800d7c8 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x7c>)
 800d774:	2200      	movs	r2, #0
 800d776:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 800d778:	4b13      	ldr	r3, [pc, #76]	; (800d7c8 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x7c>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	60da      	str	r2, [r3, #12]
	    Patient_Trigger                                     = NO_PATIENT_TRIGGER;
 800d77e:	4b10      	ldr	r3, [pc, #64]	; (800d7c0 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x74>)
 800d780:	2200      	movs	r2, #0
 800d782:	701a      	strb	r2, [r3, #0]
	    Trigger_Time_Monitor();
 800d784:	f000 f8fc 	bl	800d980 <Trigger_Time_Monitor>
	    Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 800d788:	4b10      	ldr	r3, [pc, #64]	; (800d7cc <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x80>)
 800d78a:	78db      	ldrb	r3, [r3, #3]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fe fe8f 	bl	800c4b0 <Calculate_O2>
		Alert_Expiration_Time_Parameter();
 800d792:	f7f3 fde9 	bl	8001368 <Alert_Expiration_Time_Parameter>
		TIME_Base_parameter._EXPIRATION_TIME                = PC_SIMV.EXPIRATION_TIME;
 800d796:	4b0e      	ldr	r3, [pc, #56]	; (800d7d0 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x84>)
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	461a      	mov	r2, r3
 800d79c:	4b0d      	ldr	r3, [pc, #52]	; (800d7d4 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x88>)
 800d79e:	605a      	str	r2, [r3, #4]


		TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 800d7a0:	4b0c      	ldr	r3, [pc, #48]	; (800d7d4 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x88>)
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	60da      	str	r2, [r3, #12]
		Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 800d7a6:	4b0c      	ldr	r3, [pc, #48]	; (800d7d8 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x8c>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	701a      	strb	r2, [r3, #0]
		Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 800d7ac:	4b0b      	ldr	r3, [pc, #44]	; (800d7dc <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x90>)
 800d7ae:	2202      	movs	r2, #2
 800d7b0:	701a      	strb	r2, [r3, #0]
		vTaskDelay(PC_SIMV.EXPIRATION_TIME);
 800d7b2:	4b07      	ldr	r3, [pc, #28]	; (800d7d0 <PC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x84>)
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f00d fc48 	bl	801b04c <vTaskDelay>
}
 800d7bc:	bf00      	nop
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	2001263d 	.word	0x2001263d
 800d7c4:	20012a3c 	.word	0x20012a3c
 800d7c8:	20012c74 	.word	0x20012c74
 800d7cc:	200124f0 	.word	0x200124f0
 800d7d0:	20012c2c 	.word	0x20012c2c
 800d7d4:	20012b38 	.word	0x20012b38
 800d7d8:	2001269e 	.word	0x2001269e
 800d7dc:	20012870 	.word	0x20012870

0800d7e0 <CHECK_PRESSURE_TRIGGER>:
/**
 * @brief CHECK_PRESSURE_TRIGGER.
 * This function checks pressure trigger limit.
 * */
static void CHECK_PRESSURE_TRIGGER()
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	af00      	add	r7, sp, #0
	if (( GRAPH_VALUES.pressure < (Pressure_Trigger_Offset - PC_SIMV.TRIG_LMT )))
 800d7e4:	4b0e      	ldr	r3, [pc, #56]	; (800d820 <CHECK_PRESSURE_TRIGGER+0x40>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	ee07 3a90 	vmov	s15, r3
 800d7ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d7f0:	4b0c      	ldr	r3, [pc, #48]	; (800d824 <CHECK_PRESSURE_TRIGGER+0x44>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	ee07 3a90 	vmov	s15, r3
 800d7f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d7fc:	4b0a      	ldr	r3, [pc, #40]	; (800d828 <CHECK_PRESSURE_TRIGGER+0x48>)
 800d7fe:	edd3 7a05 	vldr	s15, [r3, #20]
 800d802:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d80e:	d400      	bmi.n	800d812 <CHECK_PRESSURE_TRIGGER+0x32>
	{
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 800d810:	e004      	b.n	800d81c <CHECK_PRESSURE_TRIGGER+0x3c>
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
 800d812:	4b06      	ldr	r3, [pc, #24]	; (800d82c <CHECK_PRESSURE_TRIGGER+0x4c>)
 800d814:	2201      	movs	r2, #1
 800d816:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 800d818:	f7ff fe92 	bl	800d540 <Switch_TASK_Inspiration_CYCLE>
}
 800d81c:	bf00      	nop
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	200125f8 	.word	0x200125f8
 800d824:	2001296c 	.word	0x2001296c
 800d828:	20012c2c 	.word	0x20012c2c
 800d82c:	2001263d 	.word	0x2001263d

0800d830 <CHECK_FLOW_TRIGGER>:
/**
 * @brief CHECK_FLOW_TRIGGER.
 * This function checks the flow trigger limit.
 * */
static void CHECK_FLOW_TRIGGER()
{
 800d830:	b580      	push	{r7, lr}
 800d832:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+PC_SIMV.TRIG_LMT )))
 800d834:	4b10      	ldr	r3, [pc, #64]	; (800d878 <CHECK_FLOW_TRIGGER+0x48>)
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	ee07 3a90 	vmov	s15, r3
 800d83c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d840:	4b0e      	ldr	r3, [pc, #56]	; (800d87c <CHECK_FLOW_TRIGGER+0x4c>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	ee07 3a90 	vmov	s15, r3
 800d848:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d84c:	4b0c      	ldr	r3, [pc, #48]	; (800d880 <CHECK_FLOW_TRIGGER+0x50>)
 800d84e:	edd3 7a05 	vldr	s15, [r3, #20]
 800d852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d856:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d85e:	dc00      	bgt.n	800d862 <CHECK_FLOW_TRIGGER+0x32>
	{
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 800d860:	e008      	b.n	800d874 <CHECK_FLOW_TRIGGER+0x44>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
 800d862:	4b05      	ldr	r3, [pc, #20]	; (800d878 <CHECK_FLOW_TRIGGER+0x48>)
 800d864:	781a      	ldrb	r2, [r3, #0]
 800d866:	4b07      	ldr	r3, [pc, #28]	; (800d884 <CHECK_FLOW_TRIGGER+0x54>)
 800d868:	701a      	strb	r2, [r3, #0]
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
 800d86a:	4b07      	ldr	r3, [pc, #28]	; (800d888 <CHECK_FLOW_TRIGGER+0x58>)
 800d86c:	2201      	movs	r2, #1
 800d86e:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 800d870:	f7ff fe66 	bl	800d540 <Switch_TASK_Inspiration_CYCLE>
}
 800d874:	bf00      	nop
 800d876:	bd80      	pop	{r7, pc}
 800d878:	200129aa 	.word	0x200129aa
 800d87c:	20012900 	.word	0x20012900
 800d880:	20012c2c 	.word	0x20012c2c
 800d884:	20012b70 	.word	0x20012b70
 800d888:	2001263d 	.word	0x2001263d

0800d88c <CHECK_TRIGGER_OFFSET>:
/**
 * @brief CHECK_FLOW_TRIGGER.
 * This function finds the trigger offset.
 * */
static void CHECK_TRIGGER_OFFSET()
{
 800d88c:	b480      	push	{r7}
 800d88e:	af00      	add	r7, sp, #0
	if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 800d890:	4b18      	ldr	r3, [pc, #96]	; (800d8f4 <CHECK_TRIGGER_OFFSET+0x68>)
 800d892:	edd3 7a01 	vldr	s15, [r3, #4]
 800d896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89e:	d013      	beq.n	800d8c8 <CHECK_TRIGGER_OFFSET+0x3c>
 800d8a0:	4b14      	ldr	r3, [pc, #80]	; (800d8f4 <CHECK_TRIGGER_OFFSET+0x68>)
 800d8a2:	edd3 7a01 	vldr	s15, [r3, #4]
 800d8a6:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 800d8aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b2:	da00      	bge.n	800d8b6 <CHECK_TRIGGER_OFFSET+0x2a>
	{
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
		FLOW_TRIGGER             =  0;
	}
}
 800d8b4:	e019      	b.n	800d8ea <CHECK_TRIGGER_OFFSET+0x5e>
	if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 800d8b6:	4b0f      	ldr	r3, [pc, #60]	; (800d8f4 <CHECK_TRIGGER_OFFSET+0x68>)
 800d8b8:	edd3 7a01 	vldr	s15, [r3, #4]
 800d8bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c4:	d400      	bmi.n	800d8c8 <CHECK_TRIGGER_OFFSET+0x3c>
}
 800d8c6:	e010      	b.n	800d8ea <CHECK_TRIGGER_OFFSET+0x5e>
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 800d8c8:	4b0a      	ldr	r3, [pc, #40]	; (800d8f4 <CHECK_TRIGGER_OFFSET+0x68>)
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	4b0a      	ldr	r3, [pc, #40]	; (800d8f8 <CHECK_TRIGGER_OFFSET+0x6c>)
 800d8d0:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 800d8d2:	4b08      	ldr	r3, [pc, #32]	; (800d8f4 <CHECK_TRIGGER_OFFSET+0x68>)
 800d8d4:	edd3 7a01 	vldr	s15, [r3, #4]
 800d8d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8dc:	ee17 2a90 	vmov	r2, s15
 800d8e0:	4b06      	ldr	r3, [pc, #24]	; (800d8fc <CHECK_TRIGGER_OFFSET+0x70>)
 800d8e2:	601a      	str	r2, [r3, #0]
		FLOW_TRIGGER             =  0;
 800d8e4:	4b06      	ldr	r3, [pc, #24]	; (800d900 <CHECK_TRIGGER_OFFSET+0x74>)
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	701a      	strb	r2, [r3, #0]
}
 800d8ea:	bf00      	nop
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr
 800d8f4:	200125f8 	.word	0x200125f8
 800d8f8:	2001296c 	.word	0x2001296c
 800d8fc:	20012900 	.word	0x20012900
 800d900:	200129aa 	.word	0x200129aa

0800d904 <Smooth_Ramp_Pressure>:
/**
 * @brief Smooth_Ramp_Pressure.
 * This function is used to provide a pressure value smoothly based on lung characteristics
 * */
static void Smooth_Ramp_Pressure()
{
 800d904:	b480      	push	{r7}
 800d906:	af00      	add	r7, sp, #0
	if(Smooth_Ramp_Time   == Smooth_Ramp_Time_Val_Pending)
 800d908:	4b18      	ldr	r3, [pc, #96]	; (800d96c <Smooth_Ramp_Pressure+0x68>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d128      	bne.n	800d962 <Smooth_Ramp_Pressure+0x5e>
	{
		if( (PC_SIMV.PEEP_Val == PEEP_Maintain_Parameter.PEEP_AVG_VAL)  && (PC_SIMV.PEEP_Val >= 9) && (PC_SIMV.PEEP_Val <= 14) && (PC_SIMV.PIP_Val >=30) )
 800d910:	4b17      	ldr	r3, [pc, #92]	; (800d970 <Smooth_Ramp_Pressure+0x6c>)
 800d912:	785a      	ldrb	r2, [r3, #1]
 800d914:	4b17      	ldr	r3, [pc, #92]	; (800d974 <Smooth_Ramp_Pressure+0x70>)
 800d916:	7c1b      	ldrb	r3, [r3, #16]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d122      	bne.n	800d962 <Smooth_Ramp_Pressure+0x5e>
 800d91c:	4b14      	ldr	r3, [pc, #80]	; (800d970 <Smooth_Ramp_Pressure+0x6c>)
 800d91e:	785b      	ldrb	r3, [r3, #1]
 800d920:	2b08      	cmp	r3, #8
 800d922:	d91e      	bls.n	800d962 <Smooth_Ramp_Pressure+0x5e>
 800d924:	4b12      	ldr	r3, [pc, #72]	; (800d970 <Smooth_Ramp_Pressure+0x6c>)
 800d926:	785b      	ldrb	r3, [r3, #1]
 800d928:	2b0e      	cmp	r3, #14
 800d92a:	d81a      	bhi.n	800d962 <Smooth_Ramp_Pressure+0x5e>
 800d92c:	4b10      	ldr	r3, [pc, #64]	; (800d970 <Smooth_Ramp_Pressure+0x6c>)
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	2b1d      	cmp	r3, #29
 800d932:	d916      	bls.n	800d962 <Smooth_Ramp_Pressure+0x5e>
		{
			if(PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  < 2)
 800d934:	4b0f      	ldr	r3, [pc, #60]	; (800d974 <Smooth_Ramp_Pressure+0x70>)
 800d936:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	dc11      	bgt.n	800d962 <Smooth_Ramp_Pressure+0x5e>
			{
				if(Smooth_Ramp_Time_Val_Count > 2 )
 800d93e:	4b0e      	ldr	r3, [pc, #56]	; (800d978 <Smooth_Ramp_Pressure+0x74>)
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	2b02      	cmp	r3, #2
 800d944:	d907      	bls.n	800d956 <Smooth_Ramp_Pressure+0x52>
				{
					Smooth_Ramp_Time_Val = PC_SIMV.PEEP_Val;
 800d946:	4b0a      	ldr	r3, [pc, #40]	; (800d970 <Smooth_Ramp_Pressure+0x6c>)
 800d948:	785a      	ldrb	r2, [r3, #1]
 800d94a:	4b0c      	ldr	r3, [pc, #48]	; (800d97c <Smooth_Ramp_Pressure+0x78>)
 800d94c:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time     = Smooth_Ramp_Time_Val_Finished;
 800d94e:	4b07      	ldr	r3, [pc, #28]	; (800d96c <Smooth_Ramp_Pressure+0x68>)
 800d950:	2201      	movs	r2, #1
 800d952:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time_Val_Count++;
				}
			}
		}
    }
}
 800d954:	e005      	b.n	800d962 <Smooth_Ramp_Pressure+0x5e>
					Smooth_Ramp_Time_Val_Count++;
 800d956:	4b08      	ldr	r3, [pc, #32]	; (800d978 <Smooth_Ramp_Pressure+0x74>)
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	3301      	adds	r3, #1
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	4b06      	ldr	r3, [pc, #24]	; (800d978 <Smooth_Ramp_Pressure+0x74>)
 800d960:	701a      	strb	r2, [r3, #0]
}
 800d962:	bf00      	nop
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr
 800d96c:	200124ce 	.word	0x200124ce
 800d970:	20012c2c 	.word	0x20012c2c
 800d974:	20012c74 	.word	0x20012c74
 800d978:	200129f6 	.word	0x200129f6
 800d97c:	200129a1 	.word	0x200129a1

0800d980 <Trigger_Time_Monitor>:
/**
 * @brief Trigger_Time_Monitor.
 * This function calculate the trigger time.
 * */
static void Trigger_Time_Monitor()
{
 800d980:	b480      	push	{r7}
 800d982:	af00      	add	r7, sp, #0
	PC_SIMV.CALC_TRIG_VAL 	                 =  (PC_SIMV.EXPIRATION_TIME   - PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time );
 800d984:	4b11      	ldr	r3, [pc, #68]	; (800d9cc <Trigger_Time_Monitor+0x4c>)
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	b29a      	uxth	r2, r3
 800d98a:	4b11      	ldr	r3, [pc, #68]	; (800d9d0 <Trigger_Time_Monitor+0x50>)
 800d98c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d990:	b29b      	uxth	r3, r3
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	b29a      	uxth	r2, r3
 800d996:	4b0d      	ldr	r3, [pc, #52]	; (800d9cc <Trigger_Time_Monitor+0x4c>)
 800d998:	835a      	strh	r2, [r3, #26]
	if(PC_SIMV.CALC_TRIG_VAL <0)
	{
		PC_SIMV.CALC_TRIG_VAL = (PC_SIMV.CALC_TRIG_VAL * (-1));
	}
	PC_SIMV.TOLERANCE_EWAVE =  PC_SIMV.TRIG_TIME;
 800d99a:	4b0c      	ldr	r3, [pc, #48]	; (800d9cc <Trigger_Time_Monitor+0x4c>)
 800d99c:	8b1a      	ldrh	r2, [r3, #24]
 800d99e:	4b0b      	ldr	r3, [pc, #44]	; (800d9cc <Trigger_Time_Monitor+0x4c>)
 800d9a0:	839a      	strh	r2, [r3, #28]
	if(PC_SIMV.CALC_TRIG_VAL < PC_SIMV.TRIG_TIME )
 800d9a2:	4b0a      	ldr	r3, [pc, #40]	; (800d9cc <Trigger_Time_Monitor+0x4c>)
 800d9a4:	8b5a      	ldrh	r2, [r3, #26]
 800d9a6:	4b09      	ldr	r3, [pc, #36]	; (800d9cc <Trigger_Time_Monitor+0x4c>)
 800d9a8:	8b1b      	ldrh	r3, [r3, #24]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d205      	bcs.n	800d9ba <Trigger_Time_Monitor+0x3a>
	{
		PC_SIMV.TOLERANCE_EWAVE =  (PC_SIMV.TRIG_TIME - 200) ;
 800d9ae:	4b07      	ldr	r3, [pc, #28]	; (800d9cc <Trigger_Time_Monitor+0x4c>)
 800d9b0:	8b1b      	ldrh	r3, [r3, #24]
 800d9b2:	3bc8      	subs	r3, #200	; 0xc8
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	4b05      	ldr	r3, [pc, #20]	; (800d9cc <Trigger_Time_Monitor+0x4c>)
 800d9b8:	839a      	strh	r2, [r3, #28]
	}

	PC_SIMV.TRIG_WINDOW		                 = PC_SIMV.TOLERANCE_EWAVE;
 800d9ba:	4b04      	ldr	r3, [pc, #16]	; (800d9cc <Trigger_Time_Monitor+0x4c>)
 800d9bc:	8b9a      	ldrh	r2, [r3, #28]
 800d9be:	4b03      	ldr	r3, [pc, #12]	; (800d9cc <Trigger_Time_Monitor+0x4c>)
 800d9c0:	83da      	strh	r2, [r3, #30]
}
 800d9c2:	bf00      	nop
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	20012c2c 	.word	0x20012c2c
 800d9d0:	20012c74 	.word	0x20012c74

0800d9d4 <Pc_Cmv_Mode_Packet_Data>:
 * This task is to extract the PCCMV mode variable from NRF Bluetooth.
 * @param RECEIVE_GRAPH_PACKET structure pointer.
 */

void Pc_Cmv_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
	uint32_t One_Breathe_time;
	PC_CMV.PIP_Val                = Receive_Graph_Packet->PIP_PS_Phigh;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	791a      	ldrb	r2, [r3, #4]
 800d9e0:	4b2a      	ldr	r3, [pc, #168]	; (800da8c <Pc_Cmv_Mode_Packet_Data+0xb8>)
 800d9e2:	701a      	strb	r2, [r3, #0]
	PC_CMV.PEEP_Val               = Receive_Graph_Packet->PEEP_CPAP_Plow;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	795a      	ldrb	r2, [r3, #5]
 800d9e8:	4b28      	ldr	r3, [pc, #160]	; (800da8c <Pc_Cmv_Mode_Packet_Data+0xb8>)
 800d9ea:	705a      	strb	r2, [r3, #1]
	PC_CMV.FIO2_Val               = Receive_Graph_Packet->FiO2;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	7a1a      	ldrb	r2, [r3, #8]
 800d9f0:	4b26      	ldr	r3, [pc, #152]	; (800da8c <Pc_Cmv_Mode_Packet_Data+0xb8>)
 800d9f2:	70da      	strb	r2, [r3, #3]
	PC_CMV.RESPIRATORY_RATE_Val   = Receive_Graph_Packet->RR;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7a5a      	ldrb	r2, [r3, #9]
 800d9f8:	4b24      	ldr	r3, [pc, #144]	; (800da8c <Pc_Cmv_Mode_Packet_Data+0xb8>)
 800d9fa:	709a      	strb	r2, [r3, #2]
	One_Breathe_time              = (One_Minite_In_MS / PC_CMV.RESPIRATORY_RATE_Val);
 800d9fc:	4b23      	ldr	r3, [pc, #140]	; (800da8c <Pc_Cmv_Mode_Packet_Data+0xb8>)
 800d9fe:	789b      	ldrb	r3, [r3, #2]
 800da00:	461a      	mov	r2, r3
 800da02:	f64e 2360 	movw	r3, #60000	; 0xea60
 800da06:	fb93 f3f2 	sdiv	r3, r3, r2
 800da0a:	60fb      	str	r3, [r7, #12]
	PC_CMV.INSPIRATION_TIME       = ( ( Receive_Graph_Packet->T_high) * 100 );
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	7a9b      	ldrb	r3, [r3, #10]
 800da10:	461a      	mov	r2, r3
 800da12:	2364      	movs	r3, #100	; 0x64
 800da14:	fb03 f302 	mul.w	r3, r3, r2
 800da18:	461a      	mov	r2, r3
 800da1a:	4b1c      	ldr	r3, [pc, #112]	; (800da8c <Pc_Cmv_Mode_Packet_Data+0xb8>)
 800da1c:	609a      	str	r2, [r3, #8]
	PC_CMV.EXPIRATION_TIME        = (One_Breathe_time - PC_CMV.INSPIRATION_TIME);
 800da1e:	4b1b      	ldr	r3, [pc, #108]	; (800da8c <Pc_Cmv_Mode_Packet_Data+0xb8>)
 800da20:	689b      	ldr	r3, [r3, #8]
 800da22:	68fa      	ldr	r2, [r7, #12]
 800da24:	1ad3      	subs	r3, r2, r3
 800da26:	4a19      	ldr	r2, [pc, #100]	; (800da8c <Pc_Cmv_Mode_Packet_Data+0xb8>)
 800da28:	60d3      	str	r3, [r2, #12]
	PC_CMV.Rise_Time              = Receive_Graph_Packet->Rise_Time;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	7b1a      	ldrb	r2, [r3, #12]
 800da2e:	4b17      	ldr	r3, [pc, #92]	; (800da8c <Pc_Cmv_Mode_Packet_Data+0xb8>)
 800da30:	749a      	strb	r2, [r3, #18]

	Alert_Check_Time              = ((float)PC_CMV.INSPIRATION_TIME/3);
 800da32:	4b16      	ldr	r3, [pc, #88]	; (800da8c <Pc_Cmv_Mode_Packet_Data+0xb8>)
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	ee07 3a90 	vmov	s15, r3
 800da3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da3e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800da42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800da46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da4a:	ee17 2a90 	vmov	r2, s15
 800da4e:	4b10      	ldr	r3, [pc, #64]	; (800da90 <Pc_Cmv_Mode_Packet_Data+0xbc>)
 800da50:	601a      	str	r2, [r3, #0]
	Vent_Type                     = ET_TUBE_MODE;
 800da52:	4b10      	ldr	r3, [pc, #64]	; (800da94 <Pc_Cmv_Mode_Packet_Data+0xc0>)
 800da54:	2200      	movs	r2, #0
 800da56:	701a      	strb	r2, [r3, #0]

	OOM202.offset_minimum         = ( 0x7F & (Receive_Graph_Packet->Vent_Type_Min_O2));
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	7c5b      	ldrb	r3, [r3, #17]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da62:	b29a      	uxth	r2, r3
 800da64:	4b0c      	ldr	r3, [pc, #48]	; (800da98 <Pc_Cmv_Mode_Packet_Data+0xc4>)
 800da66:	805a      	strh	r2, [r3, #2]
	OOM202.offset_maximum         = Receive_Graph_Packet->Max_O2;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	7c9b      	ldrb	r3, [r3, #18]
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	4b0a      	ldr	r3, [pc, #40]	; (800da98 <Pc_Cmv_Mode_Packet_Data+0xc4>)
 800da70:	809a      	strh	r2, [r3, #4]

    Mode_Initial_Flag_Set         = OPEN;
 800da72:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <Pc_Cmv_Mode_Packet_Data+0xc8>)
 800da74:	2201      	movs	r2, #1
 800da76:	701a      	strb	r2, [r3, #0]
	vTaskResume(Mode_initial_Flag_Set_Handler);
 800da78:	4b09      	ldr	r3, [pc, #36]	; (800daa0 <Pc_Cmv_Mode_Packet_Data+0xcc>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f00d fbdd 	bl	801b23c <vTaskResume>
}
 800da82:	bf00      	nop
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	20012b1c 	.word	0x20012b1c
 800da90:	2001246c 	.word	0x2001246c
 800da94:	200129f4 	.word	0x200129f4
 800da98:	20012224 	.word	0x20012224
 800da9c:	20012cb1 	.word	0x20012cb1
 800daa0:	200129ac 	.word	0x200129ac

0800daa4 <Pc_Cmv_Task>:
 * @brief Pc_Cmv_Task.
 * This Task calls  two function based on inspiration and expiration time.
 * */

void Pc_Cmv_Task (void *argument)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 800daac:	4b14      	ldr	r3, [pc, #80]	; (800db00 <Pc_Cmv_Task+0x5c>)
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d00b      	beq.n	800dacc <Pc_Cmv_Task+0x28>
 800dab4:	2b02      	cmp	r3, #2
 800dab6:	dc1c      	bgt.n	800daf2 <Pc_Cmv_Task+0x4e>
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d01c      	beq.n	800daf6 <Pc_Cmv_Task+0x52>
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d118      	bne.n	800daf2 <Pc_Cmv_Task+0x4e>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 800dac0:	4b10      	ldr	r3, [pc, #64]	; (800db04 <Pc_Cmv_Task+0x60>)
 800dac2:	881b      	ldrh	r3, [r3, #0]
 800dac4:	4618      	mov	r0, r3
 800dac6:	f000 f821 	bl	800db0c <Inspiration_Time_Blower_Control_PC_CMV>
			break;
 800daca:	e015      	b.n	800daf8 <Pc_Cmv_Task+0x54>
			case Run_Expiration_Cycle:
				Pressure_Mode_blower_control.BLOWER_DAC_VAL=0;
 800dacc:	4b0d      	ldr	r3, [pc, #52]	; (800db04 <Pc_Cmv_Task+0x60>)
 800dace:	2200      	movs	r2, #0
 800dad0:	801a      	strh	r2, [r3, #0]
				Expiration_Time_Blower_Control_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800dad2:	4b0c      	ldr	r3, [pc, #48]	; (800db04 <Pc_Cmv_Task+0x60>)
 800dad4:	881b      	ldrh	r3, [r3, #0]
 800dad6:	4a0c      	ldr	r2, [pc, #48]	; (800db08 <Pc_Cmv_Task+0x64>)
 800dad8:	edd2 7a00 	vldr	s15, [r2]
											   PEEP_Maintain_Parameter.PEEP_Temp,
											   PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800dadc:	4a0a      	ldr	r2, [pc, #40]	; (800db08 <Pc_Cmv_Task+0x64>)
 800dade:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_PC_CMV(Pressure_Mode_blower_control.BLOWER_DAC_VAL,
 800dae2:	b292      	uxth	r2, r2
 800dae4:	4611      	mov	r1, r2
 800dae6:	eeb0 0a67 	vmov.f32	s0, s15
 800daea:	4618      	mov	r0, r3
 800daec:	f000 f81e 	bl	800db2c <Expiration_Time_Blower_Control_PC_CMV>
			break;
 800daf0:	e002      	b.n	800daf8 <Pc_Cmv_Task+0x54>
			case No_Run_State:
			break;
			default:
			break;
 800daf2:	bf00      	nop
 800daf4:	e000      	b.n	800daf8 <Pc_Cmv_Task+0x54>
			break;
 800daf6:	bf00      	nop
		}
		vTaskDelay(Two_Millisecond_Delay);
 800daf8:	2002      	movs	r0, #2
 800dafa:	f00d faa7 	bl	801b04c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 800dafe:	e7d5      	b.n	800daac <Pc_Cmv_Task+0x8>
 800db00:	20012870 	.word	0x20012870
 800db04:	20012978 	.word	0x20012978
 800db08:	20012c74 	.word	0x20012c74

0800db0c <Inspiration_Time_Blower_Control_PC_CMV>:
 * This function uploads a DAC value to the DAC1 peripheral to control a blower every 2 milliseconds during inspiration time.
 * @param Blower_Signal as Pressure_Mode_blower_control.BLOWER_DAC_VAL.
 * */

static void Inspiration_Time_Blower_Control_PC_CMV(uint16_t Blower_Signal)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	4603      	mov	r3, r0
 800db14:	80fb      	strh	r3, [r7, #6]
	Blower_Signal(Blower_Signal);
 800db16:	4a04      	ldr	r2, [pc, #16]	; (800db28 <Inspiration_Time_Blower_Control_PC_CMV+0x1c>)
 800db18:	88fb      	ldrh	r3, [r7, #6]
 800db1a:	6093      	str	r3, [r2, #8]
}
 800db1c:	bf00      	nop
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	40007400 	.word	0x40007400

0800db2c <Expiration_Time_Blower_Control_PC_CMV>:
 * @param  PEEP to lock the expiratory valve in peep area.
 * @param  Expiratory_Valve_Open_Time to control the expiratory valve lock delay.
 * */

static void Expiration_Time_Blower_Control_PC_CMV(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	4603      	mov	r3, r0
 800db34:	ed87 0a00 	vstr	s0, [r7]
 800db38:	460a      	mov	r2, r1
 800db3a:	80fb      	strh	r3, [r7, #6]
 800db3c:	4613      	mov	r3, r2
 800db3e:	80bb      	strh	r3, [r7, #4]
	Blower_Signal( Blower_Signal);
 800db40:	4a25      	ldr	r2, [pc, #148]	; (800dbd8 <Expiration_Time_Blower_Control_PC_CMV+0xac>)
 800db42:	88fb      	ldrh	r3, [r7, #6]
 800db44:	6093      	str	r3, [r2, #8]
		if(Peep_Status==PEEP_ACHEIVED)
 800db46:	4b25      	ldr	r3, [pc, #148]	; (800dbdc <Expiration_Time_Blower_Control_PC_CMV+0xb0>)
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d113      	bne.n	800db76 <Expiration_Time_Blower_Control_PC_CMV+0x4a>
		{
				if(GRAPH_VALUES.pressure < PEEP)
 800db4e:	4b24      	ldr	r3, [pc, #144]	; (800dbe0 <Expiration_Time_Blower_Control_PC_CMV+0xb4>)
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	ee07 3a90 	vmov	s15, r3
 800db56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db5a:	ed97 7a00 	vldr	s14, [r7]
 800db5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db66:	dd03      	ble.n	800db70 <Expiration_Time_Blower_Control_PC_CMV+0x44>
				{
					Blower_Signal( Blower_Signal);
 800db68:	4a1b      	ldr	r2, [pc, #108]	; (800dbd8 <Expiration_Time_Blower_Control_PC_CMV+0xac>)
 800db6a:	88fb      	ldrh	r3, [r7, #6]
 800db6c:	6093      	str	r3, [r2, #8]
 800db6e:	e002      	b.n	800db76 <Expiration_Time_Blower_Control_PC_CMV+0x4a>
				}
				else
				{
					Blower_Signal( Blower_Signal);
 800db70:	4a19      	ldr	r2, [pc, #100]	; (800dbd8 <Expiration_Time_Blower_Control_PC_CMV+0xac>)
 800db72:	88fb      	ldrh	r3, [r7, #6]
 800db74:	6093      	str	r3, [r2, #8]
				}
		 }
		if(GRAPH_VALUES.pressure<= PEEP)
 800db76:	4b1a      	ldr	r3, [pc, #104]	; (800dbe0 <Expiration_Time_Blower_Control_PC_CMV+0xb4>)
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	ee07 3a90 	vmov	s15, r3
 800db7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db82:	ed97 7a00 	vldr	s14, [r7]
 800db86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db8e:	db14      	blt.n	800dbba <Expiration_Time_Blower_Control_PC_CMV+0x8e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 800db90:	4b14      	ldr	r3, [pc, #80]	; (800dbe4 <Expiration_Time_Blower_Control_PC_CMV+0xb8>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d106      	bne.n	800dba6 <Expiration_Time_Blower_Control_PC_CMV+0x7a>
			{
				Expiratory_Valve_Lock_Delay=CLOSED;
 800db98:	4b12      	ldr	r3, [pc, #72]	; (800dbe4 <Expiration_Time_Blower_Control_PC_CMV+0xb8>)
 800db9a:	2201      	movs	r2, #1
 800db9c:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Expiratory_Valve_Open_Time);
 800db9e:	88bb      	ldrh	r3, [r7, #4]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f00d fa53 	bl	801b04c <vTaskDelay>
			}
			Peep_Status=PEEP_ACHEIVED;
 800dba6:	4b0d      	ldr	r3, [pc, #52]	; (800dbdc <Expiration_Time_Blower_Control_PC_CMV+0xb0>)
 800dba8:	2201      	movs	r2, #1
 800dbaa:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 800dbac:	4b0e      	ldr	r3, [pc, #56]	; (800dbe8 <Expiration_Time_Blower_Control_PC_CMV+0xbc>)
 800dbae:	695b      	ldr	r3, [r3, #20]
 800dbb0:	4a0d      	ldr	r2, [pc, #52]	; (800dbe8 <Expiration_Time_Blower_Control_PC_CMV+0xbc>)
 800dbb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dbb6:	6153      	str	r3, [r2, #20]
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
		{
			ExpValve_OPEN();
		}
}
 800dbb8:	e009      	b.n	800dbce <Expiration_Time_Blower_Control_PC_CMV+0xa2>
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 800dbba:	4b08      	ldr	r3, [pc, #32]	; (800dbdc <Expiration_Time_Blower_Control_PC_CMV+0xb0>)
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d105      	bne.n	800dbce <Expiration_Time_Blower_Control_PC_CMV+0xa2>
			ExpValve_OPEN();
 800dbc2:	4b09      	ldr	r3, [pc, #36]	; (800dbe8 <Expiration_Time_Blower_Control_PC_CMV+0xbc>)
 800dbc4:	695b      	ldr	r3, [r3, #20]
 800dbc6:	4a08      	ldr	r2, [pc, #32]	; (800dbe8 <Expiration_Time_Blower_Control_PC_CMV+0xbc>)
 800dbc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dbcc:	6153      	str	r3, [r2, #20]
}
 800dbce:	bf00      	nop
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	40007400 	.word	0x40007400
 800dbdc:	20012a37 	.word	0x20012a37
 800dbe0:	200125f8 	.word	0x200125f8
 800dbe4:	20012a34 	.word	0x20012a34
 800dbe8:	40020400 	.word	0x40020400

0800dbec <PC_CMV_Inspiration_Time_Variables_Reset>:
/**
 * @brief PC_CMV_Inspiration_Time_Variables_Reset.
 * This function resets variables to start an inspiration cycle.
 * */
void PC_CMV_Inspiration_Time_Variables_Reset()
{
 800dbec:	b590      	push	{r4, r7, lr}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af02      	add	r7, sp, #8
	Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 800dbf2:	4b52      	ldr	r3, [pc, #328]	; (800dd3c <PC_CMV_Inspiration_Time_Variables_Reset+0x150>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	701a      	strb	r2, [r3, #0]
	Blower_Status       = BlOWER_ON;
 800dbf8:	4b51      	ldr	r3, [pc, #324]	; (800dd40 <PC_CMV_Inspiration_Time_Variables_Reset+0x154>)
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	701a      	strb	r2, [r3, #0]
	Find_Average_Flow();
 800dbfe:	f000 f943 	bl	800de88 <Find_Average_Flow>
	Breath_Count         = Count_The_Breath;
 800dc02:	4b50      	ldr	r3, [pc, #320]	; (800dd44 <PC_CMV_Inspiration_Time_Variables_Reset+0x158>)
 800dc04:	2201      	movs	r2, #1
 800dc06:	701a      	strb	r2, [r3, #0]
	Smooth_Ramp_Pressure();
 800dc08:	f000 f900 	bl	800de0c <Smooth_Ramp_Pressure>
	PIP_Not_Acheieved();
 800dc0c:	f000 f968 	bl	800dee0 <PIP_Not_Acheieved>
	ExpValve_CLOSE();
 800dc10:	4b4d      	ldr	r3, [pc, #308]	; (800dd48 <PC_CMV_Inspiration_Time_Variables_Reset+0x15c>)
 800dc12:	695b      	ldr	r3, [r3, #20]
 800dc14:	4a4c      	ldr	r2, [pc, #304]	; (800dd48 <PC_CMV_Inspiration_Time_Variables_Reset+0x15c>)
 800dc16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dc1a:	6153      	str	r3, [r2, #20]
	PIP_AVERAGE();
 800dc1c:	f7fb f884 	bl	8008d28 <PIP_AVERAGE>
	PEEP_AVERAGE();                                             //new
 800dc20:	f7fb f8a8 	bl	8008d74 <PEEP_AVERAGE>
	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 800dc24:	4b49      	ldr	r3, [pc, #292]	; (800dd4c <PC_CMV_Inspiration_Time_Variables_Reset+0x160>)
 800dc26:	78db      	ldrb	r3, [r3, #3]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7fe fe35 	bl	800c898 <O2_DAC_Control>
	Check_Alert();
 800dc2e:	f7f3 fa69 	bl	8001104 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 800dc32:	f7f3 fb1f 	bl	8001274 <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 800dc36:	f7f3 ffc5 	bl	8001bc4 <LED_Alert>
	Alert_Status                                              = NO_ALERT;
 800dc3a:	4b45      	ldr	r3, [pc, #276]	; (800dd50 <PC_CMV_Inspiration_Time_Variables_Reset+0x164>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	701a      	strb	r2, [r3, #0]
	GRAPH_VALUES.Maximum_oxygen_flow                          = 0;                        //new
 800dc40:	4b44      	ldr	r3, [pc, #272]	; (800dd54 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	829a      	strh	r2, [r3, #20]
	Sampled_Parameter_Inspiration_time();
 800dc46:	f004 fa1f 	bl	8012088 <Sampled_Parameter_Inspiration_time>
	if( (PC_CMV.PEEP_Val != PEEP_Maintain_Parameter.PEEP_AVG_VAL ) )
 800dc4a:	4b43      	ldr	r3, [pc, #268]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dc4c:	785a      	ldrb	r2, [r3, #1]
 800dc4e:	4b43      	ldr	r3, [pc, #268]	; (800dd5c <PC_CMV_Inspiration_Time_Variables_Reset+0x170>)
 800dc50:	7c1b      	ldrb	r3, [r3, #16]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d013      	beq.n	800dc7e <PC_CMV_Inspiration_Time_Variables_Reset+0x92>
	{
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time     = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,PC_CMV.RESPIRATORY_RATE_Val,PC_CMV.INSPIRATION_TIME,PC_CMV.PEEP_Val,PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 800dc56:	4b41      	ldr	r3, [pc, #260]	; (800dd5c <PC_CMV_Inspiration_Time_Variables_Reset+0x170>)
 800dc58:	7c18      	ldrb	r0, [r3, #16]
 800dc5a:	4b3f      	ldr	r3, [pc, #252]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dc5c:	7899      	ldrb	r1, [r3, #2]
 800dc5e:	4b3e      	ldr	r3, [pc, #248]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dc60:	689a      	ldr	r2, [r3, #8]
 800dc62:	4b3d      	ldr	r3, [pc, #244]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dc64:	785c      	ldrb	r4, [r3, #1]
 800dc66:	4b3d      	ldr	r3, [pc, #244]	; (800dd5c <PC_CMV_Inspiration_Time_Variables_Reset+0x170>)
 800dc68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	4623      	mov	r3, r4
 800dc72:	f7f9 fbcd 	bl	8007410 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Pressure_Mode>
 800dc76:	4603      	mov	r3, r0
 800dc78:	b21a      	sxth	r2, r3
 800dc7a:	4b38      	ldr	r3, [pc, #224]	; (800dd5c <PC_CMV_Inspiration_Time_Variables_Reset+0x170>)
 800dc7c:	809a      	strh	r2, [r3, #4]
	}
	INCREASE_EACH_DAC_SET_CONST(Common_Mode_Parameter._PIP_Val,PC_CMV.RISE_TIME_MS_Val);
 800dc7e:	4b33      	ldr	r3, [pc, #204]	; (800dd4c <PC_CMV_Inspiration_Time_Variables_Reset+0x160>)
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	4a35      	ldr	r2, [pc, #212]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dc84:	edd2 7a01 	vldr	s15, [r2, #4]
 800dc88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc8c:	ee17 2a90 	vmov	r2, s15
 800dc90:	b292      	uxth	r2, r2
 800dc92:	4611      	mov	r1, r2
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 fa15 	bl	800e0c4 <INCREASE_EACH_DAC_SET_CONST>
	BLOWER_ENDING_DAC_SIGNAL_TUNE(PC_CMV.PIP_Val,PC_CMV.INSPIRATION_TIME,PC_CMV.Rise_Time_percentage);
 800dc9a:	4b2f      	ldr	r3, [pc, #188]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	4a2e      	ldr	r2, [pc, #184]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dca0:	6891      	ldr	r1, [r2, #8]
 800dca2:	4a2d      	ldr	r2, [pc, #180]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dca4:	7cd2      	ldrb	r2, [r2, #19]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f000 fc68 	bl	800e57c <BLOWER_ENDING_DAC_SIGNAL_TUNE>
	BREATH_STATE                                               = INSPIRATION_CYCLE;
 800dcac:	4b2c      	ldr	r3, [pc, #176]	; (800dd60 <PC_CMV_Inspiration_Time_Variables_Reset+0x174>)
 800dcae:	2200      	movs	r2, #0
 800dcb0:	701a      	strb	r2, [r3, #0]
	Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 800dcb2:	4b2c      	ldr	r3, [pc, #176]	; (800dd64 <PC_CMV_Inspiration_Time_Variables_Reset+0x178>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			                   = OPENED;
 800dcb8:	4b2b      	ldr	r3, [pc, #172]	; (800dd68 <PC_CMV_Inspiration_Time_Variables_Reset+0x17c>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	701a      	strb	r2, [r3, #0]
	PIP_Status                    				               = PIP_NOT_ACHEIVED;
 800dcbe:	4b2b      	ldr	r3, [pc, #172]	; (800dd6c <PC_CMV_Inspiration_Time_Variables_Reset+0x180>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	701a      	strb	r2, [r3, #0]
	Set_PIP_Status                                             = SET_PIP_VALUE_NOT_ACHEIVED;
 800dcc4:	4b2a      	ldr	r3, [pc, #168]	; (800dd70 <PC_CMV_Inspiration_Time_Variables_Reset+0x184>)
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	701a      	strb	r2, [r3, #0]
	Read_Time_vs_Pressure                                      = READ_TIME_OPEN;
 800dcca:	4b2a      	ldr	r3, [pc, #168]	; (800dd74 <PC_CMV_Inspiration_Time_Variables_Reset+0x188>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.PIP_Control_Event_Occured                 = RESET;
 800dcd0:	4b29      	ldr	r3, [pc, #164]	; (800dd78 <PC_CMV_Inspiration_Time_Variables_Reset+0x18c>)
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	805a      	strh	r2, [r3, #2]
	PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 800dcd6:	4b29      	ldr	r3, [pc, #164]	; (800dd7c <PC_CMV_Inspiration_Time_Variables_Reset+0x190>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	701a      	strb	r2, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_DAC_VAL                = DAC_VAL(PC_CMV.PEEP_Val );
 800dcdc:	4b1e      	ldr	r3, [pc, #120]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dcde:	785b      	ldrb	r3, [r3, #1]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fb f993 	bl	800900c <DAC_VAL>
 800dce6:	4603      	mov	r3, r0
 800dce8:	461a      	mov	r2, r3
 800dcea:	4b25      	ldr	r3, [pc, #148]	; (800dd80 <PC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 800dcec:	801a      	strh	r2, [r3, #0]
	Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL           = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800dcee:	4b24      	ldr	r3, [pc, #144]	; (800dd80 <PC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 800dcf0:	881a      	ldrh	r2, [r3, #0]
 800dcf2:	4b23      	ldr	r3, [pc, #140]	; (800dd80 <PC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 800dcf4:	805a      	strh	r2, [r3, #2]
	TIME_Base_parameter._INSPIRATION_TIME                      = PC_CMV.INSPIRATION_TIME;
 800dcf6:	4b18      	ldr	r3, [pc, #96]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	4b21      	ldr	r3, [pc, #132]	; (800dd84 <PC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 800dcfe:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 800dd00:	4b20      	ldr	r3, [pc, #128]	; (800dd84 <PC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	609a      	str	r2, [r3, #8]
	PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = PIP_control_Task.Early_Acheived_Ramp_Time_Percentage;
 800dd06:	4b1c      	ldr	r3, [pc, #112]	; (800dd78 <PC_CMV_Inspiration_Time_Variables_Reset+0x18c>)
 800dd08:	7a1a      	ldrb	r2, [r3, #8]
 800dd0a:	4b1b      	ldr	r3, [pc, #108]	; (800dd78 <PC_CMV_Inspiration_Time_Variables_Reset+0x18c>)
 800dd0c:	725a      	strb	r2, [r3, #9]
	GRAPH_VALUES.volume                                        = RESET;
 800dd0e:	4b11      	ldr	r3, [pc, #68]	; (800dd54 <PC_CMV_Inspiration_Time_Variables_Reset+0x168>)
 800dd10:	f04f 0200 	mov.w	r2, #0
 800dd14:	609a      	str	r2, [r3, #8]
	Volume_max                                                 = RESET;
 800dd16:	4b1c      	ldr	r3, [pc, #112]	; (800dd88 <PC_CMV_Inspiration_Time_Variables_Reset+0x19c>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	601a      	str	r2, [r3, #0]
	Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 800dd1c:	4b1b      	ldr	r3, [pc, #108]	; (800dd8c <PC_CMV_Inspiration_Time_Variables_Reset+0x1a0>)
 800dd1e:	2201      	movs	r2, #1
 800dd20:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 800dd22:	4b1b      	ldr	r3, [pc, #108]	; (800dd90 <PC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 800dd24:	2201      	movs	r2, #1
 800dd26:	701a      	strb	r2, [r3, #0]
	vTaskDelay(PC_CMV.INSPIRATION_TIME);
 800dd28:	4b0b      	ldr	r3, [pc, #44]	; (800dd58 <PC_CMV_Inspiration_Time_Variables_Reset+0x16c>)
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f00d f98d 	bl	801b04c <vTaskDelay>
}
 800dd32:	bf00      	nop
 800dd34:	3704      	adds	r7, #4
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd90      	pop	{r4, r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	20012b71 	.word	0x20012b71
 800dd40:	20012828 	.word	0x20012828
 800dd44:	200122a8 	.word	0x200122a8
 800dd48:	40020400 	.word	0x40020400
 800dd4c:	200124f0 	.word	0x200124f0
 800dd50:	2001287c 	.word	0x2001287c
 800dd54:	200125f8 	.word	0x200125f8
 800dd58:	20012b1c 	.word	0x20012b1c
 800dd5c:	20012c74 	.word	0x20012c74
 800dd60:	20012a3c 	.word	0x20012a3c
 800dd64:	20012a37 	.word	0x20012a37
 800dd68:	20012a34 	.word	0x20012a34
 800dd6c:	200129f7 	.word	0x200129f7
 800dd70:	20012b34 	.word	0x20012b34
 800dd74:	20012d34 	.word	0x20012d34
 800dd78:	200123d0 	.word	0x200123d0
 800dd7c:	200124bc 	.word	0x200124bc
 800dd80:	20012978 	.word	0x20012978
 800dd84:	20012b38 	.word	0x20012b38
 800dd88:	20012c70 	.word	0x20012c70
 800dd8c:	2001269e 	.word	0x2001269e
 800dd90:	20012870 	.word	0x20012870

0800dd94 <PC_CMV_Expiration_Time_Variables_Reset>:
 * @brief PC_CMV_Expiration_Time_Variables_Reset.
 * This function resets variables to start an expiration cycle.
 * */

void PC_CMV_Expiration_Time_Variables_Reset()
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	af00      	add	r7, sp, #0
	BREATH_STATE                                        = EXPIRATION_CYCLE;
 800dd98:	4b15      	ldr	r3, [pc, #84]	; (800ddf0 <PC_CMV_Expiration_Time_Variables_Reset+0x5c>)
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 800dd9e:	4b15      	ldr	r3, [pc, #84]	; (800ddf4 <PC_CMV_Expiration_Time_Variables_Reset+0x60>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	615a      	str	r2, [r3, #20]
	PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 800dda4:	4b13      	ldr	r3, [pc, #76]	; (800ddf4 <PC_CMV_Expiration_Time_Variables_Reset+0x60>)
 800dda6:	2200      	movs	r2, #0
 800dda8:	619a      	str	r2, [r3, #24]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 800ddaa:	4b12      	ldr	r3, [pc, #72]	; (800ddf4 <PC_CMV_Expiration_Time_Variables_Reset+0x60>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 800ddb0:	4b10      	ldr	r3, [pc, #64]	; (800ddf4 <PC_CMV_Expiration_Time_Variables_Reset+0x60>)
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	60da      	str	r2, [r3, #12]
	Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 800ddb6:	4b10      	ldr	r3, [pc, #64]	; (800ddf8 <PC_CMV_Expiration_Time_Variables_Reset+0x64>)
 800ddb8:	78db      	ldrb	r3, [r3, #3]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fe fb78 	bl	800c4b0 <Calculate_O2>
	Alert_Expiration_Time_Parameter();
 800ddc0:	f7f3 fad2 	bl	8001368 <Alert_Expiration_Time_Parameter>
	TIME_Base_parameter._EXPIRATION_TIME                = PC_CMV.EXPIRATION_TIME;
 800ddc4:	4b0d      	ldr	r3, [pc, #52]	; (800ddfc <PC_CMV_Expiration_Time_Variables_Reset+0x68>)
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	4b0d      	ldr	r3, [pc, #52]	; (800de00 <PC_CMV_Expiration_Time_Variables_Reset+0x6c>)
 800ddcc:	605a      	str	r2, [r3, #4]
	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 800ddce:	4b0c      	ldr	r3, [pc, #48]	; (800de00 <PC_CMV_Expiration_Time_Variables_Reset+0x6c>)
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	60da      	str	r2, [r3, #12]
	Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 800ddd4:	4b0b      	ldr	r3, [pc, #44]	; (800de04 <PC_CMV_Expiration_Time_Variables_Reset+0x70>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 800ddda:	4b0b      	ldr	r3, [pc, #44]	; (800de08 <PC_CMV_Expiration_Time_Variables_Reset+0x74>)
 800dddc:	2202      	movs	r2, #2
 800ddde:	701a      	strb	r2, [r3, #0]
	vTaskDelay(PC_CMV.EXPIRATION_TIME);
 800dde0:	4b06      	ldr	r3, [pc, #24]	; (800ddfc <PC_CMV_Expiration_Time_Variables_Reset+0x68>)
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f00d f931 	bl	801b04c <vTaskDelay>
}
 800ddea:	bf00      	nop
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	20012a3c 	.word	0x20012a3c
 800ddf4:	20012c74 	.word	0x20012c74
 800ddf8:	200124f0 	.word	0x200124f0
 800ddfc:	20012b1c 	.word	0x20012b1c
 800de00:	20012b38 	.word	0x20012b38
 800de04:	2001269e 	.word	0x2001269e
 800de08:	20012870 	.word	0x20012870

0800de0c <Smooth_Ramp_Pressure>:
 * This function is used to provide a pressure value smoothly based on lung characteristics
 * */


static void Smooth_Ramp_Pressure()
{
 800de0c:	b480      	push	{r7}
 800de0e:	af00      	add	r7, sp, #0
	if(Smooth_Ramp_Time   == Smooth_Ramp_Time_Val_Pending)
 800de10:	4b18      	ldr	r3, [pc, #96]	; (800de74 <Smooth_Ramp_Pressure+0x68>)
 800de12:	781b      	ldrb	r3, [r3, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d128      	bne.n	800de6a <Smooth_Ramp_Pressure+0x5e>
	{
		if( (PC_CMV.PEEP_Val == PEEP_Maintain_Parameter.PEEP_AVG_VAL)  && (PC_CMV.PEEP_Val >= 9) && (PC_CMV.PEEP_Val <= 14) && (PC_CMV.PIP_Val >=30) )
 800de18:	4b17      	ldr	r3, [pc, #92]	; (800de78 <Smooth_Ramp_Pressure+0x6c>)
 800de1a:	785a      	ldrb	r2, [r3, #1]
 800de1c:	4b17      	ldr	r3, [pc, #92]	; (800de7c <Smooth_Ramp_Pressure+0x70>)
 800de1e:	7c1b      	ldrb	r3, [r3, #16]
 800de20:	429a      	cmp	r2, r3
 800de22:	d122      	bne.n	800de6a <Smooth_Ramp_Pressure+0x5e>
 800de24:	4b14      	ldr	r3, [pc, #80]	; (800de78 <Smooth_Ramp_Pressure+0x6c>)
 800de26:	785b      	ldrb	r3, [r3, #1]
 800de28:	2b08      	cmp	r3, #8
 800de2a:	d91e      	bls.n	800de6a <Smooth_Ramp_Pressure+0x5e>
 800de2c:	4b12      	ldr	r3, [pc, #72]	; (800de78 <Smooth_Ramp_Pressure+0x6c>)
 800de2e:	785b      	ldrb	r3, [r3, #1]
 800de30:	2b0e      	cmp	r3, #14
 800de32:	d81a      	bhi.n	800de6a <Smooth_Ramp_Pressure+0x5e>
 800de34:	4b10      	ldr	r3, [pc, #64]	; (800de78 <Smooth_Ramp_Pressure+0x6c>)
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	2b1d      	cmp	r3, #29
 800de3a:	d916      	bls.n	800de6a <Smooth_Ramp_Pressure+0x5e>
		{
			if(PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time  < 2)
 800de3c:	4b0f      	ldr	r3, [pc, #60]	; (800de7c <Smooth_Ramp_Pressure+0x70>)
 800de3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800de42:	2b01      	cmp	r3, #1
 800de44:	dc11      	bgt.n	800de6a <Smooth_Ramp_Pressure+0x5e>
			{
				if(Smooth_Ramp_Time_Val_Count > 2 )
 800de46:	4b0e      	ldr	r3, [pc, #56]	; (800de80 <Smooth_Ramp_Pressure+0x74>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	d907      	bls.n	800de5e <Smooth_Ramp_Pressure+0x52>
				{
					Smooth_Ramp_Time_Val = PC_CMV.PEEP_Val;
 800de4e:	4b0a      	ldr	r3, [pc, #40]	; (800de78 <Smooth_Ramp_Pressure+0x6c>)
 800de50:	785a      	ldrb	r2, [r3, #1]
 800de52:	4b0c      	ldr	r3, [pc, #48]	; (800de84 <Smooth_Ramp_Pressure+0x78>)
 800de54:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time     = Smooth_Ramp_Time_Val_Finished;
 800de56:	4b07      	ldr	r3, [pc, #28]	; (800de74 <Smooth_Ramp_Pressure+0x68>)
 800de58:	2201      	movs	r2, #1
 800de5a:	701a      	strb	r2, [r3, #0]
					Smooth_Ramp_Time_Val_Count++;
				}
			}
		}
    }
}
 800de5c:	e005      	b.n	800de6a <Smooth_Ramp_Pressure+0x5e>
					Smooth_Ramp_Time_Val_Count++;
 800de5e:	4b08      	ldr	r3, [pc, #32]	; (800de80 <Smooth_Ramp_Pressure+0x74>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	3301      	adds	r3, #1
 800de64:	b2da      	uxtb	r2, r3
 800de66:	4b06      	ldr	r3, [pc, #24]	; (800de80 <Smooth_Ramp_Pressure+0x74>)
 800de68:	701a      	strb	r2, [r3, #0]
}
 800de6a:	bf00      	nop
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr
 800de74:	200124ce 	.word	0x200124ce
 800de78:	20012b1c 	.word	0x20012b1c
 800de7c:	20012c74 	.word	0x20012c74
 800de80:	200129f6 	.word	0x200129f6
 800de84:	200129a1 	.word	0x200129a1

0800de88 <Find_Average_Flow>:
/**
 * @brief Find_Average_Flow.
 * This function is used to find the maximum flow delivered to the lungs in the oxygen blending concept.
 * */
void Find_Average_Flow()           //new
{
 800de88:	b480      	push	{r7}
 800de8a:	af00      	add	r7, sp, #0
	Avg_Flow   = Flow_Cummulative_Val/Flow_Count;
 800de8c:	4b11      	ldr	r3, [pc, #68]	; (800ded4 <Find_Average_Flow+0x4c>)
 800de8e:	edd3 6a00 	vldr	s13, [r3]
 800de92:	4b11      	ldr	r3, [pc, #68]	; (800ded8 <Find_Average_Flow+0x50>)
 800de94:	ed93 7a00 	vldr	s14, [r3]
 800de98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dea0:	ee17 3a90 	vmov	r3, s15
 800dea4:	b21a      	sxth	r2, r3
 800dea6:	4b0d      	ldr	r3, [pc, #52]	; (800dedc <Find_Average_Flow+0x54>)
 800dea8:	801a      	strh	r2, [r3, #0]

	if(Avg_Flow <=1)
 800deaa:	4b0c      	ldr	r3, [pc, #48]	; (800dedc <Find_Average_Flow+0x54>)
 800deac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	dc02      	bgt.n	800deba <Find_Average_Flow+0x32>
	{
		Avg_Flow = 1;
 800deb4:	4b09      	ldr	r3, [pc, #36]	; (800dedc <Find_Average_Flow+0x54>)
 800deb6:	2201      	movs	r2, #1
 800deb8:	801a      	strh	r2, [r3, #0]
	}
	Flow_Count =0;
 800deba:	4b07      	ldr	r3, [pc, #28]	; (800ded8 <Find_Average_Flow+0x50>)
 800debc:	f04f 0200 	mov.w	r2, #0
 800dec0:	601a      	str	r2, [r3, #0]
	Flow_Cummulative_Val =0;
 800dec2:	4b04      	ldr	r3, [pc, #16]	; (800ded4 <Find_Average_Flow+0x4c>)
 800dec4:	f04f 0200 	mov.w	r2, #0
 800dec8:	601a      	str	r2, [r3, #0]
}
 800deca:	bf00      	nop
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr
 800ded4:	200122f8 	.word	0x200122f8
 800ded8:	200128a0 	.word	0x200128a0
 800dedc:	2001283c 	.word	0x2001283c

0800dee0 <PIP_Not_Acheieved>:
 * @brief PIP_Not_Acheieved.
 * This Function used for debugging purpose.
 * */

void PIP_Not_Acheieved()
{
 800dee0:	b480      	push	{r7}
 800dee2:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
}
 800dee4:	bf00      	nop
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr

0800deee <PIP_Acheieved>:
/**
 * @brief PIP_Acheieved.
 * This Function used for debugging purpose.
 * */
void PIP_Acheieved()
{
 800deee:	b480      	push	{r7}
 800def0:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
}
 800def2:	bf00      	nop
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <PIP_Control_Task>:
 * @brief PIP_Control_Task.
 * This task controls the entire PIP during the inspiration time.
 * */

void PIP_Control_Task(void *argument)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 800df04:	4b1d      	ldr	r3, [pc, #116]	; (800df7c <PIP_Control_Task+0x80>)
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d130      	bne.n	800df6e <PIP_Control_Task+0x72>
		{

			if(GRAPH_VALUES.pressure >= 60)
 800df0c:	4b1c      	ldr	r3, [pc, #112]	; (800df80 <PIP_Control_Task+0x84>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	2b3b      	cmp	r3, #59	; 0x3b
 800df12:	d923      	bls.n	800df5c <PIP_Control_Task+0x60>
			{

				PIP_Status = PIP_ACHEIVED;
 800df14:	4b1b      	ldr	r3, [pc, #108]	; (800df84 <PIP_Control_Task+0x88>)
 800df16:	2201      	movs	r2, #1
 800df18:	701a      	strb	r2, [r3, #0]
				if(Read_Time_vs_Pressure==READ_TIME_OPEN)
 800df1a:	4b1b      	ldr	r3, [pc, #108]	; (800df88 <PIP_Control_Task+0x8c>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d115      	bne.n	800df4e <PIP_Control_Task+0x52>
				{
					PIP_Acheieved();
 800df22:	f7ff ffe4 	bl	800deee <PIP_Acheieved>
					PIP_control_Task.PIP_Acheived_Time_Ms       = (PIP_control_Task.PIP_Control_Event_Occured*PIP_control_Task.PIP_Control_Task_Delay);
 800df26:	4b19      	ldr	r3, [pc, #100]	; (800df8c <PIP_Control_Task+0x90>)
 800df28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	4b17      	ldr	r3, [pc, #92]	; (800df8c <PIP_Control_Task+0x90>)
 800df30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df34:	b29b      	uxth	r3, r3
 800df36:	fb12 f303 	smulbb	r3, r2, r3
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	b21a      	sxth	r2, r3
 800df3e:	4b13      	ldr	r3, [pc, #76]	; (800df8c <PIP_Control_Task+0x90>)
 800df40:	809a      	strh	r2, [r3, #4]
					Set_PIP_Status                              = SET_PIP_VALUE_ACHEIVED;
 800df42:	4b13      	ldr	r3, [pc, #76]	; (800df90 <PIP_Control_Task+0x94>)
 800df44:	2201      	movs	r2, #1
 800df46:	701a      	strb	r2, [r3, #0]
					Read_Time_vs_Pressure                       = READ_TIME_CLOSE;
 800df48:	4b0f      	ldr	r3, [pc, #60]	; (800df88 <PIP_Control_Task+0x8c>)
 800df4a:	2201      	movs	r2, #1
 800df4c:	701a      	strb	r2, [r3, #0]
				}


				Pressure_Mode_blower_control.BLOWER_DAC_VAL  = 0;
 800df4e:	4b11      	ldr	r3, [pc, #68]	; (800df94 <PIP_Control_Task+0x98>)
 800df50:	2200      	movs	r2, #0
 800df52:	801a      	strh	r2, [r3, #0]
				Blower_Status =BlOWER_OFF;
 800df54:	4b10      	ldr	r3, [pc, #64]	; (800df98 <PIP_Control_Task+0x9c>)
 800df56:	2201      	movs	r2, #1
 800df58:	701a      	strb	r2, [r3, #0]
 800df5a:	e008      	b.n	800df6e <PIP_Control_Task+0x72>
			}
			else
			{
				if(Blower_Status == BlOWER_ON)
 800df5c:	4b0e      	ldr	r3, [pc, #56]	; (800df98 <PIP_Control_Task+0x9c>)
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d104      	bne.n	800df6e <PIP_Control_Task+0x72>
				{
					PIP_Control(Common_Mode_Parameter._PIP_Val);
 800df64:	4b0d      	ldr	r3, [pc, #52]	; (800df9c <PIP_Control_Task+0xa0>)
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	4618      	mov	r0, r3
 800df6a:	f000 f819 	bl	800dfa0 <PIP_Control>
				}
			}

		}
		vTaskDelay(PIP_control_Task.PIP_Control_Task_Delay);
 800df6e:	4b07      	ldr	r3, [pc, #28]	; (800df8c <PIP_Control_Task+0x90>)
 800df70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df74:	4618      	mov	r0, r3
 800df76:	f00d f869 	bl	801b04c <vTaskDelay>
		if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 800df7a:	e7c3      	b.n	800df04 <PIP_Control_Task+0x8>
 800df7c:	20012870 	.word	0x20012870
 800df80:	200125f8 	.word	0x200125f8
 800df84:	200129f7 	.word	0x200129f7
 800df88:	20012d34 	.word	0x20012d34
 800df8c:	200123d0 	.word	0x200123d0
 800df90:	20012b34 	.word	0x20012b34
 800df94:	20012978 	.word	0x20012978
 800df98:	20012828 	.word	0x20012828
 800df9c:	200124f0 	.word	0x200124f0

0800dfa0 <PIP_Control>:
 * @brief PIP_Control_Task.
 * This function is the core logic of PIP control.
 * */

void PIP_Control(uint8_t PIP_VAL)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	71fb      	strb	r3, [r7, #7]
	PIP_control_Task.PIP_Control_Event_Occured++;
 800dfaa:	4b3e      	ldr	r3, [pc, #248]	; (800e0a4 <PIP_Control+0x104>)
 800dfac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	b21a      	sxth	r2, r3
 800dfb8:	4b3a      	ldr	r3, [pc, #232]	; (800e0a4 <PIP_Control+0x104>)
 800dfba:	805a      	strh	r2, [r3, #2]
	if (GRAPH_VALUES.pressure >= (PIP_VAL))
 800dfbc:	4b3a      	ldr	r3, [pc, #232]	; (800e0a8 <PIP_Control+0x108>)
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	79fa      	ldrb	r2, [r7, #7]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d821      	bhi.n	800e00a <PIP_Control+0x6a>
	{
		PIP_Status = PIP_ACHEIVED;
 800dfc6:	4b39      	ldr	r3, [pc, #228]	; (800e0ac <PIP_Control+0x10c>)
 800dfc8:	2201      	movs	r2, #1
 800dfca:	701a      	strb	r2, [r3, #0]
		if(Read_Time_vs_Pressure==READ_TIME_OPEN)
 800dfcc:	4b38      	ldr	r3, [pc, #224]	; (800e0b0 <PIP_Control+0x110>)
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d162      	bne.n	800e09a <PIP_Control+0xfa>
		{
			PIP_Acheieved();
 800dfd4:	f7ff ff8b 	bl	800deee <PIP_Acheieved>
			PIP_control_Task.PIP_Acheived_Time_Ms       = (PIP_control_Task.PIP_Control_Event_Occured*PIP_control_Task.PIP_Control_Task_Delay);
 800dfd8:	4b32      	ldr	r3, [pc, #200]	; (800e0a4 <PIP_Control+0x104>)
 800dfda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	4b30      	ldr	r3, [pc, #192]	; (800e0a4 <PIP_Control+0x104>)
 800dfe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfe6:	b29b      	uxth	r3, r3
 800dfe8:	fb12 f303 	smulbb	r3, r2, r3
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	b21a      	sxth	r2, r3
 800dff0:	4b2c      	ldr	r3, [pc, #176]	; (800e0a4 <PIP_Control+0x104>)
 800dff2:	809a      	strh	r2, [r3, #4]
			Pressure_Mode_blower_control.BLOWER_DAC_VAL = Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL;
 800dff4:	4b2f      	ldr	r3, [pc, #188]	; (800e0b4 <PIP_Control+0x114>)
 800dff6:	885a      	ldrh	r2, [r3, #2]
 800dff8:	4b2e      	ldr	r3, [pc, #184]	; (800e0b4 <PIP_Control+0x114>)
 800dffa:	801a      	strh	r2, [r3, #0]
			Set_PIP_Status                              = SET_PIP_VALUE_ACHEIVED;
 800dffc:	4b2e      	ldr	r3, [pc, #184]	; (800e0b8 <PIP_Control+0x118>)
 800dffe:	2201      	movs	r2, #1
 800e000:	701a      	strb	r2, [r3, #0]
			Read_Time_vs_Pressure                       = READ_TIME_CLOSE;
 800e002:	4b2b      	ldr	r3, [pc, #172]	; (800e0b0 <PIP_Control+0x110>)
 800e004:	2201      	movs	r2, #1
 800e006:	701a      	strb	r2, [r3, #0]
			if(Pressure_Mode_blower_control.BLOWER_DAC_VAL >=4095)
				Pressure_Mode_blower_control.BLOWER_DAC_VAL=4095;

		}
	}
}
 800e008:	e047      	b.n	800e09a <PIP_Control+0xfa>
	else if (PIP_Status == PIP_NOT_ACHEIVED)
 800e00a:	4b28      	ldr	r3, [pc, #160]	; (800e0ac <PIP_Control+0x10c>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d143      	bne.n	800e09a <PIP_Control+0xfa>
		if (Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL >= Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL)
 800e012:	4b28      	ldr	r3, [pc, #160]	; (800e0b4 <PIP_Control+0x114>)
 800e014:	885a      	ldrh	r2, [r3, #2]
 800e016:	4b27      	ldr	r3, [pc, #156]	; (800e0b4 <PIP_Control+0x114>)
 800e018:	891b      	ldrh	r3, [r3, #8]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d307      	bcc.n	800e02e <PIP_Control+0x8e>
			Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL;
 800e01e:	4b25      	ldr	r3, [pc, #148]	; (800e0b4 <PIP_Control+0x114>)
 800e020:	891a      	ldrh	r2, [r3, #8]
 800e022:	4b24      	ldr	r3, [pc, #144]	; (800e0b4 <PIP_Control+0x114>)
 800e024:	805a      	strh	r2, [r3, #2]
			PIP_Status = PIP_ACHEIVED;
 800e026:	4b21      	ldr	r3, [pc, #132]	; (800e0ac <PIP_Control+0x10c>)
 800e028:	2201      	movs	r2, #1
 800e02a:	701a      	strb	r2, [r3, #0]
}
 800e02c:	e035      	b.n	800e09a <PIP_Control+0xfa>
		else if (Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL < Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL)
 800e02e:	4b21      	ldr	r3, [pc, #132]	; (800e0b4 <PIP_Control+0x114>)
 800e030:	885a      	ldrh	r2, [r3, #2]
 800e032:	4b20      	ldr	r3, [pc, #128]	; (800e0b4 <PIP_Control+0x114>)
 800e034:	891b      	ldrh	r3, [r3, #8]
 800e036:	429a      	cmp	r2, r3
 800e038:	d22f      	bcs.n	800e09a <PIP_Control+0xfa>
			Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800e03a:	4b1e      	ldr	r3, [pc, #120]	; (800e0b4 <PIP_Control+0x114>)
 800e03c:	881a      	ldrh	r2, [r3, #0]
 800e03e:	4b1d      	ldr	r3, [pc, #116]	; (800e0b4 <PIP_Control+0x114>)
 800e040:	805a      	strh	r2, [r3, #2]
			Pressure_Mode_blower_control.BLOWER_DAC_VAL      = (Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL + (PIP_control_Task.Increase_Each_DAC_SET_CONST ));
 800e042:	4b1c      	ldr	r3, [pc, #112]	; (800e0b4 <PIP_Control+0x114>)
 800e044:	885a      	ldrh	r2, [r3, #2]
 800e046:	4b17      	ldr	r3, [pc, #92]	; (800e0a4 <PIP_Control+0x104>)
 800e048:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	4413      	add	r3, r2
 800e050:	b29a      	uxth	r2, r3
 800e052:	4b18      	ldr	r3, [pc, #96]	; (800e0b4 <PIP_Control+0x114>)
 800e054:	801a      	strh	r2, [r3, #0]
			if( (Common_Mode_Parameter._PEEP_Val >= Smooth_Ramp_Time_Val) && (Common_Mode_Parameter._PIP_Val  >=30) )
 800e056:	4b19      	ldr	r3, [pc, #100]	; (800e0bc <PIP_Control+0x11c>)
 800e058:	785a      	ldrb	r2, [r3, #1]
 800e05a:	4b19      	ldr	r3, [pc, #100]	; (800e0c0 <PIP_Control+0x120>)
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d311      	bcc.n	800e086 <PIP_Control+0xe6>
 800e062:	4b16      	ldr	r3, [pc, #88]	; (800e0bc <PIP_Control+0x11c>)
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	2b1d      	cmp	r3, #29
 800e068:	d90d      	bls.n	800e086 <PIP_Control+0xe6>
				if (Pressure_Mode_blower_control.BLOWER_DAC_VAL >= Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL)
 800e06a:	4b12      	ldr	r3, [pc, #72]	; (800e0b4 <PIP_Control+0x114>)
 800e06c:	881a      	ldrh	r2, [r3, #0]
 800e06e:	4b11      	ldr	r3, [pc, #68]	; (800e0b4 <PIP_Control+0x114>)
 800e070:	891b      	ldrh	r3, [r3, #8]
 800e072:	429a      	cmp	r2, r3
 800e074:	d307      	bcc.n	800e086 <PIP_Control+0xe6>
					Pressure_Mode_blower_control.BLOWER_DAC_VAL      = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL;
 800e076:	4b0f      	ldr	r3, [pc, #60]	; (800e0b4 <PIP_Control+0x114>)
 800e078:	891a      	ldrh	r2, [r3, #8]
 800e07a:	4b0e      	ldr	r3, [pc, #56]	; (800e0b4 <PIP_Control+0x114>)
 800e07c:	801a      	strh	r2, [r3, #0]
					Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800e07e:	4b0d      	ldr	r3, [pc, #52]	; (800e0b4 <PIP_Control+0x114>)
 800e080:	881a      	ldrh	r2, [r3, #0]
 800e082:	4b0c      	ldr	r3, [pc, #48]	; (800e0b4 <PIP_Control+0x114>)
 800e084:	805a      	strh	r2, [r3, #2]
			if(Pressure_Mode_blower_control.BLOWER_DAC_VAL >=4095)
 800e086:	4b0b      	ldr	r3, [pc, #44]	; (800e0b4 <PIP_Control+0x114>)
 800e088:	881b      	ldrh	r3, [r3, #0]
 800e08a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800e08e:	4293      	cmp	r3, r2
 800e090:	d903      	bls.n	800e09a <PIP_Control+0xfa>
				Pressure_Mode_blower_control.BLOWER_DAC_VAL=4095;
 800e092:	4b08      	ldr	r3, [pc, #32]	; (800e0b4 <PIP_Control+0x114>)
 800e094:	f640 72ff 	movw	r2, #4095	; 0xfff
 800e098:	801a      	strh	r2, [r3, #0]
}
 800e09a:	bf00      	nop
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	200123d0 	.word	0x200123d0
 800e0a8:	200125f8 	.word	0x200125f8
 800e0ac:	200129f7 	.word	0x200129f7
 800e0b0:	20012d34 	.word	0x20012d34
 800e0b4:	20012978 	.word	0x20012978
 800e0b8:	20012b34 	.word	0x20012b34
 800e0bc:	200124f0 	.word	0x200124f0
 800e0c0:	200129a1 	.word	0x200129a1

0800e0c4 <INCREASE_EACH_DAC_SET_CONST>:
 * @brief INCREASE_EACH_DAC_SET_CONST.
 * This function controls the ramptime of pip.
 * */

void INCREASE_EACH_DAC_SET_CONST(uint8_t PIP_VAL, uint16_t Rise_Time_MS)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	460a      	mov	r2, r1
 800e0ce:	71fb      	strb	r3, [r7, #7]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	80bb      	strh	r3, [r7, #4]
	if(PIP_control_Task.PIP_Acheived_Time_Ms <=  (Rise_Time_MS-50) )
 800e0d4:	88bb      	ldrh	r3, [r7, #4]
 800e0d6:	3b31      	subs	r3, #49	; 0x31
 800e0d8:	4a0f      	ldr	r2, [pc, #60]	; (800e118 <INCREASE_EACH_DAC_SET_CONST+0x54>)
 800e0da:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	dd06      	ble.n	800e0f0 <INCREASE_EACH_DAC_SET_CONST+0x2c>
	{
		PIP_ACHEIVED_EARLY(PIP_VAL,Rise_Time_MS);
 800e0e2:	88ba      	ldrh	r2, [r7, #4]
 800e0e4:	79fb      	ldrb	r3, [r7, #7]
 800e0e6:	4611      	mov	r1, r2
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f000 f817 	bl	800e11c <PIP_ACHEIVED_EARLY>
 800e0ee:	e00d      	b.n	800e10c <INCREASE_EACH_DAC_SET_CONST+0x48>
	}
	else if(PIP_control_Task.PIP_Acheived_Time_Ms >=  (Rise_Time_MS+50) )
 800e0f0:	88bb      	ldrh	r3, [r7, #4]
 800e0f2:	3331      	adds	r3, #49	; 0x31
 800e0f4:	4a08      	ldr	r2, [pc, #32]	; (800e118 <INCREASE_EACH_DAC_SET_CONST+0x54>)
 800e0f6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	da04      	bge.n	800e108 <INCREASE_EACH_DAC_SET_CONST+0x44>
	{
		PIP_ACHEIVED_SLOWLY(Rise_Time_MS);
 800e0fe:	88bb      	ldrh	r3, [r7, #4]
 800e100:	4618      	mov	r0, r3
 800e102:	f000 f91d 	bl	800e340 <PIP_ACHEIVED_SLOWLY>
 800e106:	e001      	b.n	800e10c <INCREASE_EACH_DAC_SET_CONST+0x48>
	}
	else
	{
		PIP_ACHEIVED_NORMALY();
 800e108:	f000 f9f2 	bl	800e4f0 <PIP_ACHEIVED_NORMALY>
	}

	    _PIP_NOT_ACHEIVED();
 800e10c:	f000 f9fe 	bl	800e50c <_PIP_NOT_ACHEIVED>
}
 800e110:	bf00      	nop
 800e112:	3708      	adds	r7, #8
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	200123d0 	.word	0x200123d0

0800e11c <PIP_ACHEIVED_EARLY>:
/**
 * @brief PIP_ACHEIVED_EARLY.
 * This function controls the ramp time of PIP because the PIP is achieved earlier than the set ramp time.
 * */
void PIP_ACHEIVED_EARLY(uint8_t PIP_VAL,uint16_t Rise_Time_MS)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b083      	sub	sp, #12
 800e120:	af00      	add	r7, sp, #0
 800e122:	4603      	mov	r3, r0
 800e124:	460a      	mov	r2, r1
 800e126:	71fb      	strb	r3, [r7, #7]
 800e128:	4613      	mov	r3, r2
 800e12a:	80bb      	strh	r3, [r7, #4]
	if(Set_PIP_Status == SET_PIP_VALUE_NOT_ACHEIVED)
 800e12c:	4b7c      	ldr	r3, [pc, #496]	; (800e320 <PIP_ACHEIVED_EARLY+0x204>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	f000 80ee 	beq.w	800e312 <PIP_ACHEIVED_EARLY+0x1f6>
	{

	}
	else
	{
		PIP_control_Task.Early_Acheived_Ramp_Time_Percentage = (uint16_t) (  (PIP_control_Task.PIP_Acheived_Time_Ms  / ((float)Rise_Time_MS)) * 100);
 800e136:	4b7b      	ldr	r3, [pc, #492]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e138:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e13c:	ee07 3a90 	vmov	s15, r3
 800e140:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e144:	88bb      	ldrh	r3, [r7, #4]
 800e146:	ee07 3a90 	vmov	s15, r3
 800e14a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e14e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e152:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800e328 <PIP_ACHEIVED_EARLY+0x20c>
 800e156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e15a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e15e:	ee17 3a90 	vmov	r3, s15
 800e162:	b29b      	uxth	r3, r3
 800e164:	b2da      	uxtb	r2, r3
 800e166:	4b6f      	ldr	r3, [pc, #444]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e168:	721a      	strb	r2, [r3, #8]

		if(PIP_control_Task.Early_Acheived_Ramp_Time_Percentage <= 70)
 800e16a:	4b6e      	ldr	r3, [pc, #440]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e16c:	7a1b      	ldrb	r3, [r3, #8]
 800e16e:	2b46      	cmp	r3, #70	; 0x46
 800e170:	d819      	bhi.n	800e1a6 <PIP_ACHEIVED_EARLY+0x8a>
		{
			PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST - 5 );
 800e172:	4b6c      	ldr	r3, [pc, #432]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e174:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e178:	b29b      	uxth	r3, r3
 800e17a:	3b05      	subs	r3, #5
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	b21a      	sxth	r2, r3
 800e180:	4b68      	ldr	r3, [pc, #416]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e182:	80da      	strh	r2, [r3, #6]
			    if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_1)
 800e184:	4b67      	ldr	r3, [pc, #412]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e186:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e18a:	461a      	mov	r2, r3
 800e18c:	4b67      	ldr	r3, [pc, #412]	; (800e32c <PIP_ACHEIVED_EARLY+0x210>)
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	429a      	cmp	r2, r3
 800e192:	dc4b      	bgt.n	800e22c <PIP_ACHEIVED_EARLY+0x110>
			    {
			    	PIP_control_Task.Increase_Each_DAC_SET_CONST = Minimum_Inc_Value_1;
 800e194:	4b65      	ldr	r3, [pc, #404]	; (800e32c <PIP_ACHEIVED_EARLY+0x210>)
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	b21a      	sxth	r2, r3
 800e19a:	4b62      	ldr	r3, [pc, #392]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e19c:	80da      	strh	r2, [r3, #6]
			    	Need_PID_Task_Delay                          = YES;
 800e19e:	4b64      	ldr	r3, [pc, #400]	; (800e330 <PIP_ACHEIVED_EARLY+0x214>)
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	701a      	strb	r2, [r3, #0]
 800e1a4:	e042      	b.n	800e22c <PIP_ACHEIVED_EARLY+0x110>
			    }
		}

		else if(  (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage <= 80) && (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage > 70) )
 800e1a6:	4b5f      	ldr	r3, [pc, #380]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e1a8:	7a1b      	ldrb	r3, [r3, #8]
 800e1aa:	2b50      	cmp	r3, #80	; 0x50
 800e1ac:	d81d      	bhi.n	800e1ea <PIP_ACHEIVED_EARLY+0xce>
 800e1ae:	4b5d      	ldr	r3, [pc, #372]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e1b0:	7a1b      	ldrb	r3, [r3, #8]
 800e1b2:	2b46      	cmp	r3, #70	; 0x46
 800e1b4:	d919      	bls.n	800e1ea <PIP_ACHEIVED_EARLY+0xce>
		{
			PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST - 2 );
 800e1b6:	4b5b      	ldr	r3, [pc, #364]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e1b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	3b02      	subs	r3, #2
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	b21a      	sxth	r2, r3
 800e1c4:	4b57      	ldr	r3, [pc, #348]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e1c6:	80da      	strh	r2, [r3, #6]
		    if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_1)
 800e1c8:	4b56      	ldr	r3, [pc, #344]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e1ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	4b56      	ldr	r3, [pc, #344]	; (800e32c <PIP_ACHEIVED_EARLY+0x210>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	dc29      	bgt.n	800e22c <PIP_ACHEIVED_EARLY+0x110>
		    {
		    	PIP_control_Task.Increase_Each_DAC_SET_CONST = Minimum_Inc_Value_1;
 800e1d8:	4b54      	ldr	r3, [pc, #336]	; (800e32c <PIP_ACHEIVED_EARLY+0x210>)
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	b21a      	sxth	r2, r3
 800e1de:	4b51      	ldr	r3, [pc, #324]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e1e0:	80da      	strh	r2, [r3, #6]
		    	Need_PID_Task_Delay                          = YES;
 800e1e2:	4b53      	ldr	r3, [pc, #332]	; (800e330 <PIP_ACHEIVED_EARLY+0x214>)
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	701a      	strb	r2, [r3, #0]
		    if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_1)
 800e1e8:	e020      	b.n	800e22c <PIP_ACHEIVED_EARLY+0x110>
		    }
		}

		else if(  (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage <= 90) && (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage > 80) )
 800e1ea:	4b4e      	ldr	r3, [pc, #312]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e1ec:	7a1b      	ldrb	r3, [r3, #8]
 800e1ee:	2b5a      	cmp	r3, #90	; 0x5a
 800e1f0:	d81c      	bhi.n	800e22c <PIP_ACHEIVED_EARLY+0x110>
 800e1f2:	4b4c      	ldr	r3, [pc, #304]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e1f4:	7a1b      	ldrb	r3, [r3, #8]
 800e1f6:	2b50      	cmp	r3, #80	; 0x50
 800e1f8:	d918      	bls.n	800e22c <PIP_ACHEIVED_EARLY+0x110>
		{
			PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST - 1 );
 800e1fa:	4b4a      	ldr	r3, [pc, #296]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e1fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e200:	b29b      	uxth	r3, r3
 800e202:	3b01      	subs	r3, #1
 800e204:	b29b      	uxth	r3, r3
 800e206:	b21a      	sxth	r2, r3
 800e208:	4b46      	ldr	r3, [pc, #280]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e20a:	80da      	strh	r2, [r3, #6]

		    if(PIP_control_Task.Increase_Each_DAC_SET_CONST <= Minimum_Inc_Value_1)
 800e20c:	4b45      	ldr	r3, [pc, #276]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e20e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e212:	461a      	mov	r2, r3
 800e214:	4b45      	ldr	r3, [pc, #276]	; (800e32c <PIP_ACHEIVED_EARLY+0x210>)
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	429a      	cmp	r2, r3
 800e21a:	dc07      	bgt.n	800e22c <PIP_ACHEIVED_EARLY+0x110>
		    {
		    	PIP_control_Task.Increase_Each_DAC_SET_CONST = Minimum_Inc_Value_1;
 800e21c:	4b43      	ldr	r3, [pc, #268]	; (800e32c <PIP_ACHEIVED_EARLY+0x210>)
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	b21a      	sxth	r2, r3
 800e222:	4b40      	ldr	r3, [pc, #256]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e224:	80da      	strh	r2, [r3, #6]
		    	Need_PID_Task_Delay                          = YES;
 800e226:	4b42      	ldr	r3, [pc, #264]	; (800e330 <PIP_ACHEIVED_EARLY+0x214>)
 800e228:	2201      	movs	r2, #1
 800e22a:	701a      	strb	r2, [r3, #0]
		    }
		}



		if(Need_PID_Task_Delay == YES)
 800e22c:	4b40      	ldr	r3, [pc, #256]	; (800e330 <PIP_ACHEIVED_EARLY+0x214>)
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d16e      	bne.n	800e312 <PIP_ACHEIVED_EARLY+0x1f6>
		{
			if(PIP_Average_Parameter.Maximum_PIP_Acheived  < PIP_VAL)
 800e234:	4b3f      	ldr	r3, [pc, #252]	; (800e334 <PIP_ACHEIVED_EARLY+0x218>)
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	79fa      	ldrb	r2, [r7, #7]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d915      	bls.n	800e26a <PIP_ACHEIVED_EARLY+0x14e>
			{
				PIP_control_Task.Low_PIP_Count++;
 800e23e:	4b39      	ldr	r3, [pc, #228]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e240:	7a9b      	ldrb	r3, [r3, #10]
 800e242:	3301      	adds	r3, #1
 800e244:	b2da      	uxtb	r2, r3
 800e246:	4b37      	ldr	r3, [pc, #220]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e248:	729a      	strb	r2, [r3, #10]
				 if(PIP_control_Task.Low_PIP_Count>=5)
 800e24a:	4b36      	ldr	r3, [pc, #216]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e24c:	7a9b      	ldrb	r3, [r3, #10]
 800e24e:	2b04      	cmp	r3, #4
 800e250:	d95f      	bls.n	800e312 <PIP_ACHEIVED_EARLY+0x1f6>
				 {
					PIP_control_Task.PIP_Control_Task_Delay = PIP_control_Task.PIP_Control_Task_Delay;
 800e252:	4b34      	ldr	r3, [pc, #208]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e254:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e258:	4b32      	ldr	r3, [pc, #200]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e25a:	801a      	strh	r2, [r3, #0]
					PIP_control_Task.Low_PIP_Count=6;
 800e25c:	4b31      	ldr	r3, [pc, #196]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e25e:	2206      	movs	r2, #6
 800e260:	729a      	strb	r2, [r3, #10]
					Tune_PID_Task_Delay = T_LOCK;
 800e262:	4b35      	ldr	r3, [pc, #212]	; (800e338 <PIP_ACHEIVED_EARLY+0x21c>)
 800e264:	2201      	movs	r2, #1
 800e266:	701a      	strb	r2, [r3, #0]
				}
			}
		}

	}
}
 800e268:	e053      	b.n	800e312 <PIP_ACHEIVED_EARLY+0x1f6>
			else if(PIP_control_Task.Early_Acheived_Ramp_Time_Percentage  >= PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage)
 800e26a:	4b2e      	ldr	r3, [pc, #184]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e26c:	7a1a      	ldrb	r2, [r3, #8]
 800e26e:	4b2d      	ldr	r3, [pc, #180]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e270:	7a5b      	ldrb	r3, [r3, #9]
 800e272:	429a      	cmp	r2, r3
 800e274:	d34d      	bcc.n	800e312 <PIP_ACHEIVED_EARLY+0x1f6>
				if(Tune_PID_Task_Delay == T_OPEN)
 800e276:	4b30      	ldr	r3, [pc, #192]	; (800e338 <PIP_ACHEIVED_EARLY+0x21c>)
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d149      	bne.n	800e312 <PIP_ACHEIVED_EARLY+0x1f6>
					  if(PIP_control_Task.Early_Acheived_Ramp_Time_Percentage<60)
 800e27e:	4b29      	ldr	r3, [pc, #164]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e280:	7a1b      	ldrb	r3, [r3, #8]
 800e282:	2b3b      	cmp	r3, #59	; 0x3b
 800e284:	d809      	bhi.n	800e29a <PIP_ACHEIVED_EARLY+0x17e>
						  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay+10);
 800e286:	4b27      	ldr	r3, [pc, #156]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	330a      	adds	r3, #10
 800e290:	b29b      	uxth	r3, r3
 800e292:	b21a      	sxth	r2, r3
 800e294:	4b23      	ldr	r3, [pc, #140]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e296:	801a      	strh	r2, [r3, #0]
 800e298:	e02b      	b.n	800e2f2 <PIP_ACHEIVED_EARLY+0x1d6>
					  else if( (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage<70) && (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage>=60) )
 800e29a:	4b22      	ldr	r3, [pc, #136]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e29c:	7a1b      	ldrb	r3, [r3, #8]
 800e29e:	2b45      	cmp	r3, #69	; 0x45
 800e2a0:	d80d      	bhi.n	800e2be <PIP_ACHEIVED_EARLY+0x1a2>
 800e2a2:	4b20      	ldr	r3, [pc, #128]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e2a4:	7a1b      	ldrb	r3, [r3, #8]
 800e2a6:	2b3b      	cmp	r3, #59	; 0x3b
 800e2a8:	d909      	bls.n	800e2be <PIP_ACHEIVED_EARLY+0x1a2>
						  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay+6);
 800e2aa:	4b1e      	ldr	r3, [pc, #120]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e2ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	3306      	adds	r3, #6
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	b21a      	sxth	r2, r3
 800e2b8:	4b1a      	ldr	r3, [pc, #104]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e2ba:	801a      	strh	r2, [r3, #0]
 800e2bc:	e019      	b.n	800e2f2 <PIP_ACHEIVED_EARLY+0x1d6>
					  else if( (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage<=80) && (PIP_control_Task.Early_Acheived_Ramp_Time_Percentage=70) )
 800e2be:	4b19      	ldr	r3, [pc, #100]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e2c0:	7a1b      	ldrb	r3, [r3, #8]
 800e2c2:	2b50      	cmp	r3, #80	; 0x50
 800e2c4:	d80c      	bhi.n	800e2e0 <PIP_ACHEIVED_EARLY+0x1c4>
 800e2c6:	4b17      	ldr	r3, [pc, #92]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e2c8:	2246      	movs	r2, #70	; 0x46
 800e2ca:	721a      	strb	r2, [r3, #8]
						  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay+4);
 800e2cc:	4b15      	ldr	r3, [pc, #84]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e2ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	3304      	adds	r3, #4
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	b21a      	sxth	r2, r3
 800e2da:	4b12      	ldr	r3, [pc, #72]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e2dc:	801a      	strh	r2, [r3, #0]
 800e2de:	e008      	b.n	800e2f2 <PIP_ACHEIVED_EARLY+0x1d6>
						  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay+1);
 800e2e0:	4b10      	ldr	r3, [pc, #64]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e2e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	b21a      	sxth	r2, r3
 800e2ee:	4b0d      	ldr	r3, [pc, #52]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e2f0:	801a      	strh	r2, [r3, #0]
					  if( PIP_control_Task.PIP_Control_Task_Delay>=Maximum_Time_Limit)
 800e2f2:	4b0c      	ldr	r3, [pc, #48]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e2f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	4b10      	ldr	r3, [pc, #64]	; (800e33c <PIP_ACHEIVED_EARLY+0x220>)
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	db07      	blt.n	800e312 <PIP_ACHEIVED_EARLY+0x1f6>
						  PIP_control_Task.PIP_Control_Task_Delay = Maximum_Time_Limit;
 800e302:	4b0e      	ldr	r3, [pc, #56]	; (800e33c <PIP_ACHEIVED_EARLY+0x220>)
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	b21a      	sxth	r2, r3
 800e308:	4b06      	ldr	r3, [pc, #24]	; (800e324 <PIP_ACHEIVED_EARLY+0x208>)
 800e30a:	801a      	strh	r2, [r3, #0]
						  Need_PID_Task_Delay = NO;
 800e30c:	4b08      	ldr	r3, [pc, #32]	; (800e330 <PIP_ACHEIVED_EARLY+0x214>)
 800e30e:	2200      	movs	r2, #0
 800e310:	701a      	strb	r2, [r3, #0]
}
 800e312:	bf00      	nop
 800e314:	370c      	adds	r7, #12
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop
 800e320:	20012b34 	.word	0x20012b34
 800e324:	200123d0 	.word	0x200123d0
 800e328:	42c80000 	.word	0x42c80000
 800e32c:	20000014 	.word	0x20000014
 800e330:	20012a38 	.word	0x20012a38
 800e334:	200124bc 	.word	0x200124bc
 800e338:	20012620 	.word	0x20012620
 800e33c:	20000017 	.word	0x20000017

0800e340 <PIP_ACHEIVED_SLOWLY>:
/**
 * @brief PIP_ACHEIVED_SLOWLY.
 * This function controls the ramp time of PIP because the PIP is achieved slower than the set ramp time.
 * */
void PIP_ACHEIVED_SLOWLY(uint16_t Rise_Time_MS)
{
 800e340:	b480      	push	{r7}
 800e342:	b083      	sub	sp, #12
 800e344:	af00      	add	r7, sp, #0
 800e346:	4603      	mov	r3, r0
 800e348:	80fb      	strh	r3, [r7, #6]
	PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage = (uint16_t) ((  PIP_control_Task.PIP_Acheived_Time_Ms  / ((float)Rise_Time_MS) ) * 100);
 800e34a:	4b64      	ldr	r3, [pc, #400]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e34c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e350:	ee07 3a90 	vmov	s15, r3
 800e354:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e358:	88fb      	ldrh	r3, [r7, #6]
 800e35a:	ee07 3a90 	vmov	s15, r3
 800e35e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e366:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800e4e0 <PIP_ACHEIVED_SLOWLY+0x1a0>
 800e36a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e36e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e372:	ee17 3a90 	vmov	r3, s15
 800e376:	b29a      	uxth	r2, r3
 800e378:	4b58      	ldr	r3, [pc, #352]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e37a:	819a      	strh	r2, [r3, #12]


	if( (Tune_PID_Task_Delay == T_OPEN) && (Need_PID_Task_Delay == YES) )                  // new
 800e37c:	4b59      	ldr	r3, [pc, #356]	; (800e4e4 <PIP_ACHEIVED_SLOWLY+0x1a4>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d14c      	bne.n	800e41e <PIP_ACHEIVED_SLOWLY+0xde>
 800e384:	4b58      	ldr	r3, [pc, #352]	; (800e4e8 <PIP_ACHEIVED_SLOWLY+0x1a8>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d148      	bne.n	800e41e <PIP_ACHEIVED_SLOWLY+0xde>
	{
		  if(PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage>130)
 800e38c:	4b53      	ldr	r3, [pc, #332]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e38e:	899b      	ldrh	r3, [r3, #12]
 800e390:	2b82      	cmp	r3, #130	; 0x82
 800e392:	d909      	bls.n	800e3a8 <PIP_ACHEIVED_SLOWLY+0x68>
		  {
			  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay-10);
 800e394:	4b51      	ldr	r3, [pc, #324]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	3b0a      	subs	r3, #10
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	b21a      	sxth	r2, r3
 800e3a2:	4b4e      	ldr	r3, [pc, #312]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3a4:	801a      	strh	r2, [r3, #0]
 800e3a6:	e02b      	b.n	800e400 <PIP_ACHEIVED_SLOWLY+0xc0>
		  }
		  else if( (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage<130) && (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage>120) )
 800e3a8:	4b4c      	ldr	r3, [pc, #304]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3aa:	899b      	ldrh	r3, [r3, #12]
 800e3ac:	2b81      	cmp	r3, #129	; 0x81
 800e3ae:	d80d      	bhi.n	800e3cc <PIP_ACHEIVED_SLOWLY+0x8c>
 800e3b0:	4b4a      	ldr	r3, [pc, #296]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3b2:	899b      	ldrh	r3, [r3, #12]
 800e3b4:	2b78      	cmp	r3, #120	; 0x78
 800e3b6:	d909      	bls.n	800e3cc <PIP_ACHEIVED_SLOWLY+0x8c>
		  {
			  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay-6);
 800e3b8:	4b48      	ldr	r3, [pc, #288]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	3b06      	subs	r3, #6
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	b21a      	sxth	r2, r3
 800e3c6:	4b45      	ldr	r3, [pc, #276]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3c8:	801a      	strh	r2, [r3, #0]
 800e3ca:	e019      	b.n	800e400 <PIP_ACHEIVED_SLOWLY+0xc0>
		  }
		  else if( (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage<=120) && (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage=110) )
 800e3cc:	4b43      	ldr	r3, [pc, #268]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3ce:	899b      	ldrh	r3, [r3, #12]
 800e3d0:	2b78      	cmp	r3, #120	; 0x78
 800e3d2:	d80c      	bhi.n	800e3ee <PIP_ACHEIVED_SLOWLY+0xae>
 800e3d4:	4b41      	ldr	r3, [pc, #260]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3d6:	226e      	movs	r2, #110	; 0x6e
 800e3d8:	819a      	strh	r2, [r3, #12]
		  {
			  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay-4);
 800e3da:	4b40      	ldr	r3, [pc, #256]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	3b04      	subs	r3, #4
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	b21a      	sxth	r2, r3
 800e3e8:	4b3c      	ldr	r3, [pc, #240]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3ea:	801a      	strh	r2, [r3, #0]
 800e3ec:	e008      	b.n	800e400 <PIP_ACHEIVED_SLOWLY+0xc0>
		  }
		  else
		  {
			  PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay-1);
 800e3ee:	4b3b      	ldr	r3, [pc, #236]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	b21a      	sxth	r2, r3
 800e3fc:	4b37      	ldr	r3, [pc, #220]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e3fe:	801a      	strh	r2, [r3, #0]
		  }

		  if( PIP_control_Task.PIP_Control_Task_Delay<=10)
 800e400:	4b36      	ldr	r3, [pc, #216]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e402:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e406:	2b0a      	cmp	r3, #10
 800e408:	dc62      	bgt.n	800e4d0 <PIP_ACHEIVED_SLOWLY+0x190>
		  {
			  PIP_control_Task.PIP_Control_Task_Delay = 10;
 800e40a:	4b34      	ldr	r3, [pc, #208]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e40c:	220a      	movs	r2, #10
 800e40e:	801a      	strh	r2, [r3, #0]
			  Need_PID_Task_Delay = NO;
 800e410:	4b35      	ldr	r3, [pc, #212]	; (800e4e8 <PIP_ACHEIVED_SLOWLY+0x1a8>)
 800e412:	2200      	movs	r2, #0
 800e414:	701a      	strb	r2, [r3, #0]
			  Tune_PID_Task_Delay = T_OPEN;
 800e416:	4b33      	ldr	r3, [pc, #204]	; (800e4e4 <PIP_ACHEIVED_SLOWLY+0x1a4>)
 800e418:	2200      	movs	r2, #0
 800e41a:	701a      	strb	r2, [r3, #0]
		  if( PIP_control_Task.PIP_Control_Task_Delay<=10)
 800e41c:	e058      	b.n	800e4d0 <PIP_ACHEIVED_SLOWLY+0x190>


	}
	else
	{
		if( (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage >= 130)  )
 800e41e:	4b2f      	ldr	r3, [pc, #188]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e420:	899b      	ldrh	r3, [r3, #12]
 800e422:	2b81      	cmp	r3, #129	; 0x81
 800e424:	d916      	bls.n	800e454 <PIP_ACHEIVED_SLOWLY+0x114>
		{
			PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST + 5 );
 800e426:	4b2d      	ldr	r3, [pc, #180]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e428:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	3305      	adds	r3, #5
 800e430:	b29b      	uxth	r3, r3
 800e432:	b21a      	sxth	r2, r3
 800e434:	4b29      	ldr	r3, [pc, #164]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e436:	80da      	strh	r2, [r3, #6]
			if(PIP_control_Task.Increase_Each_DAC_SET_CONST >= Maximum_Inc_Value)
 800e438:	4b28      	ldr	r3, [pc, #160]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e43a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e43e:	461a      	mov	r2, r3
 800e440:	4b2a      	ldr	r3, [pc, #168]	; (800e4ec <PIP_ACHEIVED_SLOWLY+0x1ac>)
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	429a      	cmp	r2, r3
 800e446:	db43      	blt.n	800e4d0 <PIP_ACHEIVED_SLOWLY+0x190>
			{
				PIP_control_Task.Increase_Each_DAC_SET_CONST = Maximum_Inc_Value;
 800e448:	4b28      	ldr	r3, [pc, #160]	; (800e4ec <PIP_ACHEIVED_SLOWLY+0x1ac>)
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	b21a      	sxth	r2, r3
 800e44e:	4b23      	ldr	r3, [pc, #140]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e450:	80da      	strh	r2, [r3, #6]
		}
	}



}
 800e452:	e03d      	b.n	800e4d0 <PIP_ACHEIVED_SLOWLY+0x190>
		else if(  (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage> 120) && (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage <130) )
 800e454:	4b21      	ldr	r3, [pc, #132]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e456:	899b      	ldrh	r3, [r3, #12]
 800e458:	2b78      	cmp	r3, #120	; 0x78
 800e45a:	d91a      	bls.n	800e492 <PIP_ACHEIVED_SLOWLY+0x152>
 800e45c:	4b1f      	ldr	r3, [pc, #124]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e45e:	899b      	ldrh	r3, [r3, #12]
 800e460:	2b81      	cmp	r3, #129	; 0x81
 800e462:	d816      	bhi.n	800e492 <PIP_ACHEIVED_SLOWLY+0x152>
			PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST + 2 );
 800e464:	4b1d      	ldr	r3, [pc, #116]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e466:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	3302      	adds	r3, #2
 800e46e:	b29b      	uxth	r3, r3
 800e470:	b21a      	sxth	r2, r3
 800e472:	4b1a      	ldr	r3, [pc, #104]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e474:	80da      	strh	r2, [r3, #6]
			if(PIP_control_Task.Increase_Each_DAC_SET_CONST >= Maximum_Inc_Value)
 800e476:	4b19      	ldr	r3, [pc, #100]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e478:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e47c:	461a      	mov	r2, r3
 800e47e:	4b1b      	ldr	r3, [pc, #108]	; (800e4ec <PIP_ACHEIVED_SLOWLY+0x1ac>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	429a      	cmp	r2, r3
 800e484:	db24      	blt.n	800e4d0 <PIP_ACHEIVED_SLOWLY+0x190>
				PIP_control_Task.Increase_Each_DAC_SET_CONST = Maximum_Inc_Value;
 800e486:	4b19      	ldr	r3, [pc, #100]	; (800e4ec <PIP_ACHEIVED_SLOWLY+0x1ac>)
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	b21a      	sxth	r2, r3
 800e48c:	4b13      	ldr	r3, [pc, #76]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e48e:	80da      	strh	r2, [r3, #6]
			if(PIP_control_Task.Increase_Each_DAC_SET_CONST >= Maximum_Inc_Value)
 800e490:	e01e      	b.n	800e4d0 <PIP_ACHEIVED_SLOWLY+0x190>
		else if( (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage<=120) && (PIP_control_Task.Slowly_Acheived_Ramp_Time_Percentage >= 110) )
 800e492:	4b12      	ldr	r3, [pc, #72]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e494:	899b      	ldrh	r3, [r3, #12]
 800e496:	2b78      	cmp	r3, #120	; 0x78
 800e498:	d81a      	bhi.n	800e4d0 <PIP_ACHEIVED_SLOWLY+0x190>
 800e49a:	4b10      	ldr	r3, [pc, #64]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e49c:	899b      	ldrh	r3, [r3, #12]
 800e49e:	2b6d      	cmp	r3, #109	; 0x6d
 800e4a0:	d916      	bls.n	800e4d0 <PIP_ACHEIVED_SLOWLY+0x190>
			PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST + 1 );
 800e4a2:	4b0e      	ldr	r3, [pc, #56]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e4a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4a8:	b29b      	uxth	r3, r3
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	b21a      	sxth	r2, r3
 800e4b0:	4b0a      	ldr	r3, [pc, #40]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e4b2:	80da      	strh	r2, [r3, #6]
			if(PIP_control_Task.Increase_Each_DAC_SET_CONST >= Maximum_Inc_Value)
 800e4b4:	4b09      	ldr	r3, [pc, #36]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e4b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	4b0b      	ldr	r3, [pc, #44]	; (800e4ec <PIP_ACHEIVED_SLOWLY+0x1ac>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	db05      	blt.n	800e4d0 <PIP_ACHEIVED_SLOWLY+0x190>
				PIP_control_Task.Increase_Each_DAC_SET_CONST = Maximum_Inc_Value;
 800e4c4:	4b09      	ldr	r3, [pc, #36]	; (800e4ec <PIP_ACHEIVED_SLOWLY+0x1ac>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	b21a      	sxth	r2, r3
 800e4ca:	4b04      	ldr	r3, [pc, #16]	; (800e4dc <PIP_ACHEIVED_SLOWLY+0x19c>)
 800e4cc:	80da      	strh	r2, [r3, #6]
}
 800e4ce:	e7ff      	b.n	800e4d0 <PIP_ACHEIVED_SLOWLY+0x190>
 800e4d0:	bf00      	nop
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr
 800e4dc:	200123d0 	.word	0x200123d0
 800e4e0:	42c80000 	.word	0x42c80000
 800e4e4:	20012620 	.word	0x20012620
 800e4e8:	20012a38 	.word	0x20012a38
 800e4ec:	20000015 	.word	0x20000015

0800e4f0 <PIP_ACHEIVED_NORMALY>:
/**
 * @brief PIP_ACHEIVED_NORMALY.
 * This function works fine when ramp time witin a set value.
 * */
void PIP_ACHEIVED_NORMALY()
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	af00      	add	r7, sp, #0
	PIP_control_Task.Increase_Each_DAC_SET_CONST = PIP_control_Task.Increase_Each_DAC_SET_CONST;
 800e4f4:	4b04      	ldr	r3, [pc, #16]	; (800e508 <PIP_ACHEIVED_NORMALY+0x18>)
 800e4f6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e4fa:	4b03      	ldr	r3, [pc, #12]	; (800e508 <PIP_ACHEIVED_NORMALY+0x18>)
 800e4fc:	80da      	strh	r2, [r3, #6]
}
 800e4fe:	bf00      	nop
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	200123d0 	.word	0x200123d0

0800e50c <_PIP_NOT_ACHEIVED>:
/**
 * @brief _PIP_NOT_ACHEIVED.
 * This function checks and controls whether the set PIP has been achieved or not.
 * */
void _PIP_NOT_ACHEIVED()
{
 800e50c:	b480      	push	{r7}
 800e50e:	af00      	add	r7, sp, #0
	if(Set_PIP_Status == SET_PIP_VALUE_NOT_ACHEIVED)
 800e510:	4b17      	ldr	r3, [pc, #92]	; (800e570 <_PIP_NOT_ACHEIVED+0x64>)
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d126      	bne.n	800e566 <_PIP_NOT_ACHEIVED+0x5a>
	{
		PIP_control_Task.Increase_Each_DAC_SET_CONST = (PIP_control_Task.Increase_Each_DAC_SET_CONST + 1 );
 800e518:	4b16      	ldr	r3, [pc, #88]	; (800e574 <_PIP_NOT_ACHEIVED+0x68>)
 800e51a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	3301      	adds	r3, #1
 800e522:	b29b      	uxth	r3, r3
 800e524:	b21a      	sxth	r2, r3
 800e526:	4b13      	ldr	r3, [pc, #76]	; (800e574 <_PIP_NOT_ACHEIVED+0x68>)
 800e528:	80da      	strh	r2, [r3, #6]
		if(PIP_control_Task.Increase_Each_DAC_SET_CONST >= Maximum_Inc_Value)
 800e52a:	4b12      	ldr	r3, [pc, #72]	; (800e574 <_PIP_NOT_ACHEIVED+0x68>)
 800e52c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e530:	461a      	mov	r2, r3
 800e532:	4b11      	ldr	r3, [pc, #68]	; (800e578 <_PIP_NOT_ACHEIVED+0x6c>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	429a      	cmp	r2, r3
 800e538:	db04      	blt.n	800e544 <_PIP_NOT_ACHEIVED+0x38>
		{
			PIP_control_Task.Increase_Each_DAC_SET_CONST = Maximum_Inc_Value;
 800e53a:	4b0f      	ldr	r3, [pc, #60]	; (800e578 <_PIP_NOT_ACHEIVED+0x6c>)
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	b21a      	sxth	r2, r3
 800e540:	4b0c      	ldr	r3, [pc, #48]	; (800e574 <_PIP_NOT_ACHEIVED+0x68>)
 800e542:	80da      	strh	r2, [r3, #6]

		}

		 PIP_control_Task.PIP_Control_Task_Delay = (PIP_control_Task.PIP_Control_Task_Delay-1);
 800e544:	4b0b      	ldr	r3, [pc, #44]	; (800e574 <_PIP_NOT_ACHEIVED+0x68>)
 800e546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	3b01      	subs	r3, #1
 800e54e:	b29b      	uxth	r3, r3
 800e550:	b21a      	sxth	r2, r3
 800e552:	4b08      	ldr	r3, [pc, #32]	; (800e574 <_PIP_NOT_ACHEIVED+0x68>)
 800e554:	801a      	strh	r2, [r3, #0]
		  if( PIP_control_Task.PIP_Control_Task_Delay<=10)
 800e556:	4b07      	ldr	r3, [pc, #28]	; (800e574 <_PIP_NOT_ACHEIVED+0x68>)
 800e558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e55c:	2b0a      	cmp	r3, #10
 800e55e:	dc02      	bgt.n	800e566 <_PIP_NOT_ACHEIVED+0x5a>
		  {
			  PIP_control_Task.PIP_Control_Task_Delay = 10;
 800e560:	4b04      	ldr	r3, [pc, #16]	; (800e574 <_PIP_NOT_ACHEIVED+0x68>)
 800e562:	220a      	movs	r2, #10
 800e564:	801a      	strh	r2, [r3, #0]
		  }
	}
}
 800e566:	bf00      	nop
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr
 800e570:	20012b34 	.word	0x20012b34
 800e574:	200123d0 	.word	0x200123d0
 800e578:	20000015 	.word	0x20000015

0800e57c <BLOWER_ENDING_DAC_SIGNAL_TUNE>:
/**
 * @brief BLOWER_ENDING_DAC_SIGNAL_TUNE.
 * This function controls the ending DAC value to maintain the PIP.
 * */
void BLOWER_ENDING_DAC_SIGNAL_TUNE(uint8_t PIP_VAL,uint32_t Inspiration_Time,uint8_t Rise_Time_Percent)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b083      	sub	sp, #12
 800e580:	af00      	add	r7, sp, #0
 800e582:	4603      	mov	r3, r0
 800e584:	6039      	str	r1, [r7, #0]
 800e586:	71fb      	strb	r3, [r7, #7]
 800e588:	4613      	mov	r3, r2
 800e58a:	71bb      	strb	r3, [r7, #6]
	if(Inspiration_Time<=800 || Rise_Time_Percent>=85 )
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800e592:	d902      	bls.n	800e59a <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e>
 800e594:	79bb      	ldrb	r3, [r7, #6]
 800e596:	2b54      	cmp	r3, #84	; 0x54
 800e598:	d976      	bls.n	800e688 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x10c>
    {
		    if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+1))   //new
 800e59a:	4b6d      	ldr	r3, [pc, #436]	; (800e750 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d4>)
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	dd2f      	ble.n	800e608 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x8c>
			{
		    	count1++;
 800e5a8:	4b6a      	ldr	r3, [pc, #424]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	4b68      	ldr	r3, [pc, #416]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e5b2:	701a      	strb	r2, [r3, #0]
		    	count2=0;
 800e5b4:	4b68      	ldr	r3, [pc, #416]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	701a      	strb	r2, [r3, #0]
		    	if(count1>2)
 800e5ba:	4b66      	ldr	r3, [pc, #408]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	2b02      	cmp	r3, #2
 800e5c0:	f240 80be 	bls.w	800e740 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c4>
		    	{
		    		if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+3))
 800e5c4:	4b62      	ldr	r3, [pc, #392]	; (800e750 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d4>)
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	79fb      	ldrb	r3, [r7, #7]
 800e5cc:	3303      	adds	r3, #3
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	dd06      	ble.n	800e5e0 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x64>
		    		{
		    			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL=(Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL-20);
 800e5d2:	4b62      	ldr	r3, [pc, #392]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e5d4:	891b      	ldrh	r3, [r3, #8]
 800e5d6:	3b14      	subs	r3, #20
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	4b60      	ldr	r3, [pc, #384]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e5dc:	811a      	strh	r2, [r3, #8]
 800e5de:	e005      	b.n	800e5ec <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x70>
		    		}
		    		else
		    		{
		    			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL=(Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL-5);
 800e5e0:	4b5e      	ldr	r3, [pc, #376]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e5e2:	891b      	ldrh	r3, [r3, #8]
 800e5e4:	3b05      	subs	r3, #5
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	4b5c      	ldr	r3, [pc, #368]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e5ea:	811a      	strh	r2, [r3, #8]
		    		}

		    		count1=0;
 800e5ec:	4b59      	ldr	r3, [pc, #356]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	701a      	strb	r2, [r3, #0]
					if(Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL<=500)
 800e5f2:	4b5a      	ldr	r3, [pc, #360]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e5f4:	891b      	ldrh	r3, [r3, #8]
 800e5f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e5fa:	f200 80a1 	bhi.w	800e740 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c4>
					{
						Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL=500;
 800e5fe:	4b57      	ldr	r3, [pc, #348]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e600:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e604:	811a      	strh	r2, [r3, #8]
		    if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+1))   //new
 800e606:	e09b      	b.n	800e740 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c4>
					}
		    	}
			}
			else if(PIP_Average_Parameter.Maximum_PIP_Acheived < PIP_VAL)
 800e608:	4b51      	ldr	r3, [pc, #324]	; (800e750 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d4>)
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	79fa      	ldrb	r2, [r7, #7]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d92f      	bls.n	800e672 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0xf6>
			{
				count2++;
 800e612:	4b51      	ldr	r3, [pc, #324]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	3301      	adds	r3, #1
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	4b4f      	ldr	r3, [pc, #316]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e61c:	701a      	strb	r2, [r3, #0]
				count1=0;
 800e61e:	4b4d      	ldr	r3, [pc, #308]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e620:	2200      	movs	r2, #0
 800e622:	701a      	strb	r2, [r3, #0]
				if(count2>2)
 800e624:	4b4c      	ldr	r3, [pc, #304]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b02      	cmp	r3, #2
 800e62a:	f240 8089 	bls.w	800e740 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c4>
				{
					if(PIP_Average_Parameter.Maximum_PIP_Acheived < (PIP_VAL-3))
 800e62e:	4b48      	ldr	r3, [pc, #288]	; (800e750 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d4>)
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	461a      	mov	r2, r3
 800e634:	79fb      	ldrb	r3, [r7, #7]
 800e636:	3b03      	subs	r3, #3
 800e638:	429a      	cmp	r2, r3
 800e63a:	da06      	bge.n	800e64a <BLOWER_ENDING_DAC_SIGNAL_TUNE+0xce>
					{
						Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL=Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL+20;
 800e63c:	4b47      	ldr	r3, [pc, #284]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e63e:	891b      	ldrh	r3, [r3, #8]
 800e640:	3314      	adds	r3, #20
 800e642:	b29a      	uxth	r2, r3
 800e644:	4b45      	ldr	r3, [pc, #276]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e646:	811a      	strh	r2, [r3, #8]
 800e648:	e005      	b.n	800e656 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0xda>
					}
					else
					{
						Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL=Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL+5;
 800e64a:	4b44      	ldr	r3, [pc, #272]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e64c:	891b      	ldrh	r3, [r3, #8]
 800e64e:	3305      	adds	r3, #5
 800e650:	b29a      	uxth	r2, r3
 800e652:	4b42      	ldr	r3, [pc, #264]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e654:	811a      	strh	r2, [r3, #8]
					}

				    count2=0;
 800e656:	4b40      	ldr	r3, [pc, #256]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e658:	2200      	movs	r2, #0
 800e65a:	701a      	strb	r2, [r3, #0]
						if(  Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL  >= 4095)
 800e65c:	4b3f      	ldr	r3, [pc, #252]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e65e:	891b      	ldrh	r3, [r3, #8]
 800e660:	f640 72fe 	movw	r2, #4094	; 0xffe
 800e664:	4293      	cmp	r3, r2
 800e666:	d96b      	bls.n	800e740 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c4>
						{
							Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = 4095;
 800e668:	4b3c      	ldr	r3, [pc, #240]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e66a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800e66e:	811a      	strh	r2, [r3, #8]
		    if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+1))   //new
 800e670:	e066      	b.n	800e740 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c4>
						}
				}
			}
			else
			{
				count1=0;
 800e672:	4b38      	ldr	r3, [pc, #224]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e674:	2200      	movs	r2, #0
 800e676:	701a      	strb	r2, [r3, #0]
				count2=0;
 800e678:	4b37      	ldr	r3, [pc, #220]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	701a      	strb	r2, [r3, #0]
				Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL;
 800e67e:	4b37      	ldr	r3, [pc, #220]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e680:	891a      	ldrh	r2, [r3, #8]
 800e682:	4b36      	ldr	r3, [pc, #216]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e684:	811a      	strh	r2, [r3, #8]
		    if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+1))   //new
 800e686:	e05b      	b.n	800e740 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c4>
			}
    }

 else
 {
	if(PIP_Average_Parameter.PIP_AVG_VAL > (PIP_VAL ))
 800e688:	4b31      	ldr	r3, [pc, #196]	; (800e750 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d4>)
 800e68a:	7b1b      	ldrb	r3, [r3, #12]
 800e68c:	79fa      	ldrb	r2, [r7, #7]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d222      	bcs.n	800e6d8 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x15c>
	{
		count1++;
 800e692:	4b30      	ldr	r3, [pc, #192]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	3301      	adds	r3, #1
 800e698:	b2da      	uxtb	r2, r3
 800e69a:	4b2e      	ldr	r3, [pc, #184]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e69c:	701a      	strb	r2, [r3, #0]
		count2=0;
 800e69e:	4b2e      	ldr	r3, [pc, #184]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	701a      	strb	r2, [r3, #0]
		if(count1>0)
 800e6a4:	4b2b      	ldr	r3, [pc, #172]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d04a      	beq.n	800e742 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c6>
		{
			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = (Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL-Deviation);
 800e6ac:	4b2b      	ldr	r3, [pc, #172]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e6ae:	891a      	ldrh	r2, [r3, #8]
 800e6b0:	4b2b      	ldr	r3, [pc, #172]	; (800e760 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e4>)
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	1ad3      	subs	r3, r2, r3
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	4b28      	ldr	r3, [pc, #160]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e6bc:	811a      	strh	r2, [r3, #8]
			count1=0;
 800e6be:	4b25      	ldr	r3, [pc, #148]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	701a      	strb	r2, [r3, #0]
			if(Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL<=500)
 800e6c4:	4b25      	ldr	r3, [pc, #148]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e6c6:	891b      	ldrh	r3, [r3, #8]
 800e6c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e6cc:	d839      	bhi.n	800e742 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c6>
				Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL=500;
 800e6ce:	4b23      	ldr	r3, [pc, #140]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e6d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e6d4:	811a      	strh	r2, [r3, #8]
		count1=0;
		count2=0;
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL;
	}
 }
}
 800e6d6:	e034      	b.n	800e742 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c6>
	else if(PIP_Average_Parameter.PIP_AVG_VAL < (PIP_VAL) )
 800e6d8:	4b1d      	ldr	r3, [pc, #116]	; (800e750 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d4>)
 800e6da:	7b1b      	ldrb	r3, [r3, #12]
 800e6dc:	79fa      	ldrb	r2, [r7, #7]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d923      	bls.n	800e72a <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1ae>
		count2++;
 800e6e2:	4b1d      	ldr	r3, [pc, #116]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	b2da      	uxtb	r2, r3
 800e6ea:	4b1b      	ldr	r3, [pc, #108]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e6ec:	701a      	strb	r2, [r3, #0]
		count1=0;
 800e6ee:	4b19      	ldr	r3, [pc, #100]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	701a      	strb	r2, [r3, #0]
		if(count2>0)
 800e6f4:	4b18      	ldr	r3, [pc, #96]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d022      	beq.n	800e742 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c6>
			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = (Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL+Deviation);
 800e6fc:	4b17      	ldr	r3, [pc, #92]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e6fe:	891a      	ldrh	r2, [r3, #8]
 800e700:	4b17      	ldr	r3, [pc, #92]	; (800e760 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e4>)
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	b29b      	uxth	r3, r3
 800e706:	4413      	add	r3, r2
 800e708:	b29a      	uxth	r2, r3
 800e70a:	4b14      	ldr	r3, [pc, #80]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e70c:	811a      	strh	r2, [r3, #8]
			count2=0;
 800e70e:	4b12      	ldr	r3, [pc, #72]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e710:	2200      	movs	r2, #0
 800e712:	701a      	strb	r2, [r3, #0]
			if(Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL >= 4095)
 800e714:	4b11      	ldr	r3, [pc, #68]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e716:	891b      	ldrh	r3, [r3, #8]
 800e718:	f640 72fe 	movw	r2, #4094	; 0xffe
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d910      	bls.n	800e742 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c6>
				Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = 4095;
 800e720:	4b0e      	ldr	r3, [pc, #56]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e722:	f640 72ff 	movw	r2, #4095	; 0xfff
 800e726:	811a      	strh	r2, [r3, #8]
}
 800e728:	e00b      	b.n	800e742 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c6>
		count1=0;
 800e72a:	4b0a      	ldr	r3, [pc, #40]	; (800e754 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1d8>)
 800e72c:	2200      	movs	r2, #0
 800e72e:	701a      	strb	r2, [r3, #0]
		count2=0;
 800e730:	4b09      	ldr	r3, [pc, #36]	; (800e758 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1dc>)
 800e732:	2200      	movs	r2, #0
 800e734:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL;
 800e736:	4b09      	ldr	r3, [pc, #36]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e738:	891a      	ldrh	r2, [r3, #8]
 800e73a:	4b08      	ldr	r3, [pc, #32]	; (800e75c <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1e0>)
 800e73c:	811a      	strh	r2, [r3, #8]
}
 800e73e:	e000      	b.n	800e742 <BLOWER_ENDING_DAC_SIGNAL_TUNE+0x1c6>
		    if(PIP_Average_Parameter.Maximum_PIP_Acheived > (PIP_VAL+1))   //new
 800e740:	bf00      	nop
}
 800e742:	bf00      	nop
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	200124bc 	.word	0x200124bc
 800e754:	20012a3a 	.word	0x20012a3a
 800e758:	200122e0 	.word	0x200122e0
 800e75c:	20012978 	.word	0x20012978
 800e760:	20000016 	.word	0x20000016

0800e764 <PSV_Mode_Packet_Data>:
void High_Oxygen_Achieved_PSV(uint8_t ,uint8_t);
void Oxygen_PEEP();


void PSV_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
	 PSV.PRESSURE_SUPPORT_Val             = Receive_Graph_Packet->PIP_PS_Phigh;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	791b      	ldrb	r3, [r3, #4]
 800e770:	b29a      	uxth	r2, r3
 800e772:	4b40      	ldr	r3, [pc, #256]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e774:	801a      	strh	r2, [r3, #0]
	 PSV.PEEP_Val                         = Receive_Graph_Packet->PEEP_CPAP_Plow;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	795a      	ldrb	r2, [r3, #5]
 800e77a:	4b3e      	ldr	r3, [pc, #248]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e77c:	709a      	strb	r2, [r3, #2]

	 PSV.TRIG_TYPE                        = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	78db      	ldrb	r3, [r3, #3]
 800e782:	099b      	lsrs	r3, r3, #6
 800e784:	b2db      	uxtb	r3, r3
 800e786:	b29b      	uxth	r3, r3
 800e788:	f003 0301 	and.w	r3, r3, #1
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	4b39      	ldr	r3, [pc, #228]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e790:	809a      	strh	r2, [r3, #4]
	 PSV.TRIG_LMT                         = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	7c1b      	ldrb	r3, [r3, #16]
 800e796:	4a38      	ldr	r2, [pc, #224]	; (800e878 <PSV_Mode_Packet_Data+0x114>)
 800e798:	fba2 2303 	umull	r2, r3, r2, r3
 800e79c:	08db      	lsrs	r3, r3, #3
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	ee07 3a90 	vmov	s15, r3
 800e7a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7a8:	4b32      	ldr	r3, [pc, #200]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e7aa:	edc3 7a02 	vstr	s15, [r3, #8]
	 PSV.TRIG_TIME                        = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	7bdb      	ldrb	r3, [r3, #15]
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	0092      	lsls	r2, r2, #2
 800e7b8:	4413      	add	r3, r2
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	0091      	lsls	r1, r2, #2
 800e7be:	461a      	mov	r2, r3
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	4413      	add	r3, r2
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	4b2a      	ldr	r3, [pc, #168]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e7ca:	819a      	strh	r2, [r3, #12]

	 PSV.APNEA_TIME                       = Receive_Graph_Packet->Apnea_Time;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	7b9b      	ldrb	r3, [r3, #14]
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	4b28      	ldr	r3, [pc, #160]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e7d4:	829a      	strh	r2, [r3, #20]
	 PSV.APNEA_COUNTER                    = (1000*PSV.APNEA_TIME) ;
 800e7d6:	4b27      	ldr	r3, [pc, #156]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e7d8:	8a9b      	ldrh	r3, [r3, #20]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e7e0:	fb03 f302 	mul.w	r3, r3, r2
 800e7e4:	4a23      	ldr	r2, [pc, #140]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e7e6:	6193      	str	r3, [r2, #24]

	 PSV.PSV_O2_Val                       = Receive_Graph_Packet->FiO2;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	7a1b      	ldrb	r3, [r3, #8]
 800e7ec:	461a      	mov	r2, r3
 800e7ee:	4b21      	ldr	r3, [pc, #132]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e7f0:	61da      	str	r2, [r3, #28]
	 PSV.VENT_TYPE                        = ( 0x80 & (Receive_Graph_Packet->Vent_Type_Min_O2)) >> 7;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	7c5b      	ldrb	r3, [r3, #17]
 800e7f6:	09db      	lsrs	r3, r3, #7
 800e7f8:	b2da      	uxtb	r2, r3
 800e7fa:	4b1e      	ldr	r3, [pc, #120]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e7fc:	f883 2020 	strb.w	r2, [r3, #32]

	 OOM202.offset_minimum                 = ( 0x7F & (Receive_Graph_Packet->Vent_Type_Min_O2));
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	7c5b      	ldrb	r3, [r3, #17]
 800e804:	b29b      	uxth	r3, r3
 800e806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	4b1b      	ldr	r3, [pc, #108]	; (800e87c <PSV_Mode_Packet_Data+0x118>)
 800e80e:	805a      	strh	r2, [r3, #2]
	 OOM202.offset_maximum                 = Receive_Graph_Packet->Max_O2;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	7c9b      	ldrb	r3, [r3, #18]
 800e814:	b29a      	uxth	r2, r3
 800e816:	4b19      	ldr	r3, [pc, #100]	; (800e87c <PSV_Mode_Packet_Data+0x118>)
 800e818:	809a      	strh	r2, [r3, #4]

	 if(PSV.VENT_TYPE == 0)
 800e81a:	4b16      	ldr	r3, [pc, #88]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e81c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d103      	bne.n	800e82c <PSV_Mode_Packet_Data+0xc8>
		 Vent_Type = ET_TUBE_MODE;
 800e824:	4b16      	ldr	r3, [pc, #88]	; (800e880 <PSV_Mode_Packet_Data+0x11c>)
 800e826:	2200      	movs	r2, #0
 800e828:	701a      	strb	r2, [r3, #0]
 800e82a:	e007      	b.n	800e83c <PSV_Mode_Packet_Data+0xd8>
	else if(PSV.VENT_TYPE == 1)
 800e82c:	4b11      	ldr	r3, [pc, #68]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e82e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e832:	2b01      	cmp	r3, #1
 800e834:	d102      	bne.n	800e83c <PSV_Mode_Packet_Data+0xd8>
		 Vent_Type = MASK_MODE;
 800e836:	4b12      	ldr	r3, [pc, #72]	; (800e880 <PSV_Mode_Packet_Data+0x11c>)
 800e838:	2201      	movs	r2, #1
 800e83a:	701a      	strb	r2, [r3, #0]

	 if(PSV.TRIG_TYPE == 0)
 800e83c:	4b0d      	ldr	r3, [pc, #52]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e83e:	889b      	ldrh	r3, [r3, #4]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d103      	bne.n	800e84c <PSV_Mode_Packet_Data+0xe8>
		Trigger_Type = Pressure_Trigger;
 800e844:	4b0f      	ldr	r3, [pc, #60]	; (800e884 <PSV_Mode_Packet_Data+0x120>)
 800e846:	2200      	movs	r2, #0
 800e848:	701a      	strb	r2, [r3, #0]
 800e84a:	e006      	b.n	800e85a <PSV_Mode_Packet_Data+0xf6>
	else if(PSV.TRIG_TYPE == 1)
 800e84c:	4b09      	ldr	r3, [pc, #36]	; (800e874 <PSV_Mode_Packet_Data+0x110>)
 800e84e:	889b      	ldrh	r3, [r3, #4]
 800e850:	2b01      	cmp	r3, #1
 800e852:	d102      	bne.n	800e85a <PSV_Mode_Packet_Data+0xf6>
		Trigger_Type = Flow_Trigger;
 800e854:	4b0b      	ldr	r3, [pc, #44]	; (800e884 <PSV_Mode_Packet_Data+0x120>)
 800e856:	2201      	movs	r2, #1
 800e858:	701a      	strb	r2, [r3, #0]
	 Mode_Initial_Flag_Set                        = OPEN;
 800e85a:	4b0b      	ldr	r3, [pc, #44]	; (800e888 <PSV_Mode_Packet_Data+0x124>)
 800e85c:	2201      	movs	r2, #1
 800e85e:	701a      	strb	r2, [r3, #0]

	 vTaskResume(Mode_initial_Flag_Set_Handler);
 800e860:	4b0a      	ldr	r3, [pc, #40]	; (800e88c <PSV_Mode_Packet_Data+0x128>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4618      	mov	r0, r3
 800e866:	f00c fce9 	bl	801b23c <vTaskResume>
}
 800e86a:	bf00      	nop
 800e86c:	3708      	adds	r7, #8
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	20012710 	.word	0x20012710
 800e878:	cccccccd 	.word	0xcccccccd
 800e87c:	20012224 	.word	0x20012224
 800e880:	200129f4 	.word	0x200129f4
 800e884:	20012244 	.word	0x20012244
 800e888:	20012cb1 	.word	0x20012cb1
 800e88c:	200129ac 	.word	0x200129ac

0800e890 <PSV_Task>:



void PSV_Task(void *argument)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(PSV.APNEA_COUNTER > 0)
 800e898:	4b09      	ldr	r3, [pc, #36]	; (800e8c0 <PSV_Task+0x30>)
 800e89a:	699b      	ldr	r3, [r3, #24]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	dd02      	ble.n	800e8a6 <PSV_Task+0x16>
		{
			PSV_CONTROL();
 800e8a0:	f000 f8dc 	bl	800ea5c <PSV_CONTROL>
 800e8a4:	e007      	b.n	800e8b6 <PSV_Task+0x26>
		}
		else
		{
			RESET_FLAGS();
 800e8a6:	f000 fd73 	bl	800f390 <RESET_FLAGS>
			 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 800e8aa:	4b06      	ldr	r3, [pc, #24]	; (800e8c4 <PSV_Task+0x34>)
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d101      	bne.n	800e8b6 <PSV_Task+0x26>
			 {
				BACKUP_PC_CMV_START();
 800e8b2:	f000 fbc1 	bl	800f038 <BACKUP_PC_CMV_START>
			 }
		}
		vTaskDelay(Two_Millisecond_Delay);
 800e8b6:	2002      	movs	r0, #2
 800e8b8:	f00c fbc8 	bl	801b04c <vTaskDelay>
		if(PSV.APNEA_COUNTER > 0)
 800e8bc:	e7ec      	b.n	800e898 <PSV_Task+0x8>
 800e8be:	bf00      	nop
 800e8c0:	20012710 	.word	0x20012710
 800e8c4:	20012846 	.word	0x20012846

0800e8c8 <INSPIRATION_PROCESS_PSV>:




static void INSPIRATION_PROCESS_PSV()
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	af00      	add	r7, sp, #0
	 Breath_Count         = Count_The_Breath;
 800e8cc:	4b43      	ldr	r3, [pc, #268]	; (800e9dc <INSPIRATION_PROCESS_PSV+0x114>)
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	701a      	strb	r2, [r3, #0]
	 O2_Control_PSV++;
 800e8d2:	4b43      	ldr	r3, [pc, #268]	; (800e9e0 <INSPIRATION_PROCESS_PSV+0x118>)
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	4b41      	ldr	r3, [pc, #260]	; (800e9e0 <INSPIRATION_PROCESS_PSV+0x118>)
 800e8dc:	701a      	strb	r2, [r3, #0]
		if(O2_Control_PSV > 6)
 800e8de:	4b40      	ldr	r3, [pc, #256]	; (800e9e0 <INSPIRATION_PROCESS_PSV+0x118>)
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	2b06      	cmp	r3, #6
 800e8e4:	d902      	bls.n	800e8ec <INSPIRATION_PROCESS_PSV+0x24>
			O2_Control_PSV=6;
 800e8e6:	4b3e      	ldr	r3, [pc, #248]	; (800e9e0 <INSPIRATION_PROCESS_PSV+0x118>)
 800e8e8:	2206      	movs	r2, #6
 800e8ea:	701a      	strb	r2, [r3, #0]

	 if(Current_Backup_Mode == Backup_PCCMV_Mode)
 800e8ec:	4b3d      	ldr	r3, [pc, #244]	; (800e9e4 <INSPIRATION_PROCESS_PSV+0x11c>)
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d104      	bne.n	800e8fe <INSPIRATION_PROCESS_PSV+0x36>
	 {
		 PSV_Control._INSPIRATION_TIME                   = BACKUP_PC_CMV.INSPIRATION_TIME;
 800e8f4:	4b3c      	ldr	r3, [pc, #240]	; (800e9e8 <INSPIRATION_PROCESS_PSV+0x120>)
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	4b3c      	ldr	r3, [pc, #240]	; (800e9ec <INSPIRATION_PROCESS_PSV+0x124>)
 800e8fc:	60da      	str	r2, [r3, #12]
	 }

	if(Vent_Type == MASK_MODE)
 800e8fe:	4b3c      	ldr	r3, [pc, #240]	; (800e9f0 <INSPIRATION_PROCESS_PSV+0x128>)
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	2b01      	cmp	r3, #1
 800e904:	d11c      	bne.n	800e940 <INSPIRATION_PROCESS_PSV+0x78>
	{
		Pressure_Mode_blower_control.BLOWER_DAC_VAL           = APNEA_DAC_VAL(PSV.PEEP_Val);
 800e906:	4b3b      	ldr	r3, [pc, #236]	; (800e9f4 <INSPIRATION_PROCESS_PSV+0x12c>)
 800e908:	789b      	ldrb	r3, [r3, #2]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fa ff42 	bl	8009794 <APNEA_DAC_VAL>
 800e910:	4603      	mov	r3, r0
 800e912:	461a      	mov	r2, r3
 800e914:	4b38      	ldr	r3, [pc, #224]	; (800e9f8 <INSPIRATION_PROCESS_PSV+0x130>)
 800e916:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.PIP_Control_Task_Delay               = 10;
 800e918:	4b38      	ldr	r3, [pc, #224]	; (800e9fc <INSPIRATION_PROCESS_PSV+0x134>)
 800e91a:	220a      	movs	r2, #10
 800e91c:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = 30;
 800e91e:	4b37      	ldr	r3, [pc, #220]	; (800e9fc <INSPIRATION_PROCESS_PSV+0x134>)
 800e920:	221e      	movs	r2, #30
 800e922:	80da      	strh	r2, [r3, #6]
		PIP_Status                    				          = PIP_NOT_ACHEIVED;
 800e924:	4b36      	ldr	r3, [pc, #216]	; (800ea00 <INSPIRATION_PROCESS_PSV+0x138>)
 800e926:	2200      	movs	r2, #0
 800e928:	701a      	strb	r2, [r3, #0]
		if(PSV.PSV_O2_Val > 21)
 800e92a:	4b32      	ldr	r3, [pc, #200]	; (800e9f4 <INSPIRATION_PROCESS_PSV+0x12c>)
 800e92c:	69db      	ldr	r3, [r3, #28]
 800e92e:	2b15      	cmp	r3, #21
 800e930:	dd24      	ble.n	800e97c <INSPIRATION_PROCESS_PSV+0xb4>
		{
			Parkar_valve_Signal(  (Oxygen_Parameter.PSV_O2_DAC+100)  );
 800e932:	4b34      	ldr	r3, [pc, #208]	; (800ea04 <INSPIRATION_PROCESS_PSV+0x13c>)
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800e93a:	4b33      	ldr	r3, [pc, #204]	; (800ea08 <INSPIRATION_PROCESS_PSV+0x140>)
 800e93c:	615a      	str	r2, [r3, #20]
 800e93e:	e01d      	b.n	800e97c <INSPIRATION_PROCESS_PSV+0xb4>
		}
	}
	else if(Vent_Type == ET_TUBE_MODE)
 800e940:	4b2b      	ldr	r3, [pc, #172]	; (800e9f0 <INSPIRATION_PROCESS_PSV+0x128>)
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d119      	bne.n	800e97c <INSPIRATION_PROCESS_PSV+0xb4>
	{
		Pressure_Mode_blower_control.BLOWER_DAC_VAL           = DAC_VAL(PSV.PEEP_Val);
 800e948:	4b2a      	ldr	r3, [pc, #168]	; (800e9f4 <INSPIRATION_PROCESS_PSV+0x12c>)
 800e94a:	789b      	ldrb	r3, [r3, #2]
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fa fb5d 	bl	800900c <DAC_VAL>
 800e952:	4603      	mov	r3, r0
 800e954:	461a      	mov	r2, r3
 800e956:	4b28      	ldr	r3, [pc, #160]	; (800e9f8 <INSPIRATION_PROCESS_PSV+0x130>)
 800e958:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.PIP_Control_Task_Delay               = 10;
 800e95a:	4b28      	ldr	r3, [pc, #160]	; (800e9fc <INSPIRATION_PROCESS_PSV+0x134>)
 800e95c:	220a      	movs	r2, #10
 800e95e:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = 30;
 800e960:	4b26      	ldr	r3, [pc, #152]	; (800e9fc <INSPIRATION_PROCESS_PSV+0x134>)
 800e962:	221e      	movs	r2, #30
 800e964:	80da      	strh	r2, [r3, #6]
		PIP_Status                    				          = PIP_NOT_ACHEIVED;
 800e966:	4b26      	ldr	r3, [pc, #152]	; (800ea00 <INSPIRATION_PROCESS_PSV+0x138>)
 800e968:	2200      	movs	r2, #0
 800e96a:	701a      	strb	r2, [r3, #0]

		if(PSV.PSV_O2_Val > 21)
 800e96c:	4b21      	ldr	r3, [pc, #132]	; (800e9f4 <INSPIRATION_PROCESS_PSV+0x12c>)
 800e96e:	69db      	ldr	r3, [r3, #28]
 800e970:	2b15      	cmp	r3, #21
 800e972:	dd03      	ble.n	800e97c <INSPIRATION_PROCESS_PSV+0xb4>
		{

			Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 800e974:	4b23      	ldr	r3, [pc, #140]	; (800ea04 <INSPIRATION_PROCESS_PSV+0x13c>)
 800e976:	695a      	ldr	r2, [r3, #20]
 800e978:	4b23      	ldr	r3, [pc, #140]	; (800ea08 <INSPIRATION_PROCESS_PSV+0x140>)
 800e97a:	615a      	str	r2, [r3, #20]
		}
	}

	Pressure_Mode_blower_control.LAST_BLOWER_DAC_VAL      = Pressure_Mode_blower_control.BLOWER_DAC_VAL;
 800e97c:	4b1e      	ldr	r3, [pc, #120]	; (800e9f8 <INSPIRATION_PROCESS_PSV+0x130>)
 800e97e:	881a      	ldrh	r2, [r3, #0]
 800e980:	4b1d      	ldr	r3, [pc, #116]	; (800e9f8 <INSPIRATION_PROCESS_PSV+0x130>)
 800e982:	805a      	strh	r2, [r3, #2]
	Set_PIP_Status                                        = SET_PIP_VALUE_NOT_ACHEIVED;
 800e984:	4b21      	ldr	r3, [pc, #132]	; (800ea0c <INSPIRATION_PROCESS_PSV+0x144>)
 800e986:	2200      	movs	r2, #0
 800e988:	701a      	strb	r2, [r3, #0]
	Read_Time_vs_Pressure                                 = READ_TIME_OPEN;
 800e98a:	4b21      	ldr	r3, [pc, #132]	; (800ea10 <INSPIRATION_PROCESS_PSV+0x148>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	701a      	strb	r2, [r3, #0]
	PIP_control_Task.PIP_Control_Event_Occured            = RESET;
 800e990:	4b1a      	ldr	r3, [pc, #104]	; (800e9fc <INSPIRATION_PROCESS_PSV+0x134>)
 800e992:	2200      	movs	r2, #0
 800e994:	805a      	strh	r2, [r3, #2]
	PIP_Average_Parameter.Maximum_PIP_Acheived            = RESET;
 800e996:	4b1f      	ldr	r3, [pc, #124]	; (800ea14 <INSPIRATION_PROCESS_PSV+0x14c>)
 800e998:	2200      	movs	r2, #0
 800e99a:	701a      	strb	r2, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = PSV_TUNE_PIP_BLOWER(&Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL,
                                                                                  PSV.PRESSURE_SUPPORT_Val );
 800e99c:	4b15      	ldr	r3, [pc, #84]	; (800e9f4 <INSPIRATION_PROCESS_PSV+0x12c>)
 800e99e:	881b      	ldrh	r3, [r3, #0]
	Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = PSV_TUNE_PIP_BLOWER(&Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL,
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	481c      	ldr	r0, [pc, #112]	; (800ea18 <INSPIRATION_PROCESS_PSV+0x150>)
 800e9a6:	f000 facf 	bl	800ef48 <PSV_TUNE_PIP_BLOWER>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	4b12      	ldr	r3, [pc, #72]	; (800e9f8 <INSPIRATION_PROCESS_PSV+0x130>)
 800e9b0:	811a      	strh	r2, [r3, #8]

	GRAPH_VALUES.volume                                   = RESET;
 800e9b2:	4b1a      	ldr	r3, [pc, #104]	; (800ea1c <INSPIRATION_PROCESS_PSV+0x154>)
 800e9b4:	f04f 0200 	mov.w	r2, #0
 800e9b8:	609a      	str	r2, [r3, #8]
	Volume_max                                            = RESET;
 800e9ba:	4b19      	ldr	r3, [pc, #100]	; (800ea20 <INSPIRATION_PROCESS_PSV+0x158>)
 800e9bc:	2200      	movs	r2, #0
 800e9be:	601a      	str	r2, [r3, #0]
	PSV_PEEP_AVERAGE();
 800e9c0:	f000 f998 	bl	800ecf4 <PSV_PEEP_AVERAGE>
	vTaskResume(PSV_PID_Handler);
 800e9c4:	4b17      	ldr	r3, [pc, #92]	; (800ea24 <INSPIRATION_PROCESS_PSV+0x15c>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f00c fc37 	bl	801b23c <vTaskResume>
	vTaskSuspend(PSV_Handler);
 800e9ce:	4b16      	ldr	r3, [pc, #88]	; (800ea28 <INSPIRATION_PROCESS_PSV+0x160>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f00c fb6e 	bl	801b0b4 <vTaskSuspend>
}
 800e9d8:	bf00      	nop
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	200122a8 	.word	0x200122a8
 800e9e0:	2001280d 	.word	0x2001280d
 800e9e4:	20012846 	.word	0x20012846
 800e9e8:	200121b8 	.word	0x200121b8
 800e9ec:	20012b78 	.word	0x20012b78
 800e9f0:	200129f4 	.word	0x200129f4
 800e9f4:	20012710 	.word	0x20012710
 800e9f8:	20012978 	.word	0x20012978
 800e9fc:	200123d0 	.word	0x200123d0
 800ea00:	200129f7 	.word	0x200129f7
 800ea04:	200129d4 	.word	0x200129d4
 800ea08:	40007400 	.word	0x40007400
 800ea0c:	20012b34 	.word	0x20012b34
 800ea10:	20012d34 	.word	0x20012d34
 800ea14:	200124bc 	.word	0x200124bc
 800ea18:	20012980 	.word	0x20012980
 800ea1c:	200125f8 	.word	0x200125f8
 800ea20:	20012c70 	.word	0x20012c70
 800ea24:	200127a8 	.word	0x200127a8
 800ea28:	200128a8 	.word	0x200128a8

0800ea2c <PSV_PID_Task>:


void PSV_PID_Task(void *argument)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Vent_Type == MASK_MODE)
 800ea34:	4b08      	ldr	r3, [pc, #32]	; (800ea58 <PSV_PID_Task+0x2c>)
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d102      	bne.n	800ea42 <PSV_PID_Task+0x16>
		{
			MASK_MODE_PID();
 800ea3c:	f000 ffec 	bl	800fa18 <MASK_MODE_PID>
 800ea40:	e005      	b.n	800ea4e <PSV_PID_Task+0x22>
		}
		else if(Vent_Type == ET_TUBE_MODE)
 800ea42:	4b05      	ldr	r3, [pc, #20]	; (800ea58 <PSV_PID_Task+0x2c>)
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d101      	bne.n	800ea4e <PSV_PID_Task+0x22>
		{
			ET_TUBE_MODE_PID();
 800ea4a:	f001 f8d5 	bl	800fbf8 <ET_TUBE_MODE_PID>
		}

		vTaskDelay(Ten_Millisecond_Delay);
 800ea4e:	200a      	movs	r0, #10
 800ea50:	f00c fafc 	bl	801b04c <vTaskDelay>
		if(Vent_Type == MASK_MODE)
 800ea54:	e7ee      	b.n	800ea34 <PSV_PID_Task+0x8>
 800ea56:	bf00      	nop
 800ea58:	200129f4 	.word	0x200129f4

0800ea5c <PSV_CONTROL>:
	}
}


static void PSV_CONTROL()
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	af00      	add	r7, sp, #0
	    Expiration_Cycle();
 800ea60:	f000 fece 	bl	800f800 <Expiration_Cycle>
	    if(Wait_Time > 0 )
 800ea64:	4b0f      	ldr	r3, [pc, #60]	; (800eaa4 <PSV_CONTROL+0x48>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	dd02      	ble.n	800ea72 <PSV_CONTROL+0x16>
	    {
	    	WAIT_TIME_CONTROL();
 800ea6c:	f000 fea4 	bl	800f7b8 <WAIT_TIME_CONTROL>
				else
				{
					CHECK_TRIGGER_OFFSET();
				}
	    }
}
 800ea70:	e015      	b.n	800ea9e <PSV_CONTROL+0x42>
	    	    Apnea_Mode  = ON;
 800ea72:	4b0d      	ldr	r3, [pc, #52]	; (800eaa8 <PSV_CONTROL+0x4c>)
 800ea74:	2200      	movs	r2, #0
 800ea76:	701a      	strb	r2, [r3, #0]
	    	    Apnea_O2_control();
 800ea78:	f000 fe6e 	bl	800f758 <Apnea_O2_control>
				if(PSV_Control.Blower_Wait_Time_Milli_Second == 0)
 800ea7c:	4b0b      	ldr	r3, [pc, #44]	; (800eaac <PSV_CONTROL+0x50>)
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d101      	bne.n	800ea88 <PSV_CONTROL+0x2c>
					RUN_PSV_PEEP_MAINTAIN_BLOWER();
 800ea84:	f000 f8e2 	bl	800ec4c <RUN_PSV_PEEP_MAINTAIN_BLOWER>
				if(PSV_Control.PSV_PEEP_Settle_Time == 0 )
 800ea88:	4b08      	ldr	r3, [pc, #32]	; (800eaac <PSV_CONTROL+0x50>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d104      	bne.n	800ea9a <PSV_CONTROL+0x3e>
					Patient_Circuit_Disconnected_Alert_PSV();
 800ea90:	f000 fcb0 	bl	800f3f4 <Patient_Circuit_Disconnected_Alert_PSV>
					For_Trigger_Control();
 800ea94:	f000 fec0 	bl	800f818 <For_Trigger_Control>
}
 800ea98:	e001      	b.n	800ea9e <PSV_CONTROL+0x42>
					CHECK_TRIGGER_OFFSET();
 800ea9a:	f000 f875 	bl	800eb88 <CHECK_TRIGGER_OFFSET>
}
 800ea9e:	bf00      	nop
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	20012698 	.word	0x20012698
 800eaa8:	20012aa1 	.word	0x20012aa1
 800eaac:	20012b78 	.word	0x20012b78

0800eab0 <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	af00      	add	r7, sp, #0
	if (( GRAPH_VALUES.pressure < (Pressure_Trigger_Offset - PSV.TRIG_LMT )))
 800eab4:	4b12      	ldr	r3, [pc, #72]	; (800eb00 <CHECK_PRESSURE_TRIGGER+0x50>)
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	ee07 3a90 	vmov	s15, r3
 800eabc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eac0:	4b10      	ldr	r3, [pc, #64]	; (800eb04 <CHECK_PRESSURE_TRIGGER+0x54>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	ee07 3a90 	vmov	s15, r3
 800eac8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eacc:	4b0e      	ldr	r3, [pc, #56]	; (800eb08 <CHECK_PRESSURE_TRIGGER+0x58>)
 800eace:	edd3 7a02 	vldr	s15, [r3, #8]
 800ead2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800ead6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eade:	d400      	bmi.n	800eae2 <CHECK_PRESSURE_TRIGGER+0x32>
		PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL = 0;
		Blower_Signal( PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);

		INSPIRATION_PROCESS_PSV();
	}
}
 800eae0:	e00b      	b.n	800eafa <CHECK_PRESSURE_TRIGGER+0x4a>
		Patient_Trigger                             = PATIENT_TRIGGER_HAPPEN;
 800eae2:	4b0a      	ldr	r3, [pc, #40]	; (800eb0c <CHECK_PRESSURE_TRIGGER+0x5c>)
 800eae4:	2201      	movs	r2, #1
 800eae6:	701a      	strb	r2, [r3, #0]
		PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL = 0;
 800eae8:	4b09      	ldr	r3, [pc, #36]	; (800eb10 <CHECK_PRESSURE_TRIGGER+0x60>)
 800eaea:	2200      	movs	r2, #0
 800eaec:	80da      	strh	r2, [r3, #6]
		Blower_Signal( PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);
 800eaee:	4b08      	ldr	r3, [pc, #32]	; (800eb10 <CHECK_PRESSURE_TRIGGER+0x60>)
 800eaf0:	88da      	ldrh	r2, [r3, #6]
 800eaf2:	4b08      	ldr	r3, [pc, #32]	; (800eb14 <CHECK_PRESSURE_TRIGGER+0x64>)
 800eaf4:	609a      	str	r2, [r3, #8]
		INSPIRATION_PROCESS_PSV();
 800eaf6:	f7ff fee7 	bl	800e8c8 <INSPIRATION_PROCESS_PSV>
}
 800eafa:	bf00      	nop
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	200125f8 	.word	0x200125f8
 800eb04:	2001296c 	.word	0x2001296c
 800eb08:	20012710 	.word	0x20012710
 800eb0c:	2001263d 	.word	0x2001263d
 800eb10:	20012bf4 	.word	0x20012bf4
 800eb14:	40007400 	.word	0x40007400

0800eb18 <CHECK_FLOW_TRIGGER>:

static void CHECK_FLOW_TRIGGER()
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	af00      	add	r7, sp, #0
	if ((GRAPH_VALUES.flow > (Flow_Trigger_Offset+PSV.TRIG_LMT )))
 800eb1c:	4b12      	ldr	r3, [pc, #72]	; (800eb68 <CHECK_FLOW_TRIGGER+0x50>)
 800eb1e:	ed93 7a01 	vldr	s14, [r3, #4]
 800eb22:	4b12      	ldr	r3, [pc, #72]	; (800eb6c <CHECK_FLOW_TRIGGER+0x54>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	ee07 3a90 	vmov	s15, r3
 800eb2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eb2e:	4b10      	ldr	r3, [pc, #64]	; (800eb70 <CHECK_FLOW_TRIGGER+0x58>)
 800eb30:	edd3 7a02 	vldr	s15, [r3, #8]
 800eb34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb40:	dc00      	bgt.n	800eb44 <CHECK_FLOW_TRIGGER+0x2c>
		Blower_Signal( PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);

		INSPIRATION_PROCESS_PSV();

	}
}
 800eb42:	e00f      	b.n	800eb64 <CHECK_FLOW_TRIGGER+0x4c>
		LAST_FLOW_TRIGGER 							= FLOW_TRIGGER;
 800eb44:	4b0b      	ldr	r3, [pc, #44]	; (800eb74 <CHECK_FLOW_TRIGGER+0x5c>)
 800eb46:	781a      	ldrb	r2, [r3, #0]
 800eb48:	4b0b      	ldr	r3, [pc, #44]	; (800eb78 <CHECK_FLOW_TRIGGER+0x60>)
 800eb4a:	701a      	strb	r2, [r3, #0]
		Patient_Trigger  							= PATIENT_TRIGGER_HAPPEN;
 800eb4c:	4b0b      	ldr	r3, [pc, #44]	; (800eb7c <CHECK_FLOW_TRIGGER+0x64>)
 800eb4e:	2201      	movs	r2, #1
 800eb50:	701a      	strb	r2, [r3, #0]
		PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL = 0;
 800eb52:	4b0b      	ldr	r3, [pc, #44]	; (800eb80 <CHECK_FLOW_TRIGGER+0x68>)
 800eb54:	2200      	movs	r2, #0
 800eb56:	80da      	strh	r2, [r3, #6]
		Blower_Signal( PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);
 800eb58:	4b09      	ldr	r3, [pc, #36]	; (800eb80 <CHECK_FLOW_TRIGGER+0x68>)
 800eb5a:	88da      	ldrh	r2, [r3, #6]
 800eb5c:	4b09      	ldr	r3, [pc, #36]	; (800eb84 <CHECK_FLOW_TRIGGER+0x6c>)
 800eb5e:	609a      	str	r2, [r3, #8]
		INSPIRATION_PROCESS_PSV();
 800eb60:	f7ff feb2 	bl	800e8c8 <INSPIRATION_PROCESS_PSV>
}
 800eb64:	bf00      	nop
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	200125f8 	.word	0x200125f8
 800eb6c:	20012900 	.word	0x20012900
 800eb70:	20012710 	.word	0x20012710
 800eb74:	200129aa 	.word	0x200129aa
 800eb78:	20012b70 	.word	0x20012b70
 800eb7c:	2001263d 	.word	0x2001263d
 800eb80:	20012bf4 	.word	0x20012bf4
 800eb84:	40007400 	.word	0x40007400

0800eb88 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 800eb88:	b480      	push	{r7}
 800eb8a:	af00      	add	r7, sp, #0

	if(Vent_Type == MASK_MODE)
 800eb8c:	4b2a      	ldr	r3, [pc, #168]	; (800ec38 <CHECK_TRIGGER_OFFSET+0xb0>)
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	2b01      	cmp	r3, #1
 800eb92:	d11a      	bne.n	800ebca <CHECK_TRIGGER_OFFSET+0x42>
	{
		if(GRAPH_VALUES.flow>=0)
 800eb94:	4b29      	ldr	r3, [pc, #164]	; (800ec3c <CHECK_TRIGGER_OFFSET+0xb4>)
 800eb96:	edd3 7a01 	vldr	s15, [r3, #4]
 800eb9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba2:	da00      	bge.n	800eba6 <CHECK_TRIGGER_OFFSET+0x1e>
			Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
		}
	}


}
 800eba4:	e042      	b.n	800ec2c <CHECK_TRIGGER_OFFSET+0xa4>
			FLOW_TRIGGER             = 0;
 800eba6:	4b26      	ldr	r3, [pc, #152]	; (800ec40 <CHECK_TRIGGER_OFFSET+0xb8>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	701a      	strb	r2, [r3, #0]
			Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 800ebac:	4b23      	ldr	r3, [pc, #140]	; (800ec3c <CHECK_TRIGGER_OFFSET+0xb4>)
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	4b24      	ldr	r3, [pc, #144]	; (800ec44 <CHECK_TRIGGER_OFFSET+0xbc>)
 800ebb4:	601a      	str	r2, [r3, #0]
			Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 800ebb6:	4b21      	ldr	r3, [pc, #132]	; (800ec3c <CHECK_TRIGGER_OFFSET+0xb4>)
 800ebb8:	edd3 7a01 	vldr	s15, [r3, #4]
 800ebbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ebc0:	ee17 2a90 	vmov	r2, s15
 800ebc4:	4b20      	ldr	r3, [pc, #128]	; (800ec48 <CHECK_TRIGGER_OFFSET+0xc0>)
 800ebc6:	601a      	str	r2, [r3, #0]
}
 800ebc8:	e030      	b.n	800ec2c <CHECK_TRIGGER_OFFSET+0xa4>
	else if(Vent_Type == ET_TUBE_MODE)
 800ebca:	4b1b      	ldr	r3, [pc, #108]	; (800ec38 <CHECK_TRIGGER_OFFSET+0xb0>)
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d12c      	bne.n	800ec2c <CHECK_TRIGGER_OFFSET+0xa4>
		if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 800ebd2:	4b1a      	ldr	r3, [pc, #104]	; (800ec3c <CHECK_TRIGGER_OFFSET+0xb4>)
 800ebd4:	edd3 7a01 	vldr	s15, [r3, #4]
 800ebd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ebdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe0:	d013      	beq.n	800ec0a <CHECK_TRIGGER_OFFSET+0x82>
 800ebe2:	4b16      	ldr	r3, [pc, #88]	; (800ec3c <CHECK_TRIGGER_OFFSET+0xb4>)
 800ebe4:	edd3 7a01 	vldr	s15, [r3, #4]
 800ebe8:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 800ebec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ebf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf4:	da00      	bge.n	800ebf8 <CHECK_TRIGGER_OFFSET+0x70>
}
 800ebf6:	e019      	b.n	800ec2c <CHECK_TRIGGER_OFFSET+0xa4>
		if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 800ebf8:	4b10      	ldr	r3, [pc, #64]	; (800ec3c <CHECK_TRIGGER_OFFSET+0xb4>)
 800ebfa:	edd3 7a01 	vldr	s15, [r3, #4]
 800ebfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ec02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec06:	d400      	bmi.n	800ec0a <CHECK_TRIGGER_OFFSET+0x82>
}
 800ec08:	e010      	b.n	800ec2c <CHECK_TRIGGER_OFFSET+0xa4>
			FLOW_TRIGGER             = 0;
 800ec0a:	4b0d      	ldr	r3, [pc, #52]	; (800ec40 <CHECK_TRIGGER_OFFSET+0xb8>)
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	701a      	strb	r2, [r3, #0]
			Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 800ec10:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <CHECK_TRIGGER_OFFSET+0xb4>)
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	461a      	mov	r2, r3
 800ec16:	4b0b      	ldr	r3, [pc, #44]	; (800ec44 <CHECK_TRIGGER_OFFSET+0xbc>)
 800ec18:	601a      	str	r2, [r3, #0]
			Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 800ec1a:	4b08      	ldr	r3, [pc, #32]	; (800ec3c <CHECK_TRIGGER_OFFSET+0xb4>)
 800ec1c:	edd3 7a01 	vldr	s15, [r3, #4]
 800ec20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec24:	ee17 2a90 	vmov	r2, s15
 800ec28:	4b07      	ldr	r3, [pc, #28]	; (800ec48 <CHECK_TRIGGER_OFFSET+0xc0>)
 800ec2a:	601a      	str	r2, [r3, #0]
}
 800ec2c:	bf00      	nop
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	200129f4 	.word	0x200129f4
 800ec3c:	200125f8 	.word	0x200125f8
 800ec40:	200129aa 	.word	0x200129aa
 800ec44:	2001296c 	.word	0x2001296c
 800ec48:	20012900 	.word	0x20012900

0800ec4c <RUN_PSV_PEEP_MAINTAIN_BLOWER>:


static void RUN_PSV_PEEP_MAINTAIN_BLOWER()
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	af00      	add	r7, sp, #0
	ExpValve_CLOSE();
 800ec50:	4b07      	ldr	r3, [pc, #28]	; (800ec70 <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x24>)
 800ec52:	695b      	ldr	r3, [r3, #20]
 800ec54:	4a06      	ldr	r2, [pc, #24]	; (800ec70 <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x24>)
 800ec56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ec5a:	6153      	str	r3, [r2, #20]
	Blower_Signal( PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL);
 800ec5c:	4b05      	ldr	r3, [pc, #20]	; (800ec74 <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x28>)
 800ec5e:	88da      	ldrh	r2, [r3, #6]
 800ec60:	4b05      	ldr	r3, [pc, #20]	; (800ec78 <RUN_PSV_PEEP_MAINTAIN_BLOWER+0x2c>)
 800ec62:	609a      	str	r2, [r3, #8]
}
 800ec64:	bf00      	nop
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	40020400 	.word	0x40020400
 800ec74:	20012bf4 	.word	0x20012bf4
 800ec78:	40007400 	.word	0x40007400

0800ec7c <STOP_BLOWER_IF_FLOW_SENSE>:


static void STOP_BLOWER_IF_FLOW_SENSE()
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	af00      	add	r7, sp, #0
	if(Vent_Type == MASK_MODE)
 800ec80:	4b18      	ldr	r3, [pc, #96]	; (800ece4 <STOP_BLOWER_IF_FLOW_SENSE+0x68>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d110      	bne.n	800ecaa <STOP_BLOWER_IF_FLOW_SENSE+0x2e>
	{
		if (Trigger_Type == Pressure_Trigger)
 800ec88:	4b17      	ldr	r3, [pc, #92]	; (800ece8 <STOP_BLOWER_IF_FLOW_SENSE+0x6c>)
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d103      	bne.n	800ec98 <STOP_BLOWER_IF_FLOW_SENSE+0x1c>
		{
			PSV_Control.Blower_Wait_Time_Milli_Second = 0;
 800ec90:	4b16      	ldr	r3, [pc, #88]	; (800ecec <STOP_BLOWER_IF_FLOW_SENSE+0x70>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	605a      	str	r2, [r3, #4]
		else if (Trigger_Type == Flow_Trigger)
		{
			PSV_Control.Blower_Wait_Time_Milli_Second = 500;
		}
	}
}
 800ec96:	e020      	b.n	800ecda <STOP_BLOWER_IF_FLOW_SENSE+0x5e>
		else if (Trigger_Type == Flow_Trigger)
 800ec98:	4b13      	ldr	r3, [pc, #76]	; (800ece8 <STOP_BLOWER_IF_FLOW_SENSE+0x6c>)
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d11c      	bne.n	800ecda <STOP_BLOWER_IF_FLOW_SENSE+0x5e>
			PSV_Control.Blower_Wait_Time_Milli_Second = 500;
 800eca0:	4b12      	ldr	r3, [pc, #72]	; (800ecec <STOP_BLOWER_IF_FLOW_SENSE+0x70>)
 800eca2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800eca6:	605a      	str	r2, [r3, #4]
}
 800eca8:	e017      	b.n	800ecda <STOP_BLOWER_IF_FLOW_SENSE+0x5e>
	else if(Vent_Type == ET_TUBE_MODE)
 800ecaa:	4b0e      	ldr	r3, [pc, #56]	; (800ece4 <STOP_BLOWER_IF_FLOW_SENSE+0x68>)
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d113      	bne.n	800ecda <STOP_BLOWER_IF_FLOW_SENSE+0x5e>
		Blower_Signal(0);
 800ecb2:	4b0f      	ldr	r3, [pc, #60]	; (800ecf0 <STOP_BLOWER_IF_FLOW_SENSE+0x74>)
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	609a      	str	r2, [r3, #8]
		if (Trigger_Type == Pressure_Trigger)
 800ecb8:	4b0b      	ldr	r3, [pc, #44]	; (800ece8 <STOP_BLOWER_IF_FLOW_SENSE+0x6c>)
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d104      	bne.n	800ecca <STOP_BLOWER_IF_FLOW_SENSE+0x4e>
			PSV_Control.Blower_Wait_Time_Milli_Second = 1000;
 800ecc0:	4b0a      	ldr	r3, [pc, #40]	; (800ecec <STOP_BLOWER_IF_FLOW_SENSE+0x70>)
 800ecc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ecc6:	605a      	str	r2, [r3, #4]
}
 800ecc8:	e007      	b.n	800ecda <STOP_BLOWER_IF_FLOW_SENSE+0x5e>
		else if (Trigger_Type == Flow_Trigger)
 800ecca:	4b07      	ldr	r3, [pc, #28]	; (800ece8 <STOP_BLOWER_IF_FLOW_SENSE+0x6c>)
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d103      	bne.n	800ecda <STOP_BLOWER_IF_FLOW_SENSE+0x5e>
			PSV_Control.Blower_Wait_Time_Milli_Second = 500;
 800ecd2:	4b06      	ldr	r3, [pc, #24]	; (800ecec <STOP_BLOWER_IF_FLOW_SENSE+0x70>)
 800ecd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ecd8:	605a      	str	r2, [r3, #4]
}
 800ecda:	bf00      	nop
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr
 800ece4:	200129f4 	.word	0x200129f4
 800ece8:	20012244 	.word	0x20012244
 800ecec:	20012b78 	.word	0x20012b78
 800ecf0:	40007400 	.word	0x40007400

0800ecf4 <PSV_PEEP_AVERAGE>:



static void PSV_PEEP_AVERAGE()
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
	if((PSV_Peep_Average.PEEP_Cumulative_Val == 0) || (PSV_Peep_Average.PEEP_Event_Count == 0))
 800ecfa:	4b2b      	ldr	r3, [pc, #172]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d003      	beq.n	800ed0a <PSV_PEEP_AVERAGE+0x16>
 800ed02:	4b29      	ldr	r3, [pc, #164]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d105      	bne.n	800ed16 <PSV_PEEP_AVERAGE+0x22>
	{
		PSV_Peep_Average.PEEP_Cumulative_Val = 1;
 800ed0a:	4b27      	ldr	r3, [pc, #156]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	601a      	str	r2, [r3, #0]
		PSV_Peep_Average.PEEP_Event_Count    = 1;
 800ed10:	4b25      	ldr	r3, [pc, #148]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ed12:	2201      	movs	r2, #1
 800ed14:	605a      	str	r2, [r3, #4]
	}
	PSV_Peep_Average.PEEP_AVG_VAL        = (float)(PSV_Peep_Average.PEEP_Cumulative_Val/ PSV_Peep_Average.PEEP_Event_Count);
 800ed16:	4b24      	ldr	r3, [pc, #144]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	4b23      	ldr	r3, [pc, #140]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed22:	ee07 3a90 	vmov	s15, r3
 800ed26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed2e:	edc7 7a01 	vstr	s15, [r7, #4]
 800ed32:	793b      	ldrb	r3, [r7, #4]
 800ed34:	b2da      	uxtb	r2, r3
 800ed36:	4b1c      	ldr	r3, [pc, #112]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ed38:	721a      	strb	r2, [r3, #8]

	if( (PSV_Peep_Average.PEEP_AVG_VAL <=0)  || (PSV_Peep_Average.PEEP_AVG_VAL > 80) )
 800ed3a:	4b1b      	ldr	r3, [pc, #108]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ed3c:	7a1b      	ldrb	r3, [r3, #8]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d003      	beq.n	800ed4a <PSV_PEEP_AVERAGE+0x56>
 800ed42:	4b19      	ldr	r3, [pc, #100]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ed44:	7a1b      	ldrb	r3, [r3, #8]
 800ed46:	2b50      	cmp	r3, #80	; 0x50
 800ed48:	d902      	bls.n	800ed50 <PSV_PEEP_AVERAGE+0x5c>
	{
		PSV_Peep_Average.PEEP_AVG_VAL = 0;
 800ed4a:	4b17      	ldr	r3, [pc, #92]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	721a      	strb	r2, [r3, #8]
	}
	if(PSV_Peep_Average.PEEP_AVG_VAL == PSV.PEEP_Val)
 800ed50:	4b15      	ldr	r3, [pc, #84]	; (800eda8 <PSV_PEEP_AVERAGE+0xb4>)
 800ed52:	7a1a      	ldrb	r2, [r3, #8]
 800ed54:	4b15      	ldr	r3, [pc, #84]	; (800edac <PSV_PEEP_AVERAGE+0xb8>)
 800ed56:	789b      	ldrb	r3, [r3, #2]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d119      	bne.n	800ed90 <PSV_PEEP_AVERAGE+0x9c>
	{

		if(Vent_Type == MASK_MODE)
 800ed5c:	4b14      	ldr	r3, [pc, #80]	; (800edb0 <PSV_PEEP_AVERAGE+0xbc>)
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d108      	bne.n	800ed76 <PSV_PEEP_AVERAGE+0x82>
		{
			Change_CPAP_DAC_Values_INVASIVE(PSV.PEEP_Val,PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL);
 800ed64:	4b11      	ldr	r3, [pc, #68]	; (800edac <PSV_PEEP_AVERAGE+0xb8>)
 800ed66:	789b      	ldrb	r3, [r3, #2]
 800ed68:	4a12      	ldr	r2, [pc, #72]	; (800edb4 <PSV_PEEP_AVERAGE+0xc0>)
 800ed6a:	8912      	ldrh	r2, [r2, #8]
 800ed6c:	4611      	mov	r1, r2
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fa fe04 	bl	800997c <Change_CPAP_DAC_Values_INVASIVE>
		if (Trigger_Type == Flow_Trigger)
	    {
		  PSV_Control.PSV_PEEP_Settle_Time           = 500;
	    }
	}
}
 800ed74:	e014      	b.n	800eda0 <PSV_PEEP_AVERAGE+0xac>
		else if(Vent_Type == ET_TUBE_MODE)
 800ed76:	4b0e      	ldr	r3, [pc, #56]	; (800edb0 <PSV_PEEP_AVERAGE+0xbc>)
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d110      	bne.n	800eda0 <PSV_PEEP_AVERAGE+0xac>
			Change_DAC_Values(PSV.PEEP_Val,PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL);
 800ed7e:	4b0b      	ldr	r3, [pc, #44]	; (800edac <PSV_PEEP_AVERAGE+0xb8>)
 800ed80:	789b      	ldrb	r3, [r3, #2]
 800ed82:	4a0c      	ldr	r2, [pc, #48]	; (800edb4 <PSV_PEEP_AVERAGE+0xc0>)
 800ed84:	8912      	ldrh	r2, [r2, #8]
 800ed86:	4611      	mov	r1, r2
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7fa fafd 	bl	8009388 <Change_DAC_Values>
}
 800ed8e:	e007      	b.n	800eda0 <PSV_PEEP_AVERAGE+0xac>
		if (Trigger_Type == Flow_Trigger)
 800ed90:	4b09      	ldr	r3, [pc, #36]	; (800edb8 <PSV_PEEP_AVERAGE+0xc4>)
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d103      	bne.n	800eda0 <PSV_PEEP_AVERAGE+0xac>
		  PSV_Control.PSV_PEEP_Settle_Time           = 500;
 800ed98:	4b08      	ldr	r3, [pc, #32]	; (800edbc <PSV_PEEP_AVERAGE+0xc8>)
 800ed9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ed9e:	601a      	str	r2, [r3, #0]
}
 800eda0:	bf00      	nop
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	20012b88 	.word	0x20012b88
 800edac:	20012710 	.word	0x20012710
 800edb0:	200129f4 	.word	0x200129f4
 800edb4:	20012bf4 	.word	0x20012bf4
 800edb8:	20012244 	.word	0x20012244
 800edbc:	20012b78 	.word	0x20012b78

0800edc0 <PSV_PIP_AVERAGE>:



static void PSV_PIP_AVERAGE()
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	af00      	add	r7, sp, #0
	if((PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val == 0) || (PSV_Pip_average.PRESSURE_SUPPORT_Event_Count == 0))
 800edc4:	4b20      	ldr	r3, [pc, #128]	; (800ee48 <PSV_PIP_AVERAGE+0x88>)
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d003      	beq.n	800edd4 <PSV_PIP_AVERAGE+0x14>
 800edcc:	4b1e      	ldr	r3, [pc, #120]	; (800ee48 <PSV_PIP_AVERAGE+0x88>)
 800edce:	689b      	ldr	r3, [r3, #8]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d105      	bne.n	800ede0 <PSV_PIP_AVERAGE+0x20>
	{
		PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val = 1;
 800edd4:	4b1c      	ldr	r3, [pc, #112]	; (800ee48 <PSV_PIP_AVERAGE+0x88>)
 800edd6:	2201      	movs	r2, #1
 800edd8:	605a      	str	r2, [r3, #4]
		PSV_Pip_average.PRESSURE_SUPPORT_Event_Count    = 1;
 800edda:	4b1b      	ldr	r3, [pc, #108]	; (800ee48 <PSV_PIP_AVERAGE+0x88>)
 800eddc:	2201      	movs	r2, #1
 800edde:	609a      	str	r2, [r3, #8]
	}
	PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL        = (uint32_t)(PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val/ PSV_Pip_average.PRESSURE_SUPPORT_Event_Count);
 800ede0:	4b19      	ldr	r3, [pc, #100]	; (800ee48 <PSV_PIP_AVERAGE+0x88>)
 800ede2:	685a      	ldr	r2, [r3, #4]
 800ede4:	4b18      	ldr	r3, [pc, #96]	; (800ee48 <PSV_PIP_AVERAGE+0x88>)
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	fbb2 f3f3 	udiv	r3, r2, r3
 800edec:	b2da      	uxtb	r2, r3
 800edee:	4b16      	ldr	r3, [pc, #88]	; (800ee48 <PSV_PIP_AVERAGE+0x88>)
 800edf0:	731a      	strb	r2, [r3, #12]
	PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val = RESET;
 800edf2:	4b15      	ldr	r3, [pc, #84]	; (800ee48 <PSV_PIP_AVERAGE+0x88>)
 800edf4:	2200      	movs	r2, #0
 800edf6:	605a      	str	r2, [r3, #4]
	PSV_Pip_average.PRESSURE_SUPPORT_Event_Count    = RESET;
 800edf8:	4b13      	ldr	r3, [pc, #76]	; (800ee48 <PSV_PIP_AVERAGE+0x88>)
 800edfa:	2200      	movs	r2, #0
 800edfc:	609a      	str	r2, [r3, #8]
	if(PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL == PSV.PRESSURE_SUPPORT_Val)
 800edfe:	4b12      	ldr	r3, [pc, #72]	; (800ee48 <PSV_PIP_AVERAGE+0x88>)
 800ee00:	7b1b      	ldrb	r3, [r3, #12]
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	4b11      	ldr	r3, [pc, #68]	; (800ee4c <PSV_PIP_AVERAGE+0x8c>)
 800ee06:	881b      	ldrh	r3, [r3, #0]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d11a      	bne.n	800ee42 <PSV_PIP_AVERAGE+0x82>
	{
		if(Vent_Type == MASK_MODE)
 800ee0c:	4b10      	ldr	r3, [pc, #64]	; (800ee50 <PSV_PIP_AVERAGE+0x90>)
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d109      	bne.n	800ee28 <PSV_PIP_AVERAGE+0x68>
		{
			Change_CPAP_DAC_Values_INVASIVE(PSV.PRESSURE_SUPPORT_Val,Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL);
 800ee14:	4b0d      	ldr	r3, [pc, #52]	; (800ee4c <PSV_PIP_AVERAGE+0x8c>)
 800ee16:	881b      	ldrh	r3, [r3, #0]
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	4a0e      	ldr	r2, [pc, #56]	; (800ee54 <PSV_PIP_AVERAGE+0x94>)
 800ee1c:	8912      	ldrh	r2, [r2, #8]
 800ee1e:	4611      	mov	r1, r2
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fa fdab 	bl	800997c <Change_CPAP_DAC_Values_INVASIVE>
		{
			Change_DAC_Values(PSV.PRESSURE_SUPPORT_Val,Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL);
		}

	}
}
 800ee26:	e00c      	b.n	800ee42 <PSV_PIP_AVERAGE+0x82>
		else if(Vent_Type == ET_TUBE_MODE)
 800ee28:	4b09      	ldr	r3, [pc, #36]	; (800ee50 <PSV_PIP_AVERAGE+0x90>)
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d108      	bne.n	800ee42 <PSV_PIP_AVERAGE+0x82>
			Change_DAC_Values(PSV.PRESSURE_SUPPORT_Val,Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL);
 800ee30:	4b06      	ldr	r3, [pc, #24]	; (800ee4c <PSV_PIP_AVERAGE+0x8c>)
 800ee32:	881b      	ldrh	r3, [r3, #0]
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	4a07      	ldr	r2, [pc, #28]	; (800ee54 <PSV_PIP_AVERAGE+0x94>)
 800ee38:	8912      	ldrh	r2, [r2, #8]
 800ee3a:	4611      	mov	r1, r2
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fa faa3 	bl	8009388 <Change_DAC_Values>
}
 800ee42:	bf00      	nop
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	200124d0 	.word	0x200124d0
 800ee4c:	20012710 	.word	0x20012710
 800ee50:	200129f4 	.word	0x200129f4
 800ee54:	20012978 	.word	0x20012978

0800ee58 <PSV_TUNE_PEEP_BLOWER>:


static uint16_t PSV_TUNE_PEEP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PEEP)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	460b      	mov	r3, r1
 800ee62:	70fb      	strb	r3, [r7, #3]
	if(  ( PSV_Peep_Average.PEEP_AVG_VAL)  > ( Set_PEEP ) && (PSV_Peep_Average.PEEP_AVG_VAL  < (Set_PEEP + 2) ) )
 800ee64:	4b37      	ldr	r3, [pc, #220]	; (800ef44 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800ee66:	7a1b      	ldrb	r3, [r3, #8]
 800ee68:	78fa      	ldrb	r2, [r7, #3]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d20c      	bcs.n	800ee88 <PSV_TUNE_PEEP_BLOWER+0x30>
 800ee6e:	78fb      	ldrb	r3, [r7, #3]
 800ee70:	3301      	adds	r3, #1
 800ee72:	4a34      	ldr	r2, [pc, #208]	; (800ef44 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800ee74:	7a12      	ldrb	r2, [r2, #8]
 800ee76:	4293      	cmp	r3, r2
 800ee78:	db06      	blt.n	800ee88 <PSV_TUNE_PEEP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	881b      	ldrh	r3, [r3, #0]
 800ee7e:	3b0a      	subs	r3, #10
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	801a      	strh	r2, [r3, #0]
 800ee86:	e055      	b.n	800ef34 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else if(  ( PSV_Peep_Average.PEEP_AVG_VAL)  >= ( Set_PEEP + 2 ) && (PSV_Peep_Average.PEEP_AVG_VAL  < (Set_PEEP + 4) ) )
 800ee88:	78fb      	ldrb	r3, [r7, #3]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	4a2d      	ldr	r2, [pc, #180]	; (800ef44 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800ee8e:	7a12      	ldrb	r2, [r2, #8]
 800ee90:	4293      	cmp	r3, r2
 800ee92:	da0c      	bge.n	800eeae <PSV_TUNE_PEEP_BLOWER+0x56>
 800ee94:	78fb      	ldrb	r3, [r7, #3]
 800ee96:	3303      	adds	r3, #3
 800ee98:	4a2a      	ldr	r2, [pc, #168]	; (800ef44 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800ee9a:	7a12      	ldrb	r2, [r2, #8]
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	db06      	blt.n	800eeae <PSV_TUNE_PEEP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	3b14      	subs	r3, #20
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	801a      	strh	r2, [r3, #0]
 800eeac:	e042      	b.n	800ef34 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else if(  ( PSV_Peep_Average.PEEP_AVG_VAL)  >= ( Set_PEEP + 4 )  )
 800eeae:	78fb      	ldrb	r3, [r7, #3]
 800eeb0:	3303      	adds	r3, #3
 800eeb2:	4a24      	ldr	r2, [pc, #144]	; (800ef44 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800eeb4:	7a12      	ldrb	r2, [r2, #8]
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	da06      	bge.n	800eec8 <PSV_TUNE_PEEP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	3b28      	subs	r3, #40	; 0x28
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	801a      	strh	r2, [r3, #0]
 800eec6:	e035      	b.n	800ef34 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else if( (PSV_Peep_Average.PEEP_AVG_VAL  < Set_PEEP) && (PSV_Peep_Average.PEEP_AVG_VAL  > (Set_PEEP -2) ) )
 800eec8:	4b1e      	ldr	r3, [pc, #120]	; (800ef44 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800eeca:	7a1b      	ldrb	r3, [r3, #8]
 800eecc:	78fa      	ldrb	r2, [r7, #3]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d90c      	bls.n	800eeec <PSV_TUNE_PEEP_BLOWER+0x94>
 800eed2:	78fb      	ldrb	r3, [r7, #3]
 800eed4:	3b01      	subs	r3, #1
 800eed6:	4a1b      	ldr	r2, [pc, #108]	; (800ef44 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800eed8:	7a12      	ldrb	r2, [r2, #8]
 800eeda:	4293      	cmp	r3, r2
 800eedc:	dc06      	bgt.n	800eeec <PSV_TUNE_PEEP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	881b      	ldrh	r3, [r3, #0]
 800eee2:	330a      	adds	r3, #10
 800eee4:	b29a      	uxth	r2, r3
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	801a      	strh	r2, [r3, #0]
 800eeea:	e023      	b.n	800ef34 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else if(  (PSV_Peep_Average.PEEP_AVG_VAL  <= (Set_PEEP-2) ) && (PSV_Peep_Average.PEEP_AVG_VAL  >  (Set_PEEP-4) ) )
 800eeec:	78fb      	ldrb	r3, [r7, #3]
 800eeee:	3b01      	subs	r3, #1
 800eef0:	4a14      	ldr	r2, [pc, #80]	; (800ef44 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800eef2:	7a12      	ldrb	r2, [r2, #8]
 800eef4:	4293      	cmp	r3, r2
 800eef6:	dd0c      	ble.n	800ef12 <PSV_TUNE_PEEP_BLOWER+0xba>
 800eef8:	78fb      	ldrb	r3, [r7, #3]
 800eefa:	3b03      	subs	r3, #3
 800eefc:	4a11      	ldr	r2, [pc, #68]	; (800ef44 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800eefe:	7a12      	ldrb	r2, [r2, #8]
 800ef00:	4293      	cmp	r3, r2
 800ef02:	dc06      	bgt.n	800ef12 <PSV_TUNE_PEEP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	881b      	ldrh	r3, [r3, #0]
 800ef08:	3314      	adds	r3, #20
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	801a      	strh	r2, [r3, #0]
 800ef10:	e010      	b.n	800ef34 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else if(  (PSV_Peep_Average.PEEP_AVG_VAL  <= (Set_PEEP-4) )  )
 800ef12:	78fb      	ldrb	r3, [r7, #3]
 800ef14:	3b03      	subs	r3, #3
 800ef16:	4a0b      	ldr	r2, [pc, #44]	; (800ef44 <PSV_TUNE_PEEP_BLOWER+0xec>)
 800ef18:	7a12      	ldrb	r2, [r2, #8]
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	dd06      	ble.n	800ef2c <PSV_TUNE_PEEP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	881b      	ldrh	r3, [r3, #0]
 800ef22:	3328      	adds	r3, #40	; 0x28
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	801a      	strh	r2, [r3, #0]
 800ef2a:	e003      	b.n	800ef34 <PSV_TUNE_PEEP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	881a      	ldrh	r2, [r3, #0]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	801a      	strh	r2, [r3, #0]
	}


	return *Last_Blower_DAC_Val;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	881b      	ldrh	r3, [r3, #0]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr
 800ef44:	20012b88 	.word	0x20012b88

0800ef48 <PSV_TUNE_PIP_BLOWER>:


static uint16_t PSV_TUNE_PIP_BLOWER(uint16_t *Last_Blower_DAC_Val,uint8_t Set_PIP)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	460b      	mov	r3, r1
 800ef52:	70fb      	strb	r3, [r7, #3]

	if(  ( PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL)  > ( Set_PIP ) && (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  < (Set_PIP + 2) ) )
 800ef54:	4b37      	ldr	r3, [pc, #220]	; (800f034 <PSV_TUNE_PIP_BLOWER+0xec>)
 800ef56:	7b1b      	ldrb	r3, [r3, #12]
 800ef58:	78fa      	ldrb	r2, [r7, #3]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d20c      	bcs.n	800ef78 <PSV_TUNE_PIP_BLOWER+0x30>
 800ef5e:	78fb      	ldrb	r3, [r7, #3]
 800ef60:	3301      	adds	r3, #1
 800ef62:	4a34      	ldr	r2, [pc, #208]	; (800f034 <PSV_TUNE_PIP_BLOWER+0xec>)
 800ef64:	7b12      	ldrb	r2, [r2, #12]
 800ef66:	4293      	cmp	r3, r2
 800ef68:	db06      	blt.n	800ef78 <PSV_TUNE_PIP_BLOWER+0x30>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-10);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	3b0a      	subs	r3, #10
 800ef70:	b29a      	uxth	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	801a      	strh	r2, [r3, #0]
 800ef76:	e055      	b.n	800f024 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  ( PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL)  >= ( Set_PIP + 2 ) && (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  < (Set_PIP + 4) ) )
 800ef78:	78fb      	ldrb	r3, [r7, #3]
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	4a2d      	ldr	r2, [pc, #180]	; (800f034 <PSV_TUNE_PIP_BLOWER+0xec>)
 800ef7e:	7b12      	ldrb	r2, [r2, #12]
 800ef80:	4293      	cmp	r3, r2
 800ef82:	da0c      	bge.n	800ef9e <PSV_TUNE_PIP_BLOWER+0x56>
 800ef84:	78fb      	ldrb	r3, [r7, #3]
 800ef86:	3303      	adds	r3, #3
 800ef88:	4a2a      	ldr	r2, [pc, #168]	; (800f034 <PSV_TUNE_PIP_BLOWER+0xec>)
 800ef8a:	7b12      	ldrb	r2, [r2, #12]
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	db06      	blt.n	800ef9e <PSV_TUNE_PIP_BLOWER+0x56>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-20);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	881b      	ldrh	r3, [r3, #0]
 800ef94:	3b14      	subs	r3, #20
 800ef96:	b29a      	uxth	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	801a      	strh	r2, [r3, #0]
 800ef9c:	e042      	b.n	800f024 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  ( PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL)  >= ( Set_PIP + 4 )  )
 800ef9e:	78fb      	ldrb	r3, [r7, #3]
 800efa0:	3303      	adds	r3, #3
 800efa2:	4a24      	ldr	r2, [pc, #144]	; (800f034 <PSV_TUNE_PIP_BLOWER+0xec>)
 800efa4:	7b12      	ldrb	r2, [r2, #12]
 800efa6:	4293      	cmp	r3, r2
 800efa8:	da06      	bge.n	800efb8 <PSV_TUNE_PIP_BLOWER+0x70>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val-40);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	881b      	ldrh	r3, [r3, #0]
 800efae:	3b28      	subs	r3, #40	; 0x28
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	801a      	strh	r2, [r3, #0]
 800efb6:	e035      	b.n	800f024 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else if( (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  < Set_PIP) && (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  > (Set_PIP -2) ) )
 800efb8:	4b1e      	ldr	r3, [pc, #120]	; (800f034 <PSV_TUNE_PIP_BLOWER+0xec>)
 800efba:	7b1b      	ldrb	r3, [r3, #12]
 800efbc:	78fa      	ldrb	r2, [r7, #3]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d90c      	bls.n	800efdc <PSV_TUNE_PIP_BLOWER+0x94>
 800efc2:	78fb      	ldrb	r3, [r7, #3]
 800efc4:	3b01      	subs	r3, #1
 800efc6:	4a1b      	ldr	r2, [pc, #108]	; (800f034 <PSV_TUNE_PIP_BLOWER+0xec>)
 800efc8:	7b12      	ldrb	r2, [r2, #12]
 800efca:	4293      	cmp	r3, r2
 800efcc:	dc06      	bgt.n	800efdc <PSV_TUNE_PIP_BLOWER+0x94>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+10);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	881b      	ldrh	r3, [r3, #0]
 800efd2:	330a      	adds	r3, #10
 800efd4:	b29a      	uxth	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	801a      	strh	r2, [r3, #0]
 800efda:	e023      	b.n	800f024 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  <= (Set_PIP-2) ) && (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  >  (Set_PIP-4) ) )
 800efdc:	78fb      	ldrb	r3, [r7, #3]
 800efde:	3b01      	subs	r3, #1
 800efe0:	4a14      	ldr	r2, [pc, #80]	; (800f034 <PSV_TUNE_PIP_BLOWER+0xec>)
 800efe2:	7b12      	ldrb	r2, [r2, #12]
 800efe4:	4293      	cmp	r3, r2
 800efe6:	dd0c      	ble.n	800f002 <PSV_TUNE_PIP_BLOWER+0xba>
 800efe8:	78fb      	ldrb	r3, [r7, #3]
 800efea:	3b03      	subs	r3, #3
 800efec:	4a11      	ldr	r2, [pc, #68]	; (800f034 <PSV_TUNE_PIP_BLOWER+0xec>)
 800efee:	7b12      	ldrb	r2, [r2, #12]
 800eff0:	4293      	cmp	r3, r2
 800eff2:	dc06      	bgt.n	800f002 <PSV_TUNE_PIP_BLOWER+0xba>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+20);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	881b      	ldrh	r3, [r3, #0]
 800eff8:	3314      	adds	r3, #20
 800effa:	b29a      	uxth	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	801a      	strh	r2, [r3, #0]
 800f000:	e010      	b.n	800f024 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else if(  (PSV_Pip_average.PRESSURE_SUPPORT_AVG_VAL  <= (Set_PIP-4) )  )
 800f002:	78fb      	ldrb	r3, [r7, #3]
 800f004:	3b03      	subs	r3, #3
 800f006:	4a0b      	ldr	r2, [pc, #44]	; (800f034 <PSV_TUNE_PIP_BLOWER+0xec>)
 800f008:	7b12      	ldrb	r2, [r2, #12]
 800f00a:	4293      	cmp	r3, r2
 800f00c:	dd06      	ble.n	800f01c <PSV_TUNE_PIP_BLOWER+0xd4>
	{
		*Last_Blower_DAC_Val = (*Last_Blower_DAC_Val+40);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	881b      	ldrh	r3, [r3, #0]
 800f012:	3328      	adds	r3, #40	; 0x28
 800f014:	b29a      	uxth	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	801a      	strh	r2, [r3, #0]
 800f01a:	e003      	b.n	800f024 <PSV_TUNE_PIP_BLOWER+0xdc>
	}
	else
	{
		*Last_Blower_DAC_Val = *Last_Blower_DAC_Val;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	881a      	ldrh	r2, [r3, #0]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	801a      	strh	r2, [r3, #0]
	}
	return *Last_Blower_DAC_Val;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	881b      	ldrh	r3, [r3, #0]
}
 800f028:	4618      	mov	r0, r3
 800f02a:	370c      	adds	r7, #12
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	200124d0 	.word	0x200124d0

0800f038 <BACKUP_PC_CMV_START>:



static void BACKUP_PC_CMV_START()
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	af00      	add	r7, sp, #0
	if(Backup_PC_CMV_SET_VALUE == CHANGE_HAPPEN)
 800f03c:	4bac      	ldr	r3, [pc, #688]	; (800f2f0 <BACKUP_PC_CMV_START+0x2b8>)
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	2b01      	cmp	r3, #1
 800f042:	f040 80fa 	bne.w	800f23a <BACKUP_PC_CMV_START+0x202>
	{
		Mode                                                  = Backup_Pccmv;
 800f046:	4bab      	ldr	r3, [pc, #684]	; (800f2f4 <BACKUP_PC_CMV_START+0x2bc>)
 800f048:	2215      	movs	r2, #21
 800f04a:	701a      	strb	r2, [r3, #0]
		Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 800f04c:	4baa      	ldr	r3, [pc, #680]	; (800f2f8 <BACKUP_PC_CMV_START+0x2c0>)
 800f04e:	2200      	movs	r2, #0
 800f050:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			              = OPENED;
 800f052:	4baa      	ldr	r3, [pc, #680]	; (800f2fc <BACKUP_PC_CMV_START+0x2c4>)
 800f054:	2200      	movs	r2, #0
 800f056:	701a      	strb	r2, [r3, #0]
		 Oxygen_Parameter.O2_DAC=1700;
 800f058:	4ba9      	ldr	r3, [pc, #676]	; (800f300 <BACKUP_PC_CMV_START+0x2c8>)
 800f05a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800f05e:	60da      	str	r2, [r3, #12]


		if(Vent_Type == MASK_MODE)
 800f060:	4ba8      	ldr	r3, [pc, #672]	; (800f304 <BACKUP_PC_CMV_START+0x2cc>)
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	2b01      	cmp	r3, #1
 800f066:	d120      	bne.n	800f0aa <BACKUP_PC_CMV_START+0x72>
		{
			Maximum_Limit=3;
 800f068:	4ba7      	ldr	r3, [pc, #668]	; (800f308 <BACKUP_PC_CMV_START+0x2d0>)
 800f06a:	2203      	movs	r2, #3
 800f06c:	701a      	strb	r2, [r3, #0]
			if(Common_Mode_Parameter._FIO2_Val == 100)
 800f06e:	4ba7      	ldr	r3, [pc, #668]	; (800f30c <BACKUP_PC_CMV_START+0x2d4>)
 800f070:	78db      	ldrb	r3, [r3, #3]
 800f072:	2b64      	cmp	r3, #100	; 0x64
 800f074:	d10f      	bne.n	800f096 <BACKUP_PC_CMV_START+0x5e>
			{
				Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = APNEA_DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 800f076:	4ba6      	ldr	r3, [pc, #664]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fa fb8a 	bl	8009794 <APNEA_DAC_VAL>
 800f080:	4603      	mov	r3, r0
 800f082:	461a      	mov	r2, r3
 800f084:	4ba3      	ldr	r3, [pc, #652]	; (800f314 <BACKUP_PC_CMV_START+0x2dc>)
 800f086:	811a      	strh	r2, [r3, #8]
				Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL  = Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL -200;
 800f088:	4ba2      	ldr	r3, [pc, #648]	; (800f314 <BACKUP_PC_CMV_START+0x2dc>)
 800f08a:	891b      	ldrh	r3, [r3, #8]
 800f08c:	3bc8      	subs	r3, #200	; 0xc8
 800f08e:	b29a      	uxth	r2, r3
 800f090:	4ba0      	ldr	r3, [pc, #640]	; (800f314 <BACKUP_PC_CMV_START+0x2dc>)
 800f092:	811a      	strh	r2, [r3, #8]
 800f094:	e019      	b.n	800f0ca <BACKUP_PC_CMV_START+0x92>
			}
			else
			{
				Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = APNEA_DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 800f096:	4b9e      	ldr	r3, [pc, #632]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fa fb7a 	bl	8009794 <APNEA_DAC_VAL>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	4b9b      	ldr	r3, [pc, #620]	; (800f314 <BACKUP_PC_CMV_START+0x2dc>)
 800f0a6:	811a      	strh	r2, [r3, #8]
 800f0a8:	e00f      	b.n	800f0ca <BACKUP_PC_CMV_START+0x92>
			}
		}
		else if(Vent_Type == ET_TUBE_MODE)
 800f0aa:	4b96      	ldr	r3, [pc, #600]	; (800f304 <BACKUP_PC_CMV_START+0x2cc>)
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d10b      	bne.n	800f0ca <BACKUP_PC_CMV_START+0x92>
		{
			Maximum_Limit=6;
 800f0b2:	4b95      	ldr	r3, [pc, #596]	; (800f308 <BACKUP_PC_CMV_START+0x2d0>)
 800f0b4:	2206      	movs	r2, #6
 800f0b6:	701a      	strb	r2, [r3, #0]
			Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = DAC_VAL(BACKUP_PC_CMV.PIP_Val);
 800f0b8:	4b95      	ldr	r3, [pc, #596]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7f9 ffa5 	bl	800900c <DAC_VAL>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	4b93      	ldr	r3, [pc, #588]	; (800f314 <BACKUP_PC_CMV_START+0x2dc>)
 800f0c8:	811a      	strh	r2, [r3, #8]
		}


	    	PIP_control_Task.PIP_Control_Task_Delay           = 10;                               //new
 800f0ca:	4b93      	ldr	r3, [pc, #588]	; (800f318 <BACKUP_PC_CMV_START+0x2e0>)
 800f0cc:	220a      	movs	r2, #10
 800f0ce:	801a      	strh	r2, [r3, #0]
	    	PIP_control_Task.Increase_Each_DAC_SET_CONST      = 30;                               //new
 800f0d0:	4b91      	ldr	r3, [pc, #580]	; (800f318 <BACKUP_PC_CMV_START+0x2e0>)
 800f0d2:	221e      	movs	r2, #30
 800f0d4:	80da      	strh	r2, [r3, #6]
	    	BACKUP_PC_CMV.RISE_TIME_MS_Val                    = (BACKUP_PC_CMV.Rise_Time *100);
 800f0d6:	4b8e      	ldr	r3, [pc, #568]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f0d8:	7c9b      	ldrb	r3, [r3, #18]
 800f0da:	461a      	mov	r2, r3
 800f0dc:	2364      	movs	r3, #100	; 0x64
 800f0de:	fb03 f302 	mul.w	r3, r3, r2
 800f0e2:	ee07 3a90 	vmov	s15, r3
 800f0e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f0ea:	4b89      	ldr	r3, [pc, #548]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f0ec:	edc3 7a01 	vstr	s15, [r3, #4]

	    	if(BACKUP_PC_CMV.RISE_TIME_MS_Val >= BACKUP_PC_CMV.INSPIRATION_TIME)                  //new
 800f0f0:	4b87      	ldr	r3, [pc, #540]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f0f2:	ed93 7a01 	vldr	s14, [r3, #4]
 800f0f6:	4b86      	ldr	r3, [pc, #536]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f0f8:	689b      	ldr	r3, [r3, #8]
 800f0fa:	ee07 3a90 	vmov	s15, r3
 800f0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10a:	db08      	blt.n	800f11e <BACKUP_PC_CMV_START+0xe6>
	    	{
	    		BACKUP_PC_CMV.RISE_TIME_MS_Val =BACKUP_PC_CMV.INSPIRATION_TIME;
 800f10c:	4b80      	ldr	r3, [pc, #512]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	ee07 3a90 	vmov	s15, r3
 800f114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f118:	4b7d      	ldr	r3, [pc, #500]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f11a:	edc3 7a01 	vstr	s15, [r3, #4]
	    	}
	    	if(BACKUP_PC_CMV.RISE_TIME_MS_Val <=600)
 800f11e:	4b7c      	ldr	r3, [pc, #496]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f120:	edd3 7a01 	vldr	s15, [r3, #4]
 800f124:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800f31c <BACKUP_PC_CMV_START+0x2e4>
 800f128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f130:	d802      	bhi.n	800f138 <BACKUP_PC_CMV_START+0x100>
	    	{
	    		BACKUP_PC_CMV.RISE_TIME_MS_Val =600;
 800f132:	4b77      	ldr	r3, [pc, #476]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f134:	4a7a      	ldr	r2, [pc, #488]	; (800f320 <BACKUP_PC_CMV_START+0x2e8>)
 800f136:	605a      	str	r2, [r3, #4]
	    	}
	    	BACKUP_PC_CMV.Rise_Time_percentage   = ((float)BACKUP_PC_CMV.RISE_TIME_MS_Val /BACKUP_PC_CMV.INSPIRATION_TIME) * 100.00;     //new
 800f138:	4b75      	ldr	r3, [pc, #468]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f13a:	ed93 7a01 	vldr	s14, [r3, #4]
 800f13e:	4b74      	ldr	r3, [pc, #464]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f140:	689b      	ldr	r3, [r3, #8]
 800f142:	ee07 3a90 	vmov	s15, r3
 800f146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f14a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f14e:	ee16 0a90 	vmov	r0, s13
 800f152:	f7f1 f9a1 	bl	8000498 <__aeabi_f2d>
 800f156:	f04f 0200 	mov.w	r2, #0
 800f15a:	4b72      	ldr	r3, [pc, #456]	; (800f324 <BACKUP_PC_CMV_START+0x2ec>)
 800f15c:	f7f1 f9f4 	bl	8000548 <__aeabi_dmul>
 800f160:	4602      	mov	r2, r0
 800f162:	460b      	mov	r3, r1
 800f164:	4610      	mov	r0, r2
 800f166:	4619      	mov	r1, r3
 800f168:	f7f1 fcb0 	bl	8000acc <__aeabi_d2uiz>
 800f16c:	4603      	mov	r3, r0
 800f16e:	b2da      	uxtb	r2, r3
 800f170:	4b67      	ldr	r3, [pc, #412]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f172:	74da      	strb	r2, [r3, #19]
	    	PIP_control_Task.PIP_Acheived_Time_Ms      	 =  (BACKUP_PC_CMV.RISE_TIME_MS_Val * 2);
 800f174:	4b66      	ldr	r3, [pc, #408]	; (800f310 <BACKUP_PC_CMV_START+0x2d8>)
 800f176:	edd3 7a01 	vldr	s15, [r3, #4]
 800f17a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f17e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f182:	ee17 3a90 	vmov	r3, s15
 800f186:	b21a      	sxth	r2, r3
 800f188:	4b63      	ldr	r3, [pc, #396]	; (800f318 <BACKUP_PC_CMV_START+0x2e0>)
 800f18a:	809a      	strh	r2, [r3, #4]


			Smooth_Ramp_Time_Val_Count = 0;
 800f18c:	4b66      	ldr	r3, [pc, #408]	; (800f328 <BACKUP_PC_CMV_START+0x2f0>)
 800f18e:	2200      	movs	r2, #0
 800f190:	701a      	strb	r2, [r3, #0]
			Smooth_Ramp_Time_Val       = 15;
 800f192:	4b66      	ldr	r3, [pc, #408]	; (800f32c <BACKUP_PC_CMV_START+0x2f4>)
 800f194:	220f      	movs	r2, #15
 800f196:	701a      	strb	r2, [r3, #0]
			if(Common_Mode_Parameter._PEEP_Val >= 15)
 800f198:	4b5c      	ldr	r3, [pc, #368]	; (800f30c <BACKUP_PC_CMV_START+0x2d4>)
 800f19a:	785b      	ldrb	r3, [r3, #1]
 800f19c:	2b0e      	cmp	r3, #14
 800f19e:	d903      	bls.n	800f1a8 <BACKUP_PC_CMV_START+0x170>
			{
			  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800f1a0:	4b63      	ldr	r3, [pc, #396]	; (800f330 <BACKUP_PC_CMV_START+0x2f8>)
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	701a      	strb	r2, [r3, #0]
 800f1a6:	e00e      	b.n	800f1c6 <BACKUP_PC_CMV_START+0x18e>
			}
			else if( (Common_Mode_Parameter._PEEP_Val < 15) && (Common_Mode_Parameter._PEEP_Val >= 9))
 800f1a8:	4b58      	ldr	r3, [pc, #352]	; (800f30c <BACKUP_PC_CMV_START+0x2d4>)
 800f1aa:	785b      	ldrb	r3, [r3, #1]
 800f1ac:	2b0e      	cmp	r3, #14
 800f1ae:	d807      	bhi.n	800f1c0 <BACKUP_PC_CMV_START+0x188>
 800f1b0:	4b56      	ldr	r3, [pc, #344]	; (800f30c <BACKUP_PC_CMV_START+0x2d4>)
 800f1b2:	785b      	ldrb	r3, [r3, #1]
 800f1b4:	2b08      	cmp	r3, #8
 800f1b6:	d903      	bls.n	800f1c0 <BACKUP_PC_CMV_START+0x188>
			{
			  Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Pending;
 800f1b8:	4b5d      	ldr	r3, [pc, #372]	; (800f330 <BACKUP_PC_CMV_START+0x2f8>)
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	701a      	strb	r2, [r3, #0]
 800f1be:	e002      	b.n	800f1c6 <BACKUP_PC_CMV_START+0x18e>
			}
			else
			{
				Smooth_Ramp_Time           = Smooth_Ramp_Time_Val_Finished;
 800f1c0:	4b5b      	ldr	r3, [pc, #364]	; (800f330 <BACKUP_PC_CMV_START+0x2f8>)
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	701a      	strb	r2, [r3, #0]
			}


			controlsys_Init(&Parker_valve_tune);          //parker
 800f1c6:	485b      	ldr	r0, [pc, #364]	; (800f334 <BACKUP_PC_CMV_START+0x2fc>)
 800f1c8:	f001 f946 	bl	8010458 <controlsys_Init>
			Avg_Flow                                                   = 1;
 800f1cc:	4b5a      	ldr	r3, [pc, #360]	; (800f338 <BACKUP_PC_CMV_START+0x300>)
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	801a      	strh	r2, [r3, #0]
			Flow_Count                                                 = 0;
 800f1d2:	4b5a      	ldr	r3, [pc, #360]	; (800f33c <BACKUP_PC_CMV_START+0x304>)
 800f1d4:	f04f 0200 	mov.w	r2, #0
 800f1d8:	601a      	str	r2, [r3, #0]
			Flow_Cummulative_Val                                       = 0;
 800f1da:	4b59      	ldr	r3, [pc, #356]	; (800f340 <BACKUP_PC_CMV_START+0x308>)
 800f1dc:	f04f 0200 	mov.w	r2, #0
 800f1e0:	601a      	str	r2, [r3, #0]
			Check_Oxygen_Count                                         = 0;        //new
 800f1e2:	4b58      	ldr	r3, [pc, #352]	; (800f344 <BACKUP_PC_CMV_START+0x30c>)
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	701a      	strb	r2, [r3, #0]
			Temp_Dac                                                   = 1400;     //new
 800f1e8:	4b57      	ldr	r3, [pc, #348]	; (800f348 <BACKUP_PC_CMV_START+0x310>)
 800f1ea:	f44f 62af 	mov.w	r2, #1400	; 0x578
 800f1ee:	801a      	strh	r2, [r3, #0]
			inc_dac                                                    = 2;        //new
 800f1f0:	4b56      	ldr	r3, [pc, #344]	; (800f34c <BACKUP_PC_CMV_START+0x314>)
 800f1f2:	2202      	movs	r2, #2
 800f1f4:	801a      	strh	r2, [r3, #0]
			Oxygen_Blending_Status                                     = OXYGEN_NOT_ACHIEVED;  //new
 800f1f6:	4b56      	ldr	r3, [pc, #344]	; (800f350 <BACKUP_PC_CMV_START+0x318>)
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	701a      	strb	r2, [r3, #0]

		PIP_Average_Parameter.PIP_Cumulative_Val              = 1;
 800f1fc:	4b55      	ldr	r3, [pc, #340]	; (800f354 <BACKUP_PC_CMV_START+0x31c>)
 800f1fe:	2201      	movs	r2, #1
 800f200:	605a      	str	r2, [r3, #4]
		PIP_Average_Parameter.PIP_Event_Count                 = 1;
 800f202:	4b54      	ldr	r3, [pc, #336]	; (800f354 <BACKUP_PC_CMV_START+0x31c>)
 800f204:	2201      	movs	r2, #1
 800f206:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = 1;
 800f208:	4b53      	ldr	r3, [pc, #332]	; (800f358 <BACKUP_PC_CMV_START+0x320>)
 800f20a:	2201      	movs	r2, #1
 800f20c:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 800f20e:	4b52      	ldr	r3, [pc, #328]	; (800f358 <BACKUP_PC_CMV_START+0x320>)
 800f210:	2201      	movs	r2, #1
 800f212:	60da      	str	r2, [r3, #12]
		Need_PID_Task_Delay                                   = NO;
 800f214:	4b51      	ldr	r3, [pc, #324]	; (800f35c <BACKUP_PC_CMV_START+0x324>)
 800f216:	2200      	movs	r2, #0
 800f218:	701a      	strb	r2, [r3, #0]
		Tune_PID_Task_Delay                                   = T_OPEN;
 800f21a:	4b51      	ldr	r3, [pc, #324]	; (800f360 <BACKUP_PC_CMV_START+0x328>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	701a      	strb	r2, [r3, #0]
		PIP_control_Task.Low_PIP_Count                        = RESET;
 800f220:	4b3d      	ldr	r3, [pc, #244]	; (800f318 <BACKUP_PC_CMV_START+0x2e0>)
 800f222:	2200      	movs	r2, #0
 800f224:	729a      	strb	r2, [r3, #10]
		PIP_control_Task.Last_Early_Acheived_Ramp_Time_Percentage  = RESET;
 800f226:	4b3c      	ldr	r3, [pc, #240]	; (800f318 <BACKUP_PC_CMV_START+0x2e0>)
 800f228:	2200      	movs	r2, #0
 800f22a:	725a      	strb	r2, [r3, #9]
		Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 800f22c:	4b4d      	ldr	r3, [pc, #308]	; (800f364 <BACKUP_PC_CMV_START+0x32c>)
 800f22e:	2201      	movs	r2, #1
 800f230:	701a      	strb	r2, [r3, #0]
		Backup_PC_CMV_SET_VALUE                               = NO_CHANGES;
 800f232:	4b2f      	ldr	r3, [pc, #188]	; (800f2f0 <BACKUP_PC_CMV_START+0x2b8>)
 800f234:	2200      	movs	r2, #0
 800f236:	701a      	strb	r2, [r3, #0]
 800f238:	e025      	b.n	800f286 <BACKUP_PC_CMV_START+0x24e>
	 }
	 else if(Backup_PC_CMV_SET_VALUE == NO_CHANGES)
 800f23a:	4b2d      	ldr	r3, [pc, #180]	; (800f2f0 <BACKUP_PC_CMV_START+0x2b8>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d121      	bne.n	800f286 <BACKUP_PC_CMV_START+0x24e>
	 {
		Mode                                                  = Backup_Pccmv;
 800f242:	4b2c      	ldr	r3, [pc, #176]	; (800f2f4 <BACKUP_PC_CMV_START+0x2bc>)
 800f244:	2215      	movs	r2, #21
 800f246:	701a      	strb	r2, [r3, #0]
		Peep_Status                   				          = PEEP_NOT_ACHEIVED;
 800f248:	4b2b      	ldr	r3, [pc, #172]	; (800f2f8 <BACKUP_PC_CMV_START+0x2c0>)
 800f24a:	2200      	movs	r2, #0
 800f24c:	701a      	strb	r2, [r3, #0]
		Expiratory_Valve_Lock_Delay   			              = OPENED;
 800f24e:	4b2b      	ldr	r3, [pc, #172]	; (800f2fc <BACKUP_PC_CMV_START+0x2c4>)
 800f250:	2200      	movs	r2, #0
 800f252:	701a      	strb	r2, [r3, #0]
		Pressure_Mode_blower_control.BLOWER_ENDING_DAC_SIGNAL = OLD.LAST_BLOWER_ENDING_DAC_SIGNAL;
 800f254:	4b44      	ldr	r3, [pc, #272]	; (800f368 <BACKUP_PC_CMV_START+0x330>)
 800f256:	8a9a      	ldrh	r2, [r3, #20]
 800f258:	4b2e      	ldr	r3, [pc, #184]	; (800f314 <BACKUP_PC_CMV_START+0x2dc>)
 800f25a:	811a      	strh	r2, [r3, #8]
		PIP_control_Task.PIP_Control_Task_Delay               = OLD.LAST_PIP_Control_Task_Delay;
 800f25c:	4b42      	ldr	r3, [pc, #264]	; (800f368 <BACKUP_PC_CMV_START+0x330>)
 800f25e:	8adb      	ldrh	r3, [r3, #22]
 800f260:	b21a      	sxth	r2, r3
 800f262:	4b2d      	ldr	r3, [pc, #180]	; (800f318 <BACKUP_PC_CMV_START+0x2e0>)
 800f264:	801a      	strh	r2, [r3, #0]
		PIP_control_Task.Increase_Each_DAC_SET_CONST          = OLD.LAST_Increase_Each_DAC_SET_CONST;
 800f266:	4b40      	ldr	r3, [pc, #256]	; (800f368 <BACKUP_PC_CMV_START+0x330>)
 800f268:	8b1b      	ldrh	r3, [r3, #24]
 800f26a:	b21a      	sxth	r2, r3
 800f26c:	4b2a      	ldr	r3, [pc, #168]	; (800f318 <BACKUP_PC_CMV_START+0x2e0>)
 800f26e:	80da      	strh	r2, [r3, #6]
		PEEP_Maintain_Parameter.PEEP_Cumulative_Val           = PEEP_Maintain_Parameter.PEEP_AVG_VAL;
 800f270:	4b39      	ldr	r3, [pc, #228]	; (800f358 <BACKUP_PC_CMV_START+0x320>)
 800f272:	7c1b      	ldrb	r3, [r3, #16]
 800f274:	461a      	mov	r2, r3
 800f276:	4b38      	ldr	r3, [pc, #224]	; (800f358 <BACKUP_PC_CMV_START+0x320>)
 800f278:	609a      	str	r2, [r3, #8]
		PEEP_Maintain_Parameter.PEEP_Event_Count              = 1;
 800f27a:	4b37      	ldr	r3, [pc, #220]	; (800f358 <BACKUP_PC_CMV_START+0x320>)
 800f27c:	2201      	movs	r2, #1
 800f27e:	60da      	str	r2, [r3, #12]
		Next_Half_Breath_Cycle                                = Generate_Expiration_Cycle;
 800f280:	4b38      	ldr	r3, [pc, #224]	; (800f364 <BACKUP_PC_CMV_START+0x32c>)
 800f282:	2201      	movs	r2, #1
 800f284:	701a      	strb	r2, [r3, #0]
	 }
	    Alert_Check = 5;
 800f286:	4b39      	ldr	r3, [pc, #228]	; (800f36c <BACKUP_PC_CMV_START+0x334>)
 800f288:	2205      	movs	r2, #5
 800f28a:	701a      	strb	r2, [r3, #0]
		vTaskResume(One_Time_Handler);
 800f28c:	4b38      	ldr	r3, [pc, #224]	; (800f370 <BACKUP_PC_CMV_START+0x338>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	4618      	mov	r0, r3
 800f292:	f00b ffd3 	bl	801b23c <vTaskResume>
		vTaskResume(BACKUP_PC_Handler);
 800f296:	4b37      	ldr	r3, [pc, #220]	; (800f374 <BACKUP_PC_CMV_START+0x33c>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f00b ffce 	bl	801b23c <vTaskResume>
		vTaskResume(PIP_Control_Task_Handler);
 800f2a0:	4b35      	ldr	r3, [pc, #212]	; (800f378 <BACKUP_PC_CMV_START+0x340>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f00b ffc9 	bl	801b23c <vTaskResume>
		vTaskResume(Alert_Handler);
 800f2aa:	4b34      	ldr	r3, [pc, #208]	; (800f37c <BACKUP_PC_CMV_START+0x344>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f00b ffc4 	bl	801b23c <vTaskResume>
		if(Common_Mode_Parameter._FIO2_Val > 21)
 800f2b4:	4b15      	ldr	r3, [pc, #84]	; (800f30c <BACKUP_PC_CMV_START+0x2d4>)
 800f2b6:	78db      	ldrb	r3, [r3, #3]
 800f2b8:	2b15      	cmp	r3, #21
 800f2ba:	d905      	bls.n	800f2c8 <BACKUP_PC_CMV_START+0x290>
		{

			vTaskResume(Oxygen_Blending_Handler);
 800f2bc:	4b30      	ldr	r3, [pc, #192]	; (800f380 <BACKUP_PC_CMV_START+0x348>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f00b ffbb 	bl	801b23c <vTaskResume>
 800f2c6:	e007      	b.n	800f2d8 <BACKUP_PC_CMV_START+0x2a0>
		}
		else
		{
			Parkar_valve_Signal(0);
 800f2c8:	4b2e      	ldr	r3, [pc, #184]	; (800f384 <BACKUP_PC_CMV_START+0x34c>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	615a      	str	r2, [r3, #20]
			vTaskSuspend(Oxygen_Blending_Handler);
 800f2ce:	4b2c      	ldr	r3, [pc, #176]	; (800f380 <BACKUP_PC_CMV_START+0x348>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f00b feee 	bl	801b0b4 <vTaskSuspend>
		}
		vTaskSuspend(PSV_PID_Handler);
 800f2d8:	4b2b      	ldr	r3, [pc, #172]	; (800f388 <BACKUP_PC_CMV_START+0x350>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f00b fee9 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(PSV_Handler);
 800f2e2:	4b2a      	ldr	r3, [pc, #168]	; (800f38c <BACKUP_PC_CMV_START+0x354>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f00b fee4 	bl	801b0b4 <vTaskSuspend>
}
 800f2ec:	bf00      	nop
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	20012594 	.word	0x20012594
 800f2f4:	200126ba 	.word	0x200126ba
 800f2f8:	20012a37 	.word	0x20012a37
 800f2fc:	20012a34 	.word	0x20012a34
 800f300:	200129d4 	.word	0x200129d4
 800f304:	200129f4 	.word	0x200129f4
 800f308:	20012a35 	.word	0x20012a35
 800f30c:	200124f0 	.word	0x200124f0
 800f310:	200121b8 	.word	0x200121b8
 800f314:	20012978 	.word	0x20012978
 800f318:	200123d0 	.word	0x200123d0
 800f31c:	44160000 	.word	0x44160000
 800f320:	44160000 	.word	0x44160000
 800f324:	40590000 	.word	0x40590000
 800f328:	200129f6 	.word	0x200129f6
 800f32c:	200129a1 	.word	0x200129a1
 800f330:	200124ce 	.word	0x200124ce
 800f334:	2000001c 	.word	0x2000001c
 800f338:	2001283c 	.word	0x2001283c
 800f33c:	200128a0 	.word	0x200128a0
 800f340:	200122f8 	.word	0x200122f8
 800f344:	20012a0a 	.word	0x20012a0a
 800f348:	20012474 	.word	0x20012474
 800f34c:	200123ce 	.word	0x200123ce
 800f350:	20012b71 	.word	0x20012b71
 800f354:	200124bc 	.word	0x200124bc
 800f358:	20012c74 	.word	0x20012c74
 800f35c:	20012a38 	.word	0x20012a38
 800f360:	20012620 	.word	0x20012620
 800f364:	2001269e 	.word	0x2001269e
 800f368:	20012c08 	.word	0x20012c08
 800f36c:	20012aa0 	.word	0x20012aa0
 800f370:	200129cc 	.word	0x200129cc
 800f374:	20012500 	.word	0x20012500
 800f378:	200124ec 	.word	0x200124ec
 800f37c:	20012968 	.word	0x20012968
 800f380:	200127ac 	.word	0x200127ac
 800f384:	40007400 	.word	0x40007400
 800f388:	200127a8 	.word	0x200127a8
 800f38c:	200128a8 	.word	0x200128a8

0800f390 <RESET_FLAGS>:




static void RESET_FLAGS()
{
 800f390:	b580      	push	{r7, lr}
 800f392:	af00      	add	r7, sp, #0
	Apnea_Mode                                  = OFF;
 800f394:	4b0f      	ldr	r3, [pc, #60]	; (800f3d4 <RESET_FLAGS+0x44>)
 800f396:	2201      	movs	r2, #1
 800f398:	701a      	strb	r2, [r3, #0]
	Blower_Signal(0);
 800f39a:	4b0f      	ldr	r3, [pc, #60]	; (800f3d8 <RESET_FLAGS+0x48>)
 800f39c:	2200      	movs	r2, #0
 800f39e:	609a      	str	r2, [r3, #8]
	Peep_Status                   				= PEEP_NOT_ACHEIVED;
 800f3a0:	4b0e      	ldr	r3, [pc, #56]	; (800f3dc <RESET_FLAGS+0x4c>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			    = OPENED;
 800f3a6:	4b0e      	ldr	r3, [pc, #56]	; (800f3e0 <RESET_FLAGS+0x50>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	701a      	strb	r2, [r3, #0]
	Clear_All_Alert_Bits();
 800f3ac:	f7f1 fde2 	bl	8000f74 <Clear_All_Alert_Bits>
	Send_Bluetooth_Data_Farme                   = SEND_ALERT_FRAME;
 800f3b0:	4b0c      	ldr	r3, [pc, #48]	; (800f3e4 <RESET_FLAGS+0x54>)
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	701a      	strb	r2, [r3, #0]
	Apnea_Alert                                 = APNEA_ALERT_HAPPEN;
 800f3b6:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <RESET_FLAGS+0x58>)
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	701a      	strb	r2, [r3, #0]
	Alert_Status                                = ALERT_HAPPEN;
 800f3bc:	4b0b      	ldr	r3, [pc, #44]	; (800f3ec <RESET_FLAGS+0x5c>)
 800f3be:	2201      	movs	r2, #1
 800f3c0:	701a      	strb	r2, [r3, #0]
	SET_ALERT_BIT(SECOND_FRAME_UN,_ALERT_APNEA);
 800f3c2:	4a0b      	ldr	r2, [pc, #44]	; (800f3f0 <RESET_FLAGS+0x60>)
 800f3c4:	7913      	ldrb	r3, [r2, #4]
 800f3c6:	f043 0301 	orr.w	r3, r3, #1
 800f3ca:	7113      	strb	r3, [r2, #4]
	LED_Alert();
 800f3cc:	f7f2 fbfa 	bl	8001bc4 <LED_Alert>
}
 800f3d0:	bf00      	nop
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	20012aa1 	.word	0x20012aa1
 800f3d8:	40007400 	.word	0x40007400
 800f3dc:	20012a37 	.word	0x20012a37
 800f3e0:	20012a34 	.word	0x20012a34
 800f3e4:	2001269d 	.word	0x2001269d
 800f3e8:	200129f5 	.word	0x200129f5
 800f3ec:	2001287c 	.word	0x2001287c
 800f3f0:	20012408 	.word	0x20012408

0800f3f4 <Patient_Circuit_Disconnected_Alert_PSV>:


static void Patient_Circuit_Disconnected_Alert_PSV()
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	af00      	add	r7, sp, #0
	if(Vent_Type == MASK_MODE)
 800f3f8:	4b9f      	ldr	r3, [pc, #636]	; (800f678 <Patient_Circuit_Disconnected_Alert_PSV+0x284>)
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d16d      	bne.n	800f4dc <Patient_Circuit_Disconnected_Alert_PSV+0xe8>
	{
		if(  (GRAPH_VALUES.pressure<=3) && (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2 || ( (GRAPH_VALUES.flow>= 80) && (GRAPH_VALUES.pressure<=3) ) ) )
 800f400:	4b9e      	ldr	r3, [pc, #632]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	2b03      	cmp	r3, #3
 800f406:	f200 8192 	bhi.w	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
 800f40a:	4b9c      	ldr	r3, [pc, #624]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f40c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f410:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f418:	d023      	beq.n	800f462 <Patient_Circuit_Disconnected_Alert_PSV+0x6e>
 800f41a:	4b98      	ldr	r3, [pc, #608]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f41c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f420:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f424:	eef4 7a47 	vcmp.f32	s15, s14
 800f428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f42c:	d019      	beq.n	800f462 <Patient_Circuit_Disconnected_Alert_PSV+0x6e>
 800f42e:	4b93      	ldr	r3, [pc, #588]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f430:	edd3 7a01 	vldr	s15, [r3, #4]
 800f434:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800f438:	eef4 7a47 	vcmp.f32	s15, s14
 800f43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f440:	d00f      	beq.n	800f462 <Patient_Circuit_Disconnected_Alert_PSV+0x6e>
 800f442:	4b8e      	ldr	r3, [pc, #568]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f444:	edd3 7a01 	vldr	s15, [r3, #4]
 800f448:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800f680 <Patient_Circuit_Disconnected_Alert_PSV+0x28c>
 800f44c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f454:	da00      	bge.n	800f458 <Patient_Circuit_Disconnected_Alert_PSV+0x64>
							}
					}
				}
		}
	}
}
 800f456:	e16a      	b.n	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
		if(  (GRAPH_VALUES.pressure<=3) && (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2 || ( (GRAPH_VALUES.flow>= 80) && (GRAPH_VALUES.pressure<=3) ) ) )
 800f458:	4b88      	ldr	r3, [pc, #544]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	2b03      	cmp	r3, #3
 800f45e:	f200 8166 	bhi.w	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
				if((DAC1->DHR12R1)>=400)
 800f462:	4b88      	ldr	r3, [pc, #544]	; (800f684 <Patient_Circuit_Disconnected_Alert_PSV+0x290>)
 800f464:	689b      	ldr	r3, [r3, #8]
 800f466:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f46a:	f0c0 8160 	bcc.w	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
					if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 800f46e:	4b86      	ldr	r3, [pc, #536]	; (800f688 <Patient_Circuit_Disconnected_Alert_PSV+0x294>)
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	f040 815b 	bne.w	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
						Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 800f478:	4b84      	ldr	r3, [pc, #528]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f47a:	88db      	ldrh	r3, [r3, #6]
 800f47c:	3301      	adds	r3, #1
 800f47e:	b29a      	uxth	r2, r3
 800f480:	4b82      	ldr	r3, [pc, #520]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f482:	80da      	strh	r2, [r3, #6]
							if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 500)
 800f484:	4b81      	ldr	r3, [pc, #516]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f486:	88db      	ldrh	r3, [r3, #6]
 800f488:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f48c:	f0c0 814f 	bcc.w	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
								Clear_All_Alert_Bits();
 800f490:	f7f1 fd70 	bl	8000f74 <Clear_All_Alert_Bits>
								Alert_Status = ALERT_HAPPEN;
 800f494:	4b7e      	ldr	r3, [pc, #504]	; (800f690 <Patient_Circuit_Disconnected_Alert_PSV+0x29c>)
 800f496:	2201      	movs	r2, #1
 800f498:	701a      	strb	r2, [r3, #0]
								SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 800f49a:	4a7e      	ldr	r2, [pc, #504]	; (800f694 <Patient_Circuit_Disconnected_Alert_PSV+0x2a0>)
 800f49c:	78d3      	ldrb	r3, [r2, #3]
 800f49e:	f043 0310 	orr.w	r3, r3, #16
 800f4a2:	70d3      	strb	r3, [r2, #3]
								PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 800f4a4:	4b78      	ldr	r3, [pc, #480]	; (800f688 <Patient_Circuit_Disconnected_Alert_PSV+0x294>)
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	701a      	strb	r2, [r3, #0]
								Send_Bluetooth_Data_Farme                = SEND_ALERT_FRAME;
 800f4aa:	4b7b      	ldr	r3, [pc, #492]	; (800f698 <Patient_Circuit_Disconnected_Alert_PSV+0x2a4>)
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	701a      	strb	r2, [r3, #0]
								Apnea_Alert                              = APNEA_ALERT_HAPPEN;
 800f4b0:	4b7a      	ldr	r3, [pc, #488]	; (800f69c <Patient_Circuit_Disconnected_Alert_PSV+0x2a8>)
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	701a      	strb	r2, [r3, #0]
								PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 800f4b6:	4b74      	ldr	r3, [pc, #464]	; (800f688 <Patient_Circuit_Disconnected_Alert_PSV+0x294>)
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	701a      	strb	r2, [r3, #0]
								LED_Alert();
 800f4bc:	f7f2 fb82 	bl	8001bc4 <LED_Alert>
								PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL           = APNEA_DAC_VAL(PSV.PEEP_Val );
 800f4c0:	4b77      	ldr	r3, [pc, #476]	; (800f6a0 <Patient_Circuit_Disconnected_Alert_PSV+0x2ac>)
 800f4c2:	789b      	ldrb	r3, [r3, #2]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fa f965 	bl	8009794 <APNEA_DAC_VAL>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	4b75      	ldr	r3, [pc, #468]	; (800f6a4 <Patient_Circuit_Disconnected_Alert_PSV+0x2b0>)
 800f4d0:	80da      	strh	r2, [r3, #6]
								PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL      = PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL;
 800f4d2:	4b74      	ldr	r3, [pc, #464]	; (800f6a4 <Patient_Circuit_Disconnected_Alert_PSV+0x2b0>)
 800f4d4:	88da      	ldrh	r2, [r3, #6]
 800f4d6:	4b73      	ldr	r3, [pc, #460]	; (800f6a4 <Patient_Circuit_Disconnected_Alert_PSV+0x2b0>)
 800f4d8:	811a      	strh	r2, [r3, #8]
}
 800f4da:	e128      	b.n	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
	else if(Vent_Type == ET_TUBE_MODE)
 800f4dc:	4b66      	ldr	r3, [pc, #408]	; (800f678 <Patient_Circuit_Disconnected_Alert_PSV+0x284>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f040 8124 	bne.w	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
		if( (GRAPH_VALUES.pressure <= (1))   && (GRAPH_VALUES.flow<=5 ))
 800f4e6:	4b65      	ldr	r3, [pc, #404]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d843      	bhi.n	800f576 <Patient_Circuit_Disconnected_Alert_PSV+0x182>
 800f4ee:	4b63      	ldr	r3, [pc, #396]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f4f0:	edd3 7a01 	vldr	s15, [r3, #4]
 800f4f4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800f4f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f500:	d839      	bhi.n	800f576 <Patient_Circuit_Disconnected_Alert_PSV+0x182>
				if((DAC1->DHR12R1)>=400)
 800f502:	4b60      	ldr	r3, [pc, #384]	; (800f684 <Patient_Circuit_Disconnected_Alert_PSV+0x290>)
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f50a:	f0c0 810d 	bcc.w	800f728 <Patient_Circuit_Disconnected_Alert_PSV+0x334>
					if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 800f50e:	4b5e      	ldr	r3, [pc, #376]	; (800f688 <Patient_Circuit_Disconnected_Alert_PSV+0x294>)
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	2b00      	cmp	r3, #0
 800f514:	f040 8108 	bne.w	800f728 <Patient_Circuit_Disconnected_Alert_PSV+0x334>
						Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 800f518:	4b5c      	ldr	r3, [pc, #368]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f51a:	88db      	ldrh	r3, [r3, #6]
 800f51c:	3301      	adds	r3, #1
 800f51e:	b29a      	uxth	r2, r3
 800f520:	4b5a      	ldr	r3, [pc, #360]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f522:	80da      	strh	r2, [r3, #6]
							if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 2000)
 800f524:	4b59      	ldr	r3, [pc, #356]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f526:	88db      	ldrh	r3, [r3, #6]
 800f528:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800f52c:	f0c0 80fc 	bcc.w	800f728 <Patient_Circuit_Disconnected_Alert_PSV+0x334>
								Clear_All_Alert_Bits();
 800f530:	f7f1 fd20 	bl	8000f74 <Clear_All_Alert_Bits>
								Alert_Status = ALERT_HAPPEN;
 800f534:	4b56      	ldr	r3, [pc, #344]	; (800f690 <Patient_Circuit_Disconnected_Alert_PSV+0x29c>)
 800f536:	2201      	movs	r2, #1
 800f538:	701a      	strb	r2, [r3, #0]
								SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 800f53a:	4a56      	ldr	r2, [pc, #344]	; (800f694 <Patient_Circuit_Disconnected_Alert_PSV+0x2a0>)
 800f53c:	78d3      	ldrb	r3, [r2, #3]
 800f53e:	f043 0310 	orr.w	r3, r3, #16
 800f542:	70d3      	strb	r3, [r2, #3]
								Send_Bluetooth_Data_Farme                = SEND_ALERT_FRAME;
 800f544:	4b54      	ldr	r3, [pc, #336]	; (800f698 <Patient_Circuit_Disconnected_Alert_PSV+0x2a4>)
 800f546:	2201      	movs	r2, #1
 800f548:	701a      	strb	r2, [r3, #0]
								Apnea_Alert                              = APNEA_ALERT_HAPPEN;
 800f54a:	4b54      	ldr	r3, [pc, #336]	; (800f69c <Patient_Circuit_Disconnected_Alert_PSV+0x2a8>)
 800f54c:	2201      	movs	r2, #1
 800f54e:	701a      	strb	r2, [r3, #0]
								LED_Alert();
 800f550:	f7f2 fb38 	bl	8001bc4 <LED_Alert>
								Alert_Count.Patient_Circuit_disconnected_Alert_Count = 0;
 800f554:	4b4d      	ldr	r3, [pc, #308]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f556:	2200      	movs	r2, #0
 800f558:	80da      	strh	r2, [r3, #6]
								PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL           = DAC_VAL(PSV.PEEP_Val );
 800f55a:	4b51      	ldr	r3, [pc, #324]	; (800f6a0 <Patient_Circuit_Disconnected_Alert_PSV+0x2ac>)
 800f55c:	789b      	ldrb	r3, [r3, #2]
 800f55e:	4618      	mov	r0, r3
 800f560:	f7f9 fd54 	bl	800900c <DAC_VAL>
 800f564:	4603      	mov	r3, r0
 800f566:	461a      	mov	r2, r3
 800f568:	4b4e      	ldr	r3, [pc, #312]	; (800f6a4 <Patient_Circuit_Disconnected_Alert_PSV+0x2b0>)
 800f56a:	80da      	strh	r2, [r3, #6]
								PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL      = PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL;
 800f56c:	4b4d      	ldr	r3, [pc, #308]	; (800f6a4 <Patient_Circuit_Disconnected_Alert_PSV+0x2b0>)
 800f56e:	88da      	ldrh	r2, [r3, #6]
 800f570:	4b4c      	ldr	r3, [pc, #304]	; (800f6a4 <Patient_Circuit_Disconnected_Alert_PSV+0x2b0>)
 800f572:	811a      	strh	r2, [r3, #8]
				if((DAC1->DHR12R1)>=400)
 800f574:	e0d8      	b.n	800f728 <Patient_Circuit_Disconnected_Alert_PSV+0x334>
		else if( (GRAPH_VALUES.pressure <= (1)) && (GRAPH_VALUES.flow>=50 ))
 800f576:	4b41      	ldr	r3, [pc, #260]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	d842      	bhi.n	800f604 <Patient_Circuit_Disconnected_Alert_PSV+0x210>
 800f57e:	4b3f      	ldr	r3, [pc, #252]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f580:	edd3 7a01 	vldr	s15, [r3, #4]
 800f584:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f6a8 <Patient_Circuit_Disconnected_Alert_PSV+0x2b4>
 800f588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f590:	db38      	blt.n	800f604 <Patient_Circuit_Disconnected_Alert_PSV+0x210>
				if((DAC1->DHR12R1)>=400)
 800f592:	4b3c      	ldr	r3, [pc, #240]	; (800f684 <Patient_Circuit_Disconnected_Alert_PSV+0x290>)
 800f594:	689b      	ldr	r3, [r3, #8]
 800f596:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f59a:	f0c0 80c7 	bcc.w	800f72c <Patient_Circuit_Disconnected_Alert_PSV+0x338>
					if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 800f59e:	4b3a      	ldr	r3, [pc, #232]	; (800f688 <Patient_Circuit_Disconnected_Alert_PSV+0x294>)
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f040 80c2 	bne.w	800f72c <Patient_Circuit_Disconnected_Alert_PSV+0x338>
						Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 800f5a8:	4b38      	ldr	r3, [pc, #224]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f5aa:	88db      	ldrh	r3, [r3, #6]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	4b36      	ldr	r3, [pc, #216]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f5b2:	80da      	strh	r2, [r3, #6]
							if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 4)
 800f5b4:	4b35      	ldr	r3, [pc, #212]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f5b6:	88db      	ldrh	r3, [r3, #6]
 800f5b8:	2b03      	cmp	r3, #3
 800f5ba:	f240 80b7 	bls.w	800f72c <Patient_Circuit_Disconnected_Alert_PSV+0x338>
								Clear_All_Alert_Bits();
 800f5be:	f7f1 fcd9 	bl	8000f74 <Clear_All_Alert_Bits>
								Alert_Status = ALERT_HAPPEN;
 800f5c2:	4b33      	ldr	r3, [pc, #204]	; (800f690 <Patient_Circuit_Disconnected_Alert_PSV+0x29c>)
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	701a      	strb	r2, [r3, #0]
								SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 800f5c8:	4a32      	ldr	r2, [pc, #200]	; (800f694 <Patient_Circuit_Disconnected_Alert_PSV+0x2a0>)
 800f5ca:	78d3      	ldrb	r3, [r2, #3]
 800f5cc:	f043 0310 	orr.w	r3, r3, #16
 800f5d0:	70d3      	strb	r3, [r2, #3]
								Send_Bluetooth_Data_Farme                = SEND_ALERT_FRAME;
 800f5d2:	4b31      	ldr	r3, [pc, #196]	; (800f698 <Patient_Circuit_Disconnected_Alert_PSV+0x2a4>)
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	701a      	strb	r2, [r3, #0]
								Apnea_Alert                              = APNEA_ALERT_HAPPEN;
 800f5d8:	4b30      	ldr	r3, [pc, #192]	; (800f69c <Patient_Circuit_Disconnected_Alert_PSV+0x2a8>)
 800f5da:	2201      	movs	r2, #1
 800f5dc:	701a      	strb	r2, [r3, #0]
								LED_Alert();
 800f5de:	f7f2 faf1 	bl	8001bc4 <LED_Alert>
								Alert_Count.Patient_Circuit_disconnected_Alert_Count = 0;
 800f5e2:	4b2a      	ldr	r3, [pc, #168]	; (800f68c <Patient_Circuit_Disconnected_Alert_PSV+0x298>)
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	80da      	strh	r2, [r3, #6]
								PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL           = DAC_VAL(PSV.PEEP_Val );
 800f5e8:	4b2d      	ldr	r3, [pc, #180]	; (800f6a0 <Patient_Circuit_Disconnected_Alert_PSV+0x2ac>)
 800f5ea:	789b      	ldrb	r3, [r3, #2]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7f9 fd0d 	bl	800900c <DAC_VAL>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	4b2b      	ldr	r3, [pc, #172]	; (800f6a4 <Patient_Circuit_Disconnected_Alert_PSV+0x2b0>)
 800f5f8:	80da      	strh	r2, [r3, #6]
								PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL      = PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL;
 800f5fa:	4b2a      	ldr	r3, [pc, #168]	; (800f6a4 <Patient_Circuit_Disconnected_Alert_PSV+0x2b0>)
 800f5fc:	88da      	ldrh	r2, [r3, #6]
 800f5fe:	4b29      	ldr	r3, [pc, #164]	; (800f6a4 <Patient_Circuit_Disconnected_Alert_PSV+0x2b0>)
 800f600:	811a      	strh	r2, [r3, #8]
				if((DAC1->DHR12R1)>=400)
 800f602:	e093      	b.n	800f72c <Patient_Circuit_Disconnected_Alert_PSV+0x338>
		else if(  ( ((PSV_Peep_Average.PEEP_AVG_VAL < (PSV.PEEP_Val -2))) && ( (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2))) || ( (GRAPH_VALUES.flow>= 50) && (GRAPH_VALUES.volume>=100)))
 800f604:	4b29      	ldr	r3, [pc, #164]	; (800f6ac <Patient_Circuit_Disconnected_Alert_PSV+0x2b8>)
 800f606:	7a1b      	ldrb	r3, [r3, #8]
 800f608:	461a      	mov	r2, r3
 800f60a:	4b25      	ldr	r3, [pc, #148]	; (800f6a0 <Patient_Circuit_Disconnected_Alert_PSV+0x2ac>)
 800f60c:	789b      	ldrb	r3, [r3, #2]
 800f60e:	3b02      	subs	r3, #2
 800f610:	429a      	cmp	r2, r3
 800f612:	da1b      	bge.n	800f64c <Patient_Circuit_Disconnected_Alert_PSV+0x258>
 800f614:	4b19      	ldr	r3, [pc, #100]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f616:	edd3 7a01 	vldr	s15, [r3, #4]
 800f61a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f622:	d047      	beq.n	800f6b4 <Patient_Circuit_Disconnected_Alert_PSV+0x2c0>
 800f624:	4b15      	ldr	r3, [pc, #84]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f626:	edd3 7a01 	vldr	s15, [r3, #4]
 800f62a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f62e:	eef4 7a47 	vcmp.f32	s15, s14
 800f632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f636:	d03d      	beq.n	800f6b4 <Patient_Circuit_Disconnected_Alert_PSV+0x2c0>
 800f638:	4b10      	ldr	r3, [pc, #64]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f63a:	edd3 7a01 	vldr	s15, [r3, #4]
 800f63e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800f642:	eef4 7a47 	vcmp.f32	s15, s14
 800f646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f64a:	d033      	beq.n	800f6b4 <Patient_Circuit_Disconnected_Alert_PSV+0x2c0>
 800f64c:	4b0b      	ldr	r3, [pc, #44]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f64e:	edd3 7a01 	vldr	s15, [r3, #4]
 800f652:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800f6a8 <Patient_Circuit_Disconnected_Alert_PSV+0x2b4>
 800f656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65e:	da00      	bge.n	800f662 <Patient_Circuit_Disconnected_Alert_PSV+0x26e>
}
 800f660:	e065      	b.n	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
		else if(  ( ((PSV_Peep_Average.PEEP_AVG_VAL < (PSV.PEEP_Val -2))) && ( (GRAPH_VALUES.flow==0 || GRAPH_VALUES.flow==-1 || GRAPH_VALUES.flow==-2))) || ( (GRAPH_VALUES.flow>= 50) && (GRAPH_VALUES.volume>=100)))
 800f662:	4b06      	ldr	r3, [pc, #24]	; (800f67c <Patient_Circuit_Disconnected_Alert_PSV+0x288>)
 800f664:	edd3 7a02 	vldr	s15, [r3, #8]
 800f668:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800f6b0 <Patient_Circuit_Disconnected_Alert_PSV+0x2bc>
 800f66c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f674:	da1e      	bge.n	800f6b4 <Patient_Circuit_Disconnected_Alert_PSV+0x2c0>
}
 800f676:	e05a      	b.n	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
 800f678:	200129f4 	.word	0x200129f4
 800f67c:	200125f8 	.word	0x200125f8
 800f680:	42a00000 	.word	0x42a00000
 800f684:	40007400 	.word	0x40007400
 800f688:	20012349 	.word	0x20012349
 800f68c:	20012b98 	.word	0x20012b98
 800f690:	2001287c 	.word	0x2001287c
 800f694:	20012408 	.word	0x20012408
 800f698:	2001269d 	.word	0x2001269d
 800f69c:	200129f5 	.word	0x200129f5
 800f6a0:	20012710 	.word	0x20012710
 800f6a4:	20012bf4 	.word	0x20012bf4
 800f6a8:	42480000 	.word	0x42480000
 800f6ac:	20012b88 	.word	0x20012b88
 800f6b0:	42c80000 	.word	0x42c80000
				if((DAC1->DHR12R1)>=400)
 800f6b4:	4b1f      	ldr	r3, [pc, #124]	; (800f734 <Patient_Circuit_Disconnected_Alert_PSV+0x340>)
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800f6bc:	d337      	bcc.n	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
					if(PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK == CHECK)
 800f6be:	4b1e      	ldr	r3, [pc, #120]	; (800f738 <Patient_Circuit_Disconnected_Alert_PSV+0x344>)
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d133      	bne.n	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
						Alert_Count.Patient_Circuit_disconnected_Alert_Count++;
 800f6c6:	4b1d      	ldr	r3, [pc, #116]	; (800f73c <Patient_Circuit_Disconnected_Alert_PSV+0x348>)
 800f6c8:	88db      	ldrh	r3, [r3, #6]
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	b29a      	uxth	r2, r3
 800f6ce:	4b1b      	ldr	r3, [pc, #108]	; (800f73c <Patient_Circuit_Disconnected_Alert_PSV+0x348>)
 800f6d0:	80da      	strh	r2, [r3, #6]
							if(Alert_Count.Patient_Circuit_disconnected_Alert_Count >= 1000)
 800f6d2:	4b1a      	ldr	r3, [pc, #104]	; (800f73c <Patient_Circuit_Disconnected_Alert_PSV+0x348>)
 800f6d4:	88db      	ldrh	r3, [r3, #6]
 800f6d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f6da:	d328      	bcc.n	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
								Clear_All_Alert_Bits();
 800f6dc:	f7f1 fc4a 	bl	8000f74 <Clear_All_Alert_Bits>
								Alert_Status = ALERT_HAPPEN;
 800f6e0:	4b17      	ldr	r3, [pc, #92]	; (800f740 <Patient_Circuit_Disconnected_Alert_PSV+0x34c>)
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	701a      	strb	r2, [r3, #0]
								SET_ALERT_BIT(FIRST_FRAME_UN,_ALERT_PATIENT_CIRCUIT_DISCONNECTED);
 800f6e6:	4a17      	ldr	r2, [pc, #92]	; (800f744 <Patient_Circuit_Disconnected_Alert_PSV+0x350>)
 800f6e8:	78d3      	ldrb	r3, [r2, #3]
 800f6ea:	f043 0310 	orr.w	r3, r3, #16
 800f6ee:	70d3      	strb	r3, [r2, #3]
								PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 800f6f0:	4b11      	ldr	r3, [pc, #68]	; (800f738 <Patient_Circuit_Disconnected_Alert_PSV+0x344>)
 800f6f2:	2201      	movs	r2, #1
 800f6f4:	701a      	strb	r2, [r3, #0]
								Send_Bluetooth_Data_Farme                = SEND_ALERT_FRAME;
 800f6f6:	4b14      	ldr	r3, [pc, #80]	; (800f748 <Patient_Circuit_Disconnected_Alert_PSV+0x354>)
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	701a      	strb	r2, [r3, #0]
								Apnea_Alert                              = APNEA_ALERT_HAPPEN;
 800f6fc:	4b13      	ldr	r3, [pc, #76]	; (800f74c <Patient_Circuit_Disconnected_Alert_PSV+0x358>)
 800f6fe:	2201      	movs	r2, #1
 800f700:	701a      	strb	r2, [r3, #0]
								PATIENT_CIRCUIT_DISCONNECTED_ALERT_CHECK = DO_NOT_CHECK;
 800f702:	4b0d      	ldr	r3, [pc, #52]	; (800f738 <Patient_Circuit_Disconnected_Alert_PSV+0x344>)
 800f704:	2201      	movs	r2, #1
 800f706:	701a      	strb	r2, [r3, #0]
								LED_Alert();
 800f708:	f7f2 fa5c 	bl	8001bc4 <LED_Alert>
								PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL           = DAC_VAL(PSV.PEEP_Val );
 800f70c:	4b10      	ldr	r3, [pc, #64]	; (800f750 <Patient_Circuit_Disconnected_Alert_PSV+0x35c>)
 800f70e:	789b      	ldrb	r3, [r3, #2]
 800f710:	4618      	mov	r0, r3
 800f712:	f7f9 fc7b 	bl	800900c <DAC_VAL>
 800f716:	4603      	mov	r3, r0
 800f718:	461a      	mov	r2, r3
 800f71a:	4b0e      	ldr	r3, [pc, #56]	; (800f754 <Patient_Circuit_Disconnected_Alert_PSV+0x360>)
 800f71c:	80da      	strh	r2, [r3, #6]
								PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL      = PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL;
 800f71e:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <Patient_Circuit_Disconnected_Alert_PSV+0x360>)
 800f720:	88da      	ldrh	r2, [r3, #6]
 800f722:	4b0c      	ldr	r3, [pc, #48]	; (800f754 <Patient_Circuit_Disconnected_Alert_PSV+0x360>)
 800f724:	811a      	strh	r2, [r3, #8]
}
 800f726:	e002      	b.n	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
				if((DAC1->DHR12R1)>=400)
 800f728:	bf00      	nop
 800f72a:	e000      	b.n	800f72e <Patient_Circuit_Disconnected_Alert_PSV+0x33a>
				if((DAC1->DHR12R1)>=400)
 800f72c:	bf00      	nop
}
 800f72e:	bf00      	nop
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	40007400 	.word	0x40007400
 800f738:	20012349 	.word	0x20012349
 800f73c:	20012b98 	.word	0x20012b98
 800f740:	2001287c 	.word	0x2001287c
 800f744:	20012408 	.word	0x20012408
 800f748:	2001269d 	.word	0x2001269d
 800f74c:	200129f5 	.word	0x200129f5
 800f750:	20012710 	.word	0x20012710
 800f754:	20012bf4 	.word	0x20012bf4

0800f758 <Apnea_O2_control>:


static void Apnea_O2_control()
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	af00      	add	r7, sp, #0
	if(PSV.PSV_O2_Val > 21)
 800f75c:	4b11      	ldr	r3, [pc, #68]	; (800f7a4 <Apnea_O2_control+0x4c>)
 800f75e:	69db      	ldr	r3, [r3, #28]
 800f760:	2b15      	cmp	r3, #21
 800f762:	dd1d      	ble.n	800f7a0 <Apnea_O2_control+0x48>
	{

		if(Vent_Type == MASK_MODE)
 800f764:	4b10      	ldr	r3, [pc, #64]	; (800f7a8 <Apnea_O2_control+0x50>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d102      	bne.n	800f772 <Apnea_O2_control+0x1a>
		{
			Oxygen_PEEP();
 800f76c:	f000 fb3e 	bl	800fdec <Oxygen_PEEP>
			{
				Parkar_valve_Signal(0);
			}
		}
	}
}
 800f770:	e016      	b.n	800f7a0 <Apnea_O2_control+0x48>
		else if(Vent_Type == ET_TUBE_MODE)
 800f772:	4b0d      	ldr	r3, [pc, #52]	; (800f7a8 <Apnea_O2_control+0x50>)
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d112      	bne.n	800f7a0 <Apnea_O2_control+0x48>
			if(onetime == 1)
 800f77a:	4b0c      	ldr	r3, [pc, #48]	; (800f7ac <Apnea_O2_control+0x54>)
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d10b      	bne.n	800f79a <Apnea_O2_control+0x42>
				Oxygen_Parameter.PSV_O2_DAC = 1750;
 800f782:	4b0b      	ldr	r3, [pc, #44]	; (800f7b0 <Apnea_O2_control+0x58>)
 800f784:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800f788:	615a      	str	r2, [r3, #20]
				Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 800f78a:	4b09      	ldr	r3, [pc, #36]	; (800f7b0 <Apnea_O2_control+0x58>)
 800f78c:	695a      	ldr	r2, [r3, #20]
 800f78e:	4b09      	ldr	r3, [pc, #36]	; (800f7b4 <Apnea_O2_control+0x5c>)
 800f790:	615a      	str	r2, [r3, #20]
				onetime = 0;
 800f792:	4b06      	ldr	r3, [pc, #24]	; (800f7ac <Apnea_O2_control+0x54>)
 800f794:	2200      	movs	r2, #0
 800f796:	701a      	strb	r2, [r3, #0]
}
 800f798:	e002      	b.n	800f7a0 <Apnea_O2_control+0x48>
				Parkar_valve_Signal(0);
 800f79a:	4b06      	ldr	r3, [pc, #24]	; (800f7b4 <Apnea_O2_control+0x5c>)
 800f79c:	2200      	movs	r2, #0
 800f79e:	615a      	str	r2, [r3, #20]
}
 800f7a0:	bf00      	nop
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	20012710 	.word	0x20012710
 800f7a8:	200129f4 	.word	0x200129f4
 800f7ac:	2001269c 	.word	0x2001269c
 800f7b0:	200129d4 	.word	0x200129d4
 800f7b4:	40007400 	.word	0x40007400

0800f7b8 <WAIT_TIME_CONTROL>:




static void WAIT_TIME_CONTROL()
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	af00      	add	r7, sp, #0

	Blower_Signal(0);
 800f7bc:	4b0b      	ldr	r3, [pc, #44]	; (800f7ec <WAIT_TIME_CONTROL+0x34>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	609a      	str	r2, [r3, #8]
	//Check_Peep_Status_timer = 1000;
	if(GRAPH_VALUES.pressure <= Psv_Set_Peep)
 800f7c2:	4b0b      	ldr	r3, [pc, #44]	; (800f7f0 <WAIT_TIME_CONTROL+0x38>)
 800f7c4:	781a      	ldrb	r2, [r3, #0]
 800f7c6:	4b0b      	ldr	r3, [pc, #44]	; (800f7f4 <WAIT_TIME_CONTROL+0x3c>)
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d808      	bhi.n	800f7e0 <WAIT_TIME_CONTROL+0x28>
	{
		ExpValve_CLOSE();
 800f7ce:	4b0a      	ldr	r3, [pc, #40]	; (800f7f8 <WAIT_TIME_CONTROL+0x40>)
 800f7d0:	695b      	ldr	r3, [r3, #20]
 800f7d2:	4a09      	ldr	r2, [pc, #36]	; (800f7f8 <WAIT_TIME_CONTROL+0x40>)
 800f7d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f7d8:	6153      	str	r3, [r2, #20]
		Wait_Time = 0;
 800f7da:	4b08      	ldr	r3, [pc, #32]	; (800f7fc <WAIT_TIME_CONTROL+0x44>)
 800f7dc:	2200      	movs	r2, #0
 800f7de:	601a      	str	r2, [r3, #0]
	}
}
 800f7e0:	bf00      	nop
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	40007400 	.word	0x40007400
 800f7f0:	200125f8 	.word	0x200125f8
 800f7f4:	20000018 	.word	0x20000018
 800f7f8:	40020400 	.word	0x40020400
 800f7fc:	20012698 	.word	0x20012698

0800f800 <Expiration_Cycle>:


static void Expiration_Cycle()
{
 800f800:	b480      	push	{r7}
 800f802:	af00      	add	r7, sp, #0
	 BREATH_STATE    = EXPIRATION_CYCLE;
 800f804:	4b03      	ldr	r3, [pc, #12]	; (800f814 <Expiration_Cycle+0x14>)
 800f806:	2201      	movs	r2, #1
 800f808:	701a      	strb	r2, [r3, #0]
}
 800f80a:	bf00      	nop
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr
 800f814:	20012a3c 	.word	0x20012a3c

0800f818 <For_Trigger_Control>:

static void For_Trigger_Control()
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	af00      	add	r7, sp, #0
	if(Vent_Type == MASK_MODE)
 800f81c:	4b74      	ldr	r3, [pc, #464]	; (800f9f0 <For_Trigger_Control+0x1d8>)
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d170      	bne.n	800f906 <For_Trigger_Control+0xee>
	{
		if( (PSV_Control.Trigger_Check_Wait_Time == 0) && ( GRAPH_VALUES.pressure <(Pressure_Trigger_Offset) ) )
 800f824:	4b73      	ldr	r3, [pc, #460]	; (800f9f4 <For_Trigger_Control+0x1dc>)
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d116      	bne.n	800f85a <For_Trigger_Control+0x42>
 800f82c:	4b72      	ldr	r3, [pc, #456]	; (800f9f8 <For_Trigger_Control+0x1e0>)
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	461a      	mov	r2, r3
 800f832:	4b72      	ldr	r3, [pc, #456]	; (800f9fc <For_Trigger_Control+0x1e4>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	429a      	cmp	r2, r3
 800f838:	da0f      	bge.n	800f85a <For_Trigger_Control+0x42>
		{
			STOP_BLOWER_IF_FLOW_SENSE();
 800f83a:	f7ff fa1f 	bl	800ec7c <STOP_BLOWER_IF_FLOW_SENSE>
				if (Trigger_Type == Pressure_Trigger)
 800f83e:	4b70      	ldr	r3, [pc, #448]	; (800fa00 <For_Trigger_Control+0x1e8>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d102      	bne.n	800f84c <For_Trigger_Control+0x34>
				{
					CHECK_PRESSURE_TRIGGER();
 800f846:	f7ff f933 	bl	800eab0 <CHECK_PRESSURE_TRIGGER>
				if (Trigger_Type == Pressure_Trigger)
 800f84a:	e043      	b.n	800f8d4 <For_Trigger_Control+0xbc>
				}
				else if (Trigger_Type == Flow_Trigger)
 800f84c:	4b6c      	ldr	r3, [pc, #432]	; (800fa00 <For_Trigger_Control+0x1e8>)
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d13f      	bne.n	800f8d4 <For_Trigger_Control+0xbc>
				{
					CHECK_FLOW_TRIGGER();
 800f854:	f7ff f960 	bl	800eb18 <CHECK_FLOW_TRIGGER>
				if (Trigger_Type == Pressure_Trigger)
 800f858:	e03c      	b.n	800f8d4 <For_Trigger_Control+0xbc>
				}
		}
		else
		{
			PSV_Peep_Average.PEEP_Cumulative_Val += GRAPH_VALUES.pressure;
 800f85a:	4b6a      	ldr	r3, [pc, #424]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	4a66      	ldr	r2, [pc, #408]	; (800f9f8 <For_Trigger_Control+0x1e0>)
 800f860:	7812      	ldrb	r2, [r2, #0]
 800f862:	4413      	add	r3, r2
 800f864:	4a67      	ldr	r2, [pc, #412]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f866:	6013      	str	r3, [r2, #0]
			PSV_Peep_Average.PEEP_Event_Count++;
 800f868:	4b66      	ldr	r3, [pc, #408]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	3301      	adds	r3, #1
 800f86e:	4a65      	ldr	r2, [pc, #404]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f870:	6053      	str	r3, [r2, #4]
			if(PSV_Peep_Average.PEEP_Event_Count >1000)
 800f872:	4b64      	ldr	r3, [pc, #400]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f87a:	d92c      	bls.n	800f8d6 <For_Trigger_Control+0xbe>
			{
				Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800f87c:	f7fb fea2 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
				PSV_PEEP_AVERAGE();
 800f880:	f7ff fa38 	bl	800ecf4 <PSV_PEEP_AVERAGE>
				PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL    = PSV_TUNE_PEEP_BLOWER(&PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL,
 800f884:	4b60      	ldr	r3, [pc, #384]	; (800fa08 <For_Trigger_Control+0x1f0>)
 800f886:	789b      	ldrb	r3, [r3, #2]
 800f888:	4619      	mov	r1, r3
 800f88a:	4860      	ldr	r0, [pc, #384]	; (800fa0c <For_Trigger_Control+0x1f4>)
 800f88c:	f7ff fae4 	bl	800ee58 <PSV_TUNE_PEEP_BLOWER>
 800f890:	4603      	mov	r3, r0
 800f892:	461a      	mov	r2, r3
 800f894:	4b5e      	ldr	r3, [pc, #376]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f896:	811a      	strh	r2, [r3, #8]
																							 PSV.PEEP_Val );
				if(PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL <= 500)
 800f898:	4b5d      	ldr	r3, [pc, #372]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f89a:	891b      	ldrh	r3, [r3, #8]
 800f89c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f8a0:	d803      	bhi.n	800f8aa <For_Trigger_Control+0x92>
					PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL = 500;
 800f8a2:	4b5b      	ldr	r3, [pc, #364]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f8a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f8a8:	811a      	strh	r2, [r3, #8]
				if(PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL >= 3500)
 800f8aa:	4b59      	ldr	r3, [pc, #356]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f8ac:	891b      	ldrh	r3, [r3, #8]
 800f8ae:	f640 52ab 	movw	r2, #3499	; 0xdab
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d903      	bls.n	800f8be <For_Trigger_Control+0xa6>
					PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL = 3500;
 800f8b6:	4b56      	ldr	r3, [pc, #344]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f8b8:	f640 52ac 	movw	r2, #3500	; 0xdac
 800f8bc:	811a      	strh	r2, [r3, #8]
				PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL          = PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL;
 800f8be:	4b54      	ldr	r3, [pc, #336]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f8c0:	891a      	ldrh	r2, [r3, #8]
 800f8c2:	4b53      	ldr	r3, [pc, #332]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f8c4:	80da      	strh	r2, [r3, #6]

				PSV_Peep_Average.PEEP_Cumulative_Val                 = RESET;
 800f8c6:	4b4f      	ldr	r3, [pc, #316]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	601a      	str	r2, [r3, #0]
				PSV_Peep_Average.PEEP_Event_Count                    = RESET;
 800f8cc:	4b4d      	ldr	r3, [pc, #308]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	605a      	str	r2, [r3, #4]
 800f8d2:	e000      	b.n	800f8d6 <For_Trigger_Control+0xbe>
				if (Trigger_Type == Pressure_Trigger)
 800f8d4:	bf00      	nop
			}
		}

		if(PSV_Peep_Average.PEEP_Event_Count < 300)
 800f8d6:	4b4b      	ldr	r3, [pc, #300]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f8d8:	685b      	ldr	r3, [r3, #4]
 800f8da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f8de:	f080 8085 	bcs.w	800f9ec <For_Trigger_Control+0x1d4>
		{

			if( GRAPH_VALUES.flow  <= (Flow_Trigger_Offset ) )
 800f8e2:	4b45      	ldr	r3, [pc, #276]	; (800f9f8 <For_Trigger_Control+0x1e0>)
 800f8e4:	ed93 7a01 	vldr	s14, [r3, #4]
 800f8e8:	4b4a      	ldr	r3, [pc, #296]	; (800fa14 <For_Trigger_Control+0x1fc>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	ee07 3a90 	vmov	s15, r3
 800f8f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fc:	d900      	bls.n	800f900 <For_Trigger_Control+0xe8>
			{
				CHECK_TRIGGER_OFFSET();
			}
		}
	}
}
 800f8fe:	e075      	b.n	800f9ec <For_Trigger_Control+0x1d4>
				CHECK_TRIGGER_OFFSET();
 800f900:	f7ff f942 	bl	800eb88 <CHECK_TRIGGER_OFFSET>
}
 800f904:	e072      	b.n	800f9ec <For_Trigger_Control+0x1d4>
	else if(Vent_Type == ET_TUBE_MODE)
 800f906:	4b3a      	ldr	r3, [pc, #232]	; (800f9f0 <For_Trigger_Control+0x1d8>)
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d16e      	bne.n	800f9ec <For_Trigger_Control+0x1d4>
		if( (PSV_Control.Trigger_Check_Wait_Time == 0) && ( GRAPH_VALUES.flow > 0) )
 800f90e:	4b39      	ldr	r3, [pc, #228]	; (800f9f4 <For_Trigger_Control+0x1dc>)
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d117      	bne.n	800f946 <For_Trigger_Control+0x12e>
 800f916:	4b38      	ldr	r3, [pc, #224]	; (800f9f8 <For_Trigger_Control+0x1e0>)
 800f918:	edd3 7a01 	vldr	s15, [r3, #4]
 800f91c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f924:	dd0f      	ble.n	800f946 <For_Trigger_Control+0x12e>
			STOP_BLOWER_IF_FLOW_SENSE();
 800f926:	f7ff f9a9 	bl	800ec7c <STOP_BLOWER_IF_FLOW_SENSE>
				if (Trigger_Type == Pressure_Trigger)
 800f92a:	4b35      	ldr	r3, [pc, #212]	; (800fa00 <For_Trigger_Control+0x1e8>)
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d102      	bne.n	800f938 <For_Trigger_Control+0x120>
					CHECK_PRESSURE_TRIGGER();
 800f932:	f7ff f8bd 	bl	800eab0 <CHECK_PRESSURE_TRIGGER>
				if (Trigger_Type == Pressure_Trigger)
 800f936:	e043      	b.n	800f9c0 <For_Trigger_Control+0x1a8>
				else if (Trigger_Type == Flow_Trigger)
 800f938:	4b31      	ldr	r3, [pc, #196]	; (800fa00 <For_Trigger_Control+0x1e8>)
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d13f      	bne.n	800f9c0 <For_Trigger_Control+0x1a8>
					CHECK_FLOW_TRIGGER();
 800f940:	f7ff f8ea 	bl	800eb18 <CHECK_FLOW_TRIGGER>
				if (Trigger_Type == Pressure_Trigger)
 800f944:	e03c      	b.n	800f9c0 <For_Trigger_Control+0x1a8>
			PSV_Peep_Average.PEEP_Cumulative_Val += GRAPH_VALUES.pressure;
 800f946:	4b2f      	ldr	r3, [pc, #188]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	4a2b      	ldr	r2, [pc, #172]	; (800f9f8 <For_Trigger_Control+0x1e0>)
 800f94c:	7812      	ldrb	r2, [r2, #0]
 800f94e:	4413      	add	r3, r2
 800f950:	4a2c      	ldr	r2, [pc, #176]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f952:	6013      	str	r3, [r2, #0]
			PSV_Peep_Average.PEEP_Event_Count++;
 800f954:	4b2b      	ldr	r3, [pc, #172]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f956:	685b      	ldr	r3, [r3, #4]
 800f958:	3301      	adds	r3, #1
 800f95a:	4a2a      	ldr	r2, [pc, #168]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f95c:	6053      	str	r3, [r2, #4]
			if(PSV_Peep_Average.PEEP_Event_Count >1000)
 800f95e:	4b29      	ldr	r3, [pc, #164]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f966:	d92c      	bls.n	800f9c2 <For_Trigger_Control+0x1aa>
				Reset_Patient_Circuit_Diconnceted_Alert_Flags();
 800f968:	f7fb fe2c 	bl	800b5c4 <Reset_Patient_Circuit_Diconnceted_Alert_Flags>
				PSV_PEEP_AVERAGE();
 800f96c:	f7ff f9c2 	bl	800ecf4 <PSV_PEEP_AVERAGE>
				PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL    = PSV_TUNE_PEEP_BLOWER(&PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL,
 800f970:	4b25      	ldr	r3, [pc, #148]	; (800fa08 <For_Trigger_Control+0x1f0>)
 800f972:	789b      	ldrb	r3, [r3, #2]
 800f974:	4619      	mov	r1, r3
 800f976:	4825      	ldr	r0, [pc, #148]	; (800fa0c <For_Trigger_Control+0x1f4>)
 800f978:	f7ff fa6e 	bl	800ee58 <PSV_TUNE_PEEP_BLOWER>
 800f97c:	4603      	mov	r3, r0
 800f97e:	461a      	mov	r2, r3
 800f980:	4b23      	ldr	r3, [pc, #140]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f982:	811a      	strh	r2, [r3, #8]
				if(PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL <= 500)
 800f984:	4b22      	ldr	r3, [pc, #136]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f986:	891b      	ldrh	r3, [r3, #8]
 800f988:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f98c:	d803      	bhi.n	800f996 <For_Trigger_Control+0x17e>
					PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL = 500;
 800f98e:	4b20      	ldr	r3, [pc, #128]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f990:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f994:	811a      	strh	r2, [r3, #8]
				if(PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL >= 3500)
 800f996:	4b1e      	ldr	r3, [pc, #120]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f998:	891b      	ldrh	r3, [r3, #8]
 800f99a:	f640 52ab 	movw	r2, #3499	; 0xdab
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d903      	bls.n	800f9aa <For_Trigger_Control+0x192>
					PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL = 3500;
 800f9a2:	4b1b      	ldr	r3, [pc, #108]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f9a4:	f640 52ac 	movw	r2, #3500	; 0xdac
 800f9a8:	811a      	strh	r2, [r3, #8]
				PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL          = PSV_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL;
 800f9aa:	4b19      	ldr	r3, [pc, #100]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f9ac:	891a      	ldrh	r2, [r3, #8]
 800f9ae:	4b18      	ldr	r3, [pc, #96]	; (800fa10 <For_Trigger_Control+0x1f8>)
 800f9b0:	80da      	strh	r2, [r3, #6]
				PSV_Peep_Average.PEEP_Cumulative_Val                 = RESET;
 800f9b2:	4b14      	ldr	r3, [pc, #80]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	601a      	str	r2, [r3, #0]
				PSV_Peep_Average.PEEP_Event_Count                    = RESET;
 800f9b8:	4b12      	ldr	r3, [pc, #72]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	605a      	str	r2, [r3, #4]
 800f9be:	e000      	b.n	800f9c2 <For_Trigger_Control+0x1aa>
				if (Trigger_Type == Pressure_Trigger)
 800f9c0:	bf00      	nop
		if(PSV_Peep_Average.PEEP_Event_Count < 200)
 800f9c2:	4b10      	ldr	r3, [pc, #64]	; (800fa04 <For_Trigger_Control+0x1ec>)
 800f9c4:	685b      	ldr	r3, [r3, #4]
 800f9c6:	2bc7      	cmp	r3, #199	; 0xc7
 800f9c8:	d810      	bhi.n	800f9ec <For_Trigger_Control+0x1d4>
			if( GRAPH_VALUES.flow  <= (Flow_Trigger_Offset) )
 800f9ca:	4b0b      	ldr	r3, [pc, #44]	; (800f9f8 <For_Trigger_Control+0x1e0>)
 800f9cc:	ed93 7a01 	vldr	s14, [r3, #4]
 800f9d0:	4b10      	ldr	r3, [pc, #64]	; (800fa14 <For_Trigger_Control+0x1fc>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	ee07 3a90 	vmov	s15, r3
 800f9d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e4:	d900      	bls.n	800f9e8 <For_Trigger_Control+0x1d0>
}
 800f9e6:	e001      	b.n	800f9ec <For_Trigger_Control+0x1d4>
				CHECK_TRIGGER_OFFSET();
 800f9e8:	f7ff f8ce 	bl	800eb88 <CHECK_TRIGGER_OFFSET>
}
 800f9ec:	bf00      	nop
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	200129f4 	.word	0x200129f4
 800f9f4:	20012b78 	.word	0x20012b78
 800f9f8:	200125f8 	.word	0x200125f8
 800f9fc:	2001296c 	.word	0x2001296c
 800fa00:	20012244 	.word	0x20012244
 800fa04:	20012b88 	.word	0x20012b88
 800fa08:	20012710 	.word	0x20012710
 800fa0c:	20012bfc 	.word	0x20012bfc
 800fa10:	20012bf4 	.word	0x20012bf4
 800fa14:	20012900 	.word	0x20012900

0800fa18 <MASK_MODE_PID>:



static void MASK_MODE_PID()
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	af00      	add	r7, sp, #0
	if(PSV_Control._INSPIRATION_TIME > 0)
 800fa1c:	4b62      	ldr	r3, [pc, #392]	; (800fba8 <MASK_MODE_PID+0x190>)
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	dd47      	ble.n	800fab4 <MASK_MODE_PID+0x9c>
	{
		BREATH_STATE                                          = PATIENT_TRIGGER_INSPIRATION;
 800fa24:	4b61      	ldr	r3, [pc, #388]	; (800fbac <MASK_MODE_PID+0x194>)
 800fa26:	2202      	movs	r2, #2
 800fa28:	701a      	strb	r2, [r3, #0]
		PIP_Control(PSV.PRESSURE_SUPPORT_Val );
 800fa2a:	4b61      	ldr	r3, [pc, #388]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800fa2c:	881b      	ldrh	r3, [r3, #0]
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7fe fab5 	bl	800dfa0 <PIP_Control>
		Blower_Signal(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 800fa36:	4b5f      	ldr	r3, [pc, #380]	; (800fbb4 <MASK_MODE_PID+0x19c>)
 800fa38:	881a      	ldrh	r2, [r3, #0]
 800fa3a:	4b5f      	ldr	r3, [pc, #380]	; (800fbb8 <MASK_MODE_PID+0x1a0>)
 800fa3c:	609a      	str	r2, [r3, #8]
		if(PSV_Control._INSPIRATION_TIME < 100)
 800fa3e:	4b5a      	ldr	r3, [pc, #360]	; (800fba8 <MASK_MODE_PID+0x190>)
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	2b63      	cmp	r3, #99	; 0x63
 800fa44:	dc0b      	bgt.n	800fa5e <MASK_MODE_PID+0x46>
	    {
		   PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val += GRAPH_VALUES.pressure;
 800fa46:	4b5d      	ldr	r3, [pc, #372]	; (800fbbc <MASK_MODE_PID+0x1a4>)
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	4a5d      	ldr	r2, [pc, #372]	; (800fbc0 <MASK_MODE_PID+0x1a8>)
 800fa4c:	7812      	ldrb	r2, [r2, #0]
 800fa4e:	4413      	add	r3, r2
 800fa50:	4a5a      	ldr	r2, [pc, #360]	; (800fbbc <MASK_MODE_PID+0x1a4>)
 800fa52:	6053      	str	r3, [r2, #4]
		   PSV_Pip_average.PRESSURE_SUPPORT_Event_Count++;
 800fa54:	4b59      	ldr	r3, [pc, #356]	; (800fbbc <MASK_MODE_PID+0x1a4>)
 800fa56:	689b      	ldr	r3, [r3, #8]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	4a58      	ldr	r2, [pc, #352]	; (800fbbc <MASK_MODE_PID+0x1a4>)
 800fa5c:	6093      	str	r3, [r2, #8]
	    }
		if(PSV.PSV_O2_Val > 21)
 800fa5e:	4b54      	ldr	r3, [pc, #336]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800fa60:	69db      	ldr	r3, [r3, #28]
 800fa62:	2b15      	cmp	r3, #21
 800fa64:	dd0d      	ble.n	800fa82 <MASK_MODE_PID+0x6a>
		{
			if(GRAPH_VALUES.pressure >= PSV.PRESSURE_SUPPORT_Val )
 800fa66:	4b56      	ldr	r3, [pc, #344]	; (800fbc0 <MASK_MODE_PID+0x1a8>)
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	b29a      	uxth	r2, r3
 800fa6c:	4b50      	ldr	r3, [pc, #320]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d306      	bcc.n	800fa82 <MASK_MODE_PID+0x6a>
			{
				if(Vent_Type == MASK_MODE)
 800fa74:	4b53      	ldr	r3, [pc, #332]	; (800fbc4 <MASK_MODE_PID+0x1ac>)
 800fa76:	781b      	ldrb	r3, [r3, #0]
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d002      	beq.n	800fa82 <MASK_MODE_PID+0x6a>
				{
				}
				else
				{
					Parkar_valve_Signal(0);
 800fa7c:	4b4e      	ldr	r3, [pc, #312]	; (800fbb8 <MASK_MODE_PID+0x1a0>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	615a      	str	r2, [r3, #20]
				}
			}
		}
		if(GRAPH_VALUES.flow > PSV_Max_Flow)
 800fa82:	4b4f      	ldr	r3, [pc, #316]	; (800fbc0 <MASK_MODE_PID+0x1a8>)
 800fa84:	ed93 7a01 	vldr	s14, [r3, #4]
 800fa88:	4b4f      	ldr	r3, [pc, #316]	; (800fbc8 <MASK_MODE_PID+0x1b0>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	ee07 3a90 	vmov	s15, r3
 800fa90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa9c:	dc00      	bgt.n	800faa0 <MASK_MODE_PID+0x88>
		Send_Bluetooth_Data_Farme                        = SEND_SAMPLED_PARAMETER_FRAME;
		Blower_Signal(0);
		vTaskResume(PSV_Handler);
		vTaskSuspend(PSV_PID_Handler);
	}
}
 800fa9e:	e080      	b.n	800fba2 <MASK_MODE_PID+0x18a>
			PSV_Max_Flow = GRAPH_VALUES.flow;
 800faa0:	4b47      	ldr	r3, [pc, #284]	; (800fbc0 <MASK_MODE_PID+0x1a8>)
 800faa2:	edd3 7a01 	vldr	s15, [r3, #4]
 800faa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800faaa:	ee17 2a90 	vmov	r2, s15
 800faae:	4b46      	ldr	r3, [pc, #280]	; (800fbc8 <MASK_MODE_PID+0x1b0>)
 800fab0:	601a      	str	r2, [r3, #0]
}
 800fab2:	e076      	b.n	800fba2 <MASK_MODE_PID+0x18a>
	else if(PSV_Control._INSPIRATION_TIME == 0)
 800fab4:	4b3c      	ldr	r3, [pc, #240]	; (800fba8 <MASK_MODE_PID+0x190>)
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d172      	bne.n	800fba2 <MASK_MODE_PID+0x18a>
		if(PSV.PSV_O2_Val > 21)
 800fabc:	4b3c      	ldr	r3, [pc, #240]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800fabe:	69db      	ldr	r3, [r3, #28]
 800fac0:	2b15      	cmp	r3, #21
 800fac2:	dd27      	ble.n	800fb14 <MASK_MODE_PID+0xfc>
			PSV_Max_Flow = 0;
 800fac4:	4b40      	ldr	r3, [pc, #256]	; (800fbc8 <MASK_MODE_PID+0x1b0>)
 800fac6:	2200      	movs	r2, #0
 800fac8:	601a      	str	r2, [r3, #0]
			if(PSV.PSV_O2_Val == 21)
 800faca:	4b39      	ldr	r3, [pc, #228]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800facc:	69db      	ldr	r3, [r3, #28]
 800face:	2b15      	cmp	r3, #21
 800fad0:	d105      	bne.n	800fade <MASK_MODE_PID+0xc6>
				Parkar_valve_Signal(0);
 800fad2:	4b39      	ldr	r3, [pc, #228]	; (800fbb8 <MASK_MODE_PID+0x1a0>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	615a      	str	r2, [r3, #20]
				Blower_Signal(0);
 800fad8:	4b37      	ldr	r3, [pc, #220]	; (800fbb8 <MASK_MODE_PID+0x1a0>)
 800fada:	2200      	movs	r2, #0
 800fadc:	609a      	str	r2, [r3, #8]
			Check_O2_Supply_Alert_in_Apnea_Once(PSV.PSV_O2_Val);
 800fade:	4b34      	ldr	r3, [pc, #208]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800fae0:	69db      	ldr	r3, [r3, #28]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7f7 fc4e 	bl	8007384 <Check_O2_Supply_Alert_in_Apnea_Once>
			GRAPH_VALUES.Maximum_oxygen_flow = 0;
 800fae8:	4b35      	ldr	r3, [pc, #212]	; (800fbc0 <MASK_MODE_PID+0x1a8>)
 800faea:	2200      	movs	r2, #0
 800faec:	829a      	strh	r2, [r3, #20]
			if(O2_Control_PSV >= 6)
 800faee:	4b37      	ldr	r3, [pc, #220]	; (800fbcc <MASK_MODE_PID+0x1b4>)
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	2b05      	cmp	r3, #5
 800faf4:	d90e      	bls.n	800fb14 <MASK_MODE_PID+0xfc>
				Tune_O2_PSV(PSV.PSV_O2_Val,Oxygen_Parameter.Achieved_Oxygen);
 800faf6:	4b2e      	ldr	r3, [pc, #184]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800faf8:	69db      	ldr	r3, [r3, #28]
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	4a34      	ldr	r2, [pc, #208]	; (800fbd0 <MASK_MODE_PID+0x1b8>)
 800fafe:	7a12      	ldrb	r2, [r2, #8]
 800fb00:	4611      	mov	r1, r2
 800fb02:	4618      	mov	r0, r3
 800fb04:	f000 fab2 	bl	801006c <Tune_O2_PSV>
				Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 800fb08:	4b2d      	ldr	r3, [pc, #180]	; (800fbc0 <MASK_MODE_PID+0x1a8>)
 800fb0a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800fb0e:	b2da      	uxtb	r2, r3
 800fb10:	4b2f      	ldr	r3, [pc, #188]	; (800fbd0 <MASK_MODE_PID+0x1b8>)
 800fb12:	721a      	strb	r2, [r3, #8]
		Blower_Signal(0);
 800fb14:	4b28      	ldr	r3, [pc, #160]	; (800fbb8 <MASK_MODE_PID+0x1a0>)
 800fb16:	2200      	movs	r2, #0
 800fb18:	609a      	str	r2, [r3, #8]
		ExpValve_OPEN();
 800fb1a:	4b2e      	ldr	r3, [pc, #184]	; (800fbd4 <MASK_MODE_PID+0x1bc>)
 800fb1c:	695b      	ldr	r3, [r3, #20]
 800fb1e:	4a2d      	ldr	r2, [pc, #180]	; (800fbd4 <MASK_MODE_PID+0x1bc>)
 800fb20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb24:	6153      	str	r3, [r2, #20]
		PSV.APNEA_COUNTER                                = (1000*PSV.APNEA_TIME) ;
 800fb26:	4b22      	ldr	r3, [pc, #136]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800fb28:	8a9b      	ldrh	r3, [r3, #20]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb30:	fb03 f302 	mul.w	r3, r3, r2
 800fb34:	4a1e      	ldr	r2, [pc, #120]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800fb36:	6193      	str	r3, [r2, #24]
		PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL      = APNEA_DAC_VAL(PSV.PEEP_Val );
 800fb38:	4b1d      	ldr	r3, [pc, #116]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800fb3a:	789b      	ldrb	r3, [r3, #2]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7f9 fe29 	bl	8009794 <APNEA_DAC_VAL>
 800fb42:	4603      	mov	r3, r0
 800fb44:	461a      	mov	r2, r3
 800fb46:	4b24      	ldr	r3, [pc, #144]	; (800fbd8 <MASK_MODE_PID+0x1c0>)
 800fb48:	80da      	strh	r2, [r3, #6]
		Patient_Trigger                                  = NO_PATIENT_TRIGGER;
 800fb4a:	4b24      	ldr	r3, [pc, #144]	; (800fbdc <MASK_MODE_PID+0x1c4>)
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	701a      	strb	r2, [r3, #0]
	    BREATH_STATE                                     = PATIENT_TRIGGER_EXPIRATION;
 800fb50:	4b16      	ldr	r3, [pc, #88]	; (800fbac <MASK_MODE_PID+0x194>)
 800fb52:	2203      	movs	r2, #3
 800fb54:	701a      	strb	r2, [r3, #0]
		PSV_PIP_AVERAGE();
 800fb56:	f7ff f933 	bl	800edc0 <PSV_PIP_AVERAGE>
		PSV_Control.PSV_PEEP_Settle_Time                 = 100+PSV.TRIG_TIME;
 800fb5a:	4b15      	ldr	r3, [pc, #84]	; (800fbb0 <MASK_MODE_PID+0x198>)
 800fb5c:	899b      	ldrh	r3, [r3, #12]
 800fb5e:	3364      	adds	r3, #100	; 0x64
 800fb60:	4a11      	ldr	r2, [pc, #68]	; (800fba8 <MASK_MODE_PID+0x190>)
 800fb62:	6013      	str	r3, [r2, #0]
		BIPAP_Peep_Average.EPAP_AVG_VAL                  = 0;
 800fb64:	4b1e      	ldr	r3, [pc, #120]	; (800fbe0 <MASK_MODE_PID+0x1c8>)
 800fb66:	2200      	movs	r2, #0
 800fb68:	721a      	strb	r2, [r3, #8]
		ExpValve_OPEN();
 800fb6a:	4b1a      	ldr	r3, [pc, #104]	; (800fbd4 <MASK_MODE_PID+0x1bc>)
 800fb6c:	695b      	ldr	r3, [r3, #20]
 800fb6e:	4a19      	ldr	r2, [pc, #100]	; (800fbd4 <MASK_MODE_PID+0x1bc>)
 800fb70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb74:	6153      	str	r3, [r2, #20]
		Wait_Time                                        = 10;
 800fb76:	4b1b      	ldr	r3, [pc, #108]	; (800fbe4 <MASK_MODE_PID+0x1cc>)
 800fb78:	220a      	movs	r2, #10
 800fb7a:	601a      	str	r2, [r3, #0]
		Send_Frame                                       = First_Frame;
 800fb7c:	4b1a      	ldr	r3, [pc, #104]	; (800fbe8 <MASK_MODE_PID+0x1d0>)
 800fb7e:	2201      	movs	r2, #1
 800fb80:	701a      	strb	r2, [r3, #0]
		Send_Bluetooth_Data_Farme                        = SEND_SAMPLED_PARAMETER_FRAME;
 800fb82:	4b1a      	ldr	r3, [pc, #104]	; (800fbec <MASK_MODE_PID+0x1d4>)
 800fb84:	2203      	movs	r2, #3
 800fb86:	701a      	strb	r2, [r3, #0]
		Blower_Signal(0);
 800fb88:	4b0b      	ldr	r3, [pc, #44]	; (800fbb8 <MASK_MODE_PID+0x1a0>)
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	609a      	str	r2, [r3, #8]
		vTaskResume(PSV_Handler);
 800fb8e:	4b18      	ldr	r3, [pc, #96]	; (800fbf0 <MASK_MODE_PID+0x1d8>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f00b fb52 	bl	801b23c <vTaskResume>
		vTaskSuspend(PSV_PID_Handler);
 800fb98:	4b16      	ldr	r3, [pc, #88]	; (800fbf4 <MASK_MODE_PID+0x1dc>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f00b fa89 	bl	801b0b4 <vTaskSuspend>
}
 800fba2:	bf00      	nop
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	20012b78 	.word	0x20012b78
 800fbac:	20012a3c 	.word	0x20012a3c
 800fbb0:	20012710 	.word	0x20012710
 800fbb4:	20012978 	.word	0x20012978
 800fbb8:	40007400 	.word	0x40007400
 800fbbc:	200124d0 	.word	0x200124d0
 800fbc0:	200125f8 	.word	0x200125f8
 800fbc4:	200129f4 	.word	0x200129f4
 800fbc8:	200124e0 	.word	0x200124e0
 800fbcc:	2001280d 	.word	0x2001280d
 800fbd0:	200129d4 	.word	0x200129d4
 800fbd4:	40020400 	.word	0x40020400
 800fbd8:	20012bf4 	.word	0x20012bf4
 800fbdc:	2001263d 	.word	0x2001263d
 800fbe0:	200122bc 	.word	0x200122bc
 800fbe4:	20012698 	.word	0x20012698
 800fbe8:	20012770 	.word	0x20012770
 800fbec:	2001269d 	.word	0x2001269d
 800fbf0:	200128a8 	.word	0x200128a8
 800fbf4:	200127a8 	.word	0x200127a8

0800fbf8 <ET_TUBE_MODE_PID>:

static void ET_TUBE_MODE_PID()
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	af00      	add	r7, sp, #0
	if(PSV_Control._INSPIRATION_TIME > 0)
 800fbfc:	4b67      	ldr	r3, [pc, #412]	; (800fd9c <ET_TUBE_MODE_PID+0x1a4>)
 800fbfe:	68db      	ldr	r3, [r3, #12]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	dd4c      	ble.n	800fc9e <ET_TUBE_MODE_PID+0xa6>
	{
		BREATH_STATE                                          = PATIENT_TRIGGER_INSPIRATION;
 800fc04:	4b66      	ldr	r3, [pc, #408]	; (800fda0 <ET_TUBE_MODE_PID+0x1a8>)
 800fc06:	2202      	movs	r2, #2
 800fc08:	701a      	strb	r2, [r3, #0]
		PIP_Control(PSV.PRESSURE_SUPPORT_Val );
 800fc0a:	4b66      	ldr	r3, [pc, #408]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7fe f9c5 	bl	800dfa0 <PIP_Control>
		Blower_Signal(Pressure_Mode_blower_control.BLOWER_DAC_VAL);
 800fc16:	4b64      	ldr	r3, [pc, #400]	; (800fda8 <ET_TUBE_MODE_PID+0x1b0>)
 800fc18:	881a      	ldrh	r2, [r3, #0]
 800fc1a:	4b64      	ldr	r3, [pc, #400]	; (800fdac <ET_TUBE_MODE_PID+0x1b4>)
 800fc1c:	609a      	str	r2, [r3, #8]

		if(PSV_Control._INSPIRATION_TIME < 100)
 800fc1e:	4b5f      	ldr	r3, [pc, #380]	; (800fd9c <ET_TUBE_MODE_PID+0x1a4>)
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	2b63      	cmp	r3, #99	; 0x63
 800fc24:	dc0b      	bgt.n	800fc3e <ET_TUBE_MODE_PID+0x46>
	    {
		   PSV_Pip_average.PRESSURE_SUPPORT_Cumulative_Val += GRAPH_VALUES.pressure;
 800fc26:	4b62      	ldr	r3, [pc, #392]	; (800fdb0 <ET_TUBE_MODE_PID+0x1b8>)
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	4a62      	ldr	r2, [pc, #392]	; (800fdb4 <ET_TUBE_MODE_PID+0x1bc>)
 800fc2c:	7812      	ldrb	r2, [r2, #0]
 800fc2e:	4413      	add	r3, r2
 800fc30:	4a5f      	ldr	r2, [pc, #380]	; (800fdb0 <ET_TUBE_MODE_PID+0x1b8>)
 800fc32:	6053      	str	r3, [r2, #4]
		   PSV_Pip_average.PRESSURE_SUPPORT_Event_Count++;
 800fc34:	4b5e      	ldr	r3, [pc, #376]	; (800fdb0 <ET_TUBE_MODE_PID+0x1b8>)
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	4a5d      	ldr	r2, [pc, #372]	; (800fdb0 <ET_TUBE_MODE_PID+0x1b8>)
 800fc3c:	6093      	str	r3, [r2, #8]

	    }
		if(PSV.PSV_O2_Val > 21)
 800fc3e:	4b59      	ldr	r3, [pc, #356]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fc40:	69db      	ldr	r3, [r3, #28]
 800fc42:	2b15      	cmp	r3, #21
 800fc44:	dd12      	ble.n	800fc6c <ET_TUBE_MODE_PID+0x74>
		{
			if(Oxygen_Blending_Status == OXYGEN_NOT_ACHIEVED)
 800fc46:	4b5c      	ldr	r3, [pc, #368]	; (800fdb8 <ET_TUBE_MODE_PID+0x1c0>)
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d101      	bne.n	800fc52 <ET_TUBE_MODE_PID+0x5a>
			   Oxygen_PEEP();
 800fc4e:	f000 f8cd 	bl	800fdec <Oxygen_PEEP>
			if(GRAPH_VALUES.pressure >= PSV.PRESSURE_SUPPORT_Val )
 800fc52:	4b58      	ldr	r3, [pc, #352]	; (800fdb4 <ET_TUBE_MODE_PID+0x1bc>)
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	b29a      	uxth	r2, r3
 800fc58:	4b52      	ldr	r3, [pc, #328]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fc5a:	881b      	ldrh	r3, [r3, #0]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d305      	bcc.n	800fc6c <ET_TUBE_MODE_PID+0x74>
			{
				Parkar_valve_Signal(0);
 800fc60:	4b52      	ldr	r3, [pc, #328]	; (800fdac <ET_TUBE_MODE_PID+0x1b4>)
 800fc62:	2200      	movs	r2, #0
 800fc64:	615a      	str	r2, [r3, #20]
				Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 800fc66:	4b54      	ldr	r3, [pc, #336]	; (800fdb8 <ET_TUBE_MODE_PID+0x1c0>)
 800fc68:	2200      	movs	r2, #0
 800fc6a:	701a      	strb	r2, [r3, #0]

			}

		}
		if(GRAPH_VALUES.flow > PSV_Max_Flow)
 800fc6c:	4b51      	ldr	r3, [pc, #324]	; (800fdb4 <ET_TUBE_MODE_PID+0x1bc>)
 800fc6e:	ed93 7a01 	vldr	s14, [r3, #4]
 800fc72:	4b52      	ldr	r3, [pc, #328]	; (800fdbc <ET_TUBE_MODE_PID+0x1c4>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	ee07 3a90 	vmov	s15, r3
 800fc7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc86:	dc00      	bgt.n	800fc8a <ET_TUBE_MODE_PID+0x92>
		Send_Bluetooth_Data_Farme                        = SEND_SAMPLED_PARAMETER_FRAME;
		Blower_Signal(0);
		vTaskResume(PSV_Handler);
		vTaskSuspend(PSV_PID_Handler);
	}
}
 800fc88:	e085      	b.n	800fd96 <ET_TUBE_MODE_PID+0x19e>
			PSV_Max_Flow = GRAPH_VALUES.flow;
 800fc8a:	4b4a      	ldr	r3, [pc, #296]	; (800fdb4 <ET_TUBE_MODE_PID+0x1bc>)
 800fc8c:	edd3 7a01 	vldr	s15, [r3, #4]
 800fc90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fc94:	ee17 2a90 	vmov	r2, s15
 800fc98:	4b48      	ldr	r3, [pc, #288]	; (800fdbc <ET_TUBE_MODE_PID+0x1c4>)
 800fc9a:	601a      	str	r2, [r3, #0]
}
 800fc9c:	e07b      	b.n	800fd96 <ET_TUBE_MODE_PID+0x19e>
	else if(PSV_Control._INSPIRATION_TIME == 0)
 800fc9e:	4b3f      	ldr	r3, [pc, #252]	; (800fd9c <ET_TUBE_MODE_PID+0x1a4>)
 800fca0:	68db      	ldr	r3, [r3, #12]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d177      	bne.n	800fd96 <ET_TUBE_MODE_PID+0x19e>
		if(PSV.PSV_O2_Val > 21)
 800fca6:	4b3f      	ldr	r3, [pc, #252]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fca8:	69db      	ldr	r3, [r3, #28]
 800fcaa:	2b15      	cmp	r3, #21
 800fcac:	dd28      	ble.n	800fd00 <ET_TUBE_MODE_PID+0x108>
			Check_O2_Supply_Alert_in_Apnea_Once(PSV.PSV_O2_Val);
 800fcae:	4b3d      	ldr	r3, [pc, #244]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fcb0:	69db      	ldr	r3, [r3, #28]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7f7 fb66 	bl	8007384 <Check_O2_Supply_Alert_in_Apnea_Once>
			GRAPH_VALUES.Maximum_oxygen_flow = 0;
 800fcb8:	4b3e      	ldr	r3, [pc, #248]	; (800fdb4 <ET_TUBE_MODE_PID+0x1bc>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	829a      	strh	r2, [r3, #20]
			if(O2_Control_PSV >= 6)
 800fcbe:	4b40      	ldr	r3, [pc, #256]	; (800fdc0 <ET_TUBE_MODE_PID+0x1c8>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	2b05      	cmp	r3, #5
 800fcc4:	d916      	bls.n	800fcf4 <ET_TUBE_MODE_PID+0xfc>
				Check_O2_Supply_Alert_in_Apnea_Once(PSV.PSV_O2_Val);
 800fcc6:	4b37      	ldr	r3, [pc, #220]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fcc8:	69db      	ldr	r3, [r3, #28]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7f7 fb5a 	bl	8007384 <Check_O2_Supply_Alert_in_Apnea_Once>
				GRAPH_VALUES.Maximum_oxygen_flow = 0;
 800fcd0:	4b38      	ldr	r3, [pc, #224]	; (800fdb4 <ET_TUBE_MODE_PID+0x1bc>)
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	829a      	strh	r2, [r3, #20]
				Tune_O2_PSV(PSV.PSV_O2_Val,Oxygen_Parameter.Achieved_Oxygen);
 800fcd6:	4b33      	ldr	r3, [pc, #204]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fcd8:	69db      	ldr	r3, [r3, #28]
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	4a39      	ldr	r2, [pc, #228]	; (800fdc4 <ET_TUBE_MODE_PID+0x1cc>)
 800fcde:	7a12      	ldrb	r2, [r2, #8]
 800fce0:	4611      	mov	r1, r2
 800fce2:	4618      	mov	r0, r3
 800fce4:	f000 f9c2 	bl	801006c <Tune_O2_PSV>
				Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 800fce8:	4b32      	ldr	r3, [pc, #200]	; (800fdb4 <ET_TUBE_MODE_PID+0x1bc>)
 800fcea:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	4b34      	ldr	r3, [pc, #208]	; (800fdc4 <ET_TUBE_MODE_PID+0x1cc>)
 800fcf2:	721a      	strb	r2, [r3, #8]
			PSV_Max_Flow = 0;
 800fcf4:	4b31      	ldr	r3, [pc, #196]	; (800fdbc <ET_TUBE_MODE_PID+0x1c4>)
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	601a      	str	r2, [r3, #0]
			Oxygen_Blending_Status = OXYGEN_NOT_ACHIEVED;
 800fcfa:	4b2f      	ldr	r3, [pc, #188]	; (800fdb8 <ET_TUBE_MODE_PID+0x1c0>)
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	701a      	strb	r2, [r3, #0]
		Parkar_valve_Signal(0);
 800fd00:	4b2a      	ldr	r3, [pc, #168]	; (800fdac <ET_TUBE_MODE_PID+0x1b4>)
 800fd02:	2200      	movs	r2, #0
 800fd04:	615a      	str	r2, [r3, #20]
		Blower_Signal(0);
 800fd06:	4b29      	ldr	r3, [pc, #164]	; (800fdac <ET_TUBE_MODE_PID+0x1b4>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	609a      	str	r2, [r3, #8]
		ExpValve_OPEN();
 800fd0c:	4b2e      	ldr	r3, [pc, #184]	; (800fdc8 <ET_TUBE_MODE_PID+0x1d0>)
 800fd0e:	695b      	ldr	r3, [r3, #20]
 800fd10:	4a2d      	ldr	r2, [pc, #180]	; (800fdc8 <ET_TUBE_MODE_PID+0x1d0>)
 800fd12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd16:	6153      	str	r3, [r2, #20]
		PSV.APNEA_COUNTER                                = (1000*PSV.APNEA_TIME) ;
 800fd18:	4b22      	ldr	r3, [pc, #136]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fd1a:	8a9b      	ldrh	r3, [r3, #20]
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd22:	fb03 f302 	mul.w	r3, r3, r2
 800fd26:	4a1f      	ldr	r2, [pc, #124]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fd28:	6193      	str	r3, [r2, #24]
		PSV_Mode_Blower_control.PEEP_BLOWER_DAC_VAL      = DAC_VAL(PSV.PEEP_Val );
 800fd2a:	4b1e      	ldr	r3, [pc, #120]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fd2c:	789b      	ldrb	r3, [r3, #2]
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7f9 f96c 	bl	800900c <DAC_VAL>
 800fd34:	4603      	mov	r3, r0
 800fd36:	461a      	mov	r2, r3
 800fd38:	4b24      	ldr	r3, [pc, #144]	; (800fdcc <ET_TUBE_MODE_PID+0x1d4>)
 800fd3a:	80da      	strh	r2, [r3, #6]
		Patient_Trigger                                  = NO_PATIENT_TRIGGER;
 800fd3c:	4b24      	ldr	r3, [pc, #144]	; (800fdd0 <ET_TUBE_MODE_PID+0x1d8>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	701a      	strb	r2, [r3, #0]
	    BREATH_STATE                                     = PATIENT_TRIGGER_EXPIRATION;
 800fd42:	4b17      	ldr	r3, [pc, #92]	; (800fda0 <ET_TUBE_MODE_PID+0x1a8>)
 800fd44:	2203      	movs	r2, #3
 800fd46:	701a      	strb	r2, [r3, #0]
		PSV_PIP_AVERAGE();
 800fd48:	f7ff f83a 	bl	800edc0 <PSV_PIP_AVERAGE>
		PSV_Control.PSV_PEEP_Settle_Time                 = 100+PSV.TRIG_TIME;
 800fd4c:	4b15      	ldr	r3, [pc, #84]	; (800fda4 <ET_TUBE_MODE_PID+0x1ac>)
 800fd4e:	899b      	ldrh	r3, [r3, #12]
 800fd50:	3364      	adds	r3, #100	; 0x64
 800fd52:	4a12      	ldr	r2, [pc, #72]	; (800fd9c <ET_TUBE_MODE_PID+0x1a4>)
 800fd54:	6013      	str	r3, [r2, #0]
		BIPAP_Peep_Average.EPAP_AVG_VAL                  = 0;
 800fd56:	4b1f      	ldr	r3, [pc, #124]	; (800fdd4 <ET_TUBE_MODE_PID+0x1dc>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	721a      	strb	r2, [r3, #8]
		ExpValve_OPEN();
 800fd5c:	4b1a      	ldr	r3, [pc, #104]	; (800fdc8 <ET_TUBE_MODE_PID+0x1d0>)
 800fd5e:	695b      	ldr	r3, [r3, #20]
 800fd60:	4a19      	ldr	r2, [pc, #100]	; (800fdc8 <ET_TUBE_MODE_PID+0x1d0>)
 800fd62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fd66:	6153      	str	r3, [r2, #20]
		Wait_Time                                        = 700;
 800fd68:	4b1b      	ldr	r3, [pc, #108]	; (800fdd8 <ET_TUBE_MODE_PID+0x1e0>)
 800fd6a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800fd6e:	601a      	str	r2, [r3, #0]
		Send_Frame                                       = First_Frame;
 800fd70:	4b1a      	ldr	r3, [pc, #104]	; (800fddc <ET_TUBE_MODE_PID+0x1e4>)
 800fd72:	2201      	movs	r2, #1
 800fd74:	701a      	strb	r2, [r3, #0]
		Send_Bluetooth_Data_Farme                        = SEND_SAMPLED_PARAMETER_FRAME;
 800fd76:	4b1a      	ldr	r3, [pc, #104]	; (800fde0 <ET_TUBE_MODE_PID+0x1e8>)
 800fd78:	2203      	movs	r2, #3
 800fd7a:	701a      	strb	r2, [r3, #0]
		Blower_Signal(0);
 800fd7c:	4b0b      	ldr	r3, [pc, #44]	; (800fdac <ET_TUBE_MODE_PID+0x1b4>)
 800fd7e:	2200      	movs	r2, #0
 800fd80:	609a      	str	r2, [r3, #8]
		vTaskResume(PSV_Handler);
 800fd82:	4b18      	ldr	r3, [pc, #96]	; (800fde4 <ET_TUBE_MODE_PID+0x1ec>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	4618      	mov	r0, r3
 800fd88:	f00b fa58 	bl	801b23c <vTaskResume>
		vTaskSuspend(PSV_PID_Handler);
 800fd8c:	4b16      	ldr	r3, [pc, #88]	; (800fde8 <ET_TUBE_MODE_PID+0x1f0>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4618      	mov	r0, r3
 800fd92:	f00b f98f 	bl	801b0b4 <vTaskSuspend>
}
 800fd96:	bf00      	nop
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	20012b78 	.word	0x20012b78
 800fda0:	20012a3c 	.word	0x20012a3c
 800fda4:	20012710 	.word	0x20012710
 800fda8:	20012978 	.word	0x20012978
 800fdac:	40007400 	.word	0x40007400
 800fdb0:	200124d0 	.word	0x200124d0
 800fdb4:	200125f8 	.word	0x200125f8
 800fdb8:	20012b71 	.word	0x20012b71
 800fdbc:	200124e0 	.word	0x200124e0
 800fdc0:	2001280d 	.word	0x2001280d
 800fdc4:	200129d4 	.word	0x200129d4
 800fdc8:	40020400 	.word	0x40020400
 800fdcc:	20012bf4 	.word	0x20012bf4
 800fdd0:	2001263d 	.word	0x2001263d
 800fdd4:	200122bc 	.word	0x200122bc
 800fdd8:	20012698 	.word	0x20012698
 800fddc:	20012770 	.word	0x20012770
 800fde0:	2001269d 	.word	0x2001269d
 800fde4:	200128a8 	.word	0x200128a8
 800fde8:	200127a8 	.word	0x200127a8

0800fdec <Oxygen_PEEP>:


void Oxygen_PEEP()
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0

	if(O2_Control_PSV < 6)
 800fdf2:	4b41      	ldr	r3, [pc, #260]	; (800fef8 <Oxygen_PEEP+0x10c>)
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	2b05      	cmp	r3, #5
 800fdf8:	d873      	bhi.n	800fee2 <Oxygen_PEEP+0xf6>
	{
		O2_Flow_Rate   = ( GRAPH_VALUES.flow* ( (float)( PSV.PSV_O2_Val - 21) / 100) );
 800fdfa:	4b40      	ldr	r3, [pc, #256]	; (800fefc <Oxygen_PEEP+0x110>)
 800fdfc:	ed93 7a01 	vldr	s14, [r3, #4]
 800fe00:	4b3f      	ldr	r3, [pc, #252]	; (800ff00 <Oxygen_PEEP+0x114>)
 800fe02:	69db      	ldr	r3, [r3, #28]
 800fe04:	3b15      	subs	r3, #21
 800fe06:	ee07 3a90 	vmov	s15, r3
 800fe0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fe0e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 800ff04 <Oxygen_PEEP+0x118>
 800fe12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800fe16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe1e:	edc7 7a01 	vstr	s15, [r7, #4]
 800fe22:	793b      	ldrb	r3, [r7, #4]
 800fe24:	b25a      	sxtb	r2, r3
 800fe26:	4b38      	ldr	r3, [pc, #224]	; (800ff08 <Oxygen_PEEP+0x11c>)
 800fe28:	701a      	strb	r2, [r3, #0]
		if(O2_Flow_Rate <=8)
 800fe2a:	4b37      	ldr	r3, [pc, #220]	; (800ff08 <Oxygen_PEEP+0x11c>)
 800fe2c:	f993 3000 	ldrsb.w	r3, [r3]
 800fe30:	2b08      	cmp	r3, #8
 800fe32:	dc02      	bgt.n	800fe3a <Oxygen_PEEP+0x4e>
		{
			O2_Flow_Rate = 8;
 800fe34:	4b34      	ldr	r3, [pc, #208]	; (800ff08 <Oxygen_PEEP+0x11c>)
 800fe36:	2208      	movs	r2, #8
 800fe38:	701a      	strb	r2, [r3, #0]
		}
		if(GRAPH_VALUES.oxygen_flow <= O2_Flow_Rate)
 800fe3a:	4b30      	ldr	r3, [pc, #192]	; (800fefc <Oxygen_PEEP+0x110>)
 800fe3c:	ed93 7a04 	vldr	s14, [r3, #16]
 800fe40:	4b31      	ldr	r3, [pc, #196]	; (800ff08 <Oxygen_PEEP+0x11c>)
 800fe42:	f993 3000 	ldrsb.w	r3, [r3]
 800fe46:	ee07 3a90 	vmov	s15, r3
 800fe4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe56:	d81d      	bhi.n	800fe94 <Oxygen_PEEP+0xa8>
		{
			Oxygen_Parameter.PSV_O2_DAC=controlsys_Update(&Parker_valve_tune, O2_Flow_Rate , GRAPH_VALUES.oxygen_flow);
 800fe58:	4b2b      	ldr	r3, [pc, #172]	; (800ff08 <Oxygen_PEEP+0x11c>)
 800fe5a:	f993 3000 	ldrsb.w	r3, [r3]
 800fe5e:	ee07 3a90 	vmov	s15, r3
 800fe62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe66:	4b25      	ldr	r3, [pc, #148]	; (800fefc <Oxygen_PEEP+0x110>)
 800fe68:	ed93 7a04 	vldr	s14, [r3, #16]
 800fe6c:	eef0 0a47 	vmov.f32	s1, s14
 800fe70:	eeb0 0a67 	vmov.f32	s0, s15
 800fe74:	4825      	ldr	r0, [pc, #148]	; (800ff0c <Oxygen_PEEP+0x120>)
 800fe76:	f000 fb0f 	bl	8010498 <controlsys_Update>
 800fe7a:	eef0 7a40 	vmov.f32	s15, s0
 800fe7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe82:	ee17 2a90 	vmov	r2, s15
 800fe86:	4b22      	ldr	r3, [pc, #136]	; (800ff10 <Oxygen_PEEP+0x124>)
 800fe88:	615a      	str	r2, [r3, #20]
			Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 800fe8a:	4b21      	ldr	r3, [pc, #132]	; (800ff10 <Oxygen_PEEP+0x124>)
 800fe8c:	695a      	ldr	r2, [r3, #20]
 800fe8e:	4b21      	ldr	r3, [pc, #132]	; (800ff14 <Oxygen_PEEP+0x128>)
 800fe90:	615a      	str	r2, [r3, #20]
 800fe92:	e01c      	b.n	800fece <Oxygen_PEEP+0xe2>
		}
		else
		{
			Oxygen_Parameter.PSV_O2_DAC=controlsys_Update(&Parker_valve_tune, O2_Flow_Rate , GRAPH_VALUES.oxygen_flow);
 800fe94:	4b1c      	ldr	r3, [pc, #112]	; (800ff08 <Oxygen_PEEP+0x11c>)
 800fe96:	f993 3000 	ldrsb.w	r3, [r3]
 800fe9a:	ee07 3a90 	vmov	s15, r3
 800fe9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fea2:	4b16      	ldr	r3, [pc, #88]	; (800fefc <Oxygen_PEEP+0x110>)
 800fea4:	ed93 7a04 	vldr	s14, [r3, #16]
 800fea8:	eef0 0a47 	vmov.f32	s1, s14
 800feac:	eeb0 0a67 	vmov.f32	s0, s15
 800feb0:	4816      	ldr	r0, [pc, #88]	; (800ff0c <Oxygen_PEEP+0x120>)
 800feb2:	f000 faf1 	bl	8010498 <controlsys_Update>
 800feb6:	eef0 7a40 	vmov.f32	s15, s0
 800feba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800febe:	ee17 2a90 	vmov	r2, s15
 800fec2:	4b13      	ldr	r3, [pc, #76]	; (800ff10 <Oxygen_PEEP+0x124>)
 800fec4:	615a      	str	r2, [r3, #20]
			Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 800fec6:	4b12      	ldr	r3, [pc, #72]	; (800ff10 <Oxygen_PEEP+0x124>)
 800fec8:	695a      	ldr	r2, [r3, #20]
 800feca:	4b12      	ldr	r3, [pc, #72]	; (800ff14 <Oxygen_PEEP+0x128>)
 800fecc:	615a      	str	r2, [r3, #20]
		}
		Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 800fece:	4b10      	ldr	r3, [pc, #64]	; (800ff10 <Oxygen_PEEP+0x124>)
 800fed0:	695a      	ldr	r2, [r3, #20]
 800fed2:	4b10      	ldr	r3, [pc, #64]	; (800ff14 <Oxygen_PEEP+0x128>)
 800fed4:	615a      	str	r2, [r3, #20]
		Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 800fed6:	4b09      	ldr	r3, [pc, #36]	; (800fefc <Oxygen_PEEP+0x110>)
 800fed8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800fedc:	b2da      	uxtb	r2, r3
 800fede:	4b0c      	ldr	r3, [pc, #48]	; (800ff10 <Oxygen_PEEP+0x124>)
 800fee0:	721a      	strb	r2, [r3, #8]
	}


	Oxygen_Parameter.Achieved_Oxygen= GRAPH_VALUES.oxygen;
 800fee2:	4b06      	ldr	r3, [pc, #24]	; (800fefc <Oxygen_PEEP+0x110>)
 800fee4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800fee8:	b2da      	uxtb	r2, r3
 800feea:	4b09      	ldr	r3, [pc, #36]	; (800ff10 <Oxygen_PEEP+0x124>)
 800feec:	721a      	strb	r2, [r3, #8]
}
 800feee:	bf00      	nop
 800fef0:	3708      	adds	r7, #8
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
 800fef6:	bf00      	nop
 800fef8:	2001280d 	.word	0x2001280d
 800fefc:	200125f8 	.word	0x200125f8
 800ff00:	20012710 	.word	0x20012710
 800ff04:	42c80000 	.word	0x42c80000
 800ff08:	200122e1 	.word	0x200122e1
 800ff0c:	2000001c 	.word	0x2000001c
 800ff10:	200129d4 	.word	0x200129d4
 800ff14:	40007400 	.word	0x40007400

0800ff18 <Low_Oxygen_Achieved_PSV>:



void Low_Oxygen_Achieved_PSV(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	4603      	mov	r3, r0
 800ff20:	460a      	mov	r2, r1
 800ff22:	71fb      	strb	r3, [r7, #7]
 800ff24:	4613      	mov	r3, r2
 800ff26:	71bb      	strb	r3, [r7, #6]


		if(  ( Achieved_Oxygen)  < ( FIO2_Val) && (Achieved_Oxygen  >= (FIO2_Val - 2) ) )
 800ff28:	79ba      	ldrb	r2, [r7, #6]
 800ff2a:	79fb      	ldrb	r3, [r7, #7]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d20c      	bcs.n	800ff4a <Low_Oxygen_Achieved_PSV+0x32>
 800ff30:	79ba      	ldrb	r2, [r7, #6]
 800ff32:	79fb      	ldrb	r3, [r7, #7]
 800ff34:	3b02      	subs	r3, #2
 800ff36:	429a      	cmp	r2, r3
 800ff38:	db07      	blt.n	800ff4a <Low_Oxygen_Achieved_PSV+0x32>
		{
			Oxygen_Parameter.PSV_O2_DAC = (Oxygen_Parameter.PSV_O2_DAC+ET_O2_Envitec_Tune_Value1);
 800ff3a:	4b1d      	ldr	r3, [pc, #116]	; (800ffb0 <Low_Oxygen_Achieved_PSV+0x98>)
 800ff3c:	695b      	ldr	r3, [r3, #20]
 800ff3e:	4a1d      	ldr	r2, [pc, #116]	; (800ffb4 <Low_Oxygen_Achieved_PSV+0x9c>)
 800ff40:	7812      	ldrb	r2, [r2, #0]
 800ff42:	4413      	add	r3, r2
 800ff44:	4a1a      	ldr	r2, [pc, #104]	; (800ffb0 <Low_Oxygen_Achieved_PSV+0x98>)
 800ff46:	6153      	str	r3, [r2, #20]
 800ff48:	e01d      	b.n	800ff86 <Low_Oxygen_Achieved_PSV+0x6e>
		}
		else if(  ( Achieved_Oxygen)  < ( FIO2_Val - 2 ) && (Achieved_Oxygen  > (FIO2_Val - 5) ) )
 800ff4a:	79ba      	ldrb	r2, [r7, #6]
 800ff4c:	79fb      	ldrb	r3, [r7, #7]
 800ff4e:	3b02      	subs	r3, #2
 800ff50:	429a      	cmp	r2, r3
 800ff52:	da0c      	bge.n	800ff6e <Low_Oxygen_Achieved_PSV+0x56>
 800ff54:	79fb      	ldrb	r3, [r7, #7]
 800ff56:	1f1a      	subs	r2, r3, #4
 800ff58:	79bb      	ldrb	r3, [r7, #6]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	dc07      	bgt.n	800ff6e <Low_Oxygen_Achieved_PSV+0x56>
		{
			Oxygen_Parameter.PSV_O2_DAC = (Oxygen_Parameter.PSV_O2_DAC+ET_O2_Envitec_Tune_Value2);
 800ff5e:	4b14      	ldr	r3, [pc, #80]	; (800ffb0 <Low_Oxygen_Achieved_PSV+0x98>)
 800ff60:	695b      	ldr	r3, [r3, #20]
 800ff62:	4a15      	ldr	r2, [pc, #84]	; (800ffb8 <Low_Oxygen_Achieved_PSV+0xa0>)
 800ff64:	7812      	ldrb	r2, [r2, #0]
 800ff66:	4413      	add	r3, r2
 800ff68:	4a11      	ldr	r2, [pc, #68]	; (800ffb0 <Low_Oxygen_Achieved_PSV+0x98>)
 800ff6a:	6153      	str	r3, [r2, #20]
 800ff6c:	e00b      	b.n	800ff86 <Low_Oxygen_Achieved_PSV+0x6e>
		}
		else if(  ( Achieved_Oxygen)  <= ( FIO2_Val - 5 )  )
 800ff6e:	79fb      	ldrb	r3, [r7, #7]
 800ff70:	1f1a      	subs	r2, r3, #4
 800ff72:	79bb      	ldrb	r3, [r7, #6]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	dd06      	ble.n	800ff86 <Low_Oxygen_Achieved_PSV+0x6e>
		{
			Oxygen_Parameter.PSV_O2_DAC = (Oxygen_Parameter.PSV_O2_DAC+ET_O2_Envitec_Tune_Value3);
 800ff78:	4b0d      	ldr	r3, [pc, #52]	; (800ffb0 <Low_Oxygen_Achieved_PSV+0x98>)
 800ff7a:	695b      	ldr	r3, [r3, #20]
 800ff7c:	4a0f      	ldr	r2, [pc, #60]	; (800ffbc <Low_Oxygen_Achieved_PSV+0xa4>)
 800ff7e:	7812      	ldrb	r2, [r2, #0]
 800ff80:	4413      	add	r3, r2
 800ff82:	4a0b      	ldr	r2, [pc, #44]	; (800ffb0 <Low_Oxygen_Achieved_PSV+0x98>)
 800ff84:	6153      	str	r3, [r2, #20]
		}

		if(Oxygen_Parameter.PSV_O2_DAC>=3000)
 800ff86:	4b0a      	ldr	r3, [pc, #40]	; (800ffb0 <Low_Oxygen_Achieved_PSV+0x98>)
 800ff88:	695b      	ldr	r3, [r3, #20]
 800ff8a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	dd03      	ble.n	800ff9a <Low_Oxygen_Achieved_PSV+0x82>
		{
			Oxygen_Parameter.PSV_O2_DAC=3000;
 800ff92:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <Low_Oxygen_Achieved_PSV+0x98>)
 800ff94:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ff98:	615a      	str	r2, [r3, #20]
		}
		Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 800ff9a:	4b05      	ldr	r3, [pc, #20]	; (800ffb0 <Low_Oxygen_Achieved_PSV+0x98>)
 800ff9c:	695a      	ldr	r2, [r3, #20]
 800ff9e:	4b08      	ldr	r3, [pc, #32]	; (800ffc0 <Low_Oxygen_Achieved_PSV+0xa8>)
 800ffa0:	615a      	str	r2, [r3, #20]
}
 800ffa2:	bf00      	nop
 800ffa4:	370c      	adds	r7, #12
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	200129d4 	.word	0x200129d4
 800ffb4:	20012508 	.word	0x20012508
 800ffb8:	20012220 	.word	0x20012220
 800ffbc:	20012a36 	.word	0x20012a36
 800ffc0:	40007400 	.word	0x40007400

0800ffc4 <High_Oxygen_Achieved_PSV>:
  * This function used to reduce the Proportional valve when high O2 Achieved.
  */


void High_Oxygen_Achieved_PSV(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	4603      	mov	r3, r0
 800ffcc:	460a      	mov	r2, r1
 800ffce:	71fb      	strb	r3, [r7, #7]
 800ffd0:	4613      	mov	r3, r2
 800ffd2:	71bb      	strb	r3, [r7, #6]

		if(  ( Achieved_Oxygen)  > ( FIO2_Val ) && (Achieved_Oxygen  <= (FIO2_Val + 2) ) )
 800ffd4:	79ba      	ldrb	r2, [r7, #6]
 800ffd6:	79fb      	ldrb	r3, [r7, #7]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d90c      	bls.n	800fff6 <High_Oxygen_Achieved_PSV+0x32>
 800ffdc:	79ba      	ldrb	r2, [r7, #6]
 800ffde:	79fb      	ldrb	r3, [r7, #7]
 800ffe0:	3302      	adds	r3, #2
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	dc07      	bgt.n	800fff6 <High_Oxygen_Achieved_PSV+0x32>
		{
			Oxygen_Parameter.PSV_O2_DAC = (Oxygen_Parameter.PSV_O2_DAC-ET_O2_Envitec_Tune_Value1);
 800ffe6:	4b1c      	ldr	r3, [pc, #112]	; (8010058 <High_Oxygen_Achieved_PSV+0x94>)
 800ffe8:	695b      	ldr	r3, [r3, #20]
 800ffea:	4a1c      	ldr	r2, [pc, #112]	; (801005c <High_Oxygen_Achieved_PSV+0x98>)
 800ffec:	7812      	ldrb	r2, [r2, #0]
 800ffee:	1a9b      	subs	r3, r3, r2
 800fff0:	4a19      	ldr	r2, [pc, #100]	; (8010058 <High_Oxygen_Achieved_PSV+0x94>)
 800fff2:	6153      	str	r3, [r2, #20]
 800fff4:	e01d      	b.n	8010032 <High_Oxygen_Achieved_PSV+0x6e>
		}
		else if(  ( Achieved_Oxygen)  > ( FIO2_Val + 2 ) && (Achieved_Oxygen  < (FIO2_Val + 5) ) )
 800fff6:	79ba      	ldrb	r2, [r7, #6]
 800fff8:	79fb      	ldrb	r3, [r7, #7]
 800fffa:	3302      	adds	r3, #2
 800fffc:	429a      	cmp	r2, r3
 800fffe:	dd0c      	ble.n	801001a <High_Oxygen_Achieved_PSV+0x56>
 8010000:	79fb      	ldrb	r3, [r7, #7]
 8010002:	1d1a      	adds	r2, r3, #4
 8010004:	79bb      	ldrb	r3, [r7, #6]
 8010006:	429a      	cmp	r2, r3
 8010008:	db07      	blt.n	801001a <High_Oxygen_Achieved_PSV+0x56>
		{
			Oxygen_Parameter.PSV_O2_DAC = (Oxygen_Parameter.PSV_O2_DAC-ET_O2_Envitec_Tune_Value2);
 801000a:	4b13      	ldr	r3, [pc, #76]	; (8010058 <High_Oxygen_Achieved_PSV+0x94>)
 801000c:	695b      	ldr	r3, [r3, #20]
 801000e:	4a14      	ldr	r2, [pc, #80]	; (8010060 <High_Oxygen_Achieved_PSV+0x9c>)
 8010010:	7812      	ldrb	r2, [r2, #0]
 8010012:	1a9b      	subs	r3, r3, r2
 8010014:	4a10      	ldr	r2, [pc, #64]	; (8010058 <High_Oxygen_Achieved_PSV+0x94>)
 8010016:	6153      	str	r3, [r2, #20]
 8010018:	e00b      	b.n	8010032 <High_Oxygen_Achieved_PSV+0x6e>
		}
		else if(  ( Achieved_Oxygen)  >= ( FIO2_Val + 5 )  )
 801001a:	79fb      	ldrb	r3, [r7, #7]
 801001c:	1d1a      	adds	r2, r3, #4
 801001e:	79bb      	ldrb	r3, [r7, #6]
 8010020:	429a      	cmp	r2, r3
 8010022:	da06      	bge.n	8010032 <High_Oxygen_Achieved_PSV+0x6e>
		{
			Oxygen_Parameter.PSV_O2_DAC = (Oxygen_Parameter.PSV_O2_DAC-ET_O2_Envitec_Tune_Value3);
 8010024:	4b0c      	ldr	r3, [pc, #48]	; (8010058 <High_Oxygen_Achieved_PSV+0x94>)
 8010026:	695b      	ldr	r3, [r3, #20]
 8010028:	4a0e      	ldr	r2, [pc, #56]	; (8010064 <High_Oxygen_Achieved_PSV+0xa0>)
 801002a:	7812      	ldrb	r2, [r2, #0]
 801002c:	1a9b      	subs	r3, r3, r2
 801002e:	4a0a      	ldr	r2, [pc, #40]	; (8010058 <High_Oxygen_Achieved_PSV+0x94>)
 8010030:	6153      	str	r3, [r2, #20]
		}


		if(Oxygen_Parameter.PSV_O2_DAC<=1400)
 8010032:	4b09      	ldr	r3, [pc, #36]	; (8010058 <High_Oxygen_Achieved_PSV+0x94>)
 8010034:	695b      	ldr	r3, [r3, #20]
 8010036:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 801003a:	dc03      	bgt.n	8010044 <High_Oxygen_Achieved_PSV+0x80>
		{
			Oxygen_Parameter.PSV_O2_DAC=1400;
 801003c:	4b06      	ldr	r3, [pc, #24]	; (8010058 <High_Oxygen_Achieved_PSV+0x94>)
 801003e:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8010042:	615a      	str	r2, [r3, #20]
		}
	    Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 8010044:	4b04      	ldr	r3, [pc, #16]	; (8010058 <High_Oxygen_Achieved_PSV+0x94>)
 8010046:	695a      	ldr	r2, [r3, #20]
 8010048:	4b07      	ldr	r3, [pc, #28]	; (8010068 <High_Oxygen_Achieved_PSV+0xa4>)
 801004a:	615a      	str	r2, [r3, #20]
}
 801004c:	bf00      	nop
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr
 8010058:	200129d4 	.word	0x200129d4
 801005c:	20012508 	.word	0x20012508
 8010060:	20012220 	.word	0x20012220
 8010064:	20012a36 	.word	0x20012a36
 8010068:	40007400 	.word	0x40007400

0801006c <Tune_O2_PSV>:
/**
  * This function check Achieved O2 high or low
  */

void Tune_O2_PSV(uint8_t FIO2_Val,uint8_t Achieved_Oxygen)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	4603      	mov	r3, r0
 8010074:	460a      	mov	r2, r1
 8010076:	71fb      	strb	r3, [r7, #7]
 8010078:	4613      	mov	r3, r2
 801007a:	71bb      	strb	r3, [r7, #6]
	   if (Achieved_Oxygen < (FIO2_Val-1))
 801007c:	79ba      	ldrb	r2, [r7, #6]
 801007e:	79fb      	ldrb	r3, [r7, #7]
 8010080:	3b01      	subs	r3, #1
 8010082:	429a      	cmp	r2, r3
 8010084:	da06      	bge.n	8010094 <Tune_O2_PSV+0x28>
		{
			Low_Oxygen_Achieved_PSV(FIO2_Val,Achieved_Oxygen);
 8010086:	79ba      	ldrb	r2, [r7, #6]
 8010088:	79fb      	ldrb	r3, [r7, #7]
 801008a:	4611      	mov	r1, r2
 801008c:	4618      	mov	r0, r3
 801008e:	f7ff ff43 	bl	800ff18 <Low_Oxygen_Achieved_PSV>
 8010092:	e00e      	b.n	80100b2 <Tune_O2_PSV+0x46>
		}
		else if (Achieved_Oxygen > (FIO2_Val))
 8010094:	79ba      	ldrb	r2, [r7, #6]
 8010096:	79fb      	ldrb	r3, [r7, #7]
 8010098:	429a      	cmp	r2, r3
 801009a:	d906      	bls.n	80100aa <Tune_O2_PSV+0x3e>
		{
			High_Oxygen_Achieved_PSV(FIO2_Val,Achieved_Oxygen);
 801009c:	79ba      	ldrb	r2, [r7, #6]
 801009e:	79fb      	ldrb	r3, [r7, #7]
 80100a0:	4611      	mov	r1, r2
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7ff ff8e 	bl	800ffc4 <High_Oxygen_Achieved_PSV>
 80100a8:	e003      	b.n	80100b2 <Tune_O2_PSV+0x46>
		}
		else
			Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 80100aa:	4b08      	ldr	r3, [pc, #32]	; (80100cc <Tune_O2_PSV+0x60>)
 80100ac:	695a      	ldr	r2, [r3, #20]
 80100ae:	4b08      	ldr	r3, [pc, #32]	; (80100d0 <Tune_O2_PSV+0x64>)
 80100b0:	615a      	str	r2, [r3, #20]
		Last_O2_Dac_Val = Oxygen_Parameter.PSV_O2_DAC;
 80100b2:	4b06      	ldr	r3, [pc, #24]	; (80100cc <Tune_O2_PSV+0x60>)
 80100b4:	695b      	ldr	r3, [r3, #20]
 80100b6:	b29a      	uxth	r2, r3
 80100b8:	4b06      	ldr	r3, [pc, #24]	; (80100d4 <Tune_O2_PSV+0x68>)
 80100ba:	801a      	strh	r2, [r3, #0]
		Parkar_valve_Signal(Oxygen_Parameter.PSV_O2_DAC);
 80100bc:	4b03      	ldr	r3, [pc, #12]	; (80100cc <Tune_O2_PSV+0x60>)
 80100be:	695a      	ldr	r2, [r3, #20]
 80100c0:	4b03      	ldr	r3, [pc, #12]	; (80100d0 <Tune_O2_PSV+0x64>)
 80100c2:	615a      	str	r2, [r3, #20]
}
 80100c4:	bf00      	nop
 80100c6:	3708      	adds	r7, #8
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	200129d4 	.word	0x200129d4
 80100d0:	40007400 	.word	0x40007400
 80100d4:	20012a08 	.word	0x20012a08

080100d8 <Sensor_Read_Task>:
 * @brief Sensor_Read_Task.
 * This task call READ_SENSOR_TASK function.
 * */

void Sensor_Read_Task(void *argument)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
	while(1)
	{
		READ_SENSOR_TASK();
 80100e0:	f000 f804 	bl	80100ec <READ_SENSOR_TASK>
		vTaskDelay(Two_Millisecond_Delay);
 80100e4:	2002      	movs	r0, #2
 80100e6:	f00a ffb1 	bl	801b04c <vTaskDelay>
		READ_SENSOR_TASK();
 80100ea:	e7f9      	b.n	80100e0 <Sensor_Read_Task+0x8>

080100ec <READ_SENSOR_TASK>:
/**
 * @brief READ_SENSOR_TASK.
 * This Function calls all sensor Reading functions for every 2 milli-seconds.
 * */
void READ_SENSOR_TASK()
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	af00      	add	r7, sp, #0
		MPX5010_read();
 80100f0:	f000 faf4 	bl	80106dc <MPX5010_read>
		MPX7002_read();
 80100f4:	f000 ffe8 	bl	80110c8 <MPX7002_read>
		MPX5010DP_read();
 80100f8:	f000 fd86 	bl	8010c08 <MPX5010DP_read>
		OOM202_read();
 80100fc:	f000 f884 	bl	8010208 <OOM202_read>
		Read_Battery_Voltage();
 8010100:	f7f1 fede 	bl	8001ec0 <Read_Battery_Voltage>
}
 8010104:	bf00      	nop
 8010106:	bd80      	pop	{r7, pc}

08010108 <CALIBRATE_SENSOR_TASK>:
 * @brief CALIBRATE_SENSOR_TASK.
 * This function is called from sensor offset task.
 * */

void CALIBRATE_SENSOR_TASK()
{
 8010108:	b580      	push	{r7, lr}
 801010a:	af00      	add	r7, sp, #0
	controlsys_Init(&Parker_valve_tune);
 801010c:	4806      	ldr	r0, [pc, #24]	; (8010128 <CALIBRATE_SENSOR_TASK+0x20>)
 801010e:	f000 f9a3 	bl	8010458 <controlsys_Init>
	MPX5010_init();
 8010112:	f000 fa89 	bl	8010628 <MPX5010_init>
	MPX7002_init();
 8010116:	f000 ff6b 	bl	8010ff0 <MPX7002_init>
	MPX5010DP_init();
 801011a:	f000 fd0d 	bl	8010b38 <MPX5010DP_init>
	OOM202_init();
 801011e:	f000 f84d 	bl	80101bc <OOM202_init>
}
 8010122:	bf00      	nop
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	2000001c 	.word	0x2000001c
 801012c:	00000000 	.word	0x00000000

08010130 <compute_fio>:

/**
  * @brief  Compute FiO2 Percentage
  *         Function maps Sensor voltage and FiO2 percentage.
  */
float compute_fio(uint16_t voltage){
 8010130:	b5b0      	push	{r4, r5, r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
 8010136:	4603      	mov	r3, r0
 8010138:	80fb      	strh	r3, [r7, #6]
	return (((voltage - OOM202.offset_minimum)*79.2)/(OOM202.offset_maximum - OOM202.offset_minimum))+20.8;
 801013a:	88fb      	ldrh	r3, [r7, #6]
 801013c:	4a1e      	ldr	r2, [pc, #120]	; (80101b8 <compute_fio+0x88>)
 801013e:	8852      	ldrh	r2, [r2, #2]
 8010140:	1a9b      	subs	r3, r3, r2
 8010142:	4618      	mov	r0, r3
 8010144:	f7f0 f996 	bl	8000474 <__aeabi_i2d>
 8010148:	a317      	add	r3, pc, #92	; (adr r3, 80101a8 <compute_fio+0x78>)
 801014a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014e:	f7f0 f9fb 	bl	8000548 <__aeabi_dmul>
 8010152:	4602      	mov	r2, r0
 8010154:	460b      	mov	r3, r1
 8010156:	4614      	mov	r4, r2
 8010158:	461d      	mov	r5, r3
 801015a:	4b17      	ldr	r3, [pc, #92]	; (80101b8 <compute_fio+0x88>)
 801015c:	889b      	ldrh	r3, [r3, #4]
 801015e:	461a      	mov	r2, r3
 8010160:	4b15      	ldr	r3, [pc, #84]	; (80101b8 <compute_fio+0x88>)
 8010162:	885b      	ldrh	r3, [r3, #2]
 8010164:	1ad3      	subs	r3, r2, r3
 8010166:	4618      	mov	r0, r3
 8010168:	f7f0 f984 	bl	8000474 <__aeabi_i2d>
 801016c:	4602      	mov	r2, r0
 801016e:	460b      	mov	r3, r1
 8010170:	4620      	mov	r0, r4
 8010172:	4629      	mov	r1, r5
 8010174:	f7f0 fb12 	bl	800079c <__aeabi_ddiv>
 8010178:	4602      	mov	r2, r0
 801017a:	460b      	mov	r3, r1
 801017c:	4610      	mov	r0, r2
 801017e:	4619      	mov	r1, r3
 8010180:	a30b      	add	r3, pc, #44	; (adr r3, 80101b0 <compute_fio+0x80>)
 8010182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010186:	f7f0 f829 	bl	80001dc <__adddf3>
 801018a:	4602      	mov	r2, r0
 801018c:	460b      	mov	r3, r1
 801018e:	4610      	mov	r0, r2
 8010190:	4619      	mov	r1, r3
 8010192:	f7f0 fcbb 	bl	8000b0c <__aeabi_d2f>
 8010196:	4603      	mov	r3, r0
 8010198:	ee07 3a90 	vmov	s15, r3
}
 801019c:	eeb0 0a67 	vmov.f32	s0, s15
 80101a0:	3708      	adds	r7, #8
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bdb0      	pop	{r4, r5, r7, pc}
 80101a6:	bf00      	nop
 80101a8:	cccccccd 	.word	0xcccccccd
 80101ac:	4053cccc 	.word	0x4053cccc
 80101b0:	cccccccd 	.word	0xcccccccd
 80101b4:	4034cccc 	.word	0x4034cccc
 80101b8:	20012224 	.word	0x20012224

080101bc <OOM202_init>:

/**
  * @brief  Initialize the OOM202 sensor.
  *         This function sets initial values for the sensor.
  */
void OOM202_init(){
 80101bc:	b480      	push	{r7}
 80101be:	af00      	add	r7, sp, #0
	OOM202.smoothing_factor = 0.3;
 80101c0:	4b0e      	ldr	r3, [pc, #56]	; (80101fc <OOM202_init+0x40>)
 80101c2:	4a0f      	ldr	r2, [pc, #60]	; (8010200 <OOM202_init+0x44>)
 80101c4:	619a      	str	r2, [r3, #24]
	OOM202.offset_maximum = 70;//842;
 80101c6:	4b0d      	ldr	r3, [pc, #52]	; (80101fc <OOM202_init+0x40>)
 80101c8:	2246      	movs	r2, #70	; 0x46
 80101ca:	809a      	strh	r2, [r3, #4]
	OOM202.offset_minimum = 13;//137;
 80101cc:	4b0b      	ldr	r3, [pc, #44]	; (80101fc <OOM202_init+0x40>)
 80101ce:	220d      	movs	r2, #13
 80101d0:	805a      	strh	r2, [r3, #2]
	OOM202.sensitivity = 0.1316;
 80101d2:	4b0a      	ldr	r3, [pc, #40]	; (80101fc <OOM202_init+0x40>)
 80101d4:	4a0b      	ldr	r2, [pc, #44]	; (8010204 <OOM202_init+0x48>)
 80101d6:	615a      	str	r2, [r3, #20]
	OOM202.supply_voltage = 3300;
 80101d8:	4b08      	ldr	r3, [pc, #32]	; (80101fc <OOM202_init+0x40>)
 80101da:	f640 42e4 	movw	r2, #3300	; 0xce4
 80101de:	80da      	strh	r2, [r3, #6]
	OOM202.previous_reading = 0;
 80101e0:	4b06      	ldr	r3, [pc, #24]	; (80101fc <OOM202_init+0x40>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	81da      	strh	r2, [r3, #14]
	OOM202.operational_status = 1;
 80101e6:	4b05      	ldr	r3, [pc, #20]	; (80101fc <OOM202_init+0x40>)
 80101e8:	2201      	movs	r2, #1
 80101ea:	741a      	strb	r2, [r3, #16]
	OOM202.sensor_ready = 0;
 80101ec:	4b03      	ldr	r3, [pc, #12]	; (80101fc <OOM202_init+0x40>)
 80101ee:	2200      	movs	r2, #0
 80101f0:	745a      	strb	r2, [r3, #17]

}
 80101f2:	bf00      	nop
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr
 80101fc:	20012224 	.word	0x20012224
 8010200:	3e99999a 	.word	0x3e99999a
 8010204:	3e06c227 	.word	0x3e06c227

08010208 <OOM202_read>:
  *         		1. https://hackaday.com/2019/09/06/sensor-filters-for-coders/
  *         		2. https://electronics.stackexchange.com/questions/30370/fast-and-memory-efficient-moving-average-calculation
  *         		3. https://stackoverflow.com/questions/12636613/how-to-calculate-moving-average-without-keeping-the-count-and-data-total
  */

void OOM202_read(){
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
	float raw_voltage = OOM202_read_adc();
 801020e:	f000 f863 	bl	80102d8 <OOM202_read_adc>
 8010212:	ed87 0a03 	vstr	s0, [r7, #12]
	OOM202.current_reading = (uint16_t)((1-OOM202.smoothing_factor)*OOM202.previous_reading + (OOM202.smoothing_factor*raw_voltage));
 8010216:	4b2b      	ldr	r3, [pc, #172]	; (80102c4 <OOM202_read+0xbc>)
 8010218:	edd3 7a06 	vldr	s15, [r3, #24]
 801021c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010220:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010224:	4b27      	ldr	r3, [pc, #156]	; (80102c4 <OOM202_read+0xbc>)
 8010226:	89db      	ldrh	r3, [r3, #14]
 8010228:	ee07 3a90 	vmov	s15, r3
 801022c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010234:	4b23      	ldr	r3, [pc, #140]	; (80102c4 <OOM202_read+0xbc>)
 8010236:	edd3 6a06 	vldr	s13, [r3, #24]
 801023a:	edd7 7a03 	vldr	s15, [r7, #12]
 801023e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801024a:	ee17 3a90 	vmov	r3, s15
 801024e:	b29a      	uxth	r2, r3
 8010250:	4b1c      	ldr	r3, [pc, #112]	; (80102c4 <OOM202_read+0xbc>)
 8010252:	819a      	strh	r2, [r3, #12]
	OOM202.previous_reading = OOM202.current_reading;
 8010254:	4b1b      	ldr	r3, [pc, #108]	; (80102c4 <OOM202_read+0xbc>)
 8010256:	899a      	ldrh	r2, [r3, #12]
 8010258:	4b1a      	ldr	r3, [pc, #104]	; (80102c4 <OOM202_read+0xbc>)
 801025a:	81da      	strh	r2, [r3, #14]
	OOM202.value = compute_fio(OOM202.current_reading);
 801025c:	4b19      	ldr	r3, [pc, #100]	; (80102c4 <OOM202_read+0xbc>)
 801025e:	899b      	ldrh	r3, [r3, #12]
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff ff65 	bl	8010130 <compute_fio>
 8010266:	eef0 7a40 	vmov.f32	s15, s0
 801026a:	4b16      	ldr	r3, [pc, #88]	; (80102c4 <OOM202_read+0xbc>)
 801026c:	edc3 7a02 	vstr	s15, [r3, #8]

	if(OOM202.value > 100)
 8010270:	4b14      	ldr	r3, [pc, #80]	; (80102c4 <OOM202_read+0xbc>)
 8010272:	edd3 7a02 	vldr	s15, [r3, #8]
 8010276:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80102c8 <OOM202_read+0xc0>
 801027a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801027e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010282:	dd02      	ble.n	801028a <OOM202_read+0x82>
		OOM202.value = 100;
 8010284:	4b0f      	ldr	r3, [pc, #60]	; (80102c4 <OOM202_read+0xbc>)
 8010286:	4a11      	ldr	r2, [pc, #68]	; (80102cc <OOM202_read+0xc4>)
 8010288:	609a      	str	r2, [r3, #8]
	if(OOM202.value <20)
 801028a:	4b0e      	ldr	r3, [pc, #56]	; (80102c4 <OOM202_read+0xbc>)
 801028c:	edd3 7a02 	vldr	s15, [r3, #8]
 8010290:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8010294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801029c:	d502      	bpl.n	80102a4 <OOM202_read+0x9c>
		OOM202.value = 20;
 801029e:	4b09      	ldr	r3, [pc, #36]	; (80102c4 <OOM202_read+0xbc>)
 80102a0:	4a0b      	ldr	r2, [pc, #44]	; (80102d0 <OOM202_read+0xc8>)
 80102a2:	609a      	str	r2, [r3, #8]

	GRAPH_VALUES.oxygen = (int8_t) OOM202.value;
 80102a4:	4b07      	ldr	r3, [pc, #28]	; (80102c4 <OOM202_read+0xbc>)
 80102a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80102aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80102b2:	793b      	ldrb	r3, [r7, #4]
 80102b4:	b25a      	sxtb	r2, r3
 80102b6:	4b07      	ldr	r3, [pc, #28]	; (80102d4 <OOM202_read+0xcc>)
 80102b8:	731a      	strb	r2, [r3, #12]
}
 80102ba:	bf00      	nop
 80102bc:	3710      	adds	r7, #16
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	20012224 	.word	0x20012224
 80102c8:	42c80000 	.word	0x42c80000
 80102cc:	42c80000 	.word	0x42c80000
 80102d0:	41a00000 	.word	0x41a00000
 80102d4:	200125f8 	.word	0x200125f8

080102d8 <OOM202_read_adc>:

/**
  * @brief  Perform analog-to-digital value to voltage conversion for the OOM202 sensor.
  * @retval Vout (in mV)
  */
float OOM202_read_adc(){
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
	uint16_t muxPort = ADS1115_MUX_AIN0;
 80102de:	2340      	movs	r3, #64	; 0x40
 80102e0:	80fb      	strh	r3, [r7, #6]
	float result;
    // Call the function
    HAL_StatusTypeDef status = ADS1115_Read(muxPort,&result, &ADS1115_3_I2C_Handler);
 80102e2:	4639      	mov	r1, r7
 80102e4:	88fb      	ldrh	r3, [r7, #6]
 80102e6:	4a0d      	ldr	r2, [pc, #52]	; (801031c <OOM202_read_adc+0x44>)
 80102e8:	4618      	mov	r0, r3
 80102ea:	f000 f857 	bl	801039c <ADS1115_Read>
 80102ee:	4603      	mov	r3, r0
 80102f0:	717b      	strb	r3, [r7, #5]
    // Check if the function call was successful
    if (status == HAL_OK) {
 80102f2:	797b      	ldrb	r3, [r7, #5]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d104      	bne.n	8010302 <OOM202_read_adc+0x2a>
    	ENVITEC_Sensor_ADS1115 = SERVICE_PASS;
 80102f8:	4b09      	ldr	r3, [pc, #36]	; (8010320 <OOM202_read_adc+0x48>)
 80102fa:	2201      	movs	r2, #1
 80102fc:	701a      	strb	r2, [r3, #0]
        return result;
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	e004      	b.n	801030c <OOM202_read_adc+0x34>
    }
    ENVITEC_Sensor_ADS1115 = SERVICE_FAIL;
 8010302:	4b07      	ldr	r3, [pc, #28]	; (8010320 <OOM202_read_adc+0x48>)
 8010304:	2200      	movs	r2, #0
 8010306:	701a      	strb	r2, [r3, #0]
	return 0;
 8010308:	f04f 0300 	mov.w	r3, #0
 801030c:	ee07 3a90 	vmov	s15, r3
}
 8010310:	eeb0 0a67 	vmov.f32	s0, s15
 8010314:	3708      	adds	r7, #8
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
 801031a:	bf00      	nop
 801031c:	20012ce0 	.word	0x20012ce0
 8010320:	200126a1 	.word	0x200126a1

08010324 <ADS1115_Init>:
/**
  * @brief  Initialize the ADS1115 I2C communication.
  * @param  handler: Pointer to the I2C handler structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADS1115_Init(uint8_t ads_reference, I2C_HandleTypeDef *handler) {
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
 801032a:	4603      	mov	r3, r0
 801032c:	6039      	str	r1, [r7, #0]
 801032e:	71fb      	strb	r3, [r7, #7]

	if(ads_reference==1){
 8010330:	79fb      	ldrb	r3, [r7, #7]
 8010332:	2b01      	cmp	r3, #1
 8010334:	d105      	bne.n	8010342 <ADS1115_Init+0x1e>
		// Handler
		memcpy(&ADS1115_1_I2C_Handler, handler, sizeof(*handler));
 8010336:	2254      	movs	r2, #84	; 0x54
 8010338:	6839      	ldr	r1, [r7, #0]
 801033a:	4815      	ldr	r0, [pc, #84]	; (8010390 <ADS1115_Init+0x6c>)
 801033c:	f00c fdd6 	bl	801ceec <memcpy>
 8010340:	e013      	b.n	801036a <ADS1115_Init+0x46>
	}else if(ads_reference==2){
 8010342:	79fb      	ldrb	r3, [r7, #7]
 8010344:	2b02      	cmp	r3, #2
 8010346:	d105      	bne.n	8010354 <ADS1115_Init+0x30>
		// Handler
		memcpy(&ADS1115_2_I2C_Handler, handler, sizeof(*handler));
 8010348:	2254      	movs	r2, #84	; 0x54
 801034a:	6839      	ldr	r1, [r7, #0]
 801034c:	4811      	ldr	r0, [pc, #68]	; (8010394 <ADS1115_Init+0x70>)
 801034e:	f00c fdcd 	bl	801ceec <memcpy>
 8010352:	e00a      	b.n	801036a <ADS1115_Init+0x46>
	}else if(ads_reference==3){
 8010354:	79fb      	ldrb	r3, [r7, #7]
 8010356:	2b03      	cmp	r3, #3
 8010358:	d105      	bne.n	8010366 <ADS1115_Init+0x42>
		// Handler
		memcpy(&ADS1115_3_I2C_Handler, handler, sizeof(*handler));
 801035a:	2254      	movs	r2, #84	; 0x54
 801035c:	6839      	ldr	r1, [r7, #0]
 801035e:	480e      	ldr	r0, [pc, #56]	; (8010398 <ADS1115_Init+0x74>)
 8010360:	f00c fdc4 	bl	801ceec <memcpy>
 8010364:	e001      	b.n	801036a <ADS1115_Init+0x46>
	}else{
		return HAL_ERROR;
 8010366:	2301      	movs	r3, #1
 8010368:	e00d      	b.n	8010386 <ADS1115_Init+0x62>
	}

    HAL_StatusTypeDef ads_status = HAL_I2C_IsDeviceReady(handler, ADS1115_ADDRESS, 5, ADS1115_TIMEOUT);
 801036a:	2301      	movs	r3, #1
 801036c:	2205      	movs	r2, #5
 801036e:	2190      	movs	r1, #144	; 0x90
 8010370:	6838      	ldr	r0, [r7, #0]
 8010372:	f006 ff97 	bl	80172a4 <HAL_I2C_IsDeviceReady>
 8010376:	4603      	mov	r3, r0
 8010378:	73fb      	strb	r3, [r7, #15]
    // Check if ADS1115 is ready
    if (ads_status== HAL_OK) {
 801037a:	7bfb      	ldrb	r3, [r7, #15]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d101      	bne.n	8010384 <ADS1115_Init+0x60>
        return HAL_OK;
 8010380:	2300      	movs	r3, #0
 8010382:	e000      	b.n	8010386 <ADS1115_Init+0x62>
    } else {
        return HAL_ERROR;
 8010384:	2301      	movs	r3, #1
    }
}
 8010386:	4618      	mov	r0, r3
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}
 801038e:	bf00      	nop
 8010390:	200127b0 	.word	0x200127b0
 8010394:	200128ac 	.word	0x200128ac
 8010398:	20012ce0 	.word	0x20012ce0

0801039c <ADS1115_Read>:
  * @brief  Read the ADC value from the ADS1115.
  * @param  muxPort: Multiplexer configuration for the ADC.
  * @param  voltage: Pointer to store the converted voltage.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADS1115_Read(uint16_t muxPort, float *voltage, I2C_HandleTypeDef *handler) {
 801039c:	b580      	push	{r7, lr}
 801039e:	b08a      	sub	sp, #40	; 0x28
 80103a0:	af02      	add	r7, sp, #8
 80103a2:	4603      	mov	r3, r0
 80103a4:	60b9      	str	r1, [r7, #8]
 80103a6:	607a      	str	r2, [r7, #4]
 80103a8:	81fb      	strh	r3, [r7, #14]
    uint8_t ADS1115_config[3];
    uint8_t ADS1115_rawValue[2];
    float ADS1115_voltCoef = 6144.0;
 80103aa:	4b28      	ldr	r3, [pc, #160]	; (801044c <ADS1115_Read+0xb0>)
 80103ac:	61fb      	str	r3, [r7, #28]

    // Configure ADS1115
    ADS1115_config[0] = 0X01;
 80103ae:	2301      	movs	r3, #1
 80103b0:	753b      	strb	r3, [r7, #20]
    ADS1115_config[1] = ADS1115_OS | muxPort | ADS1115_PGA_TWOTHIRDS | ADS1115_MODE;
 80103b2:	89fb      	ldrh	r3, [r7, #14]
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	757b      	strb	r3, [r7, #21]
    ADS1115_config[2] = ADS1115_DATA_RATE_860 | ADS1115_COMP_MODE | ADS1115_COMP_POL | ADS1115_COMP_LAT| ADS1115_COMP_QUE;
 80103b8:	23e3      	movs	r3, #227	; 0xe3
 80103ba:	75bb      	strb	r3, [r7, #22]

    // Write configuration to ADS1115
 	if(HAL_I2C_Master_Transmit(handler, ADS1115_ADDRESS, ADS1115_config, 3, 1)==HAL_OK)
 80103bc:	f107 0214 	add.w	r2, r7, #20
 80103c0:	2301      	movs	r3, #1
 80103c2:	9300      	str	r3, [sp, #0]
 80103c4:	2303      	movs	r3, #3
 80103c6:	2190      	movs	r1, #144	; 0x90
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f006 fc47 	bl	8016c5c <HAL_I2C_Master_Transmit>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d136      	bne.n	8010442 <ADS1115_Read+0xa6>
 	{
 		ADS1115_config[0] = 0X00;
 80103d4:	2300      	movs	r3, #0
 80103d6:	753b      	strb	r3, [r7, #20]
  		if(HAL_I2C_Master_Transmit(handler, ADS1115_ADDRESS, ADS1115_config, 1, 1)==HAL_OK)
 80103d8:	f107 0214 	add.w	r2, r7, #20
 80103dc:	2301      	movs	r3, #1
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	2301      	movs	r3, #1
 80103e2:	2190      	movs	r1, #144	; 0x90
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f006 fc39 	bl	8016c5c <HAL_I2C_Master_Transmit>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d128      	bne.n	8010442 <ADS1115_Read+0xa6>
  		{
  			// Read converted value from ADS1115
  			if(HAL_I2C_Master_Receive(handler, ADS1115_ADDRESS, ADS1115_rawValue, 2, 1)==HAL_OK)
 80103f0:	f107 0210 	add.w	r2, r7, #16
 80103f4:	2301      	movs	r3, #1
 80103f6:	9300      	str	r3, [sp, #0]
 80103f8:	2302      	movs	r3, #2
 80103fa:	2190      	movs	r1, #144	; 0x90
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f006 fd2b 	bl	8016e58 <HAL_I2C_Master_Receive>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d11c      	bne.n	8010442 <ADS1115_Read+0xa6>
  			{
  				// Convert raw value to voltage
  				uint16_t adc = (ADS1115_rawValue[0] << 8) | ADS1115_rawValue[1];
 8010408:	7c3b      	ldrb	r3, [r7, #16]
 801040a:	021b      	lsls	r3, r3, #8
 801040c:	b21a      	sxth	r2, r3
 801040e:	7c7b      	ldrb	r3, [r7, #17]
 8010410:	b21b      	sxth	r3, r3
 8010412:	4313      	orrs	r3, r2
 8010414:	b21b      	sxth	r3, r3
 8010416:	837b      	strh	r3, [r7, #26]

  				Trigger_Ads1115_Raw_Adc = adc;
 8010418:	4a0d      	ldr	r2, [pc, #52]	; (8010450 <ADS1115_Read+0xb4>)
 801041a:	8b7b      	ldrh	r3, [r7, #26]
 801041c:	8013      	strh	r3, [r2, #0]

  				*voltage = (adc*ADS1115_voltCoef/ADS1115_RESOLUTION);
 801041e:	8b7b      	ldrh	r3, [r7, #26]
 8010420:	ee07 3a90 	vmov	s15, r3
 8010424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010428:	edd7 7a07 	vldr	s15, [r7, #28]
 801042c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010430:	eddf 6a08 	vldr	s13, [pc, #32]	; 8010454 <ADS1115_Read+0xb8>
 8010434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	edc3 7a00 	vstr	s15, [r3]

  				return HAL_OK;
 801043e:	2300      	movs	r3, #0
 8010440:	e000      	b.n	8010444 <ADS1115_Read+0xa8>
  			}
  		}
  	}
    return HAL_ERROR;
 8010442:	2301      	movs	r3, #1
}
 8010444:	4618      	mov	r0, r3
 8010446:	3720      	adds	r7, #32
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	45c00000 	.word	0x45c00000
 8010450:	200129a2 	.word	0x200129a2
 8010454:	46fffe00 	.word	0x46fffe00

08010458 <controlsys_Init>:

/**
  * @brief  Initialize the control system.
  */

void controlsys_Init(controlsys *cs) {
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]


	cs->area = 0.0;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f04f 0200 	mov.w	r2, #0
 8010466:	625a      	str	r2, [r3, #36]	; 0x24
	cs->prevdif = 0.0;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f04f 0200 	mov.w	r2, #0
 801046e:	629a      	str	r2, [r3, #40]	; 0x28

	cs->rate  = 0.0;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f04f 0200 	mov.w	r2, #0
 8010476:	62da      	str	r2, [r3, #44]	; 0x2c
	cs->prevmea = 0.0;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f04f 0200 	mov.w	r2, #0
 801047e:	631a      	str	r2, [r3, #48]	; 0x30

	cs->out = 0.0;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f04f 0200 	mov.w	r2, #0
 8010486:	635a      	str	r2, [r3, #52]	; 0x34

}
 8010488:	bf00      	nop
 801048a:	370c      	adds	r7, #12
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr
 8010494:	0000      	movs	r0, r0
	...

08010498 <controlsys_Update>:
/**
  * @brief  controlsys_Update.
  * This function controls the oxygen flow rate as needed.
  */

float controlsys_Update(controlsys *cs, float set, float mea) {
 8010498:	b5b0      	push	{r4, r5, r7, lr}
 801049a:	b088      	sub	sp, #32
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80104a4:	edc7 0a01 	vstr	s1, [r7, #4]

	
    float error = set - mea;
 80104a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80104ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80104b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104b4:	edc7 7a07 	vstr	s15, [r7, #28]
    float pro = cs->Kp * error;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	edd3 7a00 	vldr	s15, [r3]
 80104be:	ed97 7a07 	vldr	s14, [r7, #28]
 80104c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104c6:	edc7 7a06 	vstr	s15, [r7, #24]
    float dInput = (mea - cs->prevmea);
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80104d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80104d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80104d8:	edc7 7a05 	vstr	s15, [r7, #20]
    cs->area  = cs->area +(cs->Ki * error*0.002);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7ef ffd9 	bl	8000498 <__aeabi_f2d>
 80104e6:	4604      	mov	r4, r0
 80104e8:	460d      	mov	r5, r1
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80104f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80104f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104f8:	ee17 0a90 	vmov	r0, s15
 80104fc:	f7ef ffcc 	bl	8000498 <__aeabi_f2d>
 8010500:	a347      	add	r3, pc, #284	; (adr r3, 8010620 <controlsys_Update+0x188>)
 8010502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010506:	f7f0 f81f 	bl	8000548 <__aeabi_dmul>
 801050a:	4602      	mov	r2, r0
 801050c:	460b      	mov	r3, r1
 801050e:	4620      	mov	r0, r4
 8010510:	4629      	mov	r1, r5
 8010512:	f7ef fe63 	bl	80001dc <__adddf3>
 8010516:	4602      	mov	r2, r0
 8010518:	460b      	mov	r3, r1
 801051a:	4610      	mov	r0, r2
 801051c:	4619      	mov	r1, r3
 801051e:	f7f0 faf5 	bl	8000b0c <__aeabi_d2f>
 8010522:	4602      	mov	r2, r0
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	625a      	str	r2, [r3, #36]	; 0x24
   // cs->area  = cs->area +(cs->Ki * dInput);

    if (cs->area > cs->b2) {
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	edd3 7a07 	vldr	s15, [r3, #28]
 8010534:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801053c:	dd04      	ble.n	8010548 <controlsys_Update+0xb0>

        cs->area = cs->b2;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	69da      	ldr	r2, [r3, #28]
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	625a      	str	r2, [r3, #36]	; 0x24
 8010546:	e00e      	b.n	8010566 <controlsys_Update+0xce>

    } else if (cs->area < cs->b1) {
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	edd3 7a06 	vldr	s15, [r3, #24]
 8010554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801055c:	d503      	bpl.n	8010566 <controlsys_Update+0xce>

        cs->area = cs->b1;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	699a      	ldr	r2, [r3, #24]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	625a      	str	r2, [r3, #36]	; 0x24

    }

    cs->rate = -(cs->Kd *(dInput/0.002));
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	4618      	mov	r0, r3
 801056c:	f7ef ff94 	bl	8000498 <__aeabi_f2d>
 8010570:	4604      	mov	r4, r0
 8010572:	460d      	mov	r5, r1
 8010574:	6978      	ldr	r0, [r7, #20]
 8010576:	f7ef ff8f 	bl	8000498 <__aeabi_f2d>
 801057a:	a329      	add	r3, pc, #164	; (adr r3, 8010620 <controlsys_Update+0x188>)
 801057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010580:	f7f0 f90c 	bl	800079c <__aeabi_ddiv>
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	4620      	mov	r0, r4
 801058a:	4629      	mov	r1, r5
 801058c:	f7ef ffdc 	bl	8000548 <__aeabi_dmul>
 8010590:	4602      	mov	r2, r0
 8010592:	460b      	mov	r3, r1
 8010594:	4610      	mov	r0, r2
 8010596:	4619      	mov	r1, r3
 8010598:	f7f0 fab8 	bl	8000b0c <__aeabi_d2f>
 801059c:	4603      	mov	r3, r0
 801059e:	ee07 3a90 	vmov	s15, r3
 80105a2:	eef1 7a67 	vneg.f32	s15, s15
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


    cs->out = (pro + cs->area + cs->rate);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80105b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80105b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80105c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (cs->out > cs->a2) {
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80105d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80105da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105de:	dd04      	ble.n	80105ea <controlsys_Update+0x152>

        cs->out = cs->a2;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	695a      	ldr	r2, [r3, #20]
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	635a      	str	r2, [r3, #52]	; 0x34
 80105e8:	e00e      	b.n	8010608 <controlsys_Update+0x170>

    } else if (cs->out < cs->a1) {
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80105f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80105fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fe:	d503      	bpl.n	8010608 <controlsys_Update+0x170>

        cs->out = cs->a1;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	691a      	ldr	r2, [r3, #16]
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	635a      	str	r2, [r3, #52]	; 0x34

    }
    cs->prevmea = mea;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	631a      	str	r2, [r3, #48]	; 0x30
    return (cs->out);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010612:	ee07 3a90 	vmov	s15, r3


}
 8010616:	eeb0 0a67 	vmov.f32	s0, s15
 801061a:	3720      	adds	r7, #32
 801061c:	46bd      	mov	sp, r7
 801061e:	bdb0      	pop	{r4, r5, r7, pc}
 8010620:	d2f1a9fc 	.word	0xd2f1a9fc
 8010624:	3f60624d 	.word	0x3f60624d

08010628 <MPX5010_init>:
/**
  * @brief  Initialize the MPX5010 sensor.
  *         This function sets initial values for the sensor.
  */
void MPX5010_init()
{
 8010628:	b580      	push	{r7, lr}
 801062a:	af00      	add	r7, sp, #0
	MPX5010.offset_minimum = 0;
 801062c:	4b0e      	ldr	r3, [pc, #56]	; (8010668 <MPX5010_init+0x40>)
 801062e:	2200      	movs	r2, #0
 8010630:	805a      	strh	r2, [r3, #2]
	MPX5010.offset_maximum = 425;
 8010632:	4b0d      	ldr	r3, [pc, #52]	; (8010668 <MPX5010_init+0x40>)
 8010634:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010638:	809a      	strh	r2, [r3, #4]
	MPX5010.supply_voltage = 5000;
 801063a:	4b0b      	ldr	r3, [pc, #44]	; (8010668 <MPX5010_init+0x40>)
 801063c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010640:	80da      	strh	r2, [r3, #6]
	MPX5010.sensitivity = 0.02266;
 8010642:	4b09      	ldr	r3, [pc, #36]	; (8010668 <MPX5010_init+0x40>)
 8010644:	4a09      	ldr	r2, [pc, #36]	; (801066c <MPX5010_init+0x44>)
 8010646:	615a      	str	r2, [r3, #20]
	MPX5010.smoothing_factor = 0.35;
 8010648:	4b07      	ldr	r3, [pc, #28]	; (8010668 <MPX5010_init+0x40>)
 801064a:	4a09      	ldr	r2, [pc, #36]	; (8010670 <MPX5010_init+0x48>)
 801064c:	619a      	str	r2, [r3, #24]
	MPX5010.previous_reading = 0;
 801064e:	4b06      	ldr	r3, [pc, #24]	; (8010668 <MPX5010_init+0x40>)
 8010650:	2200      	movs	r2, #0
 8010652:	81da      	strh	r2, [r3, #14]
	MPX5010.operational_status = 1;
 8010654:	4b04      	ldr	r3, [pc, #16]	; (8010668 <MPX5010_init+0x40>)
 8010656:	2201      	movs	r2, #1
 8010658:	741a      	strb	r2, [r3, #16]
	MPX5010.sensor_ready = 0;
 801065a:	4b03      	ldr	r3, [pc, #12]	; (8010668 <MPX5010_init+0x40>)
 801065c:	2200      	movs	r2, #0
 801065e:	745a      	strb	r2, [r3, #17]
	MPX5010_calibrate();
 8010660:	f000 f808 	bl	8010674 <MPX5010_calibrate>
}
 8010664:	bf00      	nop
 8010666:	bd80      	pop	{r7, pc}
 8010668:	20012d84 	.word	0x20012d84
 801066c:	3cb9a177 	.word	0x3cb9a177
 8010670:	3eb33333 	.word	0x3eb33333

08010674 <MPX5010_calibrate>:
  * @brief  Calibrate the MPX5010 sensor.
  *         This function takes multiple readings to determine the sensor offset.
  *         It checks if the offset is within the allowable range.
  */
void MPX5010_calibrate()
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
	for(int i=0; i<CALIBRATION_COUNT; i++)
 801067a:	2300      	movs	r3, #0
 801067c:	607b      	str	r3, [r7, #4]
 801067e:	e007      	b.n	8010690 <MPX5010_calibrate+0x1c>
	{
		MPX5010_read();
 8010680:	f000 f82c 	bl	80106dc <MPX5010_read>
		vTaskDelay(1);
 8010684:	2001      	movs	r0, #1
 8010686:	f00a fce1 	bl	801b04c <vTaskDelay>
	for(int i=0; i<CALIBRATION_COUNT; i++)
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	3301      	adds	r3, #1
 801068e:	607b      	str	r3, [r7, #4]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010696:	dbf3      	blt.n	8010680 <MPX5010_calibrate+0xc>
	}
	uint16_t offset = MPX5010.current_reading;
 8010698:	4b0f      	ldr	r3, [pc, #60]	; (80106d8 <MPX5010_calibrate+0x64>)
 801069a:	899b      	ldrh	r3, [r3, #12]
 801069c:	807b      	strh	r3, [r7, #2]
	MPX5010.previous_reading = 0;
 801069e:	4b0e      	ldr	r3, [pc, #56]	; (80106d8 <MPX5010_calibrate+0x64>)
 80106a0:	2200      	movs	r2, #0
 80106a2:	81da      	strh	r2, [r3, #14]
	MPX5010.current_reading = 0;
 80106a4:	4b0c      	ldr	r3, [pc, #48]	; (80106d8 <MPX5010_calibrate+0x64>)
 80106a6:	2200      	movs	r2, #0
 80106a8:	819a      	strh	r2, [r3, #12]
	if(offset<MPX5010.offset_minimum && offset>MPX5010.offset_maximum){
 80106aa:	4b0b      	ldr	r3, [pc, #44]	; (80106d8 <MPX5010_calibrate+0x64>)
 80106ac:	885b      	ldrh	r3, [r3, #2]
 80106ae:	887a      	ldrh	r2, [r7, #2]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d207      	bcs.n	80106c4 <MPX5010_calibrate+0x50>
 80106b4:	4b08      	ldr	r3, [pc, #32]	; (80106d8 <MPX5010_calibrate+0x64>)
 80106b6:	889b      	ldrh	r3, [r3, #4]
 80106b8:	887a      	ldrh	r2, [r7, #2]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d902      	bls.n	80106c4 <MPX5010_calibrate+0x50>
		MPX5010.operational_status = 0;
 80106be:	4b06      	ldr	r3, [pc, #24]	; (80106d8 <MPX5010_calibrate+0x64>)
 80106c0:	2200      	movs	r2, #0
 80106c2:	741a      	strb	r2, [r3, #16]
	}
	MPX5010.offset = offset;
 80106c4:	4a04      	ldr	r2, [pc, #16]	; (80106d8 <MPX5010_calibrate+0x64>)
 80106c6:	887b      	ldrh	r3, [r7, #2]
 80106c8:	8013      	strh	r3, [r2, #0]
	MPX5010.sensor_ready = 1;
 80106ca:	4b03      	ldr	r3, [pc, #12]	; (80106d8 <MPX5010_calibrate+0x64>)
 80106cc:	2201      	movs	r2, #1
 80106ce:	745a      	strb	r2, [r3, #17]
}
 80106d0:	bf00      	nop
 80106d2:	3708      	adds	r7, #8
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	20012d84 	.word	0x20012d84

080106dc <MPX5010_read>:
  *         		1. https://hackaday.com/2019/09/06/sensor-filters-for-coders/
  *         		2. https://electronics.stackexchange.com/questions/30370/fast-and-memory-efficient-moving-average-calculation
  *         		3. https://stackoverflow.com/questions/12636613/how-to-calculate-moving-average-without-keeping-the-count-and-data-total
  */

void MPX5010_read(){
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
	float raw_voltage = MPX5010_read_adc();
 80106e2:	f000 f855 	bl	8010790 <MPX5010_read_adc>
 80106e6:	ed87 0a01 	vstr	s0, [r7, #4]
	MPX5010.current_reading = (uint16_t)((1-MPX5010.smoothing_factor)*MPX5010.previous_reading + MPX5010.smoothing_factor*raw_voltage);
 80106ea:	4b27      	ldr	r3, [pc, #156]	; (8010788 <MPX5010_read+0xac>)
 80106ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80106f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80106f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80106f8:	4b23      	ldr	r3, [pc, #140]	; (8010788 <MPX5010_read+0xac>)
 80106fa:	89db      	ldrh	r3, [r3, #14]
 80106fc:	ee07 3a90 	vmov	s15, r3
 8010700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010708:	4b1f      	ldr	r3, [pc, #124]	; (8010788 <MPX5010_read+0xac>)
 801070a:	edd3 6a06 	vldr	s13, [r3, #24]
 801070e:	edd7 7a01 	vldr	s15, [r7, #4]
 8010712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010716:	ee77 7a27 	vadd.f32	s15, s14, s15
 801071a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801071e:	ee17 3a90 	vmov	r3, s15
 8010722:	b29a      	uxth	r2, r3
 8010724:	4b18      	ldr	r3, [pc, #96]	; (8010788 <MPX5010_read+0xac>)
 8010726:	819a      	strh	r2, [r3, #12]
	MPX5010.previous_reading = MPX5010.current_reading;
 8010728:	4b17      	ldr	r3, [pc, #92]	; (8010788 <MPX5010_read+0xac>)
 801072a:	899a      	ldrh	r2, [r3, #12]
 801072c:	4b16      	ldr	r3, [pc, #88]	; (8010788 <MPX5010_read+0xac>)
 801072e:	81da      	strh	r2, [r3, #14]
	MPX5010.value = (MPX5010.current_reading - MPX5010.offset)*MPX5010.sensitivity;
 8010730:	4b15      	ldr	r3, [pc, #84]	; (8010788 <MPX5010_read+0xac>)
 8010732:	899b      	ldrh	r3, [r3, #12]
 8010734:	461a      	mov	r2, r3
 8010736:	4b14      	ldr	r3, [pc, #80]	; (8010788 <MPX5010_read+0xac>)
 8010738:	881b      	ldrh	r3, [r3, #0]
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	ee07 3a90 	vmov	s15, r3
 8010740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010744:	4b10      	ldr	r3, [pc, #64]	; (8010788 <MPX5010_read+0xac>)
 8010746:	edd3 7a05 	vldr	s15, [r3, #20]
 801074a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801074e:	4b0e      	ldr	r3, [pc, #56]	; (8010788 <MPX5010_read+0xac>)
 8010750:	edc3 7a02 	vstr	s15, [r3, #8]
	GRAPH_VALUES.pressure = (uint8_t) round(MPX5010.value);
 8010754:	4b0c      	ldr	r3, [pc, #48]	; (8010788 <MPX5010_read+0xac>)
 8010756:	689b      	ldr	r3, [r3, #8]
 8010758:	4618      	mov	r0, r3
 801075a:	f7ef fe9d 	bl	8000498 <__aeabi_f2d>
 801075e:	4602      	mov	r2, r0
 8010760:	460b      	mov	r3, r1
 8010762:	ec43 2b10 	vmov	d0, r2, r3
 8010766:	f00c fbd7 	bl	801cf18 <round>
 801076a:	ec53 2b10 	vmov	r2, r3, d0
 801076e:	4610      	mov	r0, r2
 8010770:	4619      	mov	r1, r3
 8010772:	f7f0 f9ab 	bl	8000acc <__aeabi_d2uiz>
 8010776:	4603      	mov	r3, r0
 8010778:	b2da      	uxtb	r2, r3
 801077a:	4b04      	ldr	r3, [pc, #16]	; (801078c <MPX5010_read+0xb0>)
 801077c:	701a      	strb	r2, [r3, #0]
}
 801077e:	bf00      	nop
 8010780:	3708      	adds	r7, #8
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}
 8010786:	bf00      	nop
 8010788:	20012d84 	.word	0x20012d84
 801078c:	200125f8 	.word	0x200125f8

08010790 <MPX5010_read_adc>:

/**
  * @brief  Perform analog-to-digital value to voltage conversion for the MPX5010 sensor.
  * @retval Vout (in mV)
  */
float MPX5010_read_adc(){
 8010790:	b480      	push	{r7}
 8010792:	af00      	add	r7, sp, #0
	return (Adc.AdcData[0] * MPX5010.supply_voltage)/ADC_RESOLUTION;
 8010794:	4b0b      	ldr	r3, [pc, #44]	; (80107c4 <MPX5010_read_adc+0x34>)
 8010796:	881b      	ldrh	r3, [r3, #0]
 8010798:	461a      	mov	r2, r3
 801079a:	4b0b      	ldr	r3, [pc, #44]	; (80107c8 <MPX5010_read_adc+0x38>)
 801079c:	88db      	ldrh	r3, [r3, #6]
 801079e:	fb03 f302 	mul.w	r3, r3, r2
 80107a2:	4a0a      	ldr	r2, [pc, #40]	; (80107cc <MPX5010_read_adc+0x3c>)
 80107a4:	fb82 1203 	smull	r1, r2, r2, r3
 80107a8:	441a      	add	r2, r3
 80107aa:	12d2      	asrs	r2, r2, #11
 80107ac:	17db      	asrs	r3, r3, #31
 80107ae:	1ad3      	subs	r3, r2, r3
 80107b0:	ee07 3a90 	vmov	s15, r3
 80107b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80107b8:	eeb0 0a67 	vmov.f32	s0, s15
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr
 80107c4:	20012690 	.word	0x20012690
 80107c8:	20012d84 	.word	0x20012d84
 80107cc:	80080081 	.word	0x80080081

080107d0 <dp_to_oxygen_flow>:
/**
  * @brief  dp_to_oxygen_flow.
  * This function Converting differential pressure to O2 flow from mpx5010 milli volt.
  * @retval double O2 flow value.
  */
double dp_to_oxygen_flow(float dp){
 80107d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80107d4:	b084      	sub	sp, #16
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	ed87 0a01 	vstr	s0, [r7, #4]

	if(dp==0 || dp<0.05){
 80107dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80107e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80107e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e8:	d00a      	beq.n	8010800 <dp_to_oxygen_flow+0x30>
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f7ef fe54 	bl	8000498 <__aeabi_f2d>
 80107f0:	a39b      	add	r3, pc, #620	; (adr r3, 8010a60 <dp_to_oxygen_flow+0x290>)
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	f7f0 f919 	bl	8000a2c <__aeabi_dcmplt>
 80107fa:	4603      	mov	r3, r0
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d004      	beq.n	801080a <dp_to_oxygen_flow+0x3a>
		return 0;
 8010800:	f04f 0200 	mov.w	r2, #0
 8010804:	f04f 0300 	mov.w	r3, #0
 8010808:	e0fb      	b.n	8010a02 <dp_to_oxygen_flow+0x232>
	}
	double flow = -1;
 801080a:	f04f 0200 	mov.w	r2, #0
 801080e:	4b92      	ldr	r3, [pc, #584]	; (8010a58 <dp_to_oxygen_flow+0x288>)
 8010810:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(dp<0.5){
 8010814:	edd7 7a01 	vldr	s15, [r7, #4]
 8010818:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801081c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010824:	d560      	bpl.n	80108e8 <dp_to_oxygen_flow+0x118>
		flow = ((56.5*dp*dp*dp)-(58.9*dp*dp)+(27.1*dp)+0.101);
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f7ef fe36 	bl	8000498 <__aeabi_f2d>
 801082c:	f04f 0200 	mov.w	r2, #0
 8010830:	4b8a      	ldr	r3, [pc, #552]	; (8010a5c <dp_to_oxygen_flow+0x28c>)
 8010832:	f7ef fe89 	bl	8000548 <__aeabi_dmul>
 8010836:	4602      	mov	r2, r0
 8010838:	460b      	mov	r3, r1
 801083a:	4614      	mov	r4, r2
 801083c:	461d      	mov	r5, r3
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ef fe2a 	bl	8000498 <__aeabi_f2d>
 8010844:	4602      	mov	r2, r0
 8010846:	460b      	mov	r3, r1
 8010848:	4620      	mov	r0, r4
 801084a:	4629      	mov	r1, r5
 801084c:	f7ef fe7c 	bl	8000548 <__aeabi_dmul>
 8010850:	4602      	mov	r2, r0
 8010852:	460b      	mov	r3, r1
 8010854:	4614      	mov	r4, r2
 8010856:	461d      	mov	r5, r3
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7ef fe1d 	bl	8000498 <__aeabi_f2d>
 801085e:	4602      	mov	r2, r0
 8010860:	460b      	mov	r3, r1
 8010862:	4620      	mov	r0, r4
 8010864:	4629      	mov	r1, r5
 8010866:	f7ef fe6f 	bl	8000548 <__aeabi_dmul>
 801086a:	4602      	mov	r2, r0
 801086c:	460b      	mov	r3, r1
 801086e:	4614      	mov	r4, r2
 8010870:	461d      	mov	r5, r3
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f7ef fe10 	bl	8000498 <__aeabi_f2d>
 8010878:	a367      	add	r3, pc, #412	; (adr r3, 8010a18 <dp_to_oxygen_flow+0x248>)
 801087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087e:	f7ef fe63 	bl	8000548 <__aeabi_dmul>
 8010882:	4602      	mov	r2, r0
 8010884:	460b      	mov	r3, r1
 8010886:	4690      	mov	r8, r2
 8010888:	4699      	mov	r9, r3
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f7ef fe04 	bl	8000498 <__aeabi_f2d>
 8010890:	4602      	mov	r2, r0
 8010892:	460b      	mov	r3, r1
 8010894:	4640      	mov	r0, r8
 8010896:	4649      	mov	r1, r9
 8010898:	f7ef fe56 	bl	8000548 <__aeabi_dmul>
 801089c:	4602      	mov	r2, r0
 801089e:	460b      	mov	r3, r1
 80108a0:	4620      	mov	r0, r4
 80108a2:	4629      	mov	r1, r5
 80108a4:	f7ef fc98 	bl	80001d8 <__aeabi_dsub>
 80108a8:	4602      	mov	r2, r0
 80108aa:	460b      	mov	r3, r1
 80108ac:	4614      	mov	r4, r2
 80108ae:	461d      	mov	r5, r3
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f7ef fdf1 	bl	8000498 <__aeabi_f2d>
 80108b6:	a35a      	add	r3, pc, #360	; (adr r3, 8010a20 <dp_to_oxygen_flow+0x250>)
 80108b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108bc:	f7ef fe44 	bl	8000548 <__aeabi_dmul>
 80108c0:	4602      	mov	r2, r0
 80108c2:	460b      	mov	r3, r1
 80108c4:	4620      	mov	r0, r4
 80108c6:	4629      	mov	r1, r5
 80108c8:	f7ef fc88 	bl	80001dc <__adddf3>
 80108cc:	4602      	mov	r2, r0
 80108ce:	460b      	mov	r3, r1
 80108d0:	4610      	mov	r0, r2
 80108d2:	4619      	mov	r1, r3
 80108d4:	a354      	add	r3, pc, #336	; (adr r3, 8010a28 <dp_to_oxygen_flow+0x258>)
 80108d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108da:	f7ef fc7f 	bl	80001dc <__adddf3>
 80108de:	4602      	mov	r2, r0
 80108e0:	460b      	mov	r3, r1
 80108e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80108e6:	e07a      	b.n	80109de <dp_to_oxygen_flow+0x20e>
	}else{
		dp = dp + (dp*0.07);
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7ef fdd5 	bl	8000498 <__aeabi_f2d>
 80108ee:	4604      	mov	r4, r0
 80108f0:	460d      	mov	r5, r1
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f7ef fdd0 	bl	8000498 <__aeabi_f2d>
 80108f8:	a34d      	add	r3, pc, #308	; (adr r3, 8010a30 <dp_to_oxygen_flow+0x260>)
 80108fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fe:	f7ef fe23 	bl	8000548 <__aeabi_dmul>
 8010902:	4602      	mov	r2, r0
 8010904:	460b      	mov	r3, r1
 8010906:	4620      	mov	r0, r4
 8010908:	4629      	mov	r1, r5
 801090a:	f7ef fc67 	bl	80001dc <__adddf3>
 801090e:	4602      	mov	r2, r0
 8010910:	460b      	mov	r3, r1
 8010912:	4610      	mov	r0, r2
 8010914:	4619      	mov	r1, r3
 8010916:	f7f0 f8f9 	bl	8000b0c <__aeabi_d2f>
 801091a:	4603      	mov	r3, r0
 801091c:	607b      	str	r3, [r7, #4]
		flow = ((0.000231*dp*dp*dp)-(0.0348*dp*dp)+(2.42*dp)+5.63);
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f7ef fdba 	bl	8000498 <__aeabi_f2d>
 8010924:	a344      	add	r3, pc, #272	; (adr r3, 8010a38 <dp_to_oxygen_flow+0x268>)
 8010926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092a:	f7ef fe0d 	bl	8000548 <__aeabi_dmul>
 801092e:	4602      	mov	r2, r0
 8010930:	460b      	mov	r3, r1
 8010932:	4614      	mov	r4, r2
 8010934:	461d      	mov	r5, r3
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f7ef fdae 	bl	8000498 <__aeabi_f2d>
 801093c:	4602      	mov	r2, r0
 801093e:	460b      	mov	r3, r1
 8010940:	4620      	mov	r0, r4
 8010942:	4629      	mov	r1, r5
 8010944:	f7ef fe00 	bl	8000548 <__aeabi_dmul>
 8010948:	4602      	mov	r2, r0
 801094a:	460b      	mov	r3, r1
 801094c:	4614      	mov	r4, r2
 801094e:	461d      	mov	r5, r3
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7ef fda1 	bl	8000498 <__aeabi_f2d>
 8010956:	4602      	mov	r2, r0
 8010958:	460b      	mov	r3, r1
 801095a:	4620      	mov	r0, r4
 801095c:	4629      	mov	r1, r5
 801095e:	f7ef fdf3 	bl	8000548 <__aeabi_dmul>
 8010962:	4602      	mov	r2, r0
 8010964:	460b      	mov	r3, r1
 8010966:	4614      	mov	r4, r2
 8010968:	461d      	mov	r5, r3
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7ef fd94 	bl	8000498 <__aeabi_f2d>
 8010970:	a333      	add	r3, pc, #204	; (adr r3, 8010a40 <dp_to_oxygen_flow+0x270>)
 8010972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010976:	f7ef fde7 	bl	8000548 <__aeabi_dmul>
 801097a:	4602      	mov	r2, r0
 801097c:	460b      	mov	r3, r1
 801097e:	4690      	mov	r8, r2
 8010980:	4699      	mov	r9, r3
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7ef fd88 	bl	8000498 <__aeabi_f2d>
 8010988:	4602      	mov	r2, r0
 801098a:	460b      	mov	r3, r1
 801098c:	4640      	mov	r0, r8
 801098e:	4649      	mov	r1, r9
 8010990:	f7ef fdda 	bl	8000548 <__aeabi_dmul>
 8010994:	4602      	mov	r2, r0
 8010996:	460b      	mov	r3, r1
 8010998:	4620      	mov	r0, r4
 801099a:	4629      	mov	r1, r5
 801099c:	f7ef fc1c 	bl	80001d8 <__aeabi_dsub>
 80109a0:	4602      	mov	r2, r0
 80109a2:	460b      	mov	r3, r1
 80109a4:	4614      	mov	r4, r2
 80109a6:	461d      	mov	r5, r3
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ef fd75 	bl	8000498 <__aeabi_f2d>
 80109ae:	a326      	add	r3, pc, #152	; (adr r3, 8010a48 <dp_to_oxygen_flow+0x278>)
 80109b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b4:	f7ef fdc8 	bl	8000548 <__aeabi_dmul>
 80109b8:	4602      	mov	r2, r0
 80109ba:	460b      	mov	r3, r1
 80109bc:	4620      	mov	r0, r4
 80109be:	4629      	mov	r1, r5
 80109c0:	f7ef fc0c 	bl	80001dc <__adddf3>
 80109c4:	4602      	mov	r2, r0
 80109c6:	460b      	mov	r3, r1
 80109c8:	4610      	mov	r0, r2
 80109ca:	4619      	mov	r1, r3
 80109cc:	a320      	add	r3, pc, #128	; (adr r3, 8010a50 <dp_to_oxygen_flow+0x280>)
 80109ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d2:	f7ef fc03 	bl	80001dc <__adddf3>
 80109d6:	4602      	mov	r2, r0
 80109d8:	460b      	mov	r3, r1
 80109da:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	if(flow<0){
 80109de:	f04f 0200 	mov.w	r2, #0
 80109e2:	f04f 0300 	mov.w	r3, #0
 80109e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80109ea:	f7f0 f81f 	bl	8000a2c <__aeabi_dcmplt>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d004      	beq.n	80109fe <dp_to_oxygen_flow+0x22e>
		return 0.0;
 80109f4:	f04f 0200 	mov.w	r2, #0
 80109f8:	f04f 0300 	mov.w	r3, #0
 80109fc:	e001      	b.n	8010a02 <dp_to_oxygen_flow+0x232>
	}
	return flow;
 80109fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010a02:	ec43 2b17 	vmov	d7, r2, r3
}
 8010a06:	eeb0 0a47 	vmov.f32	s0, s14
 8010a0a:	eef0 0a67 	vmov.f32	s1, s15
 8010a0e:	3710      	adds	r7, #16
 8010a10:	46bd      	mov	sp, r7
 8010a12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010a16:	bf00      	nop
 8010a18:	33333333 	.word	0x33333333
 8010a1c:	404d7333 	.word	0x404d7333
 8010a20:	9999999a 	.word	0x9999999a
 8010a24:	403b1999 	.word	0x403b1999
 8010a28:	d0e56042 	.word	0xd0e56042
 8010a2c:	3fb9db22 	.word	0x3fb9db22
 8010a30:	1eb851ec 	.word	0x1eb851ec
 8010a34:	3fb1eb85 	.word	0x3fb1eb85
 8010a38:	e40852b5 	.word	0xe40852b5
 8010a3c:	3f2e4712 	.word	0x3f2e4712
 8010a40:	3bcd35a8 	.word	0x3bcd35a8
 8010a44:	3fa1d14e 	.word	0x3fa1d14e
 8010a48:	f5c28f5c 	.word	0xf5c28f5c
 8010a4c:	40035c28 	.word	0x40035c28
 8010a50:	b851eb85 	.word	0xb851eb85
 8010a54:	4016851e 	.word	0x4016851e
 8010a58:	bff00000 	.word	0xbff00000
 8010a5c:	404c4000 	.word	0x404c4000
 8010a60:	9999999a 	.word	0x9999999a
 8010a64:	3fa99999 	.word	0x3fa99999

08010a68 <compute_oxygen_flow>:
/**
  * @brief  compute_oxygen_flow.
  *         This function Calculate flow crossing in O2 manifold.
  */

void compute_oxygen_flow(){
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
	float dp = MPX5010DP.value*10;
 8010a6e:	4b30      	ldr	r3, [pc, #192]	; (8010b30 <compute_oxygen_flow+0xc8>)
 8010a70:	edd3 7a02 	vldr	s15, [r3, #8]
 8010a74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8010a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010a7c:	edc7 7a02 	vstr	s15, [r7, #8]
	int8_t direction_bit = 1;
 8010a80:	2301      	movs	r3, #1
 8010a82:	73fb      	strb	r3, [r7, #15]
	if(dp<0){
 8010a84:	edd7 7a02 	vldr	s15, [r7, #8]
 8010a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a90:	d501      	bpl.n	8010a96 <compute_oxygen_flow+0x2e>
		direction_bit = -1;
 8010a92:	23ff      	movs	r3, #255	; 0xff
 8010a94:	73fb      	strb	r3, [r7, #15]
	}
	float flow = dp_to_oxygen_flow(direction_bit*dp);
 8010a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a9a:	ee07 3a90 	vmov	s15, r3
 8010a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8010aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8010aae:	f7ff fe8f 	bl	80107d0 <dp_to_oxygen_flow>
 8010ab2:	ec53 2b10 	vmov	r2, r3, d0
 8010ab6:	4610      	mov	r0, r2
 8010ab8:	4619      	mov	r1, r3
 8010aba:	f7f0 f827 	bl	8000b0c <__aeabi_d2f>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	607b      	str	r3, [r7, #4]
	GRAPH_VALUES.oxygen_flow = MPX5010DP.smoothing_factor*GRAPH_VALUES.oxygen_flow + (1-MPX5010DP.smoothing_factor)*flow;
 8010ac2:	4b1b      	ldr	r3, [pc, #108]	; (8010b30 <compute_oxygen_flow+0xc8>)
 8010ac4:	ed93 7a06 	vldr	s14, [r3, #24]
 8010ac8:	4b1a      	ldr	r3, [pc, #104]	; (8010b34 <compute_oxygen_flow+0xcc>)
 8010aca:	edd3 7a04 	vldr	s15, [r3, #16]
 8010ace:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ad2:	4b17      	ldr	r3, [pc, #92]	; (8010b30 <compute_oxygen_flow+0xc8>)
 8010ad4:	edd3 7a06 	vldr	s15, [r3, #24]
 8010ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010adc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8010ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010aec:	4b11      	ldr	r3, [pc, #68]	; (8010b34 <compute_oxygen_flow+0xcc>)
 8010aee:	edc3 7a04 	vstr	s15, [r3, #16]

	if(GRAPH_VALUES.Maximum_oxygen_flow < GRAPH_VALUES.oxygen_flow)
 8010af2:	4b10      	ldr	r3, [pc, #64]	; (8010b34 <compute_oxygen_flow+0xcc>)
 8010af4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8010af8:	ee07 3a90 	vmov	s15, r3
 8010afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010b00:	4b0c      	ldr	r3, [pc, #48]	; (8010b34 <compute_oxygen_flow+0xcc>)
 8010b02:	edd3 7a04 	vldr	s15, [r3, #16]
 8010b06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b0e:	d400      	bmi.n	8010b12 <compute_oxygen_flow+0xaa>
	{
		GRAPH_VALUES.Maximum_oxygen_flow  =  GRAPH_VALUES.oxygen_flow;
	}
}
 8010b10:	e009      	b.n	8010b26 <compute_oxygen_flow+0xbe>
		GRAPH_VALUES.Maximum_oxygen_flow  =  GRAPH_VALUES.oxygen_flow;
 8010b12:	4b08      	ldr	r3, [pc, #32]	; (8010b34 <compute_oxygen_flow+0xcc>)
 8010b14:	edd3 7a04 	vldr	s15, [r3, #16]
 8010b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b1c:	ee17 3a90 	vmov	r3, s15
 8010b20:	b21a      	sxth	r2, r3
 8010b22:	4b04      	ldr	r3, [pc, #16]	; (8010b34 <compute_oxygen_flow+0xcc>)
 8010b24:	829a      	strh	r2, [r3, #20]
}
 8010b26:	bf00      	nop
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	20012da4 	.word	0x20012da4
 8010b34:	200125f8 	.word	0x200125f8

08010b38 <MPX5010DP_init>:

/**
  * @brief  Initialize the MPX5010DP sensor.
  *         This function sets initial values for the sensor.
  */
void MPX5010DP_init(){
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	af00      	add	r7, sp, #0
	MPX5010DP.offset_minimum = 0;
 8010b3c:	4b0e      	ldr	r3, [pc, #56]	; (8010b78 <MPX5010DP_init+0x40>)
 8010b3e:	2200      	movs	r2, #0
 8010b40:	805a      	strh	r2, [r3, #2]
	MPX5010DP.offset_maximum = 425;
 8010b42:	4b0d      	ldr	r3, [pc, #52]	; (8010b78 <MPX5010DP_init+0x40>)
 8010b44:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010b48:	809a      	strh	r2, [r3, #4]
	MPX5010DP.supply_voltage = 5000;
 8010b4a:	4b0b      	ldr	r3, [pc, #44]	; (8010b78 <MPX5010DP_init+0x40>)
 8010b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b50:	80da      	strh	r2, [r3, #6]
	MPX5010DP.sensitivity = 450.00862;
 8010b52:	4b09      	ldr	r3, [pc, #36]	; (8010b78 <MPX5010DP_init+0x40>)
 8010b54:	4a09      	ldr	r2, [pc, #36]	; (8010b7c <MPX5010DP_init+0x44>)
 8010b56:	615a      	str	r2, [r3, #20]
	MPX5010DP.smoothing_factor = 0.35;
 8010b58:	4b07      	ldr	r3, [pc, #28]	; (8010b78 <MPX5010DP_init+0x40>)
 8010b5a:	4a09      	ldr	r2, [pc, #36]	; (8010b80 <MPX5010DP_init+0x48>)
 8010b5c:	619a      	str	r2, [r3, #24]
	MPX5010DP.previous_reading = 0;
 8010b5e:	4b06      	ldr	r3, [pc, #24]	; (8010b78 <MPX5010DP_init+0x40>)
 8010b60:	2200      	movs	r2, #0
 8010b62:	81da      	strh	r2, [r3, #14]
	MPX5010DP.operational_status = 1;
 8010b64:	4b04      	ldr	r3, [pc, #16]	; (8010b78 <MPX5010DP_init+0x40>)
 8010b66:	2201      	movs	r2, #1
 8010b68:	741a      	strb	r2, [r3, #16]
	MPX5010DP.sensor_ready = 0;
 8010b6a:	4b03      	ldr	r3, [pc, #12]	; (8010b78 <MPX5010DP_init+0x40>)
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	745a      	strb	r2, [r3, #17]
	MPX5010DP_calibrate();
 8010b70:	f000 f808 	bl	8010b84 <MPX5010DP_calibrate>
}
 8010b74:	bf00      	nop
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	20012da4 	.word	0x20012da4
 8010b7c:	43e1011a 	.word	0x43e1011a
 8010b80:	3eb33333 	.word	0x3eb33333

08010b84 <MPX5010DP_calibrate>:
/**
  * @brief  Calibrate the MPX5010DP sensor.
  *         This function takes multiple readings to determine the sensor offset.
  *         It checks if the offset is within the allowable range.
  */
void MPX5010DP_calibrate(){
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b082      	sub	sp, #8
 8010b88:	af00      	add	r7, sp, #0
	for(int i=0; i<CALIBRATION_COUNT; i++){
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	607b      	str	r3, [r7, #4]
 8010b8e:	e013      	b.n	8010bb8 <MPX5010DP_calibrate+0x34>
		MPX5010DP_read();
 8010b90:	f000 f83a 	bl	8010c08 <MPX5010DP_read>
		vTaskDelay(1);
 8010b94:	2001      	movs	r0, #1
 8010b96:	f00a fa59 	bl	801b04c <vTaskDelay>
		if(i==999)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d106      	bne.n	8010bb2 <MPX5010DP_calibrate+0x2e>
			xSemaphoreGive(binarysem);
 8010ba4:	4b16      	ldr	r3, [pc, #88]	; (8010c00 <MPX5010DP_calibrate+0x7c>)
 8010ba6:	6818      	ldr	r0, [r3, #0]
 8010ba8:	2300      	movs	r3, #0
 8010baa:	2200      	movs	r2, #0
 8010bac:	2100      	movs	r1, #0
 8010bae:	f009 fb1d 	bl	801a1ec <xQueueGenericSend>
	for(int i=0; i<CALIBRATION_COUNT; i++){
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	607b      	str	r3, [r7, #4]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010bbe:	dbe7      	blt.n	8010b90 <MPX5010DP_calibrate+0xc>
	}
	uint16_t offset = MPX5010DP.current_reading;
 8010bc0:	4b10      	ldr	r3, [pc, #64]	; (8010c04 <MPX5010DP_calibrate+0x80>)
 8010bc2:	899b      	ldrh	r3, [r3, #12]
 8010bc4:	807b      	strh	r3, [r7, #2]
	MPX5010DP.previous_reading = 0;
 8010bc6:	4b0f      	ldr	r3, [pc, #60]	; (8010c04 <MPX5010DP_calibrate+0x80>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	81da      	strh	r2, [r3, #14]
	MPX5010DP.current_reading = 0;
 8010bcc:	4b0d      	ldr	r3, [pc, #52]	; (8010c04 <MPX5010DP_calibrate+0x80>)
 8010bce:	2200      	movs	r2, #0
 8010bd0:	819a      	strh	r2, [r3, #12]
	if(offset<MPX5010DP.offset_minimum && offset>MPX5010DP.offset_maximum){
 8010bd2:	4b0c      	ldr	r3, [pc, #48]	; (8010c04 <MPX5010DP_calibrate+0x80>)
 8010bd4:	885b      	ldrh	r3, [r3, #2]
 8010bd6:	887a      	ldrh	r2, [r7, #2]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d207      	bcs.n	8010bec <MPX5010DP_calibrate+0x68>
 8010bdc:	4b09      	ldr	r3, [pc, #36]	; (8010c04 <MPX5010DP_calibrate+0x80>)
 8010bde:	889b      	ldrh	r3, [r3, #4]
 8010be0:	887a      	ldrh	r2, [r7, #2]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d902      	bls.n	8010bec <MPX5010DP_calibrate+0x68>
		MPX5010DP.operational_status = 0;
 8010be6:	4b07      	ldr	r3, [pc, #28]	; (8010c04 <MPX5010DP_calibrate+0x80>)
 8010be8:	2200      	movs	r2, #0
 8010bea:	741a      	strb	r2, [r3, #16]
	}
	MPX5010DP.offset = offset;
 8010bec:	4a05      	ldr	r2, [pc, #20]	; (8010c04 <MPX5010DP_calibrate+0x80>)
 8010bee:	887b      	ldrh	r3, [r7, #2]
 8010bf0:	8013      	strh	r3, [r2, #0]
	MPX5010DP.sensor_ready = 1;
 8010bf2:	4b04      	ldr	r3, [pc, #16]	; (8010c04 <MPX5010DP_calibrate+0x80>)
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	745a      	strb	r2, [r3, #17]


}
 8010bf8:	bf00      	nop
 8010bfa:	3708      	adds	r7, #8
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	20012414 	.word	0x20012414
 8010c04:	20012da4 	.word	0x20012da4

08010c08 <MPX5010DP_read>:
  *         References:
  *         		1. https://hackaday.com/2019/09/06/sensor-filters-for-coders/
  *         		2. https://electronics.stackexchange.com/questions/30370/fast-and-memory-efficient-moving-average-calculation
  *         		3. https://stackoverflow.com/questions/12636613/how-to-calculate-moving-average-without-keeping-the-count-and-data-total
  */
void MPX5010DP_read(){
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
	float raw_voltage = MPX5010DP_read_adc();
 8010c0e:	f000 f83f 	bl	8010c90 <MPX5010DP_read_adc>
 8010c12:	ed87 0a01 	vstr	s0, [r7, #4]
	MPX5010DP.current_reading = (uint16_t)((1-MPX5010DP.smoothing_factor)*MPX5010DP.previous_reading + MPX5010DP.smoothing_factor*raw_voltage);
 8010c16:	4b1d      	ldr	r3, [pc, #116]	; (8010c8c <MPX5010DP_read+0x84>)
 8010c18:	edd3 7a06 	vldr	s15, [r3, #24]
 8010c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c24:	4b19      	ldr	r3, [pc, #100]	; (8010c8c <MPX5010DP_read+0x84>)
 8010c26:	89db      	ldrh	r3, [r3, #14]
 8010c28:	ee07 3a90 	vmov	s15, r3
 8010c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010c34:	4b15      	ldr	r3, [pc, #84]	; (8010c8c <MPX5010DP_read+0x84>)
 8010c36:	edd3 6a06 	vldr	s13, [r3, #24]
 8010c3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8010c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c4a:	ee17 3a90 	vmov	r3, s15
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	4b0e      	ldr	r3, [pc, #56]	; (8010c8c <MPX5010DP_read+0x84>)
 8010c52:	819a      	strh	r2, [r3, #12]
	MPX5010DP.previous_reading = MPX5010DP.current_reading;
 8010c54:	4b0d      	ldr	r3, [pc, #52]	; (8010c8c <MPX5010DP_read+0x84>)
 8010c56:	899a      	ldrh	r2, [r3, #12]
 8010c58:	4b0c      	ldr	r3, [pc, #48]	; (8010c8c <MPX5010DP_read+0x84>)
 8010c5a:	81da      	strh	r2, [r3, #14]
	MPX5010DP.value = (MPX5010DP.current_reading-MPX5010DP.offset)/MPX5010DP.sensitivity;
 8010c5c:	4b0b      	ldr	r3, [pc, #44]	; (8010c8c <MPX5010DP_read+0x84>)
 8010c5e:	899b      	ldrh	r3, [r3, #12]
 8010c60:	461a      	mov	r2, r3
 8010c62:	4b0a      	ldr	r3, [pc, #40]	; (8010c8c <MPX5010DP_read+0x84>)
 8010c64:	881b      	ldrh	r3, [r3, #0]
 8010c66:	1ad3      	subs	r3, r2, r3
 8010c68:	ee07 3a90 	vmov	s15, r3
 8010c6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010c70:	4b06      	ldr	r3, [pc, #24]	; (8010c8c <MPX5010DP_read+0x84>)
 8010c72:	ed93 7a05 	vldr	s14, [r3, #20]
 8010c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010c7a:	4b04      	ldr	r3, [pc, #16]	; (8010c8c <MPX5010DP_read+0x84>)
 8010c7c:	edc3 7a02 	vstr	s15, [r3, #8]
	compute_oxygen_flow();
 8010c80:	f7ff fef2 	bl	8010a68 <compute_oxygen_flow>
}
 8010c84:	bf00      	nop
 8010c86:	3708      	adds	r7, #8
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	20012da4 	.word	0x20012da4

08010c90 <MPX5010DP_read_adc>:

/**
  * @brief  Perform analog-to-digital value to voltage conversion for the MPX5010DP sensor.
  * @retval Vout (in mV)
  */
float MPX5010DP_read_adc(){
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
	uint16_t muxPort = ADS1115_MUX_AIN0;
 8010c96:	2340      	movs	r3, #64	; 0x40
 8010c98:	80fb      	strh	r3, [r7, #6]
	float result;
    // Call the function
    HAL_StatusTypeDef status = ADS1115_Read(muxPort, &result,&ADS1115_2_I2C_Handler);
 8010c9a:	4639      	mov	r1, r7
 8010c9c:	88fb      	ldrh	r3, [r7, #6]
 8010c9e:	4a0d      	ldr	r2, [pc, #52]	; (8010cd4 <MPX5010DP_read_adc+0x44>)
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7ff fb7b 	bl	801039c <ADS1115_Read>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	717b      	strb	r3, [r7, #5]
    // Check if the function call was successful
    if (status == HAL_OK) {
 8010caa:	797b      	ldrb	r3, [r7, #5]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d104      	bne.n	8010cba <MPX5010DP_read_adc+0x2a>
    	_5010DP_Sensor_ADS1115 = SERVICE_PASS;
 8010cb0:	4b09      	ldr	r3, [pc, #36]	; (8010cd8 <MPX5010DP_read_adc+0x48>)
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	701a      	strb	r2, [r3, #0]
        return result;
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	e004      	b.n	8010cc4 <MPX5010DP_read_adc+0x34>
    }
    _5010DP_Sensor_ADS1115 = SERVICE_FAIL;
 8010cba:	4b07      	ldr	r3, [pc, #28]	; (8010cd8 <MPX5010DP_read_adc+0x48>)
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	701a      	strb	r2, [r3, #0]
	return 0;
 8010cc0:	f04f 0300 	mov.w	r3, #0
 8010cc4:	ee07 3a90 	vmov	s15, r3
}
 8010cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8010ccc:	3708      	adds	r7, #8
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	200128ac 	.word	0x200128ac
 8010cd8:	20012c98 	.word	0x20012c98
 8010cdc:	00000000 	.word	0x00000000

08010ce0 <dp_to_flow>:
/**
  * @brief  compute_flow.
  * This function is used calculate dp to flow of 2002 sensor.
  */

double dp_to_flow(float dp){
 8010ce0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8010ce4:	b084      	sub	sp, #16
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	ed87 0a01 	vstr	s0, [r7, #4]
	if(dp<0.1){
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f7ef fbd3 	bl	8000498 <__aeabi_f2d>
 8010cf2:	a34f      	add	r3, pc, #316	; (adr r3, 8010e30 <dp_to_flow+0x150>)
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	f7ef fe98 	bl	8000a2c <__aeabi_dcmplt>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d004      	beq.n	8010d0c <dp_to_flow+0x2c>
		return 0.0;
 8010d02:	f04f 0200 	mov.w	r2, #0
 8010d06:	f04f 0300 	mov.w	r3, #0
 8010d0a:	e085      	b.n	8010e18 <dp_to_flow+0x138>
	}
	if(dp>1){
 8010d0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8010d10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d1c:	dd1a      	ble.n	8010d54 <dp_to_flow+0x74>
		dp = dp + (dp*0.05);
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7ef fbba 	bl	8000498 <__aeabi_f2d>
 8010d24:	4604      	mov	r4, r0
 8010d26:	460d      	mov	r5, r1
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f7ef fbb5 	bl	8000498 <__aeabi_f2d>
 8010d2e:	a342      	add	r3, pc, #264	; (adr r3, 8010e38 <dp_to_flow+0x158>)
 8010d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d34:	f7ef fc08 	bl	8000548 <__aeabi_dmul>
 8010d38:	4602      	mov	r2, r0
 8010d3a:	460b      	mov	r3, r1
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	4629      	mov	r1, r5
 8010d40:	f7ef fa4c 	bl	80001dc <__adddf3>
 8010d44:	4602      	mov	r2, r0
 8010d46:	460b      	mov	r3, r1
 8010d48:	4610      	mov	r0, r2
 8010d4a:	4619      	mov	r1, r3
 8010d4c:	f7ef fede 	bl	8000b0c <__aeabi_d2f>
 8010d50:	4603      	mov	r3, r0
 8010d52:	607b      	str	r3, [r7, #4]
	}
	double flow = ((0.72*dp*dp*dp) - (8.01*dp*dp) + (56.7*dp) - 6.18);
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f7ef fb9f 	bl	8000498 <__aeabi_f2d>
 8010d5a:	a339      	add	r3, pc, #228	; (adr r3, 8010e40 <dp_to_flow+0x160>)
 8010d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d60:	f7ef fbf2 	bl	8000548 <__aeabi_dmul>
 8010d64:	4602      	mov	r2, r0
 8010d66:	460b      	mov	r3, r1
 8010d68:	4614      	mov	r4, r2
 8010d6a:	461d      	mov	r5, r3
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f7ef fb93 	bl	8000498 <__aeabi_f2d>
 8010d72:	4602      	mov	r2, r0
 8010d74:	460b      	mov	r3, r1
 8010d76:	4620      	mov	r0, r4
 8010d78:	4629      	mov	r1, r5
 8010d7a:	f7ef fbe5 	bl	8000548 <__aeabi_dmul>
 8010d7e:	4602      	mov	r2, r0
 8010d80:	460b      	mov	r3, r1
 8010d82:	4614      	mov	r4, r2
 8010d84:	461d      	mov	r5, r3
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7ef fb86 	bl	8000498 <__aeabi_f2d>
 8010d8c:	4602      	mov	r2, r0
 8010d8e:	460b      	mov	r3, r1
 8010d90:	4620      	mov	r0, r4
 8010d92:	4629      	mov	r1, r5
 8010d94:	f7ef fbd8 	bl	8000548 <__aeabi_dmul>
 8010d98:	4602      	mov	r2, r0
 8010d9a:	460b      	mov	r3, r1
 8010d9c:	4614      	mov	r4, r2
 8010d9e:	461d      	mov	r5, r3
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7ef fb79 	bl	8000498 <__aeabi_f2d>
 8010da6:	a328      	add	r3, pc, #160	; (adr r3, 8010e48 <dp_to_flow+0x168>)
 8010da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dac:	f7ef fbcc 	bl	8000548 <__aeabi_dmul>
 8010db0:	4602      	mov	r2, r0
 8010db2:	460b      	mov	r3, r1
 8010db4:	4690      	mov	r8, r2
 8010db6:	4699      	mov	r9, r3
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7ef fb6d 	bl	8000498 <__aeabi_f2d>
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	4640      	mov	r0, r8
 8010dc4:	4649      	mov	r1, r9
 8010dc6:	f7ef fbbf 	bl	8000548 <__aeabi_dmul>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	460b      	mov	r3, r1
 8010dce:	4620      	mov	r0, r4
 8010dd0:	4629      	mov	r1, r5
 8010dd2:	f7ef fa01 	bl	80001d8 <__aeabi_dsub>
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	460b      	mov	r3, r1
 8010dda:	4614      	mov	r4, r2
 8010ddc:	461d      	mov	r5, r3
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f7ef fb5a 	bl	8000498 <__aeabi_f2d>
 8010de4:	a31a      	add	r3, pc, #104	; (adr r3, 8010e50 <dp_to_flow+0x170>)
 8010de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dea:	f7ef fbad 	bl	8000548 <__aeabi_dmul>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	4620      	mov	r0, r4
 8010df4:	4629      	mov	r1, r5
 8010df6:	f7ef f9f1 	bl	80001dc <__adddf3>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	460b      	mov	r3, r1
 8010dfe:	4610      	mov	r0, r2
 8010e00:	4619      	mov	r1, r3
 8010e02:	a315      	add	r3, pc, #84	; (adr r3, 8010e58 <dp_to_flow+0x178>)
 8010e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e08:	f7ef f9e6 	bl	80001d8 <__aeabi_dsub>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	460b      	mov	r3, r1
 8010e10:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return flow;
 8010e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010e18:	ec43 2b17 	vmov	d7, r2, r3
}
 8010e1c:	eeb0 0a47 	vmov.f32	s0, s14
 8010e20:	eef0 0a67 	vmov.f32	s1, s15
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010e2c:	f3af 8000 	nop.w
 8010e30:	9999999a 	.word	0x9999999a
 8010e34:	3fb99999 	.word	0x3fb99999
 8010e38:	9999999a 	.word	0x9999999a
 8010e3c:	3fa99999 	.word	0x3fa99999
 8010e40:	70a3d70a 	.word	0x70a3d70a
 8010e44:	3fe70a3d 	.word	0x3fe70a3d
 8010e48:	b851eb85 	.word	0xb851eb85
 8010e4c:	4020051e 	.word	0x4020051e
 8010e50:	9999999a 	.word	0x9999999a
 8010e54:	404c5999 	.word	0x404c5999
 8010e58:	eb851eb8 	.word	0xeb851eb8
 8010e5c:	4018b851 	.word	0x4018b851

08010e60 <compute_flow>:
/**
  * @brief  compute_flow.
  * This function is used for finally calculate Proximal sensor flow and volume.
  */

void compute_flow(){
 8010e60:	b5b0      	push	{r4, r5, r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0

	float Flow_Volume;
	int16_t temp_dp = (int16_t) (MPX7002.value * 1000.0);
 8010e66:	4b5a      	ldr	r3, [pc, #360]	; (8010fd0 <compute_flow+0x170>)
 8010e68:	689b      	ldr	r3, [r3, #8]
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7ef fb14 	bl	8000498 <__aeabi_f2d>
 8010e70:	f04f 0200 	mov.w	r2, #0
 8010e74:	4b57      	ldr	r3, [pc, #348]	; (8010fd4 <compute_flow+0x174>)
 8010e76:	f7ef fb67 	bl	8000548 <__aeabi_dmul>
 8010e7a:	4602      	mov	r2, r0
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	4610      	mov	r0, r2
 8010e80:	4619      	mov	r1, r3
 8010e82:	f7ef fdfb 	bl	8000a7c <__aeabi_d2iz>
 8010e86:	4603      	mov	r3, r0
 8010e88:	81bb      	strh	r3, [r7, #12]
	double dp = temp_dp/100.0;
 8010e8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7ef faf0 	bl	8000474 <__aeabi_i2d>
 8010e94:	f04f 0200 	mov.w	r2, #0
 8010e98:	4b4f      	ldr	r3, [pc, #316]	; (8010fd8 <compute_flow+0x178>)
 8010e9a:	f7ef fc7f 	bl	800079c <__aeabi_ddiv>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	e9c7 2300 	strd	r2, r3, [r7]
	int8_t direction_bit = 1;
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	73fb      	strb	r3, [r7, #15]
	if(dp<0){
 8010eaa:	f04f 0200 	mov.w	r2, #0
 8010eae:	f04f 0300 	mov.w	r3, #0
 8010eb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010eb6:	f7ef fdb9 	bl	8000a2c <__aeabi_dcmplt>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d001      	beq.n	8010ec4 <compute_flow+0x64>
		direction_bit = -1;
 8010ec0:	23ff      	movs	r3, #255	; 0xff
 8010ec2:	73fb      	strb	r3, [r7, #15]
	}
	GRAPH_VALUES.flow = round(dp_to_flow(direction_bit*dp)*direction_bit);
 8010ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7ef fad3 	bl	8000474 <__aeabi_i2d>
 8010ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ed2:	f7ef fb39 	bl	8000548 <__aeabi_dmul>
 8010ed6:	4602      	mov	r2, r0
 8010ed8:	460b      	mov	r3, r1
 8010eda:	4610      	mov	r0, r2
 8010edc:	4619      	mov	r1, r3
 8010ede:	f7ef fe15 	bl	8000b0c <__aeabi_d2f>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	ee00 3a10 	vmov	s0, r3
 8010ee8:	f7ff fefa 	bl	8010ce0 <dp_to_flow>
 8010eec:	ec55 4b10 	vmov	r4, r5, d0
 8010ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ef fabd 	bl	8000474 <__aeabi_i2d>
 8010efa:	4602      	mov	r2, r0
 8010efc:	460b      	mov	r3, r1
 8010efe:	4620      	mov	r0, r4
 8010f00:	4629      	mov	r1, r5
 8010f02:	f7ef fb21 	bl	8000548 <__aeabi_dmul>
 8010f06:	4602      	mov	r2, r0
 8010f08:	460b      	mov	r3, r1
 8010f0a:	ec43 2b17 	vmov	d7, r2, r3
 8010f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8010f12:	eef0 0a67 	vmov.f32	s1, s15
 8010f16:	f00b ffff 	bl	801cf18 <round>
 8010f1a:	ec53 2b10 	vmov	r2, r3, d0
 8010f1e:	4610      	mov	r0, r2
 8010f20:	4619      	mov	r1, r3
 8010f22:	f7ef fdf3 	bl	8000b0c <__aeabi_d2f>
 8010f26:	4603      	mov	r3, r0
 8010f28:	4a2c      	ldr	r2, [pc, #176]	; (8010fdc <compute_flow+0x17c>)
 8010f2a:	6053      	str	r3, [r2, #4]
	if(GRAPH_VALUES.flow> Max_Flow)
 8010f2c:	4b2b      	ldr	r3, [pc, #172]	; (8010fdc <compute_flow+0x17c>)
 8010f2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8010f32:	4b2b      	ldr	r3, [pc, #172]	; (8010fe0 <compute_flow+0x180>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	ee07 3a90 	vmov	s15, r3
 8010f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f46:	dd08      	ble.n	8010f5a <compute_flow+0xfa>
	{
		Max_Flow= GRAPH_VALUES.flow;
 8010f48:	4b24      	ldr	r3, [pc, #144]	; (8010fdc <compute_flow+0x17c>)
 8010f4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8010f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f52:	ee17 2a90 	vmov	r2, s15
 8010f56:	4b22      	ldr	r3, [pc, #136]	; (8010fe0 <compute_flow+0x180>)
 8010f58:	601a      	str	r2, [r3, #0]
	}
	GRAPH_VALUES.volume += (((float)GRAPH_VALUES.flow/60)*FLOW_DEL_T);
 8010f5a:	4b20      	ldr	r3, [pc, #128]	; (8010fdc <compute_flow+0x17c>)
 8010f5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8010f60:	4b1e      	ldr	r3, [pc, #120]	; (8010fdc <compute_flow+0x17c>)
 8010f62:	edd3 6a01 	vldr	s13, [r3, #4]
 8010f66:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8010fe4 <compute_flow+0x184>
 8010f6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010f6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f76:	4b19      	ldr	r3, [pc, #100]	; (8010fdc <compute_flow+0x17c>)
 8010f78:	edc3 7a02 	vstr	s15, [r3, #8]
	if(GRAPH_VALUES.volume>VOLUME_MAX){
 8010f7c:	4b17      	ldr	r3, [pc, #92]	; (8010fdc <compute_flow+0x17c>)
 8010f7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8010f82:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8010fe8 <compute_flow+0x188>
 8010f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f8e:	dd03      	ble.n	8010f98 <compute_flow+0x138>
		GRAPH_VALUES.volume = 0;
 8010f90:	4b12      	ldr	r3, [pc, #72]	; (8010fdc <compute_flow+0x17c>)
 8010f92:	f04f 0200 	mov.w	r2, #0
 8010f96:	609a      	str	r2, [r3, #8]
	}
	if(Volume_max <GRAPH_VALUES.volume)
 8010f98:	4b14      	ldr	r3, [pc, #80]	; (8010fec <compute_flow+0x18c>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	ee07 3a90 	vmov	s15, r3
 8010fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010fa4:	4b0d      	ldr	r3, [pc, #52]	; (8010fdc <compute_flow+0x17c>)
 8010fa6:	edd3 7a02 	vldr	s15, [r3, #8]
 8010faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb2:	d400      	bmi.n	8010fb6 <compute_flow+0x156>
	{
		Volume_max=GRAPH_VALUES.volume;
	}
}
 8010fb4:	e008      	b.n	8010fc8 <compute_flow+0x168>
		Volume_max=GRAPH_VALUES.volume;
 8010fb6:	4b09      	ldr	r3, [pc, #36]	; (8010fdc <compute_flow+0x17c>)
 8010fb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8010fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fc0:	ee17 2a90 	vmov	r2, s15
 8010fc4:	4b09      	ldr	r3, [pc, #36]	; (8010fec <compute_flow+0x18c>)
 8010fc6:	601a      	str	r2, [r3, #0]
}
 8010fc8:	bf00      	nop
 8010fca:	3710      	adds	r7, #16
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bdb0      	pop	{r4, r5, r7, pc}
 8010fd0:	20012dc4 	.word	0x20012dc4
 8010fd4:	408f4000 	.word	0x408f4000
 8010fd8:	40590000 	.word	0x40590000
 8010fdc:	200125f8 	.word	0x200125f8
 8010fe0:	200129a4 	.word	0x200129a4
 8010fe4:	42700000 	.word	0x42700000
 8010fe8:	476a6000 	.word	0x476a6000
 8010fec:	20012c70 	.word	0x20012c70

08010ff0 <MPX7002_init>:

/**
  * @brief  Initialize the MPX7002 sensor.
  *         This function sets initial values for the sensor.
  */
void MPX7002_init(){
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	af00      	add	r7, sp, #0
	MPX7002.offset_minimum = 2250;
 8010ff4:	4b15      	ldr	r3, [pc, #84]	; (801104c <MPX7002_init+0x5c>)
 8010ff6:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8010ffa:	805a      	strh	r2, [r3, #2]
	MPX7002.offset_maximum = 2750;
 8010ffc:	4b13      	ldr	r3, [pc, #76]	; (801104c <MPX7002_init+0x5c>)
 8010ffe:	f640 22be 	movw	r2, #2750	; 0xabe
 8011002:	809a      	strh	r2, [r3, #4]
	MPX7002.supply_voltage = 5000;
 8011004:	4b11      	ldr	r3, [pc, #68]	; (801104c <MPX7002_init+0x5c>)
 8011006:	f241 3288 	movw	r2, #5000	; 0x1388
 801100a:	80da      	strh	r2, [r3, #6]
	MPX7002.sensitivity = 1;
 801100c:	4b0f      	ldr	r3, [pc, #60]	; (801104c <MPX7002_init+0x5c>)
 801100e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011012:	615a      	str	r2, [r3, #20]
	MPX7002.smoothing_factor = 0.15;
 8011014:	4b0d      	ldr	r3, [pc, #52]	; (801104c <MPX7002_init+0x5c>)
 8011016:	4a0e      	ldr	r2, [pc, #56]	; (8011050 <MPX7002_init+0x60>)
 8011018:	619a      	str	r2, [r3, #24]
	MPX7002.previous_reading = 0;
 801101a:	4b0c      	ldr	r3, [pc, #48]	; (801104c <MPX7002_init+0x5c>)
 801101c:	2200      	movs	r2, #0
 801101e:	81da      	strh	r2, [r3, #14]
	MPX7002.operational_status = 1;
 8011020:	4b0a      	ldr	r3, [pc, #40]	; (801104c <MPX7002_init+0x5c>)
 8011022:	2201      	movs	r2, #1
 8011024:	741a      	strb	r2, [r3, #16]
	MPX7002.sensor_ready = 0;
 8011026:	4b09      	ldr	r3, [pc, #36]	; (801104c <MPX7002_init+0x5c>)
 8011028:	2200      	movs	r2, #0
 801102a:	745a      	strb	r2, [r3, #17]
	IIR.error_measurement = 2;
 801102c:	4b09      	ldr	r3, [pc, #36]	; (8011054 <MPX7002_init+0x64>)
 801102e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011032:	601a      	str	r2, [r3, #0]
	IIR.error_estimate = 2;
 8011034:	4b07      	ldr	r3, [pc, #28]	; (8011054 <MPX7002_init+0x64>)
 8011036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801103a:	605a      	str	r2, [r3, #4]
	IIR.process_variance = 0.1;
 801103c:	4b05      	ldr	r3, [pc, #20]	; (8011054 <MPX7002_init+0x64>)
 801103e:	4a06      	ldr	r2, [pc, #24]	; (8011058 <MPX7002_init+0x68>)
 8011040:	609a      	str	r2, [r3, #8]
	MPX7002_calibrate();
 8011042:	f000 f80b 	bl	801105c <MPX7002_calibrate>
}
 8011046:	bf00      	nop
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	20012dc4 	.word	0x20012dc4
 8011050:	3e19999a 	.word	0x3e19999a
 8011054:	20012de4 	.word	0x20012de4
 8011058:	3dcccccd 	.word	0x3dcccccd

0801105c <MPX7002_calibrate>:
/**
  * @brief  Calibrate the MPX7002 sensor.
  *         This function takes multiple readings to determine the sensor offset.
  *         It checks if the offset is within the allowable range.
  */
void MPX7002_calibrate(){
 801105c:	b580      	push	{r7, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	af00      	add	r7, sp, #0
	for(int i=0; i<CALIBRATION_COUNT; i++){
 8011062:	2300      	movs	r3, #0
 8011064:	607b      	str	r3, [r7, #4]
 8011066:	e009      	b.n	801107c <MPX7002_calibrate+0x20>
		MPX7002_read();
 8011068:	f000 f82e 	bl	80110c8 <MPX7002_read>
		Get_AW_Flow_ADS1115_OFFSET();                 //new
 801106c:	f000 f970 	bl	8011350 <Get_AW_Flow_ADS1115_OFFSET>
		vTaskDelay(1);
 8011070:	2001      	movs	r0, #1
 8011072:	f009 ffeb 	bl	801b04c <vTaskDelay>
	for(int i=0; i<CALIBRATION_COUNT; i++){
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	3301      	adds	r3, #1
 801107a:	607b      	str	r3, [r7, #4]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011082:	dbf1      	blt.n	8011068 <MPX7002_calibrate+0xc>
	}
	uint16_t offset = MPX7002.current_reading;
 8011084:	4b0f      	ldr	r3, [pc, #60]	; (80110c4 <MPX7002_calibrate+0x68>)
 8011086:	899b      	ldrh	r3, [r3, #12]
 8011088:	807b      	strh	r3, [r7, #2]
	MPX7002.previous_reading = 0;
 801108a:	4b0e      	ldr	r3, [pc, #56]	; (80110c4 <MPX7002_calibrate+0x68>)
 801108c:	2200      	movs	r2, #0
 801108e:	81da      	strh	r2, [r3, #14]
	MPX7002.current_reading = 0;
 8011090:	4b0c      	ldr	r3, [pc, #48]	; (80110c4 <MPX7002_calibrate+0x68>)
 8011092:	2200      	movs	r2, #0
 8011094:	819a      	strh	r2, [r3, #12]
	if(offset<MPX7002.offset_minimum && offset>MPX7002.offset_maximum){
 8011096:	4b0b      	ldr	r3, [pc, #44]	; (80110c4 <MPX7002_calibrate+0x68>)
 8011098:	885b      	ldrh	r3, [r3, #2]
 801109a:	887a      	ldrh	r2, [r7, #2]
 801109c:	429a      	cmp	r2, r3
 801109e:	d207      	bcs.n	80110b0 <MPX7002_calibrate+0x54>
 80110a0:	4b08      	ldr	r3, [pc, #32]	; (80110c4 <MPX7002_calibrate+0x68>)
 80110a2:	889b      	ldrh	r3, [r3, #4]
 80110a4:	887a      	ldrh	r2, [r7, #2]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d902      	bls.n	80110b0 <MPX7002_calibrate+0x54>
		MPX7002.operational_status = 0;
 80110aa:	4b06      	ldr	r3, [pc, #24]	; (80110c4 <MPX7002_calibrate+0x68>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	741a      	strb	r2, [r3, #16]
	}
	MPX7002.offset = offset;
 80110b0:	4a04      	ldr	r2, [pc, #16]	; (80110c4 <MPX7002_calibrate+0x68>)
 80110b2:	887b      	ldrh	r3, [r7, #2]
 80110b4:	8013      	strh	r3, [r2, #0]
	MPX7002.sensor_ready = 1;
 80110b6:	4b03      	ldr	r3, [pc, #12]	; (80110c4 <MPX7002_calibrate+0x68>)
 80110b8:	2201      	movs	r2, #1
 80110ba:	745a      	strb	r2, [r3, #17]
}
 80110bc:	bf00      	nop
 80110be:	3708      	adds	r7, #8
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}
 80110c4:	20012dc4 	.word	0x20012dc4

080110c8 <MPX7002_read>:
  *         References:
  *         		1. https://hackaday.com/2019/09/06/sensor-filters-for-coders/
  *         		2. https://electronics.stackexchange.com/questions/30370/fast-and-memory-efficient-moving-average-calculation
  *         		3. https://stackoverflow.com/questions/12636613/how-to-calculate-moving-average-without-keeping-the-count-and-data-total
  */
void MPX7002_read(){
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
	float sum = 0, raw_voltage=0;
 80110ce:	f04f 0300 	mov.w	r3, #0
 80110d2:	607b      	str	r3, [r7, #4]
 80110d4:	f04f 0300 	mov.w	r3, #0
 80110d8:	603b      	str	r3, [r7, #0]
	raw_voltage = MPX7002_read_adc();
 80110da:	f000 f84f 	bl	801117c <MPX7002_read_adc>
 80110de:	ed87 0a00 	vstr	s0, [r7]

	Trigger_Flow();
 80110e2:	f000 f881 	bl	80111e8 <Trigger_Flow>

	sum+= raw_voltage;
 80110e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80110ea:	edd7 7a00 	vldr	s15, [r7]
 80110ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110f2:	edc7 7a01 	vstr	s15, [r7, #4]
	MPX7002.current_reading = (uint16_t)((1-MPX7002.smoothing_factor)*MPX7002.previous_reading + MPX7002.smoothing_factor*sum/1);
 80110f6:	4b1f      	ldr	r3, [pc, #124]	; (8011174 <MPX7002_read+0xac>)
 80110f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80110fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011100:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011104:	4b1b      	ldr	r3, [pc, #108]	; (8011174 <MPX7002_read+0xac>)
 8011106:	89db      	ldrh	r3, [r3, #14]
 8011108:	ee07 3a90 	vmov	s15, r3
 801110c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011110:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011114:	4b17      	ldr	r3, [pc, #92]	; (8011174 <MPX7002_read+0xac>)
 8011116:	edd3 6a06 	vldr	s13, [r3, #24]
 801111a:	edd7 7a01 	vldr	s15, [r7, #4]
 801111e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801112a:	ee17 3a90 	vmov	r3, s15
 801112e:	b29a      	uxth	r2, r3
 8011130:	4b10      	ldr	r3, [pc, #64]	; (8011174 <MPX7002_read+0xac>)
 8011132:	819a      	strh	r2, [r3, #12]
	MPX7002.previous_reading = MPX7002.current_reading;
 8011134:	4b0f      	ldr	r3, [pc, #60]	; (8011174 <MPX7002_read+0xac>)
 8011136:	899a      	ldrh	r2, [r3, #12]
 8011138:	4b0e      	ldr	r3, [pc, #56]	; (8011174 <MPX7002_read+0xac>)
 801113a:	81da      	strh	r2, [r3, #14]
	MPX7002.value = (MPX7002.current_reading-MPX7002.offset)*MPX7002.sensitivity/1000;
 801113c:	4b0d      	ldr	r3, [pc, #52]	; (8011174 <MPX7002_read+0xac>)
 801113e:	899b      	ldrh	r3, [r3, #12]
 8011140:	461a      	mov	r2, r3
 8011142:	4b0c      	ldr	r3, [pc, #48]	; (8011174 <MPX7002_read+0xac>)
 8011144:	881b      	ldrh	r3, [r3, #0]
 8011146:	1ad3      	subs	r3, r2, r3
 8011148:	ee07 3a90 	vmov	s15, r3
 801114c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011150:	4b08      	ldr	r3, [pc, #32]	; (8011174 <MPX7002_read+0xac>)
 8011152:	edd3 7a05 	vldr	s15, [r3, #20]
 8011156:	ee27 7a27 	vmul.f32	s14, s14, s15
 801115a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8011178 <MPX7002_read+0xb0>
 801115e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011162:	4b04      	ldr	r3, [pc, #16]	; (8011174 <MPX7002_read+0xac>)
 8011164:	edc3 7a02 	vstr	s15, [r3, #8]
	compute_flow();
 8011168:	f7ff fe7a 	bl	8010e60 <compute_flow>
}
 801116c:	bf00      	nop
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	20012dc4 	.word	0x20012dc4
 8011178:	447a0000 	.word	0x447a0000

0801117c <MPX7002_read_adc>:

/**
  * @brief  Perform analog-to-digital value to voltage conversion for the MPX7002 sensor.
  * @retval Vout (in mV)
  */
float MPX7002_read_adc(){
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
	uint16_t muxPort = ADS1115_MUX_AIN0;
 8011182:	2340      	movs	r3, #64	; 0x40
 8011184:	80fb      	strh	r3, [r7, #6]
	float result;
    // Call the function
    HAL_StatusTypeDef status = ADS1115_Read(muxPort, &result, &ADS1115_1_I2C_Handler);
 8011186:	4639      	mov	r1, r7
 8011188:	88fb      	ldrh	r3, [r7, #6]
 801118a:	4a14      	ldr	r2, [pc, #80]	; (80111dc <MPX7002_read_adc+0x60>)
 801118c:	4618      	mov	r0, r3
 801118e:	f7ff f905 	bl	801039c <ADS1115_Read>
 8011192:	4603      	mov	r3, r0
 8011194:	717b      	strb	r3, [r7, #5]
    // Check if the function call was successful
    if (status == HAL_OK) {
 8011196:	797b      	ldrb	r3, [r7, #5]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d114      	bne.n	80111c6 <MPX7002_read_adc+0x4a>
    	Proximal_Sensor_ADS1115  = SERVICE_PASS;
 801119c:	4b10      	ldr	r3, [pc, #64]	; (80111e0 <MPX7002_read_adc+0x64>)
 801119e:	2201      	movs	r2, #1
 80111a0:	701a      	strb	r2, [r3, #0]
        return round(result);
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7ef f977 	bl	8000498 <__aeabi_f2d>
 80111aa:	4602      	mov	r2, r0
 80111ac:	460b      	mov	r3, r1
 80111ae:	ec43 2b10 	vmov	d0, r2, r3
 80111b2:	f00b feb1 	bl	801cf18 <round>
 80111b6:	ec53 2b10 	vmov	r2, r3, d0
 80111ba:	4610      	mov	r0, r2
 80111bc:	4619      	mov	r1, r3
 80111be:	f7ef fca5 	bl	8000b0c <__aeabi_d2f>
 80111c2:	4603      	mov	r3, r0
 80111c4:	e003      	b.n	80111ce <MPX7002_read_adc+0x52>
    }
 	Proximal_Sensor_ADS1115 =SERVICE_FAIL;
 80111c6:	4b06      	ldr	r3, [pc, #24]	; (80111e0 <MPX7002_read_adc+0x64>)
 80111c8:	2200      	movs	r2, #0
 80111ca:	701a      	strb	r2, [r3, #0]
	return -1;
 80111cc:	4b05      	ldr	r3, [pc, #20]	; (80111e4 <MPX7002_read_adc+0x68>)
 80111ce:	ee07 3a90 	vmov	s15, r3
}
 80111d2:	eeb0 0a67 	vmov.f32	s0, s15
 80111d6:	3708      	adds	r7, #8
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	200127b0 	.word	0x200127b0
 80111e0:	20012cb0 	.word	0x20012cb0
 80111e4:	bf800000 	.word	0xbf800000

080111e8 <Trigger_Flow>:
  * @brief  Trigger_Flow.
  * this function is used for find flow trigger accuracy.
  */

void Trigger_Flow()                                    //new
{
 80111e8:	b480      	push	{r7}
 80111ea:	af00      	add	r7, sp, #0
	Raw_volt_Flow_Trigger_Temp           = (Trigger_Ads1115_Raw_Adc - ADS1115_7002_FLOW_SENSOR_OFFSET); //14450
 80111ec:	4b53      	ldr	r3, [pc, #332]	; (801133c <Trigger_Flow+0x154>)
 80111ee:	881a      	ldrh	r2, [r3, #0]
 80111f0:	4b53      	ldr	r3, [pc, #332]	; (8011340 <Trigger_Flow+0x158>)
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	1ad3      	subs	r3, r2, r3
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	b21a      	sxth	r2, r3
 80111fa:	4b52      	ldr	r3, [pc, #328]	; (8011344 <Trigger_Flow+0x15c>)
 80111fc:	801a      	strh	r2, [r3, #0]
	Raw_volt_Flow_Trigger                = (uint16_t)((float) Raw_volt_Flow_Trigger_Temp/10);
 80111fe:	4b51      	ldr	r3, [pc, #324]	; (8011344 <Trigger_Flow+0x15c>)
 8011200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011204:	ee07 3a90 	vmov	s15, r3
 8011208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801120c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8011210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011218:	ee17 3a90 	vmov	r3, s15
 801121c:	b29b      	uxth	r3, r3
 801121e:	b21a      	sxth	r2, r3
 8011220:	4b49      	ldr	r3, [pc, #292]	; (8011348 <Trigger_Flow+0x160>)
 8011222:	801a      	strh	r2, [r3, #0]
	switch(Raw_volt_Flow_Trigger)
 8011224:	4b48      	ldr	r3, [pc, #288]	; (8011348 <Trigger_Flow+0x160>)
 8011226:	f9b3 3000 	ldrsh.w	r3, [r3]
 801122a:	3b01      	subs	r3, #1
 801122c:	2b13      	cmp	r3, #19
 801122e:	d87b      	bhi.n	8011328 <Trigger_Flow+0x140>
 8011230:	a201      	add	r2, pc, #4	; (adr r2, 8011238 <Trigger_Flow+0x50>)
 8011232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011236:	bf00      	nop
 8011238:	08011289 	.word	0x08011289
 801123c:	08011291 	.word	0x08011291
 8011240:	08011299 	.word	0x08011299
 8011244:	080112a1 	.word	0x080112a1
 8011248:	080112a9 	.word	0x080112a9
 801124c:	080112b1 	.word	0x080112b1
 8011250:	080112b9 	.word	0x080112b9
 8011254:	080112c1 	.word	0x080112c1
 8011258:	080112c9 	.word	0x080112c9
 801125c:	080112d1 	.word	0x080112d1
 8011260:	080112d9 	.word	0x080112d9
 8011264:	080112e1 	.word	0x080112e1
 8011268:	080112e9 	.word	0x080112e9
 801126c:	080112f1 	.word	0x080112f1
 8011270:	080112f9 	.word	0x080112f9
 8011274:	08011301 	.word	0x08011301
 8011278:	08011309 	.word	0x08011309
 801127c:	08011311 	.word	0x08011311
 8011280:	08011319 	.word	0x08011319
 8011284:	08011321 	.word	0x08011321
	{
	    case 1:
		    FLOW_TRIGGER  =1;
 8011288:	4b30      	ldr	r3, [pc, #192]	; (801134c <Trigger_Flow+0x164>)
 801128a:	2201      	movs	r2, #1
 801128c:	701a      	strb	r2, [r3, #0]
		break;
 801128e:	e04f      	b.n	8011330 <Trigger_Flow+0x148>
	    case 2:
	    	FLOW_TRIGGER  =2;
 8011290:	4b2e      	ldr	r3, [pc, #184]	; (801134c <Trigger_Flow+0x164>)
 8011292:	2202      	movs	r2, #2
 8011294:	701a      	strb	r2, [r3, #0]
	    break;
 8011296:	e04b      	b.n	8011330 <Trigger_Flow+0x148>
	    case 3:
	    	FLOW_TRIGGER  =3;
 8011298:	4b2c      	ldr	r3, [pc, #176]	; (801134c <Trigger_Flow+0x164>)
 801129a:	2203      	movs	r2, #3
 801129c:	701a      	strb	r2, [r3, #0]
		break;
 801129e:	e047      	b.n	8011330 <Trigger_Flow+0x148>
		case 4:
			FLOW_TRIGGER  =4;
 80112a0:	4b2a      	ldr	r3, [pc, #168]	; (801134c <Trigger_Flow+0x164>)
 80112a2:	2204      	movs	r2, #4
 80112a4:	701a      	strb	r2, [r3, #0]
		break;
 80112a6:	e043      	b.n	8011330 <Trigger_Flow+0x148>
	    case 5:
	    	FLOW_TRIGGER  =5;
 80112a8:	4b28      	ldr	r3, [pc, #160]	; (801134c <Trigger_Flow+0x164>)
 80112aa:	2205      	movs	r2, #5
 80112ac:	701a      	strb	r2, [r3, #0]
	    break;
 80112ae:	e03f      	b.n	8011330 <Trigger_Flow+0x148>
	    case 6:
	    	FLOW_TRIGGER  =6;
 80112b0:	4b26      	ldr	r3, [pc, #152]	; (801134c <Trigger_Flow+0x164>)
 80112b2:	2206      	movs	r2, #6
 80112b4:	701a      	strb	r2, [r3, #0]
	    break;
 80112b6:	e03b      	b.n	8011330 <Trigger_Flow+0x148>
	    case 7:
	    	FLOW_TRIGGER  =7;
 80112b8:	4b24      	ldr	r3, [pc, #144]	; (801134c <Trigger_Flow+0x164>)
 80112ba:	2207      	movs	r2, #7
 80112bc:	701a      	strb	r2, [r3, #0]
		break;
 80112be:	e037      	b.n	8011330 <Trigger_Flow+0x148>
		case 8:
			FLOW_TRIGGER  =8;
 80112c0:	4b22      	ldr	r3, [pc, #136]	; (801134c <Trigger_Flow+0x164>)
 80112c2:	2208      	movs	r2, #8
 80112c4:	701a      	strb	r2, [r3, #0]
		break;
 80112c6:	e033      	b.n	8011330 <Trigger_Flow+0x148>
	    case 9:
	    	FLOW_TRIGGER  =9;
 80112c8:	4b20      	ldr	r3, [pc, #128]	; (801134c <Trigger_Flow+0x164>)
 80112ca:	2209      	movs	r2, #9
 80112cc:	701a      	strb	r2, [r3, #0]
		break;
 80112ce:	e02f      	b.n	8011330 <Trigger_Flow+0x148>
		case 10:
			FLOW_TRIGGER  =10;
 80112d0:	4b1e      	ldr	r3, [pc, #120]	; (801134c <Trigger_Flow+0x164>)
 80112d2:	220a      	movs	r2, #10
 80112d4:	701a      	strb	r2, [r3, #0]
		break;
 80112d6:	e02b      	b.n	8011330 <Trigger_Flow+0x148>
		case 11:
			FLOW_TRIGGER  =11;
 80112d8:	4b1c      	ldr	r3, [pc, #112]	; (801134c <Trigger_Flow+0x164>)
 80112da:	220b      	movs	r2, #11
 80112dc:	701a      	strb	r2, [r3, #0]
		break;
 80112de:	e027      	b.n	8011330 <Trigger_Flow+0x148>
		case 12:
			FLOW_TRIGGER  =12;
 80112e0:	4b1a      	ldr	r3, [pc, #104]	; (801134c <Trigger_Flow+0x164>)
 80112e2:	220c      	movs	r2, #12
 80112e4:	701a      	strb	r2, [r3, #0]
		break;
 80112e6:	e023      	b.n	8011330 <Trigger_Flow+0x148>
		case 13:
			FLOW_TRIGGER  =13;
 80112e8:	4b18      	ldr	r3, [pc, #96]	; (801134c <Trigger_Flow+0x164>)
 80112ea:	220d      	movs	r2, #13
 80112ec:	701a      	strb	r2, [r3, #0]
		break;
 80112ee:	e01f      	b.n	8011330 <Trigger_Flow+0x148>
		case 14:
			FLOW_TRIGGER  =14;
 80112f0:	4b16      	ldr	r3, [pc, #88]	; (801134c <Trigger_Flow+0x164>)
 80112f2:	220e      	movs	r2, #14
 80112f4:	701a      	strb	r2, [r3, #0]
		break;
 80112f6:	e01b      	b.n	8011330 <Trigger_Flow+0x148>
		case 15:
			FLOW_TRIGGER  =15;
 80112f8:	4b14      	ldr	r3, [pc, #80]	; (801134c <Trigger_Flow+0x164>)
 80112fa:	220f      	movs	r2, #15
 80112fc:	701a      	strb	r2, [r3, #0]
		break;
 80112fe:	e017      	b.n	8011330 <Trigger_Flow+0x148>
		case 16:
			FLOW_TRIGGER  =16;
 8011300:	4b12      	ldr	r3, [pc, #72]	; (801134c <Trigger_Flow+0x164>)
 8011302:	2210      	movs	r2, #16
 8011304:	701a      	strb	r2, [r3, #0]
		break;
 8011306:	e013      	b.n	8011330 <Trigger_Flow+0x148>
		case 17:
			FLOW_TRIGGER  =17;
 8011308:	4b10      	ldr	r3, [pc, #64]	; (801134c <Trigger_Flow+0x164>)
 801130a:	2211      	movs	r2, #17
 801130c:	701a      	strb	r2, [r3, #0]
		break;
 801130e:	e00f      	b.n	8011330 <Trigger_Flow+0x148>
		case 18:
			FLOW_TRIGGER  =18;
 8011310:	4b0e      	ldr	r3, [pc, #56]	; (801134c <Trigger_Flow+0x164>)
 8011312:	2212      	movs	r2, #18
 8011314:	701a      	strb	r2, [r3, #0]
		break;
 8011316:	e00b      	b.n	8011330 <Trigger_Flow+0x148>
		case 19:
			FLOW_TRIGGER  =19;
 8011318:	4b0c      	ldr	r3, [pc, #48]	; (801134c <Trigger_Flow+0x164>)
 801131a:	2213      	movs	r2, #19
 801131c:	701a      	strb	r2, [r3, #0]
		break;
 801131e:	e007      	b.n	8011330 <Trigger_Flow+0x148>
		case 20:
			FLOW_TRIGGER  =20;
 8011320:	4b0a      	ldr	r3, [pc, #40]	; (801134c <Trigger_Flow+0x164>)
 8011322:	2214      	movs	r2, #20
 8011324:	701a      	strb	r2, [r3, #0]
		break;
 8011326:	e003      	b.n	8011330 <Trigger_Flow+0x148>
		default:
			FLOW_TRIGGER  = 0;
 8011328:	4b08      	ldr	r3, [pc, #32]	; (801134c <Trigger_Flow+0x164>)
 801132a:	2200      	movs	r2, #0
 801132c:	701a      	strb	r2, [r3, #0]
		break;
 801132e:	bf00      	nop


	}

}
 8011330:	bf00      	nop
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop
 801133c:	200129a2 	.word	0x200129a2
 8011340:	20012df0 	.word	0x20012df0
 8011344:	20012a00 	.word	0x20012a00
 8011348:	200124cc 	.word	0x200124cc
 801134c:	200129aa 	.word	0x200129aa

08011350 <Get_AW_Flow_ADS1115_OFFSET>:
  * @brief  Get_AW_Flow_ADS1115_OFFSET.
  * This function is used for ADS1115 RAW volt offset.
  */

void Get_AW_Flow_ADS1115_OFFSET()
{
 8011350:	b480      	push	{r7}
 8011352:	af00      	add	r7, sp, #0
	ADS1115_7002_FLOW_SENSOR_OFFSET = Trigger_Ads1115_Raw_Adc;
 8011354:	4b04      	ldr	r3, [pc, #16]	; (8011368 <Get_AW_Flow_ADS1115_OFFSET+0x18>)
 8011356:	881a      	ldrh	r2, [r3, #0]
 8011358:	4b04      	ldr	r3, [pc, #16]	; (801136c <Get_AW_Flow_ADS1115_OFFSET+0x1c>)
 801135a:	801a      	strh	r2, [r3, #0]
}
 801135c:	bf00      	nop
 801135e:	46bd      	mov	sp, r7
 8011360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop
 8011368:	200129a2 	.word	0x200129a2
 801136c:	20012df0 	.word	0x20012df0

08011370 <Sensor_Offset_Task>:
 * @brief Sensor_Offset_Task.
 * It is used to call the sensor offset function from within this task.
 */

void Sensor_Offset_Task (void *argument)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
	while (1)
	{
		vTaskSuspend(Sensor_Read_Handler);
 8011378:	4b79      	ldr	r3, [pc, #484]	; (8011560 <Sensor_Offset_Task+0x1f0>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4618      	mov	r0, r3
 801137e:	f009 fe99 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Time_Trace_Handler);
 8011382:	4b78      	ldr	r3, [pc, #480]	; (8011564 <Sensor_Offset_Task+0x1f4>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	4618      	mov	r0, r3
 8011388:	f009 fe94 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Bluetooth_Handler);
 801138c:	4b76      	ldr	r3, [pc, #472]	; (8011568 <Sensor_Offset_Task+0x1f8>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	4618      	mov	r0, r3
 8011392:	f009 fe8f 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Bluetooth_data_Split_Handler);
 8011396:	4b75      	ldr	r3, [pc, #468]	; (801156c <Sensor_Offset_Task+0x1fc>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4618      	mov	r0, r3
 801139c:	f009 fe8a 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Mode_initial_Flag_Set_Handler);
 80113a0:	4b73      	ldr	r3, [pc, #460]	; (8011570 <Sensor_Offset_Task+0x200>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	4618      	mov	r0, r3
 80113a6:	f009 fe85 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(One_Time_Handler);
 80113aa:	4b72      	ldr	r3, [pc, #456]	; (8011574 <Sensor_Offset_Task+0x204>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f009 fe80 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Alert_Handler);
 80113b4:	4b70      	ldr	r3, [pc, #448]	; (8011578 <Sensor_Offset_Task+0x208>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	4618      	mov	r0, r3
 80113ba:	f009 fe7b 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Oxygen_Blending_Handler);
 80113be:	4b6f      	ldr	r3, [pc, #444]	; (801157c <Sensor_Offset_Task+0x20c>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	4618      	mov	r0, r3
 80113c4:	f009 fe76 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Pc_Cmv_Handler);
 80113c8:	4b6d      	ldr	r3, [pc, #436]	; (8011580 <Sensor_Offset_Task+0x210>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4618      	mov	r0, r3
 80113ce:	f009 fe71 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(PIP_Control_Task_Handler);
 80113d2:	4b6c      	ldr	r3, [pc, #432]	; (8011584 <Sensor_Offset_Task+0x214>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	4618      	mov	r0, r3
 80113d8:	f009 fe6c 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Vc_Cmv_Handler);
 80113dc:	4b6a      	ldr	r3, [pc, #424]	; (8011588 <Sensor_Offset_Task+0x218>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4618      	mov	r0, r3
 80113e2:	f009 fe67 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Volume_Control_Task_Handler);
 80113e6:	4b69      	ldr	r3, [pc, #420]	; (801158c <Sensor_Offset_Task+0x21c>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f009 fe62 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 80113f0:	4b67      	ldr	r3, [pc, #412]	; (8011590 <Sensor_Offset_Task+0x220>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	4618      	mov	r0, r3
 80113f6:	f009 fe5d 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 80113fa:	4b66      	ldr	r3, [pc, #408]	; (8011594 <Sensor_Offset_Task+0x224>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	4618      	mov	r0, r3
 8011400:	f009 fe58 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 8011404:	4b64      	ldr	r3, [pc, #400]	; (8011598 <Sensor_Offset_Task+0x228>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4618      	mov	r0, r3
 801140a:	f009 fe53 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 801140e:	4b63      	ldr	r3, [pc, #396]	; (801159c <Sensor_Offset_Task+0x22c>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	4618      	mov	r0, r3
 8011414:	f009 fe4e 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(PSV_Handler);
 8011418:	4b61      	ldr	r3, [pc, #388]	; (80115a0 <Sensor_Offset_Task+0x230>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	4618      	mov	r0, r3
 801141e:	f009 fe49 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(PSV_PID_Handler);
 8011422:	4b60      	ldr	r3, [pc, #384]	; (80115a4 <Sensor_Offset_Task+0x234>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	4618      	mov	r0, r3
 8011428:	f009 fe44 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(CPAP_Handler);
 801142c:	4b5e      	ldr	r3, [pc, #376]	; (80115a8 <Sensor_Offset_Task+0x238>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	4618      	mov	r0, r3
 8011432:	f009 fe3f 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(APRV_Handler);
 8011436:	4b5d      	ldr	r3, [pc, #372]	; (80115ac <Sensor_Offset_Task+0x23c>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	4618      	mov	r0, r3
 801143c:	f009 fe3a 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(APRV_ONE_TIME_Handler);
 8011440:	4b5b      	ldr	r3, [pc, #364]	; (80115b0 <Sensor_Offset_Task+0x240>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4618      	mov	r0, r3
 8011446:	f009 fe35 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(BIPAP_Handler);
 801144a:	4b5a      	ldr	r3, [pc, #360]	; (80115b4 <Sensor_Offset_Task+0x244>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	4618      	mov	r0, r3
 8011450:	f009 fe30 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(BIPAP_PID_Handler);
 8011454:	4b58      	ldr	r3, [pc, #352]	; (80115b8 <Sensor_Offset_Task+0x248>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	4618      	mov	r0, r3
 801145a:	f009 fe2b 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(BACKUP_PC_Handler);
 801145e:	4b57      	ldr	r3, [pc, #348]	; (80115bc <Sensor_Offset_Task+0x24c>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	4618      	mov	r0, r3
 8011464:	f009 fe26 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Nebuliser_Handler);
 8011468:	4b55      	ldr	r3, [pc, #340]	; (80115c0 <Sensor_Offset_Task+0x250>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	4618      	mov	r0, r3
 801146e:	f009 fe21 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Suction_Handler);
 8011472:	4b54      	ldr	r3, [pc, #336]	; (80115c4 <Sensor_Offset_Task+0x254>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	4618      	mov	r0, r3
 8011478:	f009 fe1c 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Suction_Handler);
 801147c:	4b51      	ldr	r3, [pc, #324]	; (80115c4 <Sensor_Offset_Task+0x254>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4618      	mov	r0, r3
 8011482:	f009 fe17 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(HFNC_Handler);
 8011486:	4b50      	ldr	r3, [pc, #320]	; (80115c8 <Sensor_Offset_Task+0x258>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	4618      	mov	r0, r3
 801148c:	f009 fe12 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(O2_Calibration_Handler);
 8011490:	4b4e      	ldr	r3, [pc, #312]	; (80115cc <Sensor_Offset_Task+0x25c>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	4618      	mov	r0, r3
 8011496:	f009 fe0d 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Calibration_Handler);
 801149a:	4b4d      	ldr	r3, [pc, #308]	; (80115d0 <Sensor_Offset_Task+0x260>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	4618      	mov	r0, r3
 80114a0:	f009 fe08 	bl	801b0b4 <vTaskSuspend>
		vTaskSuspend(Service_Handler);
 80114a4:	4b4b      	ldr	r3, [pc, #300]	; (80115d4 <Sensor_Offset_Task+0x264>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	4618      	mov	r0, r3
 80114aa:	f009 fe03 	bl	801b0b4 <vTaskSuspend>



        vTaskDelay(4000);
 80114ae:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80114b2:	f009 fdcb 	bl	801b04c <vTaskDelay>
        ET_O2_Envitec_Tune_Value1   = 1;
 80114b6:	4b48      	ldr	r3, [pc, #288]	; (80115d8 <Sensor_Offset_Task+0x268>)
 80114b8:	2201      	movs	r2, #1
 80114ba:	701a      	strb	r2, [r3, #0]
        ET_O2_Envitec_Tune_Value2   = 4;
 80114bc:	4b47      	ldr	r3, [pc, #284]	; (80115dc <Sensor_Offset_Task+0x26c>)
 80114be:	2204      	movs	r2, #4
 80114c0:	701a      	strb	r2, [r3, #0]
        ET_O2_Envitec_Tune_Value3   = 20;
 80114c2:	4b47      	ldr	r3, [pc, #284]	; (80115e0 <Sensor_Offset_Task+0x270>)
 80114c4:	2214      	movs	r2, #20
 80114c6:	701a      	strb	r2, [r3, #0]


		Last_O2_Dac_Val                      = 1700;
 80114c8:	4b46      	ldr	r3, [pc, #280]	; (80115e4 <Sensor_Offset_Task+0x274>)
 80114ca:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80114ce:	801a      	strh	r2, [r3, #0]

		Apnea_Mode                            = OFF;
 80114d0:	4b45      	ldr	r3, [pc, #276]	; (80115e8 <Sensor_Offset_Task+0x278>)
 80114d2:	2201      	movs	r2, #1
 80114d4:	701a      	strb	r2, [r3, #0]
		Device_Monitoring                     = NO;
 80114d6:	4b45      	ldr	r3, [pc, #276]	; (80115ec <Sensor_Offset_Task+0x27c>)
 80114d8:	2200      	movs	r2, #0
 80114da:	701a      	strb	r2, [r3, #0]




if( (xSemaphoreTake(binarysem,4000)) == pdTRUE)
 80114dc:	4b44      	ldr	r3, [pc, #272]	; (80115f0 <Sensor_Offset_Task+0x280>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80114e4:	4618      	mov	r0, r3
 80114e6:	f009 f8fb 	bl	801a6e0 <xQueueSemaphoreTake>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b01      	cmp	r3, #1
 80114ee:	d111      	bne.n	8011514 <Sensor_Offset_Task+0x1a4>
{
		CALIBRATE_SENSOR_TASK();
 80114f0:	f7fe fe0a 	bl	8010108 <CALIBRATE_SENSOR_TASK>
		Device_Control                  = PAUSE;
 80114f4:	4b3f      	ldr	r3, [pc, #252]	; (80115f4 <Sensor_Offset_Task+0x284>)
 80114f6:	2201      	movs	r2, #1
 80114f8:	701a      	strb	r2, [r3, #0]
		INCREMENT_DAC_VAL_PER_ITERATION = 3;
 80114fa:	4b3f      	ldr	r3, [pc, #252]	; (80115f8 <Sensor_Offset_Task+0x288>)
 80114fc:	2203      	movs	r2, #3
 80114fe:	701a      	strb	r2, [r3, #0]

		INITIAL_DAC_VALUE();
 8011500:	f7f7 fc82 	bl	8008e08 <INITIAL_DAC_VALUE>
		INITIAL_CPAP_DAC_VALUE_INVASIVE();
 8011504:	f7f8 f8c0 	bl	8009688 <INITIAL_CPAP_DAC_VALUE_INVASIVE>
		OLD.last_vent_type = NO_MODE;
 8011508:	4b3c      	ldr	r3, [pc, #240]	; (80115fc <Sensor_Offset_Task+0x28c>)
 801150a:	2202      	movs	r2, #2
 801150c:	779a      	strb	r2, [r3, #30]
		HFNC_O2_DAC_VALUE =0;
 801150e:	4b3c      	ldr	r3, [pc, #240]	; (8011600 <Sensor_Offset_Task+0x290>)
 8011510:	2200      	movs	r2, #0
 8011512:	801a      	strh	r2, [r3, #0]

}
if( (xSemaphoreTake(binarysem,4000)) == pdTRUE)
 8011514:	4b36      	ldr	r3, [pc, #216]	; (80115f0 <Sensor_Offset_Task+0x280>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 801151c:	4618      	mov	r0, r3
 801151e:	f009 f8df 	bl	801a6e0 <xQueueSemaphoreTake>
 8011522:	4603      	mov	r3, r0
 8011524:	2b01      	cmp	r3, #1
 8011526:	d115      	bne.n	8011554 <Sensor_Offset_Task+0x1e4>
{

			vTaskResume(Sensor_Read_Handler);
 8011528:	4b0d      	ldr	r3, [pc, #52]	; (8011560 <Sensor_Offset_Task+0x1f0>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	4618      	mov	r0, r3
 801152e:	f009 fe85 	bl	801b23c <vTaskResume>
			vTaskResume(Time_Trace_Handler);
 8011532:	4b0c      	ldr	r3, [pc, #48]	; (8011564 <Sensor_Offset_Task+0x1f4>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	4618      	mov	r0, r3
 8011538:	f009 fe80 	bl	801b23c <vTaskResume>
			vTaskResume(Bluetooth_Handler);
 801153c:	4b0a      	ldr	r3, [pc, #40]	; (8011568 <Sensor_Offset_Task+0x1f8>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4618      	mov	r0, r3
 8011542:	f009 fe7b 	bl	801b23c <vTaskResume>

xSemaphoreGive(binarysem);
 8011546:	4b2a      	ldr	r3, [pc, #168]	; (80115f0 <Sensor_Offset_Task+0x280>)
 8011548:	6818      	ldr	r0, [r3, #0]
 801154a:	2300      	movs	r3, #0
 801154c:	2200      	movs	r2, #0
 801154e:	2100      	movs	r1, #0
 8011550:	f008 fe4c 	bl	801a1ec <xQueueGenericSend>
}
		vTaskDelete(Sensor_Offset_Handler);
 8011554:	4b2b      	ldr	r3, [pc, #172]	; (8011604 <Sensor_Offset_Task+0x294>)
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4618      	mov	r0, r3
 801155a:	f009 fce7 	bl	801af2c <vTaskDelete>
		vTaskSuspend(Sensor_Read_Handler);
 801155e:	e70b      	b.n	8011378 <Sensor_Offset_Task+0x8>
 8011560:	20012970 	.word	0x20012970
 8011564:	200122d4 	.word	0x200122d4
 8011568:	200129c0 	.word	0x200129c0
 801156c:	20012848 	.word	0x20012848
 8011570:	200129ac 	.word	0x200129ac
 8011574:	200129cc 	.word	0x200129cc
 8011578:	20012968 	.word	0x20012968
 801157c:	200127ac 	.word	0x200127ac
 8011580:	20012874 	.word	0x20012874
 8011584:	200124ec 	.word	0x200124ec
 8011588:	20012c68 	.word	0x20012c68
 801158c:	20012248 	.word	0x20012248
 8011590:	20012cb4 	.word	0x20012cb4
 8011594:	20012638 	.word	0x20012638
 8011598:	20012824 	.word	0x20012824
 801159c:	20012c50 	.word	0x20012c50
 80115a0:	200128a8 	.word	0x200128a8
 80115a4:	200127a8 	.word	0x200127a8
 80115a8:	20012d38 	.word	0x20012d38
 80115ac:	20012810 	.word	0x20012810
 80115b0:	20012a84 	.word	0x20012a84
 80115b4:	20012364 	.word	0x20012364
 80115b8:	20012b04 	.word	0x20012b04
 80115bc:	20012500 	.word	0x20012500
 80115c0:	20012504 	.word	0x20012504
 80115c4:	20012b6c 	.word	0x20012b6c
 80115c8:	2001234c 	.word	0x2001234c
 80115cc:	20012774 	.word	0x20012774
 80115d0:	2001298c 	.word	0x2001298c
 80115d4:	20012214 	.word	0x20012214
 80115d8:	20012508 	.word	0x20012508
 80115dc:	20012220 	.word	0x20012220
 80115e0:	20012a36 	.word	0x20012a36
 80115e4:	20012a08 	.word	0x20012a08
 80115e8:	20012aa1 	.word	0x20012aa1
 80115ec:	20012640 	.word	0x20012640
 80115f0:	20012414 	.word	0x20012414
 80115f4:	200126bb 	.word	0x200126bb
 80115f8:	200129f8 	.word	0x200129f8
 80115fc:	20012c08 	.word	0x20012c08
 8011600:	2001263e 	.word	0x2001263e
 8011604:	200122d0 	.word	0x200122d0

08011608 <One_Time_Task>:
/**
 * @brief One_Time_Task.
 * It interchanges the phase of the breath cycle.
 */
void One_Time_Task(void *argument)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
	while (1)
	{

		switch (Next_Half_Breath_Cycle)
 8011610:	4b5b      	ldr	r3, [pc, #364]	; (8011780 <One_Time_Task+0x178>)
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	2b02      	cmp	r3, #2
 8011616:	f000 80af 	beq.w	8011778 <One_Time_Task+0x170>
 801161a:	2b02      	cmp	r3, #2
 801161c:	f300 80ae 	bgt.w	801177c <One_Time_Task+0x174>
 8011620:	2b00      	cmp	r3, #0
 8011622:	d002      	beq.n	801162a <One_Time_Task+0x22>
 8011624:	2b01      	cmp	r3, #1
 8011626:	d053      	beq.n	80116d0 <One_Time_Task+0xc8>
			break;

		case NoWaveFormState:
			break;
		default:
			break;
 8011628:	e0a8      	b.n	801177c <One_Time_Task+0x174>
			switch (Mode)
 801162a:	4b56      	ldr	r3, [pc, #344]	; (8011784 <One_Time_Task+0x17c>)
 801162c:	781b      	ldrb	r3, [r3, #0]
 801162e:	2b15      	cmp	r3, #21
 8011630:	d845      	bhi.n	80116be <One_Time_Task+0xb6>
 8011632:	a201      	add	r2, pc, #4	; (adr r2, 8011638 <One_Time_Task+0x30>)
 8011634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011638:	080116af 	.word	0x080116af
 801163c:	08011691 	.word	0x08011691
 8011640:	08011697 	.word	0x08011697
 8011644:	080116bf 	.word	0x080116bf
 8011648:	080116bf 	.word	0x080116bf
 801164c:	0801169d 	.word	0x0801169d
 8011650:	080116a3 	.word	0x080116a3
 8011654:	080116bf 	.word	0x080116bf
 8011658:	080116bf 	.word	0x080116bf
 801165c:	080116bf 	.word	0x080116bf
 8011660:	080116bf 	.word	0x080116bf
 8011664:	080116bf 	.word	0x080116bf
 8011668:	080116bf 	.word	0x080116bf
 801166c:	080116bf 	.word	0x080116bf
 8011670:	080116bf 	.word	0x080116bf
 8011674:	080116bf 	.word	0x080116bf
 8011678:	080116bf 	.word	0x080116bf
 801167c:	080116bf 	.word	0x080116bf
 8011680:	080116bf 	.word	0x080116bf
 8011684:	080116bf 	.word	0x080116bf
 8011688:	080116bf 	.word	0x080116bf
 801168c:	080116a9 	.word	0x080116a9
					PC_CMV_Inspiration_Time_Variables_Reset();
 8011690:	f7fc faac 	bl	800dbec <PC_CMV_Inspiration_Time_Variables_Reset>
				break;
 8011694:	e01b      	b.n	80116ce <One_Time_Task+0xc6>
					VC_CMV_Inspiration_Time_Variables_Reset();
 8011696:	f002 f931 	bl	80138fc <VC_CMV_Inspiration_Time_Variables_Reset>
				break;
 801169a:	e018      	b.n	80116ce <One_Time_Task+0xc6>
					PC_SIMV_Inspiration_Time_Variables_Reset();
 801169c:	f7fb fe8a 	bl	800d3b4 <PC_SIMV_Inspiration_Time_Variables_Reset>
				break;
 80116a0:	e015      	b.n	80116ce <One_Time_Task+0xc6>
					VC_SIMV_Inspiration_Time_Variables_Reset();
 80116a2:	f001 fc2b 	bl	8012efc <VC_SIMV_Inspiration_Time_Variables_Reset>
				break;
 80116a6:	e012      	b.n	80116ce <One_Time_Task+0xc6>
					BACKUP_PC_CMV_Inspiration_Time_Variables_Reset();
 80116a8:	f7f1 fcee 	bl	8003088 <BACKUP_PC_CMV_Inspiration_Time_Variables_Reset>
				break;
 80116ac:	e00f      	b.n	80116ce <One_Time_Task+0xc6>
					GRAPH_VALUES.volume = 0;
 80116ae:	4b36      	ldr	r3, [pc, #216]	; (8011788 <One_Time_Task+0x180>)
 80116b0:	f04f 0200 	mov.w	r2, #0
 80116b4:	609a      	str	r2, [r3, #8]
					vTaskDelay(20);
 80116b6:	2014      	movs	r0, #20
 80116b8:	f009 fcc8 	bl	801b04c <vTaskDelay>
				break;
 80116bc:	e007      	b.n	80116ce <One_Time_Task+0xc6>
					GRAPH_VALUES.volume = 0;
 80116be:	4b32      	ldr	r3, [pc, #200]	; (8011788 <One_Time_Task+0x180>)
 80116c0:	f04f 0200 	mov.w	r2, #0
 80116c4:	609a      	str	r2, [r3, #8]
					vTaskDelay(20);
 80116c6:	2014      	movs	r0, #20
 80116c8:	f009 fcc0 	bl	801b04c <vTaskDelay>
				break;
 80116cc:	bf00      	nop
		break;
 80116ce:	e056      	b.n	801177e <One_Time_Task+0x176>
			switch (Mode)
 80116d0:	4b2c      	ldr	r3, [pc, #176]	; (8011784 <One_Time_Task+0x17c>)
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	2b15      	cmp	r3, #21
 80116d6:	d846      	bhi.n	8011766 <One_Time_Task+0x15e>
 80116d8:	a201      	add	r2, pc, #4	; (adr r2, 80116e0 <One_Time_Task+0xd8>)
 80116da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116de:	bf00      	nop
 80116e0:	08011757 	.word	0x08011757
 80116e4:	08011739 	.word	0x08011739
 80116e8:	0801173f 	.word	0x0801173f
 80116ec:	08011767 	.word	0x08011767
 80116f0:	08011767 	.word	0x08011767
 80116f4:	08011745 	.word	0x08011745
 80116f8:	0801174b 	.word	0x0801174b
 80116fc:	08011767 	.word	0x08011767
 8011700:	08011767 	.word	0x08011767
 8011704:	08011767 	.word	0x08011767
 8011708:	08011767 	.word	0x08011767
 801170c:	08011767 	.word	0x08011767
 8011710:	08011767 	.word	0x08011767
 8011714:	08011767 	.word	0x08011767
 8011718:	08011767 	.word	0x08011767
 801171c:	08011767 	.word	0x08011767
 8011720:	08011767 	.word	0x08011767
 8011724:	08011767 	.word	0x08011767
 8011728:	08011767 	.word	0x08011767
 801172c:	08011767 	.word	0x08011767
 8011730:	08011767 	.word	0x08011767
 8011734:	08011751 	.word	0x08011751
					PC_CMV_Expiration_Time_Variables_Reset();
 8011738:	f7fc fb2c 	bl	800dd94 <PC_CMV_Expiration_Time_Variables_Reset>
					break;
 801173c:	e01b      	b.n	8011776 <One_Time_Task+0x16e>
					VC_CMV_Expiration_Time_Variables_Reset();
 801173e:	f002 f9dd 	bl	8013afc <VC_CMV_Expiration_Time_Variables_Reset>
				break;
 8011742:	e018      	b.n	8011776 <One_Time_Task+0x16e>
					PC_SIMV_Expiration_Time_Variables_Reset();
 8011744:	f7fb fe4a 	bl	800d3dc <PC_SIMV_Expiration_Time_Variables_Reset>
				break;
 8011748:	e015      	b.n	8011776 <One_Time_Task+0x16e>
					VC_SIMV_Expiration_Time_Variables_Reset();
 801174a:	f001 fbeb 	bl	8012f24 <VC_SIMV_Expiration_Time_Variables_Reset>
				break;
 801174e:	e012      	b.n	8011776 <One_Time_Task+0x16e>
					BACKUP_PC_CMV_Expiration_Time_Variables_Reset();
 8011750:	f7f1 fd90 	bl	8003274 <BACKUP_PC_CMV_Expiration_Time_Variables_Reset>
				break;
 8011754:	e00f      	b.n	8011776 <One_Time_Task+0x16e>
					GRAPH_VALUES.volume = 0;
 8011756:	4b0c      	ldr	r3, [pc, #48]	; (8011788 <One_Time_Task+0x180>)
 8011758:	f04f 0200 	mov.w	r2, #0
 801175c:	609a      	str	r2, [r3, #8]
					vTaskDelay(20);
 801175e:	2014      	movs	r0, #20
 8011760:	f009 fc74 	bl	801b04c <vTaskDelay>
				break;
 8011764:	e007      	b.n	8011776 <One_Time_Task+0x16e>
					GRAPH_VALUES.volume = 0;
 8011766:	4b08      	ldr	r3, [pc, #32]	; (8011788 <One_Time_Task+0x180>)
 8011768:	f04f 0200 	mov.w	r2, #0
 801176c:	609a      	str	r2, [r3, #8]
					vTaskDelay(20);
 801176e:	2014      	movs	r0, #20
 8011770:	f009 fc6c 	bl	801b04c <vTaskDelay>
					break;
 8011774:	bf00      	nop
			break;
 8011776:	e002      	b.n	801177e <One_Time_Task+0x176>
			break;
 8011778:	bf00      	nop
 801177a:	e749      	b.n	8011610 <One_Time_Task+0x8>
			break;
 801177c:	bf00      	nop
		switch (Next_Half_Breath_Cycle)
 801177e:	e747      	b.n	8011610 <One_Time_Task+0x8>
 8011780:	2001269e 	.word	0x2001269e
 8011784:	200126ba 	.word	0x200126ba
 8011788:	200125f8 	.word	0x200125f8

0801178c <Split_Service_Packets>:

extern SENSOR MPX7002,MPX5010DP,MPX5010;


void Split_Service_Packets(SERVICE_PACKET * Receive_Graph_Packet)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b082      	sub	sp, #8
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
	SERVICE.Service_Status               =  (Receive_Graph_Packet->SERVICE_STATUS);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	78da      	ldrb	r2, [r3, #3]
 8011798:	4b26      	ldr	r3, [pc, #152]	; (8011834 <Split_Service_Packets+0xa8>)
 801179a:	701a      	strb	r2, [r3, #0]
	SERVICE.Blower_Signal                =  (Receive_Graph_Packet->BLOWER_SIGNAL);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	889b      	ldrh	r3, [r3, #4]
 80117a0:	b29a      	uxth	r2, r3
 80117a2:	4b24      	ldr	r3, [pc, #144]	; (8011834 <Split_Service_Packets+0xa8>)
 80117a4:	805a      	strh	r2, [r3, #2]
	SERVICE.Proportional_Valve_Signal    =  (Receive_Graph_Packet->PROPORTIONAL_VALVE_SIGNAL);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	88db      	ldrh	r3, [r3, #6]
 80117aa:	b29a      	uxth	r2, r3
 80117ac:	4b21      	ldr	r3, [pc, #132]	; (8011834 <Split_Service_Packets+0xa8>)
 80117ae:	809a      	strh	r2, [r3, #4]
	SERVICE.Sensor_Offset                =  (Receive_Graph_Packet->SENSOR_OFFSET);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	7a1a      	ldrb	r2, [r3, #8]
 80117b4:	4b1f      	ldr	r3, [pc, #124]	; (8011834 <Split_Service_Packets+0xa8>)
 80117b6:	719a      	strb	r2, [r3, #6]
	SERVICE.Blower_Enable                =  (Receive_Graph_Packet->BLOWER_ENABLE);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	7a5a      	ldrb	r2, [r3, #9]
 80117bc:	4b1d      	ldr	r3, [pc, #116]	; (8011834 <Split_Service_Packets+0xa8>)
 80117be:	71da      	strb	r2, [r3, #7]
	SERVICE.Expiratory_Valve_Control	 =  (Receive_Graph_Packet->EXPIRATORY_VALVE_CONTROL);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	7a9a      	ldrb	r2, [r3, #10]
 80117c4:	4b1b      	ldr	r3, [pc, #108]	; (8011834 <Split_Service_Packets+0xa8>)
 80117c6:	721a      	strb	r2, [r3, #8]
	SERVICE.Nebulizer_Control       	 =  (Receive_Graph_Packet->NEBULIZER_CONTROL);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	7ada      	ldrb	r2, [r3, #11]
 80117cc:	4b19      	ldr	r3, [pc, #100]	; (8011834 <Split_Service_Packets+0xa8>)
 80117ce:	725a      	strb	r2, [r3, #9]

	if(SERVICE.Service_Status == 1)
 80117d0:	4b18      	ldr	r3, [pc, #96]	; (8011834 <Split_Service_Packets+0xa8>)
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	2b01      	cmp	r3, #1
 80117d6:	d108      	bne.n	80117ea <Split_Service_Packets+0x5e>
	{
		Device_Monitoring                    =  YES;
 80117d8:	4b17      	ldr	r3, [pc, #92]	; (8011838 <Split_Service_Packets+0xac>)
 80117da:	2201      	movs	r2, #1
 80117dc:	701a      	strb	r2, [r3, #0]
		vTaskResume(Service_Handler);
 80117de:	4b17      	ldr	r3, [pc, #92]	; (801183c <Split_Service_Packets+0xb0>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	4618      	mov	r0, r3
 80117e4:	f009 fd2a 	bl	801b23c <vTaskResume>
		Blower_Signal(0);
		Nebuliser_OFF();
		Parkar_valve_Signal(0);
		vTaskSuspend(Service_Handler);
	}
}
 80117e8:	e01f      	b.n	801182a <Split_Service_Packets+0x9e>
		Device_Monitoring                    =  NO;
 80117ea:	4b13      	ldr	r3, [pc, #76]	; (8011838 <Split_Service_Packets+0xac>)
 80117ec:	2200      	movs	r2, #0
 80117ee:	701a      	strb	r2, [r3, #0]
		ExpValve_OPEN();
 80117f0:	4b13      	ldr	r3, [pc, #76]	; (8011840 <Split_Service_Packets+0xb4>)
 80117f2:	695b      	ldr	r3, [r3, #20]
 80117f4:	4a12      	ldr	r2, [pc, #72]	; (8011840 <Split_Service_Packets+0xb4>)
 80117f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80117fa:	6153      	str	r3, [r2, #20]
		Blower_ON();
 80117fc:	4b11      	ldr	r3, [pc, #68]	; (8011844 <Split_Service_Packets+0xb8>)
 80117fe:	695b      	ldr	r3, [r3, #20]
 8011800:	4a10      	ldr	r2, [pc, #64]	; (8011844 <Split_Service_Packets+0xb8>)
 8011802:	f043 0320 	orr.w	r3, r3, #32
 8011806:	6153      	str	r3, [r2, #20]
		Blower_Signal(0);
 8011808:	4b0f      	ldr	r3, [pc, #60]	; (8011848 <Split_Service_Packets+0xbc>)
 801180a:	2200      	movs	r2, #0
 801180c:	609a      	str	r2, [r3, #8]
		Nebuliser_OFF();
 801180e:	4b0c      	ldr	r3, [pc, #48]	; (8011840 <Split_Service_Packets+0xb4>)
 8011810:	695b      	ldr	r3, [r3, #20]
 8011812:	4a0b      	ldr	r2, [pc, #44]	; (8011840 <Split_Service_Packets+0xb4>)
 8011814:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011818:	6153      	str	r3, [r2, #20]
		Parkar_valve_Signal(0);
 801181a:	4b0b      	ldr	r3, [pc, #44]	; (8011848 <Split_Service_Packets+0xbc>)
 801181c:	2200      	movs	r2, #0
 801181e:	615a      	str	r2, [r3, #20]
		vTaskSuspend(Service_Handler);
 8011820:	4b06      	ldr	r3, [pc, #24]	; (801183c <Split_Service_Packets+0xb0>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	4618      	mov	r0, r3
 8011826:	f009 fc45 	bl	801b0b4 <vTaskSuspend>
}
 801182a:	bf00      	nop
 801182c:	3708      	adds	r7, #8
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	20012ba4 	.word	0x20012ba4
 8011838:	20012640 	.word	0x20012640
 801183c:	20012214 	.word	0x20012214
 8011840:	40020400 	.word	0x40020400
 8011844:	40021000 	.word	0x40021000
 8011848:	40007400 	.word	0x40007400

0801184c <Send_Serviced_Packet>:

void Send_Serviced_Packet()
{
 801184c:	b580      	push	{r7, lr}
 801184e:	af00      	add	r7, sp, #0

	SEND_SERVICE_PACKET._header = Send_BlueTooth_Service_Header;
 8011850:	4b10      	ldr	r3, [pc, #64]	; (8011894 <Send_Serviced_Packet+0x48>)
 8011852:	2200      	movs	r2, #0
 8011854:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
 8011858:	701a      	strb	r2, [r3, #0]
 801185a:	2200      	movs	r2, #0
 801185c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8011860:	705a      	strb	r2, [r3, #1]
	SEND_SERVICE_PACKET._length = 7;
 8011862:	4b0c      	ldr	r3, [pc, #48]	; (8011894 <Send_Serviced_Packet+0x48>)
 8011864:	2207      	movs	r2, #7
 8011866:	709a      	strb	r2, [r3, #2]
	SEND_SERVICE_PACKET._CRC8   = chksum8_cal((unsigned char*)&SEND_SERVICE_PACKET.Sensor1_LSB,(SEND_SERVICE_PACKET._length-1));
 8011868:	4b0a      	ldr	r3, [pc, #40]	; (8011894 <Send_Serviced_Packet+0x48>)
 801186a:	789b      	ldrb	r3, [r3, #2]
 801186c:	3b01      	subs	r3, #1
 801186e:	4619      	mov	r1, r3
 8011870:	4809      	ldr	r0, [pc, #36]	; (8011898 <Send_Serviced_Packet+0x4c>)
 8011872:	f7f3 ffc9 	bl	8005808 <chksum8_cal>
 8011876:	4603      	mov	r3, r0
 8011878:	461a      	mov	r2, r3
 801187a:	4b06      	ldr	r3, [pc, #24]	; (8011894 <Send_Serviced_Packet+0x48>)
 801187c:	725a      	strb	r2, [r3, #9]
	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&SEND_SERVICE_PACKET,sizeof(SEND_SERVICE_PACKET));
 801187e:	220a      	movs	r2, #10
 8011880:	4904      	ldr	r1, [pc, #16]	; (8011894 <Send_Serviced_Packet+0x48>)
 8011882:	4806      	ldr	r0, [pc, #24]	; (801189c <Send_Serviced_Packet+0x50>)
 8011884:	f007 fb96 	bl	8018fb4 <HAL_UART_Transmit_IT>
	Send_Bluetooth_Data_Farme = SEND_GRAPH_FRAME;
 8011888:	4b05      	ldr	r3, [pc, #20]	; (80118a0 <Send_Serviced_Packet+0x54>)
 801188a:	2200      	movs	r2, #0
 801188c:	701a      	strb	r2, [r3, #0]

}
 801188e:	bf00      	nop
 8011890:	bd80      	pop	{r7, pc}
 8011892:	bf00      	nop
 8011894:	20012518 	.word	0x20012518
 8011898:	2001251b 	.word	0x2001251b
 801189c:	20012a40 	.word	0x20012a40
 80118a0:	2001269d 	.word	0x2001269d

080118a4 <SERVICE_Task>:

void SERVICE_Task(void *argument)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(SERVICE.Sensor_Offset == 1)
 80118ac:	4b5e      	ldr	r3, [pc, #376]	; (8011a28 <SERVICE_Task+0x184>)
 80118ae:	799b      	ldrb	r3, [r3, #6]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d171      	bne.n	8011998 <SERVICE_Task+0xf4>
		{
			SEND_SERVICE_PACKET.Sensor1_LSB           =  (MPX5010.current_reading);
 80118b4:	4b5d      	ldr	r3, [pc, #372]	; (8011a2c <SERVICE_Task+0x188>)
 80118b6:	899b      	ldrh	r3, [r3, #12]
 80118b8:	b2da      	uxtb	r2, r3
 80118ba:	4b5d      	ldr	r3, [pc, #372]	; (8011a30 <SERVICE_Task+0x18c>)
 80118bc:	70da      	strb	r2, [r3, #3]
			SEND_SERVICE_PACKET.Sensor1_MSB           =  (MPX5010.current_reading>>8);
 80118be:	4b5b      	ldr	r3, [pc, #364]	; (8011a2c <SERVICE_Task+0x188>)
 80118c0:	899b      	ldrh	r3, [r3, #12]
 80118c2:	0a1b      	lsrs	r3, r3, #8
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	b2da      	uxtb	r2, r3
 80118c8:	4b59      	ldr	r3, [pc, #356]	; (8011a30 <SERVICE_Task+0x18c>)
 80118ca:	711a      	strb	r2, [r3, #4]
			SEND_SERVICE_PACKET.Sensor2_LSB           =  (MPX7002.current_reading);
 80118cc:	4b59      	ldr	r3, [pc, #356]	; (8011a34 <SERVICE_Task+0x190>)
 80118ce:	899b      	ldrh	r3, [r3, #12]
 80118d0:	b2da      	uxtb	r2, r3
 80118d2:	4b57      	ldr	r3, [pc, #348]	; (8011a30 <SERVICE_Task+0x18c>)
 80118d4:	715a      	strb	r2, [r3, #5]
			SEND_SERVICE_PACKET.Sensor2_MSB           =  (MPX7002.current_reading>>8);
 80118d6:	4b57      	ldr	r3, [pc, #348]	; (8011a34 <SERVICE_Task+0x190>)
 80118d8:	899b      	ldrh	r3, [r3, #12]
 80118da:	0a1b      	lsrs	r3, r3, #8
 80118dc:	b29b      	uxth	r3, r3
 80118de:	b2da      	uxtb	r2, r3
 80118e0:	4b53      	ldr	r3, [pc, #332]	; (8011a30 <SERVICE_Task+0x18c>)
 80118e2:	719a      	strb	r2, [r3, #6]
			SEND_SERVICE_PACKET.Sensor3_LSB           =  (MPX5010DP.current_reading);
 80118e4:	4b54      	ldr	r3, [pc, #336]	; (8011a38 <SERVICE_Task+0x194>)
 80118e6:	899b      	ldrh	r3, [r3, #12]
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	4b51      	ldr	r3, [pc, #324]	; (8011a30 <SERVICE_Task+0x18c>)
 80118ec:	71da      	strb	r2, [r3, #7]
			SEND_SERVICE_PACKET.Sensor3_MSB           =  (MPX5010DP.current_reading>>8);
 80118ee:	4b52      	ldr	r3, [pc, #328]	; (8011a38 <SERVICE_Task+0x194>)
 80118f0:	899b      	ldrh	r3, [r3, #12]
 80118f2:	0a1b      	lsrs	r3, r3, #8
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	b2da      	uxtb	r2, r3
 80118f8:	4b4d      	ldr	r3, [pc, #308]	; (8011a30 <SERVICE_Task+0x18c>)
 80118fa:	721a      	strb	r2, [r3, #8]
			Send_Bluetooth_Data_Farme                 = SEND_SERVICE_FRAME;
 80118fc:	4b4f      	ldr	r3, [pc, #316]	; (8011a3c <SERVICE_Task+0x198>)
 80118fe:	2204      	movs	r2, #4
 8011900:	701a      	strb	r2, [r3, #0]
			vTaskDelay(2000);
 8011902:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8011906:	f009 fba1 	bl	801b04c <vTaskDelay>

			SEND_SERVICE_PACKET.Sensor1_LSB           =  (OOM202.offset_minimum);
 801190a:	4b4d      	ldr	r3, [pc, #308]	; (8011a40 <SERVICE_Task+0x19c>)
 801190c:	885b      	ldrh	r3, [r3, #2]
 801190e:	b2da      	uxtb	r2, r3
 8011910:	4b47      	ldr	r3, [pc, #284]	; (8011a30 <SERVICE_Task+0x18c>)
 8011912:	70da      	strb	r2, [r3, #3]
			SEND_SERVICE_PACKET.Sensor1_MSB           =  (OOM202.offset_minimum>>8);
 8011914:	4b4a      	ldr	r3, [pc, #296]	; (8011a40 <SERVICE_Task+0x19c>)
 8011916:	885b      	ldrh	r3, [r3, #2]
 8011918:	0a1b      	lsrs	r3, r3, #8
 801191a:	b29b      	uxth	r3, r3
 801191c:	b2da      	uxtb	r2, r3
 801191e:	4b44      	ldr	r3, [pc, #272]	; (8011a30 <SERVICE_Task+0x18c>)
 8011920:	711a      	strb	r2, [r3, #4]
			SEND_SERVICE_PACKET.Sensor2_LSB           =  (OOM202.offset_maximum);
 8011922:	4b47      	ldr	r3, [pc, #284]	; (8011a40 <SERVICE_Task+0x19c>)
 8011924:	889b      	ldrh	r3, [r3, #4]
 8011926:	b2da      	uxtb	r2, r3
 8011928:	4b41      	ldr	r3, [pc, #260]	; (8011a30 <SERVICE_Task+0x18c>)
 801192a:	715a      	strb	r2, [r3, #5]
			SEND_SERVICE_PACKET.Sensor2_MSB           =  (OOM202.offset_maximum >> 8);
 801192c:	4b44      	ldr	r3, [pc, #272]	; (8011a40 <SERVICE_Task+0x19c>)
 801192e:	889b      	ldrh	r3, [r3, #4]
 8011930:	0a1b      	lsrs	r3, r3, #8
 8011932:	b29b      	uxth	r3, r3
 8011934:	b2da      	uxtb	r2, r3
 8011936:	4b3e      	ldr	r3, [pc, #248]	; (8011a30 <SERVICE_Task+0x18c>)
 8011938:	719a      	strb	r2, [r3, #6]

			SEND_SERVICE_PACKET.Sensor3_LSB           =  0;
 801193a:	4b3d      	ldr	r3, [pc, #244]	; (8011a30 <SERVICE_Task+0x18c>)
 801193c:	2200      	movs	r2, #0
 801193e:	71da      	strb	r2, [r3, #7]

			SEND_SERVICE_PACKET.Sensor3_LSB           =  ( (Proximal_Sensor_ADS1115 <<0)  | SEND_SERVICE_PACKET.Sensor3_LSB);
 8011940:	4b3b      	ldr	r3, [pc, #236]	; (8011a30 <SERVICE_Task+0x18c>)
 8011942:	79da      	ldrb	r2, [r3, #7]
 8011944:	4b3f      	ldr	r3, [pc, #252]	; (8011a44 <SERVICE_Task+0x1a0>)
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	4313      	orrs	r3, r2
 801194a:	b2da      	uxtb	r2, r3
 801194c:	4b38      	ldr	r3, [pc, #224]	; (8011a30 <SERVICE_Task+0x18c>)
 801194e:	71da      	strb	r2, [r3, #7]
			SEND_SERVICE_PACKET.Sensor3_LSB           =  ( (_5010DP_Sensor_ADS1115  <<1)  | SEND_SERVICE_PACKET.Sensor3_LSB);
 8011950:	4b3d      	ldr	r3, [pc, #244]	; (8011a48 <SERVICE_Task+0x1a4>)
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	005b      	lsls	r3, r3, #1
 8011956:	b25a      	sxtb	r2, r3
 8011958:	4b35      	ldr	r3, [pc, #212]	; (8011a30 <SERVICE_Task+0x18c>)
 801195a:	79db      	ldrb	r3, [r3, #7]
 801195c:	b25b      	sxtb	r3, r3
 801195e:	4313      	orrs	r3, r2
 8011960:	b25b      	sxtb	r3, r3
 8011962:	b2da      	uxtb	r2, r3
 8011964:	4b32      	ldr	r3, [pc, #200]	; (8011a30 <SERVICE_Task+0x18c>)
 8011966:	71da      	strb	r2, [r3, #7]
			SEND_SERVICE_PACKET.Sensor3_LSB           =  ( (ENVITEC_Sensor_ADS1115  <<2)  | SEND_SERVICE_PACKET.Sensor3_LSB);
 8011968:	4b38      	ldr	r3, [pc, #224]	; (8011a4c <SERVICE_Task+0x1a8>)
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	b25a      	sxtb	r2, r3
 8011970:	4b2f      	ldr	r3, [pc, #188]	; (8011a30 <SERVICE_Task+0x18c>)
 8011972:	79db      	ldrb	r3, [r3, #7]
 8011974:	b25b      	sxtb	r3, r3
 8011976:	4313      	orrs	r3, r2
 8011978:	b25b      	sxtb	r3, r3
 801197a:	b2da      	uxtb	r2, r3
 801197c:	4b2c      	ldr	r3, [pc, #176]	; (8011a30 <SERVICE_Task+0x18c>)
 801197e:	71da      	strb	r2, [r3, #7]

			SEND_SERVICE_PACKET.Sensor3_MSB           =  0;
 8011980:	4b2b      	ldr	r3, [pc, #172]	; (8011a30 <SERVICE_Task+0x18c>)
 8011982:	2200      	movs	r2, #0
 8011984:	721a      	strb	r2, [r3, #8]

			Send_Bluetooth_Data_Farme                 = SEND_SERVICE_FRAME;
 8011986:	4b2d      	ldr	r3, [pc, #180]	; (8011a3c <SERVICE_Task+0x198>)
 8011988:	2204      	movs	r2, #4
 801198a:	701a      	strb	r2, [r3, #0]
			//Blower_Signal(0);
			//Parkar_valve_Signal(0);
			vTaskDelay(Hundred_Millisecond_Delay);
 801198c:	2064      	movs	r0, #100	; 0x64
 801198e:	f009 fb5d 	bl	801b04c <vTaskDelay>
			SERVICE.Sensor_Offset = 0;
 8011992:	4b25      	ldr	r3, [pc, #148]	; (8011a28 <SERVICE_Task+0x184>)
 8011994:	2200      	movs	r2, #0
 8011996:	719a      	strb	r2, [r3, #6]
		}

		if(SERVICE.Blower_Enable == 1)
 8011998:	4b23      	ldr	r3, [pc, #140]	; (8011a28 <SERVICE_Task+0x184>)
 801199a:	79db      	ldrb	r3, [r3, #7]
 801199c:	2b01      	cmp	r3, #1
 801199e:	d105      	bne.n	80119ac <SERVICE_Task+0x108>
		{
			Blower_ON();
 80119a0:	4b2b      	ldr	r3, [pc, #172]	; (8011a50 <SERVICE_Task+0x1ac>)
 80119a2:	695b      	ldr	r3, [r3, #20]
 80119a4:	4a2a      	ldr	r2, [pc, #168]	; (8011a50 <SERVICE_Task+0x1ac>)
 80119a6:	f043 0320 	orr.w	r3, r3, #32
 80119aa:	6153      	str	r3, [r2, #20]
		}
		if(SERVICE.Blower_Enable == 0)
 80119ac:	4b1e      	ldr	r3, [pc, #120]	; (8011a28 <SERVICE_Task+0x184>)
 80119ae:	79db      	ldrb	r3, [r3, #7]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d105      	bne.n	80119c0 <SERVICE_Task+0x11c>
		{
			Blower_OFF();
 80119b4:	4b26      	ldr	r3, [pc, #152]	; (8011a50 <SERVICE_Task+0x1ac>)
 80119b6:	695b      	ldr	r3, [r3, #20]
 80119b8:	4a25      	ldr	r2, [pc, #148]	; (8011a50 <SERVICE_Task+0x1ac>)
 80119ba:	f023 0320 	bic.w	r3, r3, #32
 80119be:	6153      	str	r3, [r2, #20]
		}
		if(SERVICE.Expiratory_Valve_Control == 1)
 80119c0:	4b19      	ldr	r3, [pc, #100]	; (8011a28 <SERVICE_Task+0x184>)
 80119c2:	7a1b      	ldrb	r3, [r3, #8]
 80119c4:	2b01      	cmp	r3, #1
 80119c6:	d105      	bne.n	80119d4 <SERVICE_Task+0x130>
		{
			ExpValve_CLOSE();
 80119c8:	4b22      	ldr	r3, [pc, #136]	; (8011a54 <SERVICE_Task+0x1b0>)
 80119ca:	695b      	ldr	r3, [r3, #20]
 80119cc:	4a21      	ldr	r2, [pc, #132]	; (8011a54 <SERVICE_Task+0x1b0>)
 80119ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80119d2:	6153      	str	r3, [r2, #20]
		}
		if(SERVICE.Expiratory_Valve_Control == 0)
 80119d4:	4b14      	ldr	r3, [pc, #80]	; (8011a28 <SERVICE_Task+0x184>)
 80119d6:	7a1b      	ldrb	r3, [r3, #8]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d105      	bne.n	80119e8 <SERVICE_Task+0x144>
		{
			ExpValve_OPEN();
 80119dc:	4b1d      	ldr	r3, [pc, #116]	; (8011a54 <SERVICE_Task+0x1b0>)
 80119de:	695b      	ldr	r3, [r3, #20]
 80119e0:	4a1c      	ldr	r2, [pc, #112]	; (8011a54 <SERVICE_Task+0x1b0>)
 80119e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80119e6:	6153      	str	r3, [r2, #20]
		}
		if(SERVICE.Nebulizer_Control  == 0)
 80119e8:	4b0f      	ldr	r3, [pc, #60]	; (8011a28 <SERVICE_Task+0x184>)
 80119ea:	7a5b      	ldrb	r3, [r3, #9]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d105      	bne.n	80119fc <SERVICE_Task+0x158>
		{
			Nebuliser_OFF();
 80119f0:	4b18      	ldr	r3, [pc, #96]	; (8011a54 <SERVICE_Task+0x1b0>)
 80119f2:	695b      	ldr	r3, [r3, #20]
 80119f4:	4a17      	ldr	r2, [pc, #92]	; (8011a54 <SERVICE_Task+0x1b0>)
 80119f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80119fa:	6153      	str	r3, [r2, #20]
		}
		if(SERVICE.Nebulizer_Control  == 1)
 80119fc:	4b0a      	ldr	r3, [pc, #40]	; (8011a28 <SERVICE_Task+0x184>)
 80119fe:	7a5b      	ldrb	r3, [r3, #9]
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d105      	bne.n	8011a10 <SERVICE_Task+0x16c>
		{
			Nebuliser_ON();
 8011a04:	4b13      	ldr	r3, [pc, #76]	; (8011a54 <SERVICE_Task+0x1b0>)
 8011a06:	695b      	ldr	r3, [r3, #20]
 8011a08:	4a12      	ldr	r2, [pc, #72]	; (8011a54 <SERVICE_Task+0x1b0>)
 8011a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a0e:	6153      	str	r3, [r2, #20]
		}

			Blower_Signal(SERVICE.Blower_Signal);
 8011a10:	4b05      	ldr	r3, [pc, #20]	; (8011a28 <SERVICE_Task+0x184>)
 8011a12:	885a      	ldrh	r2, [r3, #2]
 8011a14:	4b10      	ldr	r3, [pc, #64]	; (8011a58 <SERVICE_Task+0x1b4>)
 8011a16:	609a      	str	r2, [r3, #8]
			Parkar_valve_Signal(SERVICE.Proportional_Valve_Signal);
 8011a18:	4b03      	ldr	r3, [pc, #12]	; (8011a28 <SERVICE_Task+0x184>)
 8011a1a:	889a      	ldrh	r2, [r3, #4]
 8011a1c:	4b0e      	ldr	r3, [pc, #56]	; (8011a58 <SERVICE_Task+0x1b4>)
 8011a1e:	615a      	str	r2, [r3, #20]

		vTaskDelay(2);
 8011a20:	2002      	movs	r0, #2
 8011a22:	f009 fb13 	bl	801b04c <vTaskDelay>
		if(SERVICE.Sensor_Offset == 1)
 8011a26:	e741      	b.n	80118ac <SERVICE_Task+0x8>
 8011a28:	20012ba4 	.word	0x20012ba4
 8011a2c:	20012d84 	.word	0x20012d84
 8011a30:	20012518 	.word	0x20012518
 8011a34:	20012dc4 	.word	0x20012dc4
 8011a38:	20012da4 	.word	0x20012da4
 8011a3c:	2001269d 	.word	0x2001269d
 8011a40:	20012224 	.word	0x20012224
 8011a44:	20012cb0 	.word	0x20012cb0
 8011a48:	20012c98 	.word	0x20012c98
 8011a4c:	200126a1 	.word	0x200126a1
 8011a50:	40021000 	.word	0x40021000
 8011a54:	40020400 	.word	0x40020400
 8011a58:	40007400 	.word	0x40007400

08011a5c <Suction_Task>:
#include "SUCTION.h"

uint8_t initial_suction_valve_open = 1;

void Suction_Task(void *argument)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b082      	sub	sp, #8
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if(initial_suction_valve_open == 1)
 8011a64:	4b0f      	ldr	r3, [pc, #60]	; (8011aa4 <Suction_Task+0x48>)
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	2b01      	cmp	r3, #1
 8011a6a:	d10d      	bne.n	8011a88 <Suction_Task+0x2c>
		{
			ExpValve_OPEN();
 8011a6c:	4b0e      	ldr	r3, [pc, #56]	; (8011aa8 <Suction_Task+0x4c>)
 8011a6e:	695b      	ldr	r3, [r3, #20]
 8011a70:	4a0d      	ldr	r2, [pc, #52]	; (8011aa8 <Suction_Task+0x4c>)
 8011a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011a76:	6153      	str	r3, [r2, #20]
			initial_suction_valve_open = 0;
 8011a78:	4b0a      	ldr	r3, [pc, #40]	; (8011aa4 <Suction_Task+0x48>)
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	701a      	strb	r2, [r3, #0]
			vTaskDelay(1000);
 8011a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011a82:	f009 fae3 	bl	801b04c <vTaskDelay>
 8011a86:	e009      	b.n	8011a9c <Suction_Task+0x40>
		}
		else
		{
			ExpValve_CLOSE();
 8011a88:	4b07      	ldr	r3, [pc, #28]	; (8011aa8 <Suction_Task+0x4c>)
 8011a8a:	695b      	ldr	r3, [r3, #20]
 8011a8c:	4a06      	ldr	r2, [pc, #24]	; (8011aa8 <Suction_Task+0x4c>)
 8011a8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011a92:	6153      	str	r3, [r2, #20]
			Blower_Signal(1300);
 8011a94:	4b05      	ldr	r3, [pc, #20]	; (8011aac <Suction_Task+0x50>)
 8011a96:	f240 5214 	movw	r2, #1300	; 0x514
 8011a9a:	609a      	str	r2, [r3, #8]
		}
		vTaskDelay(100);
 8011a9c:	2064      	movs	r0, #100	; 0x64
 8011a9e:	f009 fad5 	bl	801b04c <vTaskDelay>
		if(initial_suction_valve_open == 1)
 8011aa2:	e7df      	b.n	8011a64 <Suction_Task+0x8>
 8011aa4:	20000054 	.word	0x20000054
 8011aa8:	40020400 	.word	0x40020400
 8011aac:	40007400 	.word	0x40007400

08011ab0 <SUCTION_Packet_Data>:
	}
}

void SUCTION_Packet_Data()
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	af00      	add	r7, sp, #0
	ExpValve_OPEN();
 8011ab4:	4b3d      	ldr	r3, [pc, #244]	; (8011bac <SUCTION_Packet_Data+0xfc>)
 8011ab6:	695b      	ldr	r3, [r3, #20]
 8011ab8:	4a3c      	ldr	r2, [pc, #240]	; (8011bac <SUCTION_Packet_Data+0xfc>)
 8011aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011abe:	6153      	str	r3, [r2, #20]
	vTaskSuspend(Vc_Cmv_Handler);
 8011ac0:	4b3b      	ldr	r3, [pc, #236]	; (8011bb0 <SUCTION_Packet_Data+0x100>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f009 faf5 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Volume_Control_Task_Handler);
 8011aca:	4b3a      	ldr	r3, [pc, #232]	; (8011bb4 <SUCTION_Packet_Data+0x104>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f009 faf0 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(One_Time_Handler);
 8011ad4:	4b38      	ldr	r3, [pc, #224]	; (8011bb8 <SUCTION_Packet_Data+0x108>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f009 faeb 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Cmv_Handler);
 8011ade:	4b37      	ldr	r3, [pc, #220]	; (8011bbc <SUCTION_Packet_Data+0x10c>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f009 fae6 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PIP_Control_Task_Handler);
 8011ae8:	4b35      	ldr	r3, [pc, #212]	; (8011bc0 <SUCTION_Packet_Data+0x110>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	4618      	mov	r0, r3
 8011aee:	f009 fae1 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_OFF_Handler);
 8011af2:	4b34      	ldr	r3, [pc, #208]	; (8011bc4 <SUCTION_Packet_Data+0x114>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f009 fadc 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Pc_Simv_Assist_ON_Handler);
 8011afc:	4b32      	ldr	r3, [pc, #200]	; (8011bc8 <SUCTION_Packet_Data+0x118>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	4618      	mov	r0, r3
 8011b02:	f009 fad7 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_ON_Handler);
 8011b06:	4b31      	ldr	r3, [pc, #196]	; (8011bcc <SUCTION_Packet_Data+0x11c>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f009 fad2 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Vc_Simv_Assist_OFF_Handler);
 8011b10:	4b2f      	ldr	r3, [pc, #188]	; (8011bd0 <SUCTION_Packet_Data+0x120>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	4618      	mov	r0, r3
 8011b16:	f009 facd 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BACKUP_PC_Handler);
 8011b1a:	4b2e      	ldr	r3, [pc, #184]	; (8011bd4 <SUCTION_Packet_Data+0x124>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f009 fac8 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_Handler);
 8011b24:	4b2c      	ldr	r3, [pc, #176]	; (8011bd8 <SUCTION_Packet_Data+0x128>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f009 fac3 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(PSV_PID_Handler);
 8011b2e:	4b2b      	ldr	r3, [pc, #172]	; (8011bdc <SUCTION_Packet_Data+0x12c>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	4618      	mov	r0, r3
 8011b34:	f009 fabe 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(CPAP_Handler);
 8011b38:	4b29      	ldr	r3, [pc, #164]	; (8011be0 <SUCTION_Packet_Data+0x130>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f009 fab9 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_Handler);
 8011b42:	4b28      	ldr	r3, [pc, #160]	; (8011be4 <SUCTION_Packet_Data+0x134>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	4618      	mov	r0, r3
 8011b48:	f009 fab4 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(BIPAP_PID_Handler);
 8011b4c:	4b26      	ldr	r3, [pc, #152]	; (8011be8 <SUCTION_Packet_Data+0x138>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4618      	mov	r0, r3
 8011b52:	f009 faaf 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_Handler);
 8011b56:	4b25      	ldr	r3, [pc, #148]	; (8011bec <SUCTION_Packet_Data+0x13c>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f009 faaa 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(APRV_ONE_TIME_Handler);
 8011b60:	4b23      	ldr	r3, [pc, #140]	; (8011bf0 <SUCTION_Packet_Data+0x140>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f009 faa5 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(Nebuliser_Handler);
 8011b6a:	4b22      	ldr	r3, [pc, #136]	; (8011bf4 <SUCTION_Packet_Data+0x144>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f009 faa0 	bl	801b0b4 <vTaskSuspend>
	vTaskSuspend(HFNC_Handler);
 8011b74:	4b20      	ldr	r3, [pc, #128]	; (8011bf8 <SUCTION_Packet_Data+0x148>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f009 fa9b 	bl	801b0b4 <vTaskSuspend>
	Blower_Signal( 0);
 8011b7e:	4b1f      	ldr	r3, [pc, #124]	; (8011bfc <SUCTION_Packet_Data+0x14c>)
 8011b80:	2200      	movs	r2, #0
 8011b82:	609a      	str	r2, [r3, #8]
	Parkar_valve_Signal(0);
 8011b84:	4b1d      	ldr	r3, [pc, #116]	; (8011bfc <SUCTION_Packet_Data+0x14c>)
 8011b86:	2200      	movs	r2, #0
 8011b88:	615a      	str	r2, [r3, #20]

	GRAPH_VALUES.volume     = RESET;
 8011b8a:	4b1d      	ldr	r3, [pc, #116]	; (8011c00 <SUCTION_Packet_Data+0x150>)
 8011b8c:	f04f 0200 	mov.w	r2, #0
 8011b90:	609a      	str	r2, [r3, #8]
	Volume_max              = RESET;
 8011b92:	4b1c      	ldr	r3, [pc, #112]	; (8011c04 <SUCTION_Packet_Data+0x154>)
 8011b94:	2200      	movs	r2, #0
 8011b96:	601a      	str	r2, [r3, #0]

	initial_suction_valve_open = 1;
 8011b98:	4b1b      	ldr	r3, [pc, #108]	; (8011c08 <SUCTION_Packet_Data+0x158>)
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	701a      	strb	r2, [r3, #0]
	vTaskResume(Suction_Handler);
 8011b9e:	4b1b      	ldr	r3, [pc, #108]	; (8011c0c <SUCTION_Packet_Data+0x15c>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f009 fb4a 	bl	801b23c <vTaskResume>
}
 8011ba8:	bf00      	nop
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	40020400 	.word	0x40020400
 8011bb0:	20012c68 	.word	0x20012c68
 8011bb4:	20012248 	.word	0x20012248
 8011bb8:	200129cc 	.word	0x200129cc
 8011bbc:	20012874 	.word	0x20012874
 8011bc0:	200124ec 	.word	0x200124ec
 8011bc4:	20012638 	.word	0x20012638
 8011bc8:	20012cb4 	.word	0x20012cb4
 8011bcc:	20012824 	.word	0x20012824
 8011bd0:	20012c50 	.word	0x20012c50
 8011bd4:	20012500 	.word	0x20012500
 8011bd8:	200128a8 	.word	0x200128a8
 8011bdc:	200127a8 	.word	0x200127a8
 8011be0:	20012d38 	.word	0x20012d38
 8011be4:	20012364 	.word	0x20012364
 8011be8:	20012b04 	.word	0x20012b04
 8011bec:	20012810 	.word	0x20012810
 8011bf0:	20012a84 	.word	0x20012a84
 8011bf4:	20012504 	.word	0x20012504
 8011bf8:	2001234c 	.word	0x2001234c
 8011bfc:	40007400 	.word	0x40007400
 8011c00:	200125f8 	.word	0x200125f8
 8011c04:	20012c70 	.word	0x20012c70
 8011c08:	20000054 	.word	0x20000054
 8011c0c:	20012b6c 	.word	0x20012b6c

08011c10 <Sampled_Parameter_List_1_Transmit>:
extern uint8_t Toggle;

uint8_t O2_Value;

void Sampled_Parameter_List_1_Transmit()
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	af00      	add	r7, sp, #0
	if(Current_Backup_Mode  == No_Backup_Mode)
 8011c14:	4b2b      	ldr	r3, [pc, #172]	; (8011cc4 <Sampled_Parameter_List_1_Transmit+0xb4>)
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d104      	bne.n	8011c26 <Sampled_Parameter_List_1_Transmit+0x16>
	{
		   O2_Value  = (0 <<7) | Oxygen_Parameter.Achieved_Oxygen;
 8011c1c:	4b2a      	ldr	r3, [pc, #168]	; (8011cc8 <Sampled_Parameter_List_1_Transmit+0xb8>)
 8011c1e:	7a1a      	ldrb	r2, [r3, #8]
 8011c20:	4b2a      	ldr	r3, [pc, #168]	; (8011ccc <Sampled_Parameter_List_1_Transmit+0xbc>)
 8011c22:	701a      	strb	r2, [r3, #0]
 8011c24:	e00f      	b.n	8011c46 <Sampled_Parameter_List_1_Transmit+0x36>
	}
	else
	{
		if(	Apnea_Mode == OFF)
 8011c26:	4b2a      	ldr	r3, [pc, #168]	; (8011cd0 <Sampled_Parameter_List_1_Transmit+0xc0>)
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d107      	bne.n	8011c3e <Sampled_Parameter_List_1_Transmit+0x2e>
		{
			O2_Value  = (1 <<7) | Oxygen_Parameter.Achieved_Oxygen;
 8011c2e:	4b26      	ldr	r3, [pc, #152]	; (8011cc8 <Sampled_Parameter_List_1_Transmit+0xb8>)
 8011c30:	7a1b      	ldrb	r3, [r3, #8]
 8011c32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c36:	b2da      	uxtb	r2, r3
 8011c38:	4b24      	ldr	r3, [pc, #144]	; (8011ccc <Sampled_Parameter_List_1_Transmit+0xbc>)
 8011c3a:	701a      	strb	r2, [r3, #0]
 8011c3c:	e003      	b.n	8011c46 <Sampled_Parameter_List_1_Transmit+0x36>
		}
		else
		{
			O2_Value  = (0 <<7) | Oxygen_Parameter.Achieved_Oxygen;
 8011c3e:	4b22      	ldr	r3, [pc, #136]	; (8011cc8 <Sampled_Parameter_List_1_Transmit+0xb8>)
 8011c40:	7a1a      	ldrb	r2, [r3, #8]
 8011c42:	4b22      	ldr	r3, [pc, #136]	; (8011ccc <Sampled_Parameter_List_1_Transmit+0xbc>)
 8011c44:	701a      	strb	r2, [r3, #0]
		}
	}



	Sampled_Parameter_1_Packet._header          = Send_BlueTooth_Sampled_Parameter_Header ;
 8011c46:	4b23      	ldr	r3, [pc, #140]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011c48:	2200      	movs	r2, #0
 8011c4a:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
 8011c4e:	701a      	strb	r2, [r3, #0]
 8011c50:	2200      	movs	r2, #0
 8011c52:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8011c56:	705a      	strb	r2, [r3, #1]
	Sampled_Parameter_1_Packet._length          = (sizeof(Sampled_Parameter_1_Packet)-3)  ;
 8011c58:	4b1e      	ldr	r3, [pc, #120]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011c5a:	2207      	movs	r2, #7
 8011c5c:	709a      	strb	r2, [r3, #2]
	Sampled_Parameter_1_Packet._PIP_Val         = Battery_Voltage ;
 8011c5e:	4b1e      	ldr	r3, [pc, #120]	; (8011cd8 <Sampled_Parameter_List_1_Transmit+0xc8>)
 8011c60:	781a      	ldrb	r2, [r3, #0]
 8011c62:	4b1c      	ldr	r3, [pc, #112]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011c64:	70da      	strb	r2, [r3, #3]
	Sampled_Parameter_1_Packet._PEEP_Val        = Toggle;
 8011c66:	4b1d      	ldr	r3, [pc, #116]	; (8011cdc <Sampled_Parameter_List_1_Transmit+0xcc>)
 8011c68:	781a      	ldrb	r2, [r3, #0]
 8011c6a:	4b1a      	ldr	r3, [pc, #104]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011c6c:	711a      	strb	r2, [r3, #4]
	Sampled_Parameter_1_Packet._VTI_Val_1       = Sampled_Parameter_2.Total_Tidal_Volume_Int ;
 8011c6e:	4b1c      	ldr	r3, [pc, #112]	; (8011ce0 <Sampled_Parameter_List_1_Transmit+0xd0>)
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	b2da      	uxtb	r2, r3
 8011c74:	4b17      	ldr	r3, [pc, #92]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011c76:	715a      	strb	r2, [r3, #5]
	Sampled_Parameter_1_Packet._VTI_Val_2       = Sampled_Parameter_2.Total_Tidal_Volume_Decimal;
 8011c78:	4b19      	ldr	r3, [pc, #100]	; (8011ce0 <Sampled_Parameter_List_1_Transmit+0xd0>)
 8011c7a:	68db      	ldr	r3, [r3, #12]
 8011c7c:	b2da      	uxtb	r2, r3
 8011c7e:	4b15      	ldr	r3, [pc, #84]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011c80:	719a      	strb	r2, [r3, #6]
	Sampled_Parameter_1_Packet._FIO2            = O2_Value;
 8011c82:	4b12      	ldr	r3, [pc, #72]	; (8011ccc <Sampled_Parameter_List_1_Transmit+0xbc>)
 8011c84:	781a      	ldrb	r2, [r3, #0]
 8011c86:	4b13      	ldr	r3, [pc, #76]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011c88:	71da      	strb	r2, [r3, #7]
	if(Running_Mode != Hfnc)
 8011c8a:	4b16      	ldr	r3, [pc, #88]	; (8011ce4 <Sampled_Parameter_List_1_Transmit+0xd4>)
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	2b0d      	cmp	r3, #13
 8011c90:	d004      	beq.n	8011c9c <Sampled_Parameter_List_1_Transmit+0x8c>
		Sampled_Parameter_1_Packet._RR          = Breath_In_Minite ;
 8011c92:	4b15      	ldr	r3, [pc, #84]	; (8011ce8 <Sampled_Parameter_List_1_Transmit+0xd8>)
 8011c94:	781a      	ldrb	r2, [r3, #0]
 8011c96:	4b0f      	ldr	r3, [pc, #60]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011c98:	721a      	strb	r2, [r3, #8]
 8011c9a:	e003      	b.n	8011ca4 <Sampled_Parameter_List_1_Transmit+0x94>
	else
		Sampled_Parameter_1_Packet._RR          = FLOW_AVG;
 8011c9c:	4b13      	ldr	r3, [pc, #76]	; (8011cec <Sampled_Parameter_List_1_Transmit+0xdc>)
 8011c9e:	781a      	ldrb	r2, [r3, #0]
 8011ca0:	4b0c      	ldr	r3, [pc, #48]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011ca2:	721a      	strb	r2, [r3, #8]
	Sampled_Parameter_1_Packet._CRC8            = chksum8(&Sampled_Parameter_1_Packet._PIP_Val,(6));
 8011ca4:	2106      	movs	r1, #6
 8011ca6:	4812      	ldr	r0, [pc, #72]	; (8011cf0 <Sampled_Parameter_List_1_Transmit+0xe0>)
 8011ca8:	f7f3 fbf0 	bl	800548c <chksum8>
 8011cac:	4603      	mov	r3, r0
 8011cae:	461a      	mov	r2, r3
 8011cb0:	4b08      	ldr	r3, [pc, #32]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011cb2:	725a      	strb	r2, [r3, #9]

	 HAL_UART_Transmit_IT(&huart6,(uint8_t*)&Sampled_Parameter_1_Packet,sizeof(Sampled_Parameter_1_Packet));
 8011cb4:	220a      	movs	r2, #10
 8011cb6:	4907      	ldr	r1, [pc, #28]	; (8011cd4 <Sampled_Parameter_List_1_Transmit+0xc4>)
 8011cb8:	480e      	ldr	r0, [pc, #56]	; (8011cf4 <Sampled_Parameter_List_1_Transmit+0xe4>)
 8011cba:	f007 f97b 	bl	8018fb4 <HAL_UART_Transmit_IT>




}
 8011cbe:	bf00      	nop
 8011cc0:	bd80      	pop	{r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	20012846 	.word	0x20012846
 8011cc8:	200129d4 	.word	0x200129d4
 8011ccc:	20012df2 	.word	0x20012df2
 8011cd0:	20012aa1 	.word	0x20012aa1
 8011cd4:	20012894 	.word	0x20012894
 8011cd8:	20012621 	.word	0x20012621
 8011cdc:	2000009f 	.word	0x2000009f
 8011ce0:	20012ac8 	.word	0x20012ac8
 8011ce4:	20012b68 	.word	0x20012b68
 8011ce8:	20012890 	.word	0x20012890
 8011cec:	20012974 	.word	0x20012974
 8011cf0:	20012897 	.word	0x20012897
 8011cf4:	20012a40 	.word	0x20012a40

08011cf8 <Sampled_Parameter_Func_1>:



}
void Sampled_Parameter_Func_1()
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	af00      	add	r7, sp, #0
	Average_PIP_Func();
 8011cfc:	f000 f816 	bl	8011d2c <Average_PIP_Func>
	Average_PEEP_Func();
 8011d00:	f000 f82e 	bl	8011d60 <Average_PEEP_Func>
	Volume_Max_Inspiration_Func();
 8011d04:	f000 f83c 	bl	8011d80 <Volume_Max_Inspiration_Func>
	Volume_Max_Expiration_Func();
 8011d08:	f000 f84e 	bl	8011da8 <Volume_Max_Expiration_Func>
	Peak_Flow_Inspiration_Func();
 8011d0c:	f000 f866 	bl	8011ddc <Peak_Flow_Inspiration_Func>
	Peak_Flow_Expiration_Func();
 8011d10:	f000 f874 	bl	8011dfc <Peak_Flow_Expiration_Func>
	Max_Flow = 0;
 8011d14:	4b03      	ldr	r3, [pc, #12]	; (8011d24 <Sampled_Parameter_Func_1+0x2c>)
 8011d16:	2200      	movs	r2, #0
 8011d18:	601a      	str	r2, [r3, #0]
	Min_Flow = 0;
 8011d1a:	4b03      	ldr	r3, [pc, #12]	; (8011d28 <Sampled_Parameter_Func_1+0x30>)
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	601a      	str	r2, [r3, #0]
}
 8011d20:	bf00      	nop
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	200129a4 	.word	0x200129a4
 8011d28:	200129c8 	.word	0x200129c8

08011d2c <Average_PIP_Func>:


void Average_PIP_Func()
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	af00      	add	r7, sp, #0
	if(Common_Mode_Parameter._RESPIRATORY_RATE_Val > 30 )
 8011d30:	4b08      	ldr	r3, [pc, #32]	; (8011d54 <Average_PIP_Func+0x28>)
 8011d32:	789b      	ldrb	r3, [r3, #2]
 8011d34:	2b1e      	cmp	r3, #30
 8011d36:	d904      	bls.n	8011d42 <Average_PIP_Func+0x16>
	{
		Sampled_Parameter_1.Average_PIP  = PIP_Average_Parameter.Maximum_PIP_Acheived;
 8011d38:	4b07      	ldr	r3, [pc, #28]	; (8011d58 <Average_PIP_Func+0x2c>)
 8011d3a:	781a      	ldrb	r2, [r3, #0]
 8011d3c:	4b07      	ldr	r3, [pc, #28]	; (8011d5c <Average_PIP_Func+0x30>)
 8011d3e:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Sampled_Parameter_1.Average_PIP  = PIP_Average_Parameter.PIP_AVG_VAL ;
	}
}
 8011d40:	e003      	b.n	8011d4a <Average_PIP_Func+0x1e>
		Sampled_Parameter_1.Average_PIP  = PIP_Average_Parameter.PIP_AVG_VAL ;
 8011d42:	4b05      	ldr	r3, [pc, #20]	; (8011d58 <Average_PIP_Func+0x2c>)
 8011d44:	7b1a      	ldrb	r2, [r3, #12]
 8011d46:	4b05      	ldr	r3, [pc, #20]	; (8011d5c <Average_PIP_Func+0x30>)
 8011d48:	701a      	strb	r2, [r3, #0]
}
 8011d4a:	bf00      	nop
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr
 8011d54:	200124f0 	.word	0x200124f0
 8011d58:	200124bc 	.word	0x200124bc
 8011d5c:	20012c54 	.word	0x20012c54

08011d60 <Average_PEEP_Func>:


void Average_PEEP_Func()
{
 8011d60:	b480      	push	{r7}
 8011d62:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.Average_PEEP = PEEP_Maintain_Parameter.PEEP_AVG_VAL;
 8011d64:	4b04      	ldr	r3, [pc, #16]	; (8011d78 <Average_PEEP_Func+0x18>)
 8011d66:	7c1a      	ldrb	r2, [r3, #16]
 8011d68:	4b04      	ldr	r3, [pc, #16]	; (8011d7c <Average_PEEP_Func+0x1c>)
 8011d6a:	705a      	strb	r2, [r3, #1]
}
 8011d6c:	bf00      	nop
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop
 8011d78:	20012c74 	.word	0x20012c74
 8011d7c:	20012c54 	.word	0x20012c54

08011d80 <Volume_Max_Inspiration_Func>:


void Volume_Max_Inspiration_Func()
{
 8011d80:	b480      	push	{r7}
 8011d82:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.Volume_Max_Insp = Volume_max;
 8011d84:	4b06      	ldr	r3, [pc, #24]	; (8011da0 <Volume_Max_Inspiration_Func+0x20>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	ee07 3a90 	vmov	s15, r3
 8011d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d90:	4b04      	ldr	r3, [pc, #16]	; (8011da4 <Volume_Max_Inspiration_Func+0x24>)
 8011d92:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8011d96:	bf00      	nop
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr
 8011da0:	20012c70 	.word	0x20012c70
 8011da4:	20012c54 	.word	0x20012c54

08011da8 <Volume_Max_Expiration_Func>:

void Volume_Max_Expiration_Func()
{
 8011da8:	b480      	push	{r7}
 8011daa:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.Volume_Max_Exp= (Sampled_Parameter_1.Volume_Max_Insp -( V_Min));
 8011dac:	4b09      	ldr	r3, [pc, #36]	; (8011dd4 <Volume_Max_Expiration_Func+0x2c>)
 8011dae:	ed93 7a01 	vldr	s14, [r3, #4]
 8011db2:	4b09      	ldr	r3, [pc, #36]	; (8011dd8 <Volume_Max_Expiration_Func+0x30>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	ee07 3a90 	vmov	s15, r3
 8011dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011dc2:	4b04      	ldr	r3, [pc, #16]	; (8011dd4 <Volume_Max_Expiration_Func+0x2c>)
 8011dc4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8011dc8:	bf00      	nop
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr
 8011dd2:	bf00      	nop
 8011dd4:	20012c54 	.word	0x20012c54
 8011dd8:	200000b4 	.word	0x200000b4

08011ddc <Peak_Flow_Inspiration_Func>:


void Peak_Flow_Inspiration_Func()
{
 8011ddc:	b480      	push	{r7}
 8011dde:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.MAX_Flow  = Max_Flow;
 8011de0:	4b04      	ldr	r3, [pc, #16]	; (8011df4 <Peak_Flow_Inspiration_Func+0x18>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	b2da      	uxtb	r2, r3
 8011de6:	4b04      	ldr	r3, [pc, #16]	; (8011df8 <Peak_Flow_Inspiration_Func+0x1c>)
 8011de8:	731a      	strb	r2, [r3, #12]
}
 8011dea:	bf00      	nop
 8011dec:	46bd      	mov	sp, r7
 8011dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df2:	4770      	bx	lr
 8011df4:	200129a4 	.word	0x200129a4
 8011df8:	20012c54 	.word	0x20012c54

08011dfc <Peak_Flow_Expiration_Func>:
void Peak_Flow_Expiration_Func()
{
 8011dfc:	b480      	push	{r7}
 8011dfe:	af00      	add	r7, sp, #0
	Sampled_Parameter_1.MIN_Flow  = (Min_Flow) * (-1);
 8011e00:	4b05      	ldr	r3, [pc, #20]	; (8011e18 <Peak_Flow_Expiration_Func+0x1c>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	b2db      	uxtb	r3, r3
 8011e06:	425b      	negs	r3, r3
 8011e08:	b2da      	uxtb	r2, r3
 8011e0a:	4b04      	ldr	r3, [pc, #16]	; (8011e1c <Peak_Flow_Expiration_Func+0x20>)
 8011e0c:	735a      	strb	r2, [r3, #13]
}
 8011e0e:	bf00      	nop
 8011e10:	46bd      	mov	sp, r7
 8011e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e16:	4770      	bx	lr
 8011e18:	200129c8 	.word	0x200129c8
 8011e1c:	20012c54 	.word	0x20012c54

08011e20 <Sampled_Parameter_Func_2>:
}



void Sampled_Parameter_Func_2()
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	af00      	add	r7, sp, #0
	Minite_Volume_Func();
 8011e24:	f000 f808 	bl	8011e38 <Minite_Volume_Func>
	Acheived_RR_Func();
 8011e28:	f000 f868 	bl	8011efc <Acheived_RR_Func>
	Inspiration_Time_Func();
 8011e2c:	f000 f876 	bl	8011f1c <Inspiration_Time_Func>
	Expiration_Time_Func();
 8011e30:	f000 f8c6 	bl	8011fc0 <Expiration_Time_Func>
}
 8011e34:	bf00      	nop
 8011e36:	bd80      	pop	{r7, pc}

08011e38 <Minite_Volume_Func>:


void Minite_Volume_Func()
{
 8011e38:	b480      	push	{r7}
 8011e3a:	af00      	add	r7, sp, #0
	if(Breath == 0)
 8011e3c:	4b2a      	ldr	r3, [pc, #168]	; (8011ee8 <Minite_Volume_Func+0xb0>)
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d13e      	bne.n	8011ec2 <Minite_Volume_Func+0x8a>
	{
		Sampled_Parameter_2.Total_Tidal_Volume_float     = Sampled_Parameter_2.Minite_Volume / 1000;
 8011e44:	4b29      	ldr	r3, [pc, #164]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011e46:	ed93 7a00 	vldr	s14, [r3]
 8011e4a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8011ef0 <Minite_Volume_Func+0xb8>
 8011e4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011e52:	4b26      	ldr	r3, [pc, #152]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011e54:	edc3 7a04 	vstr	s15, [r3, #16]

		Sampled_Parameter_2.Total_Tidal_Volume_Int       = Sampled_Parameter_2.Total_Tidal_Volume_float;
 8011e58:	4b24      	ldr	r3, [pc, #144]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011e5a:	edd3 7a04 	vldr	s15, [r3, #16]
 8011e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011e62:	ee17 2a90 	vmov	r2, s15
 8011e66:	4b21      	ldr	r3, [pc, #132]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011e68:	605a      	str	r2, [r3, #4]

		Sampled_Parameter_2.Total_Tidal_Volume_Decimal_1 = Sampled_Parameter_2.Total_Tidal_Volume_float - Sampled_Parameter_2.Total_Tidal_Volume_Int;
 8011e6a:	4b20      	ldr	r3, [pc, #128]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011e6c:	ed93 7a04 	vldr	s14, [r3, #16]
 8011e70:	4b1e      	ldr	r3, [pc, #120]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	ee07 3a90 	vmov	s15, r3
 8011e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e80:	4b1a      	ldr	r3, [pc, #104]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011e82:	edc3 7a02 	vstr	s15, [r3, #8]

		Sampled_Parameter_2.Total_Tidal_Volume_Decimal_1 = Sampled_Parameter_2.Total_Tidal_Volume_Decimal_1 * 1000;
 8011e86:	4b19      	ldr	r3, [pc, #100]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011e88:	edd3 7a02 	vldr	s15, [r3, #8]
 8011e8c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8011ef0 <Minite_Volume_Func+0xb8>
 8011e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e94:	4b15      	ldr	r3, [pc, #84]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011e96:	edc3 7a02 	vstr	s15, [r3, #8]

		Sampled_Parameter_2.Total_Tidal_Volume_Decimal   = (int)Sampled_Parameter_2.Total_Tidal_Volume_Decimal_1 / 10;
 8011e9a:	4b14      	ldr	r3, [pc, #80]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011e9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011ea4:	ee17 1a90 	vmov	r1, s15
 8011ea8:	4b12      	ldr	r3, [pc, #72]	; (8011ef4 <Minite_Volume_Func+0xbc>)
 8011eaa:	fb83 2301 	smull	r2, r3, r3, r1
 8011eae:	109a      	asrs	r2, r3, #2
 8011eb0:	17cb      	asrs	r3, r1, #31
 8011eb2:	1ad3      	subs	r3, r2, r3
 8011eb4:	4a0d      	ldr	r2, [pc, #52]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011eb6:	60d3      	str	r3, [r2, #12]

		Sampled_Parameter_2.Minite_Volume=0;
 8011eb8:	4b0c      	ldr	r3, [pc, #48]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011eba:	f04f 0200 	mov.w	r2, #0
 8011ebe:	601a      	str	r2, [r3, #0]
	else
	{
		Sampled_Parameter_2.Minite_Volume +=Volume_max;
	}

}
 8011ec0:	e00d      	b.n	8011ede <Minite_Volume_Func+0xa6>
		Sampled_Parameter_2.Minite_Volume +=Volume_max;
 8011ec2:	4b0a      	ldr	r3, [pc, #40]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011ec4:	ed93 7a00 	vldr	s14, [r3]
 8011ec8:	4b0b      	ldr	r3, [pc, #44]	; (8011ef8 <Minite_Volume_Func+0xc0>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	ee07 3a90 	vmov	s15, r3
 8011ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ed8:	4b04      	ldr	r3, [pc, #16]	; (8011eec <Minite_Volume_Func+0xb4>)
 8011eda:	edc3 7a00 	vstr	s15, [r3]
}
 8011ede:	bf00      	nop
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr
 8011ee8:	200129ab 	.word	0x200129ab
 8011eec:	20012ac8 	.word	0x20012ac8
 8011ef0:	447a0000 	.word	0x447a0000
 8011ef4:	66666667 	.word	0x66666667
 8011ef8:	20012c70 	.word	0x20012c70

08011efc <Acheived_RR_Func>:

void Acheived_RR_Func()
{
 8011efc:	b480      	push	{r7}
 8011efe:	af00      	add	r7, sp, #0
	Sampled_Parameter_2.Acheived_RR = Breath_In_Minite;
 8011f00:	4b04      	ldr	r3, [pc, #16]	; (8011f14 <Acheived_RR_Func+0x18>)
 8011f02:	781a      	ldrb	r2, [r3, #0]
 8011f04:	4b04      	ldr	r3, [pc, #16]	; (8011f18 <Acheived_RR_Func+0x1c>)
 8011f06:	751a      	strb	r2, [r3, #20]
}
 8011f08:	bf00      	nop
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	20012890 	.word	0x20012890
 8011f18:	20012ac8 	.word	0x20012ac8

08011f1c <Inspiration_Time_Func>:


void Inspiration_Time_Func()
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	af00      	add	r7, sp, #0
	Sampled_Parameter_2.Acheived_I_Time           = RR_I_TIME_ACHIEVED;
 8011f20:	4b23      	ldr	r3, [pc, #140]	; (8011fb0 <Inspiration_Time_Func+0x94>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	b29a      	uxth	r2, r3
 8011f26:	4b23      	ldr	r3, [pc, #140]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f28:	82da      	strh	r2, [r3, #22]


	Sampled_Parameter_2.Acheived_I_Time_float     = (float)Sampled_Parameter_2.Acheived_I_Time/1000;
 8011f2a:	4b22      	ldr	r3, [pc, #136]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f2c:	8adb      	ldrh	r3, [r3, #22]
 8011f2e:	ee07 3a90 	vmov	s15, r3
 8011f32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011f36:	eddf 6a20 	vldr	s13, [pc, #128]	; 8011fb8 <Inspiration_Time_Func+0x9c>
 8011f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011f3e:	4b1d      	ldr	r3, [pc, #116]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f40:	edc3 7a07 	vstr	s15, [r3, #28]
	Sampled_Parameter_2.Acheived_I_Time_int       = Sampled_Parameter_2.Acheived_I_Time_float;
 8011f44:	4b1b      	ldr	r3, [pc, #108]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f46:	edd3 7a07 	vldr	s15, [r3, #28]
 8011f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f4e:	ee17 2a90 	vmov	r2, s15
 8011f52:	4b18      	ldr	r3, [pc, #96]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f54:	625a      	str	r2, [r3, #36]	; 0x24
	Sampled_Parameter_2.Acheived_I_Time_Decimal_1 = Sampled_Parameter_2.Acheived_I_Time_float - Sampled_Parameter_2.Acheived_I_Time_int;
 8011f56:	4b17      	ldr	r3, [pc, #92]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f58:	ed93 7a07 	vldr	s14, [r3, #28]
 8011f5c:	4b15      	ldr	r3, [pc, #84]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f60:	ee07 3a90 	vmov	s15, r3
 8011f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f6c:	4b11      	ldr	r3, [pc, #68]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f6e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	Sampled_Parameter_2.Acheived_I_Time_Decimal_1 = Sampled_Parameter_2.Acheived_I_Time_Decimal_1 * 1000;
 8011f72:	4b10      	ldr	r3, [pc, #64]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f74:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011f78:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8011fb8 <Inspiration_Time_Func+0x9c>
 8011f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011f80:	4b0c      	ldr	r3, [pc, #48]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f82:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	Sampled_Parameter_2.Acheived_I_Time_Decimal   = (int)Sampled_Parameter_2.Acheived_I_Time_Decimal_1/10;
 8011f86:	4b0b      	ldr	r3, [pc, #44]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011f88:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011f90:	ee17 1a90 	vmov	r1, s15
 8011f94:	4b09      	ldr	r3, [pc, #36]	; (8011fbc <Inspiration_Time_Func+0xa0>)
 8011f96:	fb83 2301 	smull	r2, r3, r3, r1
 8011f9a:	109a      	asrs	r2, r3, #2
 8011f9c:	17cb      	asrs	r3, r1, #31
 8011f9e:	1ad3      	subs	r3, r2, r3
 8011fa0:	4a04      	ldr	r2, [pc, #16]	; (8011fb4 <Inspiration_Time_Func+0x98>)
 8011fa2:	6393      	str	r3, [r2, #56]	; 0x38
	//Sampled_Parameter_2.Acheived_I_Time_Decimal   = Sampled_Parameter_2.Acheived_I_Time_int;
}
 8011fa4:	bf00      	nop
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fac:	4770      	bx	lr
 8011fae:	bf00      	nop
 8011fb0:	20000098 	.word	0x20000098
 8011fb4:	20012ac8 	.word	0x20012ac8
 8011fb8:	447a0000 	.word	0x447a0000
 8011fbc:	66666667 	.word	0x66666667

08011fc0 <Expiration_Time_Func>:

void Expiration_Time_Func()
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	af00      	add	r7, sp, #0
	Sampled_Parameter_2.Acheived_E_Time           = RR_E_TIME_ACHIEVED;
 8011fc4:	4b2c      	ldr	r3, [pc, #176]	; (8012078 <Expiration_Time_Func+0xb8>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	b29a      	uxth	r2, r3
 8011fca:	4b2c      	ldr	r3, [pc, #176]	; (801207c <Expiration_Time_Func+0xbc>)
 8011fcc:	831a      	strh	r2, [r3, #24]

	if(Sampled_Parameter_2.Acheived_E_Time <1000)
 8011fce:	4b2b      	ldr	r3, [pc, #172]	; (801207c <Expiration_Time_Func+0xbc>)
 8011fd0:	8b1b      	ldrh	r3, [r3, #24]
 8011fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011fd6:	d20d      	bcs.n	8011ff4 <Expiration_Time_Func+0x34>
		Sampled_Parameter_2.Acheived_E_Time_float     = (float)Sampled_Parameter_2.Acheived_E_Time/1000;
 8011fd8:	4b28      	ldr	r3, [pc, #160]	; (801207c <Expiration_Time_Func+0xbc>)
 8011fda:	8b1b      	ldrh	r3, [r3, #24]
 8011fdc:	ee07 3a90 	vmov	s15, r3
 8011fe0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011fe4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8012080 <Expiration_Time_Func+0xc0>
 8011fe8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011fec:	4b23      	ldr	r3, [pc, #140]	; (801207c <Expiration_Time_Func+0xbc>)
 8011fee:	edc3 7a08 	vstr	s15, [r3, #32]
 8011ff2:	e00c      	b.n	801200e <Expiration_Time_Func+0x4e>
	else
	    Sampled_Parameter_2.Acheived_E_Time_float     = (float)Sampled_Parameter_2.Acheived_E_Time/1000;
 8011ff4:	4b21      	ldr	r3, [pc, #132]	; (801207c <Expiration_Time_Func+0xbc>)
 8011ff6:	8b1b      	ldrh	r3, [r3, #24]
 8011ff8:	ee07 3a90 	vmov	s15, r3
 8011ffc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012000:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8012080 <Expiration_Time_Func+0xc0>
 8012004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012008:	4b1c      	ldr	r3, [pc, #112]	; (801207c <Expiration_Time_Func+0xbc>)
 801200a:	edc3 7a08 	vstr	s15, [r3, #32]


	Sampled_Parameter_2.Acheived_E_Time_int       = Sampled_Parameter_2.Acheived_E_Time_float;
 801200e:	4b1b      	ldr	r3, [pc, #108]	; (801207c <Expiration_Time_Func+0xbc>)
 8012010:	edd3 7a08 	vldr	s15, [r3, #32]
 8012014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012018:	ee17 2a90 	vmov	r2, s15
 801201c:	4b17      	ldr	r3, [pc, #92]	; (801207c <Expiration_Time_Func+0xbc>)
 801201e:	629a      	str	r2, [r3, #40]	; 0x28
	Sampled_Parameter_2.Acheived_E_Time_Decimal_1 = Sampled_Parameter_2.Acheived_E_Time_float - Sampled_Parameter_2.Acheived_E_Time_int;
 8012020:	4b16      	ldr	r3, [pc, #88]	; (801207c <Expiration_Time_Func+0xbc>)
 8012022:	ed93 7a08 	vldr	s14, [r3, #32]
 8012026:	4b15      	ldr	r3, [pc, #84]	; (801207c <Expiration_Time_Func+0xbc>)
 8012028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801202a:	ee07 3a90 	vmov	s15, r3
 801202e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012036:	4b11      	ldr	r3, [pc, #68]	; (801207c <Expiration_Time_Func+0xbc>)
 8012038:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	Sampled_Parameter_2.Acheived_E_Time_Decimal_1 = Sampled_Parameter_2.Acheived_E_Time_Decimal_1 * 1000;
 801203c:	4b0f      	ldr	r3, [pc, #60]	; (801207c <Expiration_Time_Func+0xbc>)
 801203e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8012042:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8012080 <Expiration_Time_Func+0xc0>
 8012046:	ee67 7a87 	vmul.f32	s15, s15, s14
 801204a:	4b0c      	ldr	r3, [pc, #48]	; (801207c <Expiration_Time_Func+0xbc>)
 801204c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	Sampled_Parameter_2.Acheived_E_Time_Decimal   = (int)Sampled_Parameter_2.Acheived_E_Time_Decimal_1/10;
 8012050:	4b0a      	ldr	r3, [pc, #40]	; (801207c <Expiration_Time_Func+0xbc>)
 8012052:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8012056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801205a:	ee17 1a90 	vmov	r1, s15
 801205e:	4b09      	ldr	r3, [pc, #36]	; (8012084 <Expiration_Time_Func+0xc4>)
 8012060:	fb83 2301 	smull	r2, r3, r3, r1
 8012064:	109a      	asrs	r2, r3, #2
 8012066:	17cb      	asrs	r3, r1, #31
 8012068:	1ad3      	subs	r3, r2, r3
 801206a:	4a04      	ldr	r2, [pc, #16]	; (801207c <Expiration_Time_Func+0xbc>)
 801206c:	6313      	str	r3, [r2, #48]	; 0x30
	//Sampled_Parameter_2.Acheived_E_Time_Decimal   =  Sampled_Parameter_2.Acheived_E_Time_int;

}
 801206e:	bf00      	nop
 8012070:	46bd      	mov	sp, r7
 8012072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012076:	4770      	bx	lr
 8012078:	20000094 	.word	0x20000094
 801207c:	20012ac8 	.word	0x20012ac8
 8012080:	447a0000 	.word	0x447a0000
 8012084:	66666667 	.word	0x66666667

08012088 <Sampled_Parameter_Inspiration_time>:

}


void Sampled_Parameter_Inspiration_time()
{
 8012088:	b580      	push	{r7, lr}
 801208a:	af00      	add	r7, sp, #0
	V_Min     = GRAPH_VALUES.volume;
 801208c:	4b0a      	ldr	r3, [pc, #40]	; (80120b8 <Sampled_Parameter_Inspiration_time+0x30>)
 801208e:	edd3 7a02 	vldr	s15, [r3, #8]
 8012092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012096:	ee17 2a90 	vmov	r2, s15
 801209a:	4b08      	ldr	r3, [pc, #32]	; (80120bc <Sampled_Parameter_Inspiration_time+0x34>)
 801209c:	601a      	str	r2, [r3, #0]
	Sampled_Parameter_Func_1();
 801209e:	f7ff fe2b 	bl	8011cf8 <Sampled_Parameter_Func_1>
	Sampled_Parameter_Func_2();
 80120a2:	f7ff febd 	bl	8011e20 <Sampled_Parameter_Func_2>
	//Sampled_Parameter_Func_3();
	//Sampled_Parameter_Func_4();
	Send_Frame = First_Frame;
 80120a6:	4b06      	ldr	r3, [pc, #24]	; (80120c0 <Sampled_Parameter_Inspiration_time+0x38>)
 80120a8:	2201      	movs	r2, #1
 80120aa:	701a      	strb	r2, [r3, #0]
	Send_Bluetooth_Data_Farme = SEND_SAMPLED_PARAMETER_FRAME;
 80120ac:	4b05      	ldr	r3, [pc, #20]	; (80120c4 <Sampled_Parameter_Inspiration_time+0x3c>)
 80120ae:	2203      	movs	r2, #3
 80120b0:	701a      	strb	r2, [r3, #0]
}
 80120b2:	bf00      	nop
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	200125f8 	.word	0x200125f8
 80120bc:	200000b4 	.word	0x200000b4
 80120c0:	20012770 	.word	0x20012770
 80120c4:	2001269d 	.word	0x2001269d

080120c8 <Initial_Task_Create>:




void Initial_Task_Create()
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af02      	add	r7, sp, #8
		   HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&Adc.AdcData,3);
 80120ce:	2203      	movs	r2, #3
 80120d0:	49ae      	ldr	r1, [pc, #696]	; (801238c <Initial_Task_Create+0x2c4>)
 80120d2:	48af      	ldr	r0, [pc, #700]	; (8012390 <Initial_Task_Create+0x2c8>)
 80120d4:	f003 f8a8 	bl	8015228 <HAL_ADC_Start_DMA>
		   Blower_ON();
 80120d8:	4bae      	ldr	r3, [pc, #696]	; (8012394 <Initial_Task_Create+0x2cc>)
 80120da:	695b      	ldr	r3, [r3, #20]
 80120dc:	4aad      	ldr	r2, [pc, #692]	; (8012394 <Initial_Task_Create+0x2cc>)
 80120de:	f043 0320 	orr.w	r3, r3, #32
 80120e2:	6153      	str	r3, [r2, #20]
		   HAL_DAC_Start(&hdac,DAC1_CHANNEL_1);
 80120e4:	2100      	movs	r1, #0
 80120e6:	48ac      	ldr	r0, [pc, #688]	; (8012398 <Initial_Task_Create+0x2d0>)
 80120e8:	f003 fd70 	bl	8015bcc <HAL_DAC_Start>
		   Blower_Signal(0);
 80120ec:	4bab      	ldr	r3, [pc, #684]	; (801239c <Initial_Task_Create+0x2d4>)
 80120ee:	2200      	movs	r2, #0
 80120f0:	609a      	str	r2, [r3, #8]
		   HAL_DAC_Start(&hdac,DAC1_CHANNEL_2);
 80120f2:	2110      	movs	r1, #16
 80120f4:	48a8      	ldr	r0, [pc, #672]	; (8012398 <Initial_Task_Create+0x2d0>)
 80120f6:	f003 fd69 	bl	8015bcc <HAL_DAC_Start>
		   Parkar_valve_Signal(0);
 80120fa:	4ba8      	ldr	r3, [pc, #672]	; (801239c <Initial_Task_Create+0x2d4>)
 80120fc:	2200      	movs	r2, #0
 80120fe:	615a      	str	r2, [r3, #20]
		   Uart_Receive_Debug_Toggle_Led();
 8012100:	4ba7      	ldr	r3, [pc, #668]	; (80123a0 <Initial_Task_Create+0x2d8>)
 8012102:	695b      	ldr	r3, [r3, #20]
 8012104:	4aa6      	ldr	r2, [pc, #664]	; (80123a0 <Initial_Task_Create+0x2d8>)
 8012106:	f083 0302 	eor.w	r3, r3, #2
 801210a:	6153      	str	r3, [r2, #20]
		   PIP_Not_Acheieved();
 801210c:	f7fb fee8 	bl	800dee0 <PIP_Not_Acheieved>
		   Blue_Led_ON();
 8012110:	4ba3      	ldr	r3, [pc, #652]	; (80123a0 <Initial_Task_Create+0x2d8>)
 8012112:	695b      	ldr	r3, [r3, #20]
 8012114:	4aa2      	ldr	r2, [pc, #648]	; (80123a0 <Initial_Task_Create+0x2d8>)
 8012116:	f043 0308 	orr.w	r3, r3, #8
 801211a:	6153      	str	r3, [r2, #20]
		   Red_Led_OFF();
 801211c:	4ba0      	ldr	r3, [pc, #640]	; (80123a0 <Initial_Task_Create+0x2d8>)
 801211e:	695b      	ldr	r3, [r3, #20]
 8012120:	4a9f      	ldr	r2, [pc, #636]	; (80123a0 <Initial_Task_Create+0x2d8>)
 8012122:	f023 0310 	bic.w	r3, r3, #16
 8012126:	6153      	str	r3, [r2, #20]
		   Green_Led_OFF();
 8012128:	4b9d      	ldr	r3, [pc, #628]	; (80123a0 <Initial_Task_Create+0x2d8>)
 801212a:	695b      	ldr	r3, [r3, #20]
 801212c:	4a9c      	ldr	r2, [pc, #624]	; (80123a0 <Initial_Task_Create+0x2d8>)
 801212e:	f023 0320 	bic.w	r3, r3, #32
 8012132:	6153      	str	r3, [r2, #20]

		   ADS1115_Init(1, &hi2c2);
 8012134:	499b      	ldr	r1, [pc, #620]	; (80123a4 <Initial_Task_Create+0x2dc>)
 8012136:	2001      	movs	r0, #1
 8012138:	f7fe f8f4 	bl	8010324 <ADS1115_Init>
		   ADS1115_Init(2, &hi2c3);
 801213c:	499a      	ldr	r1, [pc, #616]	; (80123a8 <Initial_Task_Create+0x2e0>)
 801213e:	2002      	movs	r0, #2
 8012140:	f7fe f8f0 	bl	8010324 <ADS1115_Init>
		   ADS1115_Init(3, &hi2c1);
 8012144:	4999      	ldr	r1, [pc, #612]	; (80123ac <Initial_Task_Create+0x2e4>)
 8012146:	2003      	movs	r0, #3
 8012148:	f7fe f8ec 	bl	8010324 <ADS1115_Init>

		   Bluetooth_Receive = xQueueCreate(1, sizeof(Bluetooth_Parameter.Bluetooth_RX_BUF));
 801214c:	2200      	movs	r2, #0
 801214e:	2114      	movs	r1, #20
 8012150:	2001      	movs	r0, #1
 8012152:	f007 fff1 	bl	801a138 <xQueueGenericCreate>
 8012156:	4603      	mov	r3, r0
 8012158:	4a95      	ldr	r2, [pc, #596]	; (80123b0 <Initial_Task_Create+0x2e8>)
 801215a:	6013      	str	r3, [r2, #0]
		   vSemaphoreCreateBinary(binarysem);
 801215c:	2203      	movs	r2, #3
 801215e:	2100      	movs	r1, #0
 8012160:	2001      	movs	r0, #1
 8012162:	f007 ffe9 	bl	801a138 <xQueueGenericCreate>
 8012166:	4603      	mov	r3, r0
 8012168:	4a92      	ldr	r2, [pc, #584]	; (80123b4 <Initial_Task_Create+0x2ec>)
 801216a:	6013      	str	r3, [r2, #0]
 801216c:	4b91      	ldr	r3, [pc, #580]	; (80123b4 <Initial_Task_Create+0x2ec>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d006      	beq.n	8012182 <Initial_Task_Create+0xba>
 8012174:	4b8f      	ldr	r3, [pc, #572]	; (80123b4 <Initial_Task_Create+0x2ec>)
 8012176:	6818      	ldr	r0, [r3, #0]
 8012178:	2300      	movs	r3, #0
 801217a:	2200      	movs	r2, #0
 801217c:	2100      	movs	r1, #0
 801217e:	f008 f835 	bl	801a1ec <xQueueGenericSend>

		   xTaskCreate(Sensor_Offset_Task,"Sensor-Offset-Task", 512, NULL, 4, &Sensor_Offset_Handler);
 8012182:	4b8d      	ldr	r3, [pc, #564]	; (80123b8 <Initial_Task_Create+0x2f0>)
 8012184:	9301      	str	r3, [sp, #4]
 8012186:	2304      	movs	r3, #4
 8012188:	9300      	str	r3, [sp, #0]
 801218a:	2300      	movs	r3, #0
 801218c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012190:	498a      	ldr	r1, [pc, #552]	; (80123bc <Initial_Task_Create+0x2f4>)
 8012192:	488b      	ldr	r0, [pc, #556]	; (80123c0 <Initial_Task_Create+0x2f8>)
 8012194:	f008 fd93 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Time_Trace_Task,"Time-Trace-Task", 512, NULL, 3, &Time_Trace_Handler);
 8012198:	4b8a      	ldr	r3, [pc, #552]	; (80123c4 <Initial_Task_Create+0x2fc>)
 801219a:	9301      	str	r3, [sp, #4]
 801219c:	2303      	movs	r3, #3
 801219e:	9300      	str	r3, [sp, #0]
 80121a0:	2300      	movs	r3, #0
 80121a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121a6:	4988      	ldr	r1, [pc, #544]	; (80123c8 <Initial_Task_Create+0x300>)
 80121a8:	4888      	ldr	r0, [pc, #544]	; (80123cc <Initial_Task_Create+0x304>)
 80121aa:	f008 fd88 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Sensor_Read_Task,"Sensor-Read-Task", 512, NULL, 3, &Sensor_Read_Handler);
 80121ae:	4b88      	ldr	r3, [pc, #544]	; (80123d0 <Initial_Task_Create+0x308>)
 80121b0:	9301      	str	r3, [sp, #4]
 80121b2:	2303      	movs	r3, #3
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	2300      	movs	r3, #0
 80121b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121bc:	4985      	ldr	r1, [pc, #532]	; (80123d4 <Initial_Task_Create+0x30c>)
 80121be:	4886      	ldr	r0, [pc, #536]	; (80123d8 <Initial_Task_Create+0x310>)
 80121c0:	f008 fd7d 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Bluetooth_Task,"Bluetooth-Task", 512, NULL, 2, &Bluetooth_Handler);
 80121c4:	4b85      	ldr	r3, [pc, #532]	; (80123dc <Initial_Task_Create+0x314>)
 80121c6:	9301      	str	r3, [sp, #4]
 80121c8:	2302      	movs	r3, #2
 80121ca:	9300      	str	r3, [sp, #0]
 80121cc:	2300      	movs	r3, #0
 80121ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121d2:	4983      	ldr	r1, [pc, #524]	; (80123e0 <Initial_Task_Create+0x318>)
 80121d4:	4883      	ldr	r0, [pc, #524]	; (80123e4 <Initial_Task_Create+0x31c>)
 80121d6:	f008 fd72 	bl	801acbe <xTaskCreate>
		   xTaskCreate(BlueTooth_Receiver_Task,"BlueTooth-Data-Receive-Task", 256, NULL, 5, &Bluetooth_Receiver_Handler);
 80121da:	4b83      	ldr	r3, [pc, #524]	; (80123e8 <Initial_Task_Create+0x320>)
 80121dc:	9301      	str	r3, [sp, #4]
 80121de:	2305      	movs	r3, #5
 80121e0:	9300      	str	r3, [sp, #0]
 80121e2:	2300      	movs	r3, #0
 80121e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80121e8:	4980      	ldr	r1, [pc, #512]	; (80123ec <Initial_Task_Create+0x324>)
 80121ea:	4881      	ldr	r0, [pc, #516]	; (80123f0 <Initial_Task_Create+0x328>)
 80121ec:	f008 fd67 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Bluetooth_data_split_Task,"Uart-data-split-Task", 512, NULL, 5, &Bluetooth_data_Split_Handler);
 80121f0:	4b80      	ldr	r3, [pc, #512]	; (80123f4 <Initial_Task_Create+0x32c>)
 80121f2:	9301      	str	r3, [sp, #4]
 80121f4:	2305      	movs	r3, #5
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	2300      	movs	r3, #0
 80121fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80121fe:	497e      	ldr	r1, [pc, #504]	; (80123f8 <Initial_Task_Create+0x330>)
 8012200:	487e      	ldr	r0, [pc, #504]	; (80123fc <Initial_Task_Create+0x334>)
 8012202:	f008 fd5c 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Mode_Initial_Flag_Set_Task,"Initial-Flag-Set-Task", 512, NULL, 4, &Mode_initial_Flag_Set_Handler);
 8012206:	4b7e      	ldr	r3, [pc, #504]	; (8012400 <Initial_Task_Create+0x338>)
 8012208:	9301      	str	r3, [sp, #4]
 801220a:	2304      	movs	r3, #4
 801220c:	9300      	str	r3, [sp, #0]
 801220e:	2300      	movs	r3, #0
 8012210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012214:	497b      	ldr	r1, [pc, #492]	; (8012404 <Initial_Task_Create+0x33c>)
 8012216:	487c      	ldr	r0, [pc, #496]	; (8012408 <Initial_Task_Create+0x340>)
 8012218:	f008 fd51 	bl	801acbe <xTaskCreate>
		   xTaskCreate(One_Time_Task,"One-Time-Task", 512, NULL,3, &One_Time_Handler);
 801221c:	4b7b      	ldr	r3, [pc, #492]	; (801240c <Initial_Task_Create+0x344>)
 801221e:	9301      	str	r3, [sp, #4]
 8012220:	2303      	movs	r3, #3
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	2300      	movs	r3, #0
 8012226:	f44f 7200 	mov.w	r2, #512	; 0x200
 801222a:	4979      	ldr	r1, [pc, #484]	; (8012410 <Initial_Task_Create+0x348>)
 801222c:	4879      	ldr	r0, [pc, #484]	; (8012414 <Initial_Task_Create+0x34c>)
 801222e:	f008 fd46 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Pc_Cmv_Task,"Pc-Cmv-Task", 256, NULL, 2, &Pc_Cmv_Handler);
 8012232:	4b79      	ldr	r3, [pc, #484]	; (8012418 <Initial_Task_Create+0x350>)
 8012234:	9301      	str	r3, [sp, #4]
 8012236:	2302      	movs	r3, #2
 8012238:	9300      	str	r3, [sp, #0]
 801223a:	2300      	movs	r3, #0
 801223c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012240:	4976      	ldr	r1, [pc, #472]	; (801241c <Initial_Task_Create+0x354>)
 8012242:	4877      	ldr	r0, [pc, #476]	; (8012420 <Initial_Task_Create+0x358>)
 8012244:	f008 fd3b 	bl	801acbe <xTaskCreate>
		   xTaskCreate(PIP_Control_Task,"PIP-Control-PC-CMV-Task", 512, NULL, 2, &PIP_Control_Task_Handler);
 8012248:	4b76      	ldr	r3, [pc, #472]	; (8012424 <Initial_Task_Create+0x35c>)
 801224a:	9301      	str	r3, [sp, #4]
 801224c:	2302      	movs	r3, #2
 801224e:	9300      	str	r3, [sp, #0]
 8012250:	2300      	movs	r3, #0
 8012252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012256:	4974      	ldr	r1, [pc, #464]	; (8012428 <Initial_Task_Create+0x360>)
 8012258:	4874      	ldr	r0, [pc, #464]	; (801242c <Initial_Task_Create+0x364>)
 801225a:	f008 fd30 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Vc_Cmv_Task,"Vc-Cmv-Task", 512, NULL, 2, &Vc_Cmv_Handler);
 801225e:	4b74      	ldr	r3, [pc, #464]	; (8012430 <Initial_Task_Create+0x368>)
 8012260:	9301      	str	r3, [sp, #4]
 8012262:	2302      	movs	r3, #2
 8012264:	9300      	str	r3, [sp, #0]
 8012266:	2300      	movs	r3, #0
 8012268:	f44f 7200 	mov.w	r2, #512	; 0x200
 801226c:	4971      	ldr	r1, [pc, #452]	; (8012434 <Initial_Task_Create+0x36c>)
 801226e:	4872      	ldr	r0, [pc, #456]	; (8012438 <Initial_Task_Create+0x370>)
 8012270:	f008 fd25 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Volume_Control_Task,"Volume-Control-VC-CMV-Task", 512, NULL, 2, &Volume_Control_Task_Handler);
 8012274:	4b71      	ldr	r3, [pc, #452]	; (801243c <Initial_Task_Create+0x374>)
 8012276:	9301      	str	r3, [sp, #4]
 8012278:	2302      	movs	r3, #2
 801227a:	9300      	str	r3, [sp, #0]
 801227c:	2300      	movs	r3, #0
 801227e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012282:	496f      	ldr	r1, [pc, #444]	; (8012440 <Initial_Task_Create+0x378>)
 8012284:	486f      	ldr	r0, [pc, #444]	; (8012444 <Initial_Task_Create+0x37c>)
 8012286:	f008 fd1a 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Oxygen_Blending_Task, "Oxygen-Blending-Task", 512, NULL, 2, &Oxygen_Blending_Handler);
 801228a:	4b6f      	ldr	r3, [pc, #444]	; (8012448 <Initial_Task_Create+0x380>)
 801228c:	9301      	str	r3, [sp, #4]
 801228e:	2302      	movs	r3, #2
 8012290:	9300      	str	r3, [sp, #0]
 8012292:	2300      	movs	r3, #0
 8012294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012298:	496c      	ldr	r1, [pc, #432]	; (801244c <Initial_Task_Create+0x384>)
 801229a:	486d      	ldr	r0, [pc, #436]	; (8012450 <Initial_Task_Create+0x388>)
 801229c:	f008 fd0f 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Alert_Task, "Alert Task", 512, NULL, 2, &Alert_Handler);
 80122a0:	4b6c      	ldr	r3, [pc, #432]	; (8012454 <Initial_Task_Create+0x38c>)
 80122a2:	9301      	str	r3, [sp, #4]
 80122a4:	2302      	movs	r3, #2
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	2300      	movs	r3, #0
 80122aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122ae:	496a      	ldr	r1, [pc, #424]	; (8012458 <Initial_Task_Create+0x390>)
 80122b0:	486a      	ldr	r0, [pc, #424]	; (801245c <Initial_Task_Create+0x394>)
 80122b2:	f008 fd04 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Pc_Simv_Assist_ON_Task,"Pc-Simv-Assist-ON-Task", 512, NULL, 2, &Pc_Simv_Assist_ON_Handler);
 80122b6:	4b6a      	ldr	r3, [pc, #424]	; (8012460 <Initial_Task_Create+0x398>)
 80122b8:	9301      	str	r3, [sp, #4]
 80122ba:	2302      	movs	r3, #2
 80122bc:	9300      	str	r3, [sp, #0]
 80122be:	2300      	movs	r3, #0
 80122c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122c4:	4967      	ldr	r1, [pc, #412]	; (8012464 <Initial_Task_Create+0x39c>)
 80122c6:	4868      	ldr	r0, [pc, #416]	; (8012468 <Initial_Task_Create+0x3a0>)
 80122c8:	f008 fcf9 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Pc_Simv_Assist_OFF_Task,"Pc-Simv-Assist-OFF-Task", 512, NULL, 2, &Pc_Simv_Assist_OFF_Handler);
 80122cc:	4b67      	ldr	r3, [pc, #412]	; (801246c <Initial_Task_Create+0x3a4>)
 80122ce:	9301      	str	r3, [sp, #4]
 80122d0:	2302      	movs	r3, #2
 80122d2:	9300      	str	r3, [sp, #0]
 80122d4:	2300      	movs	r3, #0
 80122d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122da:	4965      	ldr	r1, [pc, #404]	; (8012470 <Initial_Task_Create+0x3a8>)
 80122dc:	4865      	ldr	r0, [pc, #404]	; (8012474 <Initial_Task_Create+0x3ac>)
 80122de:	f008 fcee 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Vc_Simv_Assist_ON_Task,"Vc-Simv-Assist-ON-Task", 512, NULL, 2, &Vc_Simv_Assist_ON_Handler);
 80122e2:	4b65      	ldr	r3, [pc, #404]	; (8012478 <Initial_Task_Create+0x3b0>)
 80122e4:	9301      	str	r3, [sp, #4]
 80122e6:	2302      	movs	r3, #2
 80122e8:	9300      	str	r3, [sp, #0]
 80122ea:	2300      	movs	r3, #0
 80122ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122f0:	4962      	ldr	r1, [pc, #392]	; (801247c <Initial_Task_Create+0x3b4>)
 80122f2:	4863      	ldr	r0, [pc, #396]	; (8012480 <Initial_Task_Create+0x3b8>)
 80122f4:	f008 fce3 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Vc_Simv_Assist_OFF_Task,"Vc-Simv-Assist-OFF-Task", 512, NULL, 2, &Vc_Simv_Assist_OFF_Handler);
 80122f8:	4b62      	ldr	r3, [pc, #392]	; (8012484 <Initial_Task_Create+0x3bc>)
 80122fa:	9301      	str	r3, [sp, #4]
 80122fc:	2302      	movs	r3, #2
 80122fe:	9300      	str	r3, [sp, #0]
 8012300:	2300      	movs	r3, #0
 8012302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012306:	4960      	ldr	r1, [pc, #384]	; (8012488 <Initial_Task_Create+0x3c0>)
 8012308:	4860      	ldr	r0, [pc, #384]	; (801248c <Initial_Task_Create+0x3c4>)
 801230a:	f008 fcd8 	bl	801acbe <xTaskCreate>
		   xTaskCreate(PSV_Task,"PSV-Task", 256, NULL, 2, &PSV_Handler);
 801230e:	4b60      	ldr	r3, [pc, #384]	; (8012490 <Initial_Task_Create+0x3c8>)
 8012310:	9301      	str	r3, [sp, #4]
 8012312:	2302      	movs	r3, #2
 8012314:	9300      	str	r3, [sp, #0]
 8012316:	2300      	movs	r3, #0
 8012318:	f44f 7280 	mov.w	r2, #256	; 0x100
 801231c:	495d      	ldr	r1, [pc, #372]	; (8012494 <Initial_Task_Create+0x3cc>)
 801231e:	485e      	ldr	r0, [pc, #376]	; (8012498 <Initial_Task_Create+0x3d0>)
 8012320:	f008 fccd 	bl	801acbe <xTaskCreate>
		   xTaskCreate(PSV_PID_Task,"PSV-PID-Task", 256, NULL, 2, &PSV_PID_Handler);
 8012324:	4b5d      	ldr	r3, [pc, #372]	; (801249c <Initial_Task_Create+0x3d4>)
 8012326:	9301      	str	r3, [sp, #4]
 8012328:	2302      	movs	r3, #2
 801232a:	9300      	str	r3, [sp, #0]
 801232c:	2300      	movs	r3, #0
 801232e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012332:	495b      	ldr	r1, [pc, #364]	; (80124a0 <Initial_Task_Create+0x3d8>)
 8012334:	485b      	ldr	r0, [pc, #364]	; (80124a4 <Initial_Task_Create+0x3dc>)
 8012336:	f008 fcc2 	bl	801acbe <xTaskCreate>
		   xTaskCreate(CPAP_Task,"CPAP-Task", 256, NULL, 2, &CPAP_Handler);
 801233a:	4b5b      	ldr	r3, [pc, #364]	; (80124a8 <Initial_Task_Create+0x3e0>)
 801233c:	9301      	str	r3, [sp, #4]
 801233e:	2302      	movs	r3, #2
 8012340:	9300      	str	r3, [sp, #0]
 8012342:	2300      	movs	r3, #0
 8012344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012348:	4958      	ldr	r1, [pc, #352]	; (80124ac <Initial_Task_Create+0x3e4>)
 801234a:	4859      	ldr	r0, [pc, #356]	; (80124b0 <Initial_Task_Create+0x3e8>)
 801234c:	f008 fcb7 	bl	801acbe <xTaskCreate>
		   xTaskCreate(BIPAP_Task,"BIPAP-Task", 256, NULL, 2, &BIPAP_Handler);
 8012350:	4b58      	ldr	r3, [pc, #352]	; (80124b4 <Initial_Task_Create+0x3ec>)
 8012352:	9301      	str	r3, [sp, #4]
 8012354:	2302      	movs	r3, #2
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	2300      	movs	r3, #0
 801235a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801235e:	4956      	ldr	r1, [pc, #344]	; (80124b8 <Initial_Task_Create+0x3f0>)
 8012360:	4856      	ldr	r0, [pc, #344]	; (80124bc <Initial_Task_Create+0x3f4>)
 8012362:	f008 fcac 	bl	801acbe <xTaskCreate>
		   xTaskCreate(BIPAP_PID_Task,"BIPAP-PID-Task", 256, NULL, 3, &BIPAP_PID_Handler);
 8012366:	4b56      	ldr	r3, [pc, #344]	; (80124c0 <Initial_Task_Create+0x3f8>)
 8012368:	9301      	str	r3, [sp, #4]
 801236a:	2303      	movs	r3, #3
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	2300      	movs	r3, #0
 8012370:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012374:	4953      	ldr	r1, [pc, #332]	; (80124c4 <Initial_Task_Create+0x3fc>)
 8012376:	4854      	ldr	r0, [pc, #336]	; (80124c8 <Initial_Task_Create+0x400>)
 8012378:	f008 fca1 	bl	801acbe <xTaskCreate>
		   xTaskCreate(APRV_Task,"APRV-Task", 256, NULL, 2, &APRV_Handler);
 801237c:	4b53      	ldr	r3, [pc, #332]	; (80124cc <Initial_Task_Create+0x404>)
 801237e:	9301      	str	r3, [sp, #4]
 8012380:	2302      	movs	r3, #2
 8012382:	9300      	str	r3, [sp, #0]
 8012384:	2300      	movs	r3, #0
 8012386:	f44f 7280 	mov.w	r2, #256	; 0x100
 801238a:	e0a1      	b.n	80124d0 <Initial_Task_Create+0x408>
 801238c:	20012690 	.word	0x20012690
 8012390:	200126c8 	.word	0x200126c8
 8012394:	40021000 	.word	0x40021000
 8012398:	2001284c 	.word	0x2001284c
 801239c:	40007400 	.word	0x40007400
 80123a0:	40020c00 	.word	0x40020c00
 80123a4:	20012418 	.word	0x20012418
 80123a8:	20012254 	.word	0x20012254
 80123ac:	2001236c 	.word	0x2001236c
 80123b0:	200123c0 	.word	0x200123c0
 80123b4:	20012414 	.word	0x20012414
 80123b8:	200122d0 	.word	0x200122d0
 80123bc:	0801cfdc 	.word	0x0801cfdc
 80123c0:	08011371 	.word	0x08011371
 80123c4:	200122d4 	.word	0x200122d4
 80123c8:	0801cff0 	.word	0x0801cff0
 80123cc:	0800bb21 	.word	0x0800bb21
 80123d0:	20012970 	.word	0x20012970
 80123d4:	0801d000 	.word	0x0801d000
 80123d8:	080100d9 	.word	0x080100d9
 80123dc:	200129c0 	.word	0x200129c0
 80123e0:	0801d014 	.word	0x0801d014
 80123e4:	080053c9 	.word	0x080053c9
 80123e8:	20012400 	.word	0x20012400
 80123ec:	0801d024 	.word	0x0801d024
 80123f0:	080056ad 	.word	0x080056ad
 80123f4:	20012848 	.word	0x20012848
 80123f8:	0801d040 	.word	0x0801d040
 80123fc:	080056f5 	.word	0x080056f5
 8012400:	200129ac 	.word	0x200129ac
 8012404:	0801d058 	.word	0x0801d058
 8012408:	08009ae5 	.word	0x08009ae5
 801240c:	200129cc 	.word	0x200129cc
 8012410:	0801d070 	.word	0x0801d070
 8012414:	08011609 	.word	0x08011609
 8012418:	20012874 	.word	0x20012874
 801241c:	0801d080 	.word	0x0801d080
 8012420:	0800daa5 	.word	0x0800daa5
 8012424:	200124ec 	.word	0x200124ec
 8012428:	0801d08c 	.word	0x0801d08c
 801242c:	0800defd 	.word	0x0800defd
 8012430:	20012c68 	.word	0x20012c68
 8012434:	0801d0a4 	.word	0x0801d0a4
 8012438:	080137b5 	.word	0x080137b5
 801243c:	20012248 	.word	0x20012248
 8012440:	0801d0b0 	.word	0x0801d0b0
 8012444:	08013d9d 	.word	0x08013d9d
 8012448:	200127ac 	.word	0x200127ac
 801244c:	0801d0cc 	.word	0x0801d0cc
 8012450:	0800c205 	.word	0x0800c205
 8012454:	20012968 	.word	0x20012968
 8012458:	0801d0e4 	.word	0x0801d0e4
 801245c:	08001059 	.word	0x08001059
 8012460:	20012cb4 	.word	0x20012cb4
 8012464:	0801d0f0 	.word	0x0801d0f0
 8012468:	0800d34d 	.word	0x0800d34d
 801246c:	20012638 	.word	0x20012638
 8012470:	0801d108 	.word	0x0801d108
 8012474:	0800ca91 	.word	0x0800ca91
 8012478:	20012824 	.word	0x20012824
 801247c:	0801d120 	.word	0x0801d120
 8012480:	08012e95 	.word	0x08012e95
 8012484:	20012c50 	.word	0x20012c50
 8012488:	0801d138 	.word	0x0801d138
 801248c:	08012609 	.word	0x08012609
 8012490:	200128a8 	.word	0x200128a8
 8012494:	0801d150 	.word	0x0801d150
 8012498:	0800e891 	.word	0x0800e891
 801249c:	200127a8 	.word	0x200127a8
 80124a0:	0801d15c 	.word	0x0801d15c
 80124a4:	0800ea2d 	.word	0x0800ea2d
 80124a8:	20012d38 	.word	0x20012d38
 80124ac:	0801d16c 	.word	0x0801d16c
 80124b0:	0800654d 	.word	0x0800654d
 80124b4:	20012364 	.word	0x20012364
 80124b8:	0801d178 	.word	0x0801d178
 80124bc:	08003e5d 	.word	0x08003e5d
 80124c0:	20012b04 	.word	0x20012b04
 80124c4:	0801d184 	.word	0x0801d184
 80124c8:	08003ec5 	.word	0x08003ec5
 80124cc:	20012810 	.word	0x20012810
 80124d0:	4932      	ldr	r1, [pc, #200]	; (801259c <Initial_Task_Create+0x4d4>)
 80124d2:	4833      	ldr	r0, [pc, #204]	; (80125a0 <Initial_Task_Create+0x4d8>)
 80124d4:	f008 fbf3 	bl	801acbe <xTaskCreate>
		   xTaskCreate(APRV_ONE_TIME_Task,"APRV-ONE-TIME-Task", 256, NULL, 2, &APRV_ONE_TIME_Handler);
 80124d8:	4b32      	ldr	r3, [pc, #200]	; (80125a4 <Initial_Task_Create+0x4dc>)
 80124da:	9301      	str	r3, [sp, #4]
 80124dc:	2302      	movs	r3, #2
 80124de:	9300      	str	r3, [sp, #0]
 80124e0:	2300      	movs	r3, #0
 80124e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80124e6:	4930      	ldr	r1, [pc, #192]	; (80125a8 <Initial_Task_Create+0x4e0>)
 80124e8:	4830      	ldr	r0, [pc, #192]	; (80125ac <Initial_Task_Create+0x4e4>)
 80124ea:	f008 fbe8 	bl	801acbe <xTaskCreate>
		   xTaskCreate(BACKUP_PC_CMV_Task,"BACKUP-PC-CMV-Task", 256, NULL, 2, &BACKUP_PC_Handler);
 80124ee:	4b30      	ldr	r3, [pc, #192]	; (80125b0 <Initial_Task_Create+0x4e8>)
 80124f0:	9301      	str	r3, [sp, #4]
 80124f2:	2302      	movs	r3, #2
 80124f4:	9300      	str	r3, [sp, #0]
 80124f6:	2300      	movs	r3, #0
 80124f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80124fc:	492d      	ldr	r1, [pc, #180]	; (80125b4 <Initial_Task_Create+0x4ec>)
 80124fe:	482e      	ldr	r0, [pc, #184]	; (80125b8 <Initial_Task_Create+0x4f0>)
 8012500:	f008 fbdd 	bl	801acbe <xTaskCreate>
		   xTaskCreate(Nebuliser_Task,"Nebulizer-Task", 256, NULL, 2, &Nebuliser_Handler);
 8012504:	4b2d      	ldr	r3, [pc, #180]	; (80125bc <Initial_Task_Create+0x4f4>)
 8012506:	9301      	str	r3, [sp, #4]
 8012508:	2302      	movs	r3, #2
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	2300      	movs	r3, #0
 801250e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012512:	492b      	ldr	r1, [pc, #172]	; (80125c0 <Initial_Task_Create+0x4f8>)
 8012514:	482b      	ldr	r0, [pc, #172]	; (80125c4 <Initial_Task_Create+0x4fc>)
 8012516:	f008 fbd2 	bl	801acbe <xTaskCreate>
	       xTaskCreate(Suction_Task,"Suction-Task", 256, NULL, 2, &Suction_Handler);
 801251a:	4b2b      	ldr	r3, [pc, #172]	; (80125c8 <Initial_Task_Create+0x500>)
 801251c:	9301      	str	r3, [sp, #4]
 801251e:	2302      	movs	r3, #2
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	2300      	movs	r3, #0
 8012524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012528:	4928      	ldr	r1, [pc, #160]	; (80125cc <Initial_Task_Create+0x504>)
 801252a:	4829      	ldr	r0, [pc, #164]	; (80125d0 <Initial_Task_Create+0x508>)
 801252c:	f008 fbc7 	bl	801acbe <xTaskCreate>
	       xTaskCreate(HFNC_Task,"HFNC-Task", 256, NULL, 2, &HFNC_Handler);
 8012530:	4b28      	ldr	r3, [pc, #160]	; (80125d4 <Initial_Task_Create+0x50c>)
 8012532:	9301      	str	r3, [sp, #4]
 8012534:	2302      	movs	r3, #2
 8012536:	9300      	str	r3, [sp, #0]
 8012538:	2300      	movs	r3, #0
 801253a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801253e:	4926      	ldr	r1, [pc, #152]	; (80125d8 <Initial_Task_Create+0x510>)
 8012540:	4826      	ldr	r0, [pc, #152]	; (80125dc <Initial_Task_Create+0x514>)
 8012542:	f008 fbbc 	bl	801acbe <xTaskCreate>
	       xTaskCreate(O2_Calibration_Task,"O2-Calibration-Task", 128, NULL, 2, &O2_Calibration_Handler);
 8012546:	4b26      	ldr	r3, [pc, #152]	; (80125e0 <Initial_Task_Create+0x518>)
 8012548:	9301      	str	r3, [sp, #4]
 801254a:	2302      	movs	r3, #2
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	2300      	movs	r3, #0
 8012550:	2280      	movs	r2, #128	; 0x80
 8012552:	4924      	ldr	r1, [pc, #144]	; (80125e4 <Initial_Task_Create+0x51c>)
 8012554:	4824      	ldr	r0, [pc, #144]	; (80125e8 <Initial_Task_Create+0x520>)
 8012556:	f008 fbb2 	bl	801acbe <xTaskCreate>
	       xTaskCreate(CALIBRATION_Task, "CALIBRATION Task", 512, NULL, 2, &Calibration_Handler);
 801255a:	4b24      	ldr	r3, [pc, #144]	; (80125ec <Initial_Task_Create+0x524>)
 801255c:	9301      	str	r3, [sp, #4]
 801255e:	2302      	movs	r3, #2
 8012560:	9300      	str	r3, [sp, #0]
 8012562:	2300      	movs	r3, #0
 8012564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012568:	4921      	ldr	r1, [pc, #132]	; (80125f0 <Initial_Task_Create+0x528>)
 801256a:	4822      	ldr	r0, [pc, #136]	; (80125f4 <Initial_Task_Create+0x52c>)
 801256c:	f008 fba7 	bl	801acbe <xTaskCreate>
	       xTaskCreate(SERVICE_Task, "Service Task", 256, NULL, 2, &Service_Handler);
 8012570:	4b21      	ldr	r3, [pc, #132]	; (80125f8 <Initial_Task_Create+0x530>)
 8012572:	9301      	str	r3, [sp, #4]
 8012574:	2302      	movs	r3, #2
 8012576:	9300      	str	r3, [sp, #0]
 8012578:	2300      	movs	r3, #0
 801257a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801257e:	491f      	ldr	r1, [pc, #124]	; (80125fc <Initial_Task_Create+0x534>)
 8012580:	481f      	ldr	r0, [pc, #124]	; (8012600 <Initial_Task_Create+0x538>)
 8012582:	f008 fb9c 	bl	801acbe <xTaskCreate>

		   free_heap_size = xPortGetFreeHeapSize();
 8012586:	f00a fbc5 	bl	801cd14 <xPortGetFreeHeapSize>
 801258a:	4603      	mov	r3, r0
 801258c:	4a1d      	ldr	r2, [pc, #116]	; (8012604 <Initial_Task_Create+0x53c>)
 801258e:	6013      	str	r3, [r2, #0]
		   vTaskStartScheduler();
 8012590:	f008 feb2 	bl	801b2f8 <vTaskStartScheduler>
}
 8012594:	bf00      	nop
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}
 801259a:	bf00      	nop
 801259c:	0801d194 	.word	0x0801d194
 80125a0:	080021ed 	.word	0x080021ed
 80125a4:	20012a84 	.word	0x20012a84
 80125a8:	0801d1a0 	.word	0x0801d1a0
 80125ac:	08002235 	.word	0x08002235
 80125b0:	20012500 	.word	0x20012500
 80125b4:	0801d1b4 	.word	0x0801d1b4
 80125b8:	08002cf1 	.word	0x08002cf1
 80125bc:	20012504 	.word	0x20012504
 80125c0:	0801d1c8 	.word	0x0801d1c8
 80125c4:	08008b25 	.word	0x08008b25
 80125c8:	20012b6c 	.word	0x20012b6c
 80125cc:	0801d1d8 	.word	0x0801d1d8
 80125d0:	08011a5d 	.word	0x08011a5d
 80125d4:	2001234c 	.word	0x2001234c
 80125d8:	0801d1e8 	.word	0x0801d1e8
 80125dc:	08008499 	.word	0x08008499
 80125e0:	20012774 	.word	0x20012774
 80125e4:	0801d1f4 	.word	0x0801d1f4
 80125e8:	08006155 	.word	0x08006155
 80125ec:	2001298c 	.word	0x2001298c
 80125f0:	0801d208 	.word	0x0801d208
 80125f4:	0800589d 	.word	0x0800589d
 80125f8:	20012214 	.word	0x20012214
 80125fc:	0801d21c 	.word	0x0801d21c
 8012600:	080118a5 	.word	0x080118a5
 8012604:	20012610 	.word	0x20012610

08012608 <Vc_Simv_Assist_OFF_Task>:
/**
 * @brief Vc_Simv_Assist_OFF_Task.
 * This Task calls  two function based on inspiration and expiration time.
 * */
void Vc_Simv_Assist_OFF_Task(void *argument)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 8012610:	4b13      	ldr	r3, [pc, #76]	; (8012660 <Vc_Simv_Assist_OFF_Task+0x58>)
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	2b02      	cmp	r3, #2
 8012616:	d00b      	beq.n	8012630 <Vc_Simv_Assist_OFF_Task+0x28>
 8012618:	2b02      	cmp	r3, #2
 801261a:	dc19      	bgt.n	8012650 <Vc_Simv_Assist_OFF_Task+0x48>
 801261c:	2b00      	cmp	r3, #0
 801261e:	d019      	beq.n	8012654 <Vc_Simv_Assist_OFF_Task+0x4c>
 8012620:	2b01      	cmp	r3, #1
 8012622:	d115      	bne.n	8012650 <Vc_Simv_Assist_OFF_Task+0x48>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF(Volume_Mode_Blower_control.BLOWER_DAC_VAL);
 8012624:	4b0f      	ldr	r3, [pc, #60]	; (8012664 <Vc_Simv_Assist_OFF_Task+0x5c>)
 8012626:	881b      	ldrh	r3, [r3, #0]
 8012628:	4618      	mov	r0, r3
 801262a:	f000 f81f 	bl	801266c <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF>
			break;
 801262e:	e012      	b.n	8012656 <Vc_Simv_Assist_OFF_Task+0x4e>
			case Run_Expiration_Cycle:
				Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 8012630:	4b0c      	ldr	r3, [pc, #48]	; (8012664 <Vc_Simv_Assist_OFF_Task+0x5c>)
 8012632:	881b      	ldrh	r3, [r3, #0]
 8012634:	4a0c      	ldr	r2, [pc, #48]	; (8012668 <Vc_Simv_Assist_OFF_Task+0x60>)
 8012636:	edd2 7a00 	vldr	s15, [r2]
													  PEEP_Maintain_Parameter.PEEP_Temp,
													  PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 801263a:	4a0b      	ldr	r2, [pc, #44]	; (8012668 <Vc_Simv_Assist_OFF_Task+0x60>)
 801263c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 8012640:	b292      	uxth	r2, r2
 8012642:	4611      	mov	r1, r2
 8012644:	eeb0 0a67 	vmov.f32	s0, s15
 8012648:	4618      	mov	r0, r3
 801264a:	f000 f81f 	bl	801268c <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF>
			break;
 801264e:	e002      	b.n	8012656 <Vc_Simv_Assist_OFF_Task+0x4e>
			case No_Run_State:
			break;
			default:
			break;
 8012650:	bf00      	nop
 8012652:	e000      	b.n	8012656 <Vc_Simv_Assist_OFF_Task+0x4e>
			break;
 8012654:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 8012656:	2002      	movs	r0, #2
 8012658:	f008 fcf8 	bl	801b04c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 801265c:	e7d8      	b.n	8012610 <Vc_Simv_Assist_OFF_Task+0x8>
 801265e:	bf00      	nop
 8012660:	20012870 	.word	0x20012870
 8012664:	200129b0 	.word	0x200129b0
 8012668:	20012c74 	.word	0x20012c74

0801266c <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF>:
}



static void Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF(uint16_t Blower_Signal)
{
 801266c:	b480      	push	{r7}
 801266e:	b083      	sub	sp, #12
 8012670:	af00      	add	r7, sp, #0
 8012672:	4603      	mov	r3, r0
 8012674:	80fb      	strh	r3, [r7, #6]
	Blower_Signal(Blower_Signal);
 8012676:	4a04      	ldr	r2, [pc, #16]	; (8012688 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x1c>)
 8012678:	88fb      	ldrh	r3, [r7, #6]
 801267a:	6093      	str	r3, [r2, #8]
}
 801267c:	bf00      	nop
 801267e:	370c      	adds	r7, #12
 8012680:	46bd      	mov	sp, r7
 8012682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012686:	4770      	bx	lr
 8012688:	40007400 	.word	0x40007400

0801268c <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF>:

static void Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
 8012692:	4603      	mov	r3, r0
 8012694:	ed87 0a00 	vstr	s0, [r7]
 8012698:	460a      	mov	r2, r1
 801269a:	80fb      	strh	r3, [r7, #6]
 801269c:	4613      	mov	r3, r2
 801269e:	80bb      	strh	r3, [r7, #4]
		if(VCsimv.Blower_Wait_Time_Milli_Second ==0)
 80126a0:	4b25      	ldr	r3, [pc, #148]	; (8012738 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xac>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d102      	bne.n	80126ae <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x22>
		{
			Blower_Signal( Blower_Signal);
 80126a8:	4a24      	ldr	r2, [pc, #144]	; (801273c <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xb0>)
 80126aa:	88fb      	ldrh	r3, [r7, #6]
 80126ac:	6093      	str	r3, [r2, #8]

		if(Peep_Status==PEEP_ACHEIVED)
		{

		}
		if(GRAPH_VALUES.pressure<= PEEP)
 80126ae:	4b24      	ldr	r3, [pc, #144]	; (8012740 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xb4>)
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	ee07 3a90 	vmov	s15, r3
 80126b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126ba:	ed97 7a00 	vldr	s14, [r7]
 80126be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c6:	db23      	blt.n	8012710 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x84>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 80126c8:	4b1e      	ldr	r3, [pc, #120]	; (8012744 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xb8>)
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d115      	bne.n	80126fc <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x70>
			{

				if(Trigger_Process == ONE_TIME_TRIGGER)
 80126d0:	4b1d      	ldr	r3, [pc, #116]	; (8012748 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xbc>)
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d107      	bne.n	80126e8 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x5c>
				{
					Expiratory_Valve_Lock_Delay=CLOSED;
 80126d8:	4b1a      	ldr	r3, [pc, #104]	; (8012744 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xb8>)
 80126da:	2201      	movs	r2, #1
 80126dc:	701a      	strb	r2, [r3, #0]
				   vTaskDelay(Expiratory_Valve_Open_Time);
 80126de:	88bb      	ldrh	r3, [r7, #4]
 80126e0:	4618      	mov	r0, r3
 80126e2:	f008 fcb3 	bl	801b04c <vTaskDelay>
 80126e6:	e009      	b.n	80126fc <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x70>
				}
				else if(Trigger_Process == COUNTINOUS_TRIGGER)
 80126e8:	4b17      	ldr	r3, [pc, #92]	; (8012748 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xbc>)
 80126ea:	781b      	ldrb	r3, [r3, #0]
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	d105      	bne.n	80126fc <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x70>
				{
					Expiratory_Valve_Lock_Delay=CLOSED;
 80126f0:	4b14      	ldr	r3, [pc, #80]	; (8012744 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xb8>)
 80126f2:	2201      	movs	r2, #1
 80126f4:	701a      	strb	r2, [r3, #0]
				    vTaskDelay(0);
 80126f6:	2000      	movs	r0, #0
 80126f8:	f008 fca8 	bl	801b04c <vTaskDelay>
				}
			}
			Peep_Status=PEEP_ACHEIVED;
 80126fc:	4b13      	ldr	r3, [pc, #76]	; (801274c <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc0>)
 80126fe:	2201      	movs	r2, #1
 8012700:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 8012702:	4b13      	ldr	r3, [pc, #76]	; (8012750 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc4>)
 8012704:	695b      	ldr	r3, [r3, #20]
 8012706:	4a12      	ldr	r2, [pc, #72]	; (8012750 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc4>)
 8012708:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801270c:	6153      	str	r3, [r2, #20]
 801270e:	e009      	b.n	8012724 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x98>
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 8012710:	4b0e      	ldr	r3, [pc, #56]	; (801274c <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc0>)
 8012712:	781b      	ldrb	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d105      	bne.n	8012724 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0x98>
		{
			ExpValve_OPEN();
 8012718:	4b0d      	ldr	r3, [pc, #52]	; (8012750 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc4>)
 801271a:	695b      	ldr	r3, [r3, #20]
 801271c:	4a0c      	ldr	r2, [pc, #48]	; (8012750 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc4>)
 801271e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012722:	6153      	str	r3, [r2, #20]
		}
	CHECK_TRIGGER_ASSIST_OFF(VC_SIMV.TRIG_WINDOW);
 8012724:	4b0b      	ldr	r3, [pc, #44]	; (8012754 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_OFF+0xc8>)
 8012726:	8bdb      	ldrh	r3, [r3, #30]
 8012728:	4618      	mov	r0, r3
 801272a:	f000 f815 	bl	8012758 <CHECK_TRIGGER_ASSIST_OFF>
}
 801272e:	bf00      	nop
 8012730:	3708      	adds	r7, #8
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	20012a98 	.word	0x20012a98
 801273c:	40007400 	.word	0x40007400
 8012740:	200125f8 	.word	0x200125f8
 8012744:	20012a34 	.word	0x20012a34
 8012748:	20012348 	.word	0x20012348
 801274c:	20012a37 	.word	0x20012a37
 8012750:	40020400 	.word	0x40020400
 8012754:	20012cb8 	.word	0x20012cb8

08012758 <CHECK_TRIGGER_ASSIST_OFF>:




static void CHECK_TRIGGER_ASSIST_OFF(uint16_t Trigger_Check_Time)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	4603      	mov	r3, r0
 8012760:	80fb      	strh	r3, [r7, #6]
	if(Trigger_Process == ONE_TIME_TRIGGER)
 8012762:	4b0a      	ldr	r3, [pc, #40]	; (801278c <CHECK_TRIGGER_ASSIST_OFF+0x34>)
 8012764:	781b      	ldrb	r3, [r3, #0]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d104      	bne.n	8012774 <CHECK_TRIGGER_ASSIST_OFF+0x1c>
	{
		Before_Trigger(Trigger_Check_Time);
 801276a:	88fb      	ldrh	r3, [r7, #6]
 801276c:	4618      	mov	r0, r3
 801276e:	f000 f80f 	bl	8012790 <Before_Trigger>
	else if(Trigger_Process == COUNTINOUS_TRIGGER)
	{
		After_Trigger(Trigger_Check_Time);
	}

}
 8012772:	e007      	b.n	8012784 <CHECK_TRIGGER_ASSIST_OFF+0x2c>
	else if(Trigger_Process == COUNTINOUS_TRIGGER)
 8012774:	4b05      	ldr	r3, [pc, #20]	; (801278c <CHECK_TRIGGER_ASSIST_OFF+0x34>)
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	2b01      	cmp	r3, #1
 801277a:	d103      	bne.n	8012784 <CHECK_TRIGGER_ASSIST_OFF+0x2c>
		After_Trigger(Trigger_Check_Time);
 801277c:	88fb      	ldrh	r3, [r7, #6]
 801277e:	4618      	mov	r0, r3
 8012780:	f000 f82e 	bl	80127e0 <After_Trigger>
}
 8012784:	bf00      	nop
 8012786:	3708      	adds	r7, #8
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}
 801278c:	20012348 	.word	0x20012348

08012790 <Before_Trigger>:



static void Before_Trigger(uint16_t Trigger_Check_Time)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	4603      	mov	r3, r0
 8012798:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 801279a:	4b0f      	ldr	r3, [pc, #60]	; (80127d8 <Before_Trigger+0x48>)
 801279c:	685a      	ldr	r2, [r3, #4]
 801279e:	88fb      	ldrh	r3, [r7, #6]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	dc11      	bgt.n	80127c8 <Before_Trigger+0x38>
 80127a4:	4b0c      	ldr	r3, [pc, #48]	; (80127d8 <Before_Trigger+0x48>)
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d00d      	beq.n	80127c8 <Before_Trigger+0x38>
	{

		if (Trigger_Type == Pressure_Trigger)
 80127ac:	4b0b      	ldr	r3, [pc, #44]	; (80127dc <Before_Trigger+0x4c>)
 80127ae:	781b      	ldrb	r3, [r3, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d102      	bne.n	80127ba <Before_Trigger+0x2a>
		{
			CHECK_PRESSURE_TRIGGER();
 80127b4:	f000 f9ae 	bl	8012b14 <CHECK_PRESSURE_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 80127b8:	e009      	b.n	80127ce <Before_Trigger+0x3e>
		}
		else if (Trigger_Type == Flow_Trigger)
 80127ba:	4b08      	ldr	r3, [pc, #32]	; (80127dc <Before_Trigger+0x4c>)
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d105      	bne.n	80127ce <Before_Trigger+0x3e>
		{
			CHECK_FLOW_TRIGGER();
 80127c2:	f000 f9cf 	bl	8012b64 <CHECK_FLOW_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 80127c6:	e002      	b.n	80127ce <Before_Trigger+0x3e>

	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 80127c8:	f000 f9fa 	bl	8012bc0 <CHECK_TRIGGER_OFFSET>
	}
}
 80127cc:	e000      	b.n	80127d0 <Before_Trigger+0x40>
		if (Trigger_Type == Pressure_Trigger)
 80127ce:	bf00      	nop
}
 80127d0:	bf00      	nop
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	20012b38 	.word	0x20012b38
 80127dc:	20012244 	.word	0x20012244

080127e0 <After_Trigger>:



static void After_Trigger(uint16_t Trigger_Check_Time)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b082      	sub	sp, #8
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	4603      	mov	r3, r0
 80127e8:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 80127ea:	4b1a      	ldr	r3, [pc, #104]	; (8012854 <After_Trigger+0x74>)
 80127ec:	685a      	ldr	r2, [r3, #4]
 80127ee:	88fb      	ldrh	r3, [r7, #6]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	dc27      	bgt.n	8012844 <After_Trigger+0x64>
 80127f4:	4b17      	ldr	r3, [pc, #92]	; (8012854 <After_Trigger+0x74>)
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d023      	beq.n	8012844 <After_Trigger+0x64>
	{
		if( (GRAPH_VALUES.flow > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (VCsimv.Trigger_Check_Wait_Time == 0) )
 80127fc:	4b16      	ldr	r3, [pc, #88]	; (8012858 <After_Trigger+0x78>)
 80127fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8012802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801280a:	dd1e      	ble.n	801284a <After_Trigger+0x6a>
 801280c:	4b13      	ldr	r3, [pc, #76]	; (801285c <After_Trigger+0x7c>)
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	2b01      	cmp	r3, #1
 8012812:	d11a      	bne.n	801284a <After_Trigger+0x6a>
 8012814:	4b12      	ldr	r3, [pc, #72]	; (8012860 <After_Trigger+0x80>)
 8012816:	69db      	ldr	r3, [r3, #28]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d116      	bne.n	801284a <After_Trigger+0x6a>
 801281c:	4b11      	ldr	r3, [pc, #68]	; (8012864 <After_Trigger+0x84>)
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d112      	bne.n	801284a <After_Trigger+0x6a>
		{
			STOP_BLOWER_IF_FLOW_SENSE();
 8012824:	f000 fa08 	bl	8012c38 <STOP_BLOWER_IF_FLOW_SENSE>
				if (Trigger_Type == Pressure_Trigger)
 8012828:	4b0f      	ldr	r3, [pc, #60]	; (8012868 <After_Trigger+0x88>)
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d102      	bne.n	8012836 <After_Trigger+0x56>
				{
					CHECK_PRESSURE_TRIGGER();
 8012830:	f000 f970 	bl	8012b14 <CHECK_PRESSURE_TRIGGER>
		if( (GRAPH_VALUES.flow > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (VCsimv.Trigger_Check_Wait_Time == 0) )
 8012834:	e009      	b.n	801284a <After_Trigger+0x6a>
				}
				else if (Trigger_Type == Flow_Trigger)
 8012836:	4b0c      	ldr	r3, [pc, #48]	; (8012868 <After_Trigger+0x88>)
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	2b01      	cmp	r3, #1
 801283c:	d105      	bne.n	801284a <After_Trigger+0x6a>
				{
					CHECK_FLOW_TRIGGER();
 801283e:	f000 f991 	bl	8012b64 <CHECK_FLOW_TRIGGER>
		if( (GRAPH_VALUES.flow > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (VCsimv.Trigger_Check_Wait_Time == 0) )
 8012842:	e002      	b.n	801284a <After_Trigger+0x6a>
		 }
	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 8012844:	f000 f9bc 	bl	8012bc0 <CHECK_TRIGGER_OFFSET>
	}
}
 8012848:	e000      	b.n	801284c <After_Trigger+0x6c>
		if( (GRAPH_VALUES.flow > 0) && (Peep_Status==PEEP_ACHEIVED) && (PEEP_Maintain_Parameter.CHECK_TRIGGER==0) && (VCsimv.Trigger_Check_Wait_Time == 0) )
 801284a:	bf00      	nop
}
 801284c:	bf00      	nop
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	20012b38 	.word	0x20012b38
 8012858:	200125f8 	.word	0x200125f8
 801285c:	20012a37 	.word	0x20012a37
 8012860:	20012c74 	.word	0x20012c74
 8012864:	20012a98 	.word	0x20012a98
 8012868:	20012244 	.word	0x20012244

0801286c <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset>:



void VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset()
{
 801286c:	b580      	push	{r7, lr}
 801286e:	af00      	add	r7, sp, #0
	if(Patient_Trigger == PATIENT_TRIGGER_HAPPEN)
 8012870:	4b09      	ldr	r3, [pc, #36]	; (8012898 <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x2c>)
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	2b01      	cmp	r3, #1
 8012876:	d108      	bne.n	801288a <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x1e>
	{
		Trigger_Process                           = COUNTINOUS_TRIGGER;
 8012878:	4b08      	ldr	r3, [pc, #32]	; (801289c <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x30>)
 801287a:	2201      	movs	r2, #1
 801287c:	701a      	strb	r2, [r3, #0]
		Volume_Mode_Blower_control.BLOWER_DAC_VAL = RESET;
 801287e:	4b08      	ldr	r3, [pc, #32]	; (80128a0 <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x34>)
 8012880:	2200      	movs	r2, #0
 8012882:	801a      	strh	r2, [r3, #0]
		VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset();
 8012884:	f000 f84a 	bl	801291c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset>
	else
	{
		Trigger_Process    = ONE_TIME_TRIGGER;
		VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
	}
}
 8012888:	e004      	b.n	8012894 <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x28>
		Trigger_Process    = ONE_TIME_TRIGGER;
 801288a:	4b04      	ldr	r3, [pc, #16]	; (801289c <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset+0x30>)
 801288c:	2200      	movs	r2, #0
 801288e:	701a      	strb	r2, [r3, #0]
		VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
 8012890:	f000 fc22 	bl	80130d8 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>
}
 8012894:	bf00      	nop
 8012896:	bd80      	pop	{r7, pc}
 8012898:	2001263d 	.word	0x2001263d
 801289c:	20012348 	.word	0x20012348
 80128a0:	200129b0 	.word	0x200129b0

080128a4 <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset>:



void VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset()
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	af00      	add	r7, sp, #0
	if(Patient_Trigger == PATIENT_TRIGGER_HAPPEN)
 80128a8:	4b06      	ldr	r3, [pc, #24]	; (80128c4 <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x20>)
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	2b01      	cmp	r3, #1
 80128ae:	d102      	bne.n	80128b6 <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x12>
	{
		VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset();
 80128b0:	f000 f8d0 	bl	8012a54 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset>
	else
	{
		Volume_Mode_Blower_control.BLOWER_DAC_VAL=RESET;
		VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
	}
}
 80128b4:	e004      	b.n	80128c0 <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x1c>
		Volume_Mode_Blower_control.BLOWER_DAC_VAL=RESET;
 80128b6:	4b04      	ldr	r3, [pc, #16]	; (80128c8 <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset+0x24>)
 80128b8:	2200      	movs	r2, #0
 80128ba:	801a      	strh	r2, [r3, #0]
		VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
 80128bc:	f000 fd1a 	bl	80132f4 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>
}
 80128c0:	bf00      	nop
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	2001263d 	.word	0x2001263d
 80128c8:	200129b0 	.word	0x200129b0

080128cc <Switch_TASK_Inspiration_CYCLE>:



static void Switch_TASK_Inspiration_CYCLE()
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af02      	add	r7, sp, #8
	vTaskDelete(One_Time_Handler);
 80128d2:	4b0d      	ldr	r3, [pc, #52]	; (8012908 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	4618      	mov	r0, r3
 80128d8:	f008 fb28 	bl	801af2c <vTaskDelete>
	TIME_Base_parameter._INSPIRATION_TIME = 0 ;
 80128dc:	4b0b      	ldr	r3, [pc, #44]	; (801290c <Switch_TASK_Inspiration_CYCLE+0x40>)
 80128de:	2200      	movs	r2, #0
 80128e0:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter._EXPIRATION_TIME  = 0 ;
 80128e2:	4b0a      	ldr	r3, [pc, #40]	; (801290c <Switch_TASK_Inspiration_CYCLE+0x40>)
 80128e4:	2200      	movs	r2, #0
 80128e6:	605a      	str	r2, [r3, #4]
	Next_Half_Breath_Cycle                = Generate_Inspiration_Cycle;
 80128e8:	4b09      	ldr	r3, [pc, #36]	; (8012910 <Switch_TASK_Inspiration_CYCLE+0x44>)
 80128ea:	2200      	movs	r2, #0
 80128ec:	701a      	strb	r2, [r3, #0]
	xTaskCreate(One_Time_Task,"One-Time-Task", 128, NULL,3, &One_Time_Handler);
 80128ee:	4b06      	ldr	r3, [pc, #24]	; (8012908 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 80128f0:	9301      	str	r3, [sp, #4]
 80128f2:	2303      	movs	r3, #3
 80128f4:	9300      	str	r3, [sp, #0]
 80128f6:	2300      	movs	r3, #0
 80128f8:	2280      	movs	r2, #128	; 0x80
 80128fa:	4906      	ldr	r1, [pc, #24]	; (8012914 <Switch_TASK_Inspiration_CYCLE+0x48>)
 80128fc:	4806      	ldr	r0, [pc, #24]	; (8012918 <Switch_TASK_Inspiration_CYCLE+0x4c>)
 80128fe:	f008 f9de 	bl	801acbe <xTaskCreate>
}
 8012902:	bf00      	nop
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	200129cc 	.word	0x200129cc
 801290c:	20012b38 	.word	0x20012b38
 8012910:	2001269e 	.word	0x2001269e
 8012914:	0801d22c 	.word	0x0801d22c
 8012918:	08011609 	.word	0x08011609

0801291c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset>:



void VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset()
{
 801291c:	b590      	push	{r4, r7, lr}
 801291e:	b083      	sub	sp, #12
 8012920:	af02      	add	r7, sp, #8
	Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 8012922:	4b39      	ldr	r3, [pc, #228]	; (8012a08 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xec>)
 8012924:	2200      	movs	r2, #0
 8012926:	701a      	strb	r2, [r3, #0]
	Find_Average_Flow();
 8012928:	f7fb faae 	bl	800de88 <Find_Average_Flow>
	Breath_Count         = Count_The_Breath;
 801292c:	4b37      	ldr	r3, [pc, #220]	; (8012a0c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf0>)
 801292e:	2201      	movs	r2, #1
 8012930:	701a      	strb	r2, [r3, #0]
	ExpValve_CLOSE();
 8012932:	4b37      	ldr	r3, [pc, #220]	; (8012a10 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf4>)
 8012934:	695b      	ldr	r3, [r3, #20]
 8012936:	4a36      	ldr	r2, [pc, #216]	; (8012a10 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf4>)
 8012938:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801293c:	6153      	str	r3, [r2, #20]
	PIP_AVERAGE();
 801293e:	f7f6 f9f3 	bl	8008d28 <PIP_AVERAGE>
	PEEP_AVERAGE();
 8012942:	f7f6 fa17 	bl	8008d74 <PEEP_AVERAGE>
	Set_Blower_Val();
 8012946:	f000 f989 	bl	8012c5c <Set_Blower_Val>
	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 801294a:	4b32      	ldr	r3, [pc, #200]	; (8012a14 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xf8>)
 801294c:	78db      	ldrb	r3, [r3, #3]
 801294e:	4618      	mov	r0, r3
 8012950:	f7f9 ffa2 	bl	800c898 <O2_DAC_Control>
	Check_Alert();
 8012954:	f7ee fbd6 	bl	8001104 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 8012958:	f7ee fc8c 	bl	8001274 <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 801295c:	f7ef f932 	bl	8001bc4 <LED_Alert>
	Alert_Status = NO_ALERT;
 8012960:	4b2d      	ldr	r3, [pc, #180]	; (8012a18 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0xfc>)
 8012962:	2200      	movs	r2, #0
 8012964:	701a      	strb	r2, [r3, #0]
	Sampled_Parameter_Inspiration_time();
 8012966:	f7ff fb8f 	bl	8012088 <Sampled_Parameter_Inspiration_time>
	GRAPH_VALUES.Maximum_oxygen_flow   = 0;                 //new
 801296a:	4b2c      	ldr	r3, [pc, #176]	; (8012a1c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x100>)
 801296c:	2200      	movs	r2, #0
 801296e:	829a      	strh	r2, [r3, #20]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time      = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 8012970:	4b2b      	ldr	r3, [pc, #172]	; (8012a20 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x104>)
 8012972:	7c18      	ldrb	r0, [r3, #16]
 8012974:	4b2b      	ldr	r3, [pc, #172]	; (8012a24 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 8012976:	78d9      	ldrb	r1, [r3, #3]
 8012978:	4b2a      	ldr	r3, [pc, #168]	; (8012a24 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 801297a:	689a      	ldr	r2, [r3, #8]
 801297c:	4b29      	ldr	r3, [pc, #164]	; (8012a24 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 801297e:	789c      	ldrb	r4, [r3, #2]
																														      VC_SIMV.RESPIRATORY_RATE_Val,
																														      VC_SIMV.INSPIRATION_TIME,
																														      VC_SIMV.PEEP_Val,
																														      PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8012980:	4b27      	ldr	r3, [pc, #156]	; (8012a20 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x104>)
 8012982:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time      = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 8012986:	b29b      	uxth	r3, r3
 8012988:	9300      	str	r3, [sp, #0]
 801298a:	4623      	mov	r3, r4
 801298c:	f7f5 f8f4 	bl	8007b78 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode>
 8012990:	4603      	mov	r3, r0
 8012992:	b21a      	sxth	r2, r3
 8012994:	4b22      	ldr	r3, [pc, #136]	; (8012a20 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x104>)
 8012996:	809a      	strh	r2, [r3, #4]

	if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 8012998:	4b23      	ldr	r3, [pc, #140]	; (8012a28 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x10c>)
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	2b01      	cmp	r3, #1
 801299e:	d103      	bne.n	80129a8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x8c>
	{
		BREATH_STATE                                      = PATIENT_TRIGGER_INSPIRATION;
 80129a0:	4b22      	ldr	r3, [pc, #136]	; (8012a2c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x110>)
 80129a2:	2202      	movs	r2, #2
 80129a4:	701a      	strb	r2, [r3, #0]
 80129a6:	e002      	b.n	80129ae <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x92>

	}
	else
	{
		BREATH_STATE                                       = INSPIRATION_CYCLE;
 80129a8:	4b20      	ldr	r3, [pc, #128]	; (8012a2c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x110>)
 80129aa:	2200      	movs	r2, #0
 80129ac:	701a      	strb	r2, [r3, #0]
	}

	Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 80129ae:	4b20      	ldr	r3, [pc, #128]	; (8012a30 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x114>)
 80129b0:	2200      	movs	r2, #0
 80129b2:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			                   = OPENED;
 80129b4:	4b1f      	ldr	r3, [pc, #124]	; (8012a34 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x118>)
 80129b6:	2200      	movs	r2, #0
 80129b8:	701a      	strb	r2, [r3, #0]
	PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 80129ba:	4b1f      	ldr	r3, [pc, #124]	; (8012a38 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x11c>)
 80129bc:	2200      	movs	r2, #0
 80129be:	701a      	strb	r2, [r3, #0]
	TIME_Base_parameter._INSPIRATION_TIME                      = VC_SIMV.INSPIRATION_TIME;
 80129c0:	4b18      	ldr	r3, [pc, #96]	; (8012a24 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 80129c2:	689b      	ldr	r3, [r3, #8]
 80129c4:	461a      	mov	r2, r3
 80129c6:	4b1d      	ldr	r3, [pc, #116]	; (8012a3c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x120>)
 80129c8:	601a      	str	r2, [r3, #0]

	Volume_Achieved_Time                                       = 0;
 80129ca:	4b1d      	ldr	r3, [pc, #116]	; (8012a40 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x124>)
 80129cc:	2200      	movs	r2, #0
 80129ce:	801a      	strh	r2, [r3, #0]
	Total_Volume_Achieved_Time                                 = 0;
 80129d0:	4b1c      	ldr	r3, [pc, #112]	; (8012a44 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x128>)
 80129d2:	2200      	movs	r2, #0
 80129d4:	801a      	strh	r2, [r3, #0]

	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 80129d6:	4b19      	ldr	r3, [pc, #100]	; (8012a3c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x120>)
 80129d8:	2200      	movs	r2, #0
 80129da:	609a      	str	r2, [r3, #8]
	GRAPH_VALUES.volume                                        = RESET;
 80129dc:	4b0f      	ldr	r3, [pc, #60]	; (8012a1c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x100>)
 80129de:	f04f 0200 	mov.w	r2, #0
 80129e2:	609a      	str	r2, [r3, #8]
	Volume_max                                                 = RESET;
 80129e4:	4b18      	ldr	r3, [pc, #96]	; (8012a48 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x12c>)
 80129e6:	2200      	movs	r2, #0
 80129e8:	601a      	str	r2, [r3, #0]
	Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 80129ea:	4b18      	ldr	r3, [pc, #96]	; (8012a4c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x130>)
 80129ec:	2201      	movs	r2, #1
 80129ee:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 80129f0:	4b17      	ldr	r3, [pc, #92]	; (8012a50 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x134>)
 80129f2:	2201      	movs	r2, #1
 80129f4:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_SIMV.INSPIRATION_TIME);
 80129f6:	4b0b      	ldr	r3, [pc, #44]	; (8012a24 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Inspiration_Time_Variables_Reset+0x108>)
 80129f8:	689b      	ldr	r3, [r3, #8]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f008 fb26 	bl	801b04c <vTaskDelay>
}
 8012a00:	bf00      	nop
 8012a02:	3704      	adds	r7, #4
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd90      	pop	{r4, r7, pc}
 8012a08:	20012b71 	.word	0x20012b71
 8012a0c:	200122a8 	.word	0x200122a8
 8012a10:	40020400 	.word	0x40020400
 8012a14:	200124f0 	.word	0x200124f0
 8012a18:	2001287c 	.word	0x2001287c
 8012a1c:	200125f8 	.word	0x200125f8
 8012a20:	20012c74 	.word	0x20012c74
 8012a24:	20012cb8 	.word	0x20012cb8
 8012a28:	2001263d 	.word	0x2001263d
 8012a2c:	20012a3c 	.word	0x20012a3c
 8012a30:	20012a37 	.word	0x20012a37
 8012a34:	20012a34 	.word	0x20012a34
 8012a38:	200124bc 	.word	0x200124bc
 8012a3c:	20012b38 	.word	0x20012b38
 8012a40:	200122f4 	.word	0x200122f4
 8012a44:	20012c28 	.word	0x20012c28
 8012a48:	20012c70 	.word	0x20012c70
 8012a4c:	2001269e 	.word	0x2001269e
 8012a50:	20012870 	.word	0x20012870

08012a54 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset>:



void VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset()
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	af00      	add	r7, sp, #0
	if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 8012a58:	4b24      	ldr	r3, [pc, #144]	; (8012aec <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x98>)
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d103      	bne.n	8012a68 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x14>
	{
		BREATH_STATE                                      = PATIENT_TRIGGER_EXPIRATION;
 8012a60:	4b23      	ldr	r3, [pc, #140]	; (8012af0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x9c>)
 8012a62:	2203      	movs	r2, #3
 8012a64:	701a      	strb	r2, [r3, #0]
 8012a66:	e002      	b.n	8012a6e <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x1a>

	}
	else
	{
		BREATH_STATE                                       = EXPIRATION_CYCLE;
 8012a68:	4b21      	ldr	r3, [pc, #132]	; (8012af0 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x9c>)
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	701a      	strb	r2, [r3, #0]
	}
	PEEP_Maintain_Parameter.CHECK_TRIGGER               = 1500;
 8012a6e:	4b21      	ldr	r3, [pc, #132]	; (8012af4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa0>)
 8012a70:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012a74:	61da      	str	r2, [r3, #28]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 8012a76:	4b1f      	ldr	r3, [pc, #124]	; (8012af4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa0>)
 8012a78:	2200      	movs	r2, #0
 8012a7a:	615a      	str	r2, [r3, #20]
	PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 8012a7c:	4b1d      	ldr	r3, [pc, #116]	; (8012af4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa0>)
 8012a7e:	2200      	movs	r2, #0
 8012a80:	619a      	str	r2, [r3, #24]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 8012a82:	4b1c      	ldr	r3, [pc, #112]	; (8012af4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa0>)
 8012a84:	2200      	movs	r2, #0
 8012a86:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 8012a88:	4b1a      	ldr	r3, [pc, #104]	; (8012af4 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa0>)
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	60da      	str	r2, [r3, #12]
	Patient_Trigger                                     = NO_PATIENT_TRIGGER;
 8012a8e:	4b17      	ldr	r3, [pc, #92]	; (8012aec <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0x98>)
 8012a90:	2200      	movs	r2, #0
 8012a92:	701a      	strb	r2, [r3, #0]
	Trigger_Time_Monitor();
 8012a94:	f000 f8fa 	bl	8012c8c <Trigger_Time_Monitor>
	Volume_Mode_Blower_control.PEEP_BLOWER_DAC_VAL      = TUNE_PEEP_BLOWER(&Volume_Mode_Blower_control.LAST_PEEP_BLOWER_DAC_VAL,Common_Mode_Parameter._PEEP_Val );
 8012a98:	4b17      	ldr	r3, [pc, #92]	; (8012af8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa4>)
 8012a9a:	785b      	ldrb	r3, [r3, #1]
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	4817      	ldr	r0, [pc, #92]	; (8012afc <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa8>)
 8012aa0:	f7fa fa74 	bl	800cf8c <TUNE_PEEP_BLOWER>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	4b15      	ldr	r3, [pc, #84]	; (8012b00 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xac>)
 8012aaa:	819a      	strh	r2, [r3, #12]
	Volume_Mode_Blower_control.BLOWER_DAC_VAL           = Volume_Mode_Blower_control.PEEP_BLOWER_DAC_VAL;
 8012aac:	4b14      	ldr	r3, [pc, #80]	; (8012b00 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xac>)
 8012aae:	899a      	ldrh	r2, [r3, #12]
 8012ab0:	4b13      	ldr	r3, [pc, #76]	; (8012b00 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xac>)
 8012ab2:	801a      	strh	r2, [r3, #0]
	Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 8012ab4:	4b10      	ldr	r3, [pc, #64]	; (8012af8 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xa4>)
 8012ab6:	78db      	ldrb	r3, [r3, #3]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7f9 fcf9 	bl	800c4b0 <Calculate_O2>
	Alert_Expiration_Time_Parameter();
 8012abe:	f7ee fc53 	bl	8001368 <Alert_Expiration_Time_Parameter>
	TIME_Base_parameter._EXPIRATION_TIME                = VC_SIMV.EXPIRATION_TIME;
 8012ac2:	4b10      	ldr	r3, [pc, #64]	; (8012b04 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xb0>)
 8012ac4:	68db      	ldr	r3, [r3, #12]
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	4b0f      	ldr	r3, [pc, #60]	; (8012b08 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xb4>)
 8012aca:	605a      	str	r2, [r3, #4]



	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 8012acc:	4b0e      	ldr	r3, [pc, #56]	; (8012b08 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xb4>)
 8012ace:	2200      	movs	r2, #0
 8012ad0:	60da      	str	r2, [r3, #12]
	Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 8012ad2:	4b0e      	ldr	r3, [pc, #56]	; (8012b0c <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xb8>)
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 8012ad8:	4b0d      	ldr	r3, [pc, #52]	; (8012b10 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xbc>)
 8012ada:	2202      	movs	r2, #2
 8012adc:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_SIMV.EXPIRATION_TIME);
 8012ade:	4b09      	ldr	r3, [pc, #36]	; (8012b04 <VC_SIMV_Assist_OFF_PATIENT_TRIGGER_HAPPEN_Expiration_Time_Variables_Reset+0xb0>)
 8012ae0:	68db      	ldr	r3, [r3, #12]
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f008 fab2 	bl	801b04c <vTaskDelay>
}
 8012ae8:	bf00      	nop
 8012aea:	bd80      	pop	{r7, pc}
 8012aec:	2001263d 	.word	0x2001263d
 8012af0:	20012a3c 	.word	0x20012a3c
 8012af4:	20012c74 	.word	0x20012c74
 8012af8:	200124f0 	.word	0x200124f0
 8012afc:	200129be 	.word	0x200129be
 8012b00:	200129b0 	.word	0x200129b0
 8012b04:	20012cb8 	.word	0x20012cb8
 8012b08:	20012b38 	.word	0x20012b38
 8012b0c:	2001269e 	.word	0x2001269e
 8012b10:	20012870 	.word	0x20012870

08012b14 <CHECK_PRESSURE_TRIGGER>:


static void CHECK_PRESSURE_TRIGGER()
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	af00      	add	r7, sp, #0
	if (( GRAPH_VALUES.pressure < (Pressure_Trigger_Offset - VC_SIMV.TRIG_LMT )))
 8012b18:	4b0e      	ldr	r3, [pc, #56]	; (8012b54 <CHECK_PRESSURE_TRIGGER+0x40>)
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	ee07 3a90 	vmov	s15, r3
 8012b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012b24:	4b0c      	ldr	r3, [pc, #48]	; (8012b58 <CHECK_PRESSURE_TRIGGER+0x44>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	ee07 3a90 	vmov	s15, r3
 8012b2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012b30:	4b0a      	ldr	r3, [pc, #40]	; (8012b5c <CHECK_PRESSURE_TRIGGER+0x48>)
 8012b32:	edd3 7a05 	vldr	s15, [r3, #20]
 8012b36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b42:	d400      	bmi.n	8012b46 <CHECK_PRESSURE_TRIGGER+0x32>
	{
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 8012b44:	e004      	b.n	8012b50 <CHECK_PRESSURE_TRIGGER+0x3c>
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
 8012b46:	4b06      	ldr	r3, [pc, #24]	; (8012b60 <CHECK_PRESSURE_TRIGGER+0x4c>)
 8012b48:	2201      	movs	r2, #1
 8012b4a:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 8012b4c:	f7ff febe 	bl	80128cc <Switch_TASK_Inspiration_CYCLE>
}
 8012b50:	bf00      	nop
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	200125f8 	.word	0x200125f8
 8012b58:	2001296c 	.word	0x2001296c
 8012b5c:	20012cb8 	.word	0x20012cb8
 8012b60:	2001263d 	.word	0x2001263d

08012b64 <CHECK_FLOW_TRIGGER>:


static void CHECK_FLOW_TRIGGER()
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+VC_SIMV.TRIG_LMT )))
 8012b68:	4b10      	ldr	r3, [pc, #64]	; (8012bac <CHECK_FLOW_TRIGGER+0x48>)
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	ee07 3a90 	vmov	s15, r3
 8012b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012b74:	4b0e      	ldr	r3, [pc, #56]	; (8012bb0 <CHECK_FLOW_TRIGGER+0x4c>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	ee07 3a90 	vmov	s15, r3
 8012b7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012b80:	4b0c      	ldr	r3, [pc, #48]	; (8012bb4 <CHECK_FLOW_TRIGGER+0x50>)
 8012b82:	edd3 7a05 	vldr	s15, [r3, #20]
 8012b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b92:	dc00      	bgt.n	8012b96 <CHECK_FLOW_TRIGGER+0x32>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();

	}
}
 8012b94:	e008      	b.n	8012ba8 <CHECK_FLOW_TRIGGER+0x44>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
 8012b96:	4b05      	ldr	r3, [pc, #20]	; (8012bac <CHECK_FLOW_TRIGGER+0x48>)
 8012b98:	781a      	ldrb	r2, [r3, #0]
 8012b9a:	4b07      	ldr	r3, [pc, #28]	; (8012bb8 <CHECK_FLOW_TRIGGER+0x54>)
 8012b9c:	701a      	strb	r2, [r3, #0]
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
 8012b9e:	4b07      	ldr	r3, [pc, #28]	; (8012bbc <CHECK_FLOW_TRIGGER+0x58>)
 8012ba0:	2201      	movs	r2, #1
 8012ba2:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 8012ba4:	f7ff fe92 	bl	80128cc <Switch_TASK_Inspiration_CYCLE>
}
 8012ba8:	bf00      	nop
 8012baa:	bd80      	pop	{r7, pc}
 8012bac:	200129aa 	.word	0x200129aa
 8012bb0:	20012900 	.word	0x20012900
 8012bb4:	20012cb8 	.word	0x20012cb8
 8012bb8:	20012b70 	.word	0x20012b70
 8012bbc:	2001263d 	.word	0x2001263d

08012bc0 <CHECK_TRIGGER_OFFSET>:

static void CHECK_TRIGGER_OFFSET()
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	af00      	add	r7, sp, #0
	if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 8012bc4:	4b18      	ldr	r3, [pc, #96]	; (8012c28 <CHECK_TRIGGER_OFFSET+0x68>)
 8012bc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8012bca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd2:	d013      	beq.n	8012bfc <CHECK_TRIGGER_OFFSET+0x3c>
 8012bd4:	4b14      	ldr	r3, [pc, #80]	; (8012c28 <CHECK_TRIGGER_OFFSET+0x68>)
 8012bd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8012bda:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8012bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be6:	da00      	bge.n	8012bea <CHECK_TRIGGER_OFFSET+0x2a>
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
		FLOW_TRIGGER             =  RESET;

	}
}
 8012be8:	e019      	b.n	8012c1e <CHECK_TRIGGER_OFFSET+0x5e>
	if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 8012bea:	4b0f      	ldr	r3, [pc, #60]	; (8012c28 <CHECK_TRIGGER_OFFSET+0x68>)
 8012bec:	edd3 7a01 	vldr	s15, [r3, #4]
 8012bf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf8:	d400      	bmi.n	8012bfc <CHECK_TRIGGER_OFFSET+0x3c>
}
 8012bfa:	e010      	b.n	8012c1e <CHECK_TRIGGER_OFFSET+0x5e>
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 8012bfc:	4b0a      	ldr	r3, [pc, #40]	; (8012c28 <CHECK_TRIGGER_OFFSET+0x68>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	461a      	mov	r2, r3
 8012c02:	4b0a      	ldr	r3, [pc, #40]	; (8012c2c <CHECK_TRIGGER_OFFSET+0x6c>)
 8012c04:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 8012c06:	4b08      	ldr	r3, [pc, #32]	; (8012c28 <CHECK_TRIGGER_OFFSET+0x68>)
 8012c08:	edd3 7a01 	vldr	s15, [r3, #4]
 8012c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012c10:	ee17 2a90 	vmov	r2, s15
 8012c14:	4b06      	ldr	r3, [pc, #24]	; (8012c30 <CHECK_TRIGGER_OFFSET+0x70>)
 8012c16:	601a      	str	r2, [r3, #0]
		FLOW_TRIGGER             =  RESET;
 8012c18:	4b06      	ldr	r3, [pc, #24]	; (8012c34 <CHECK_TRIGGER_OFFSET+0x74>)
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	701a      	strb	r2, [r3, #0]
}
 8012c1e:	bf00      	nop
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr
 8012c28:	200125f8 	.word	0x200125f8
 8012c2c:	2001296c 	.word	0x2001296c
 8012c30:	20012900 	.word	0x20012900
 8012c34:	200129aa 	.word	0x200129aa

08012c38 <STOP_BLOWER_IF_FLOW_SENSE>:


static void STOP_BLOWER_IF_FLOW_SENSE()
{
 8012c38:	b480      	push	{r7}
 8012c3a:	af00      	add	r7, sp, #0
	Blower_Signal(0);
 8012c3c:	4b05      	ldr	r3, [pc, #20]	; (8012c54 <STOP_BLOWER_IF_FLOW_SENSE+0x1c>)
 8012c3e:	2200      	movs	r2, #0
 8012c40:	609a      	str	r2, [r3, #8]
	VCsimv.Blower_Wait_Time_Milli_Second = 500;
 8012c42:	4b05      	ldr	r3, [pc, #20]	; (8012c58 <STOP_BLOWER_IF_FLOW_SENSE+0x20>)
 8012c44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8012c48:	601a      	str	r2, [r3, #0]
}
 8012c4a:	bf00      	nop
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr
 8012c54:	40007400 	.word	0x40007400
 8012c58:	20012a98 	.word	0x20012a98

08012c5c <Set_Blower_Val>:



static void Set_Blower_Val()
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	af00      	add	r7, sp, #0
	if(PEEP_Maintain_Parameter.PEEP_AVG_VAL   == VC_SIMV.PEEP_Val  )
 8012c60:	4b07      	ldr	r3, [pc, #28]	; (8012c80 <Set_Blower_Val+0x24>)
 8012c62:	7c1a      	ldrb	r2, [r3, #16]
 8012c64:	4b07      	ldr	r3, [pc, #28]	; (8012c84 <Set_Blower_Val+0x28>)
 8012c66:	789b      	ldrb	r3, [r3, #2]
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d107      	bne.n	8012c7c <Set_Blower_Val+0x20>
	{
		Change_DAC_Values(VC_SIMV.PEEP_Val ,Pressure_Mode_blower_control.PEEP_BLOWER_DAC_VAL);
 8012c6c:	4b05      	ldr	r3, [pc, #20]	; (8012c84 <Set_Blower_Val+0x28>)
 8012c6e:	789b      	ldrb	r3, [r3, #2]
 8012c70:	4a05      	ldr	r2, [pc, #20]	; (8012c88 <Set_Blower_Val+0x2c>)
 8012c72:	8a12      	ldrh	r2, [r2, #16]
 8012c74:	4611      	mov	r1, r2
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7f6 fb86 	bl	8009388 <Change_DAC_Values>
	}
}
 8012c7c:	bf00      	nop
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	20012c74 	.word	0x20012c74
 8012c84:	20012cb8 	.word	0x20012cb8
 8012c88:	20012978 	.word	0x20012978

08012c8c <Trigger_Time_Monitor>:



static void Trigger_Time_Monitor()
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	af00      	add	r7, sp, #0
	VC_SIMV.CALC_TRIG_VAL 	                 =  (VC_SIMV.EXPIRATION_TIME   - PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time );
 8012c90:	4b11      	ldr	r3, [pc, #68]	; (8012cd8 <Trigger_Time_Monitor+0x4c>)
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	b29a      	uxth	r2, r3
 8012c96:	4b11      	ldr	r3, [pc, #68]	; (8012cdc <Trigger_Time_Monitor+0x50>)
 8012c98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	1ad3      	subs	r3, r2, r3
 8012ca0:	b29a      	uxth	r2, r3
 8012ca2:	4b0d      	ldr	r3, [pc, #52]	; (8012cd8 <Trigger_Time_Monitor+0x4c>)
 8012ca4:	835a      	strh	r2, [r3, #26]
	if(VC_SIMV.CALC_TRIG_VAL <0)
	{
		VC_SIMV.CALC_TRIG_VAL = (VC_SIMV.CALC_TRIG_VAL * (-1));
	}
	VC_SIMV.TOLERANCE_EWAVE =  VC_SIMV.TRIG_TIME;
 8012ca6:	4b0c      	ldr	r3, [pc, #48]	; (8012cd8 <Trigger_Time_Monitor+0x4c>)
 8012ca8:	8b1a      	ldrh	r2, [r3, #24]
 8012caa:	4b0b      	ldr	r3, [pc, #44]	; (8012cd8 <Trigger_Time_Monitor+0x4c>)
 8012cac:	839a      	strh	r2, [r3, #28]
	if(VC_SIMV.CALC_TRIG_VAL < VC_SIMV.TRIG_TIME )
 8012cae:	4b0a      	ldr	r3, [pc, #40]	; (8012cd8 <Trigger_Time_Monitor+0x4c>)
 8012cb0:	8b5a      	ldrh	r2, [r3, #26]
 8012cb2:	4b09      	ldr	r3, [pc, #36]	; (8012cd8 <Trigger_Time_Monitor+0x4c>)
 8012cb4:	8b1b      	ldrh	r3, [r3, #24]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d205      	bcs.n	8012cc6 <Trigger_Time_Monitor+0x3a>
	{
		VC_SIMV.TOLERANCE_EWAVE =  (VC_SIMV.TRIG_TIME - 200) ;
 8012cba:	4b07      	ldr	r3, [pc, #28]	; (8012cd8 <Trigger_Time_Monitor+0x4c>)
 8012cbc:	8b1b      	ldrh	r3, [r3, #24]
 8012cbe:	3bc8      	subs	r3, #200	; 0xc8
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	4b05      	ldr	r3, [pc, #20]	; (8012cd8 <Trigger_Time_Monitor+0x4c>)
 8012cc4:	839a      	strh	r2, [r3, #28]
	}

	VC_SIMV.TRIG_WINDOW		                 = VC_SIMV.TOLERANCE_EWAVE;
 8012cc6:	4b04      	ldr	r3, [pc, #16]	; (8012cd8 <Trigger_Time_Monitor+0x4c>)
 8012cc8:	8b9a      	ldrh	r2, [r3, #28]
 8012cca:	4b03      	ldr	r3, [pc, #12]	; (8012cd8 <Trigger_Time_Monitor+0x4c>)
 8012ccc:	83da      	strh	r2, [r3, #30]
}
 8012cce:	bf00      	nop
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr
 8012cd8:	20012cb8 	.word	0x20012cb8
 8012cdc:	20012c74 	.word	0x20012c74

08012ce0 <Vc_Simv_Mode_Packet_Data>:
 * This task is to extract the VC-SIMV mode variable from NRF Bluetooth.
 * @param RECEIVE_GRAPH_PACKET structure pointer.
 */

void Vc_Simv_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
	uint32_t One_Breathe_time;
	VC_SIMV.VOLUME_Val             = Receive_Graph_Packet->VTI_VS;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	88da      	ldrh	r2, [r3, #6]
 8012cec:	4b5f      	ldr	r3, [pc, #380]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012cee:	801a      	strh	r2, [r3, #0]
	VC_SIMV.PEEP_Val               = Receive_Graph_Packet->PEEP_CPAP_Plow;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	795a      	ldrb	r2, [r3, #5]
 8012cf4:	4b5d      	ldr	r3, [pc, #372]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012cf6:	709a      	strb	r2, [r3, #2]
	VC_SIMV.FIO2_Val               = Receive_Graph_Packet->FiO2;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	7a1a      	ldrb	r2, [r3, #8]
 8012cfc:	4b5b      	ldr	r3, [pc, #364]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012cfe:	711a      	strb	r2, [r3, #4]

	VC_SIMV.RESPIRATORY_RATE_Val   = Receive_Graph_Packet->RR;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	7a5a      	ldrb	r2, [r3, #9]
 8012d04:	4b59      	ldr	r3, [pc, #356]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d06:	70da      	strb	r2, [r3, #3]
	One_Breathe_time               = (One_Minite_In_MS / VC_SIMV.RESPIRATORY_RATE_Val);
 8012d08:	4b58      	ldr	r3, [pc, #352]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d0a:	78db      	ldrb	r3, [r3, #3]
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d16:	60fb      	str	r3, [r7, #12]
	VC_SIMV.INSPIRATION_TIME       = ( ( Receive_Graph_Packet->T_high) * 100 );
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	7a9b      	ldrb	r3, [r3, #10]
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	2364      	movs	r3, #100	; 0x64
 8012d20:	fb03 f302 	mul.w	r3, r3, r2
 8012d24:	461a      	mov	r2, r3
 8012d26:	4b51      	ldr	r3, [pc, #324]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d28:	609a      	str	r2, [r3, #8]
	VC_SIMV.EXPIRATION_TIME        = (One_Breathe_time - VC_SIMV.INSPIRATION_TIME);
 8012d2a:	4b50      	ldr	r3, [pc, #320]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d2c:	689b      	ldr	r3, [r3, #8]
 8012d2e:	68fa      	ldr	r2, [r7, #12]
 8012d30:	1ad3      	subs	r3, r2, r3
 8012d32:	4a4e      	ldr	r2, [pc, #312]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d34:	60d3      	str	r3, [r2, #12]

	VC_SIMV.FLOW_RATE_Val          = Receive_Graph_Packet->Flow_Limit_FiO2_Flow_Limit;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	7b5a      	ldrb	r2, [r3, #13]
 8012d3a:	4b4c      	ldr	r3, [pc, #304]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d3c:	749a      	strb	r2, [r3, #18]


	VC_SIMV.Assist_Control    	   = (0x80 & (Receive_Graph_Packet->Control_Byte))>>7;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	78db      	ldrb	r3, [r3, #3]
 8012d42:	09db      	lsrs	r3, r3, #7
 8012d44:	b2da      	uxtb	r2, r3
 8012d46:	4b49      	ldr	r3, [pc, #292]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d48:	f883 2020 	strb.w	r2, [r3, #32]
	VC_SIMV.TRIG_TYPE     	       = (0x40 & (Receive_Graph_Packet->Control_Byte))>>6;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	78db      	ldrb	r3, [r3, #3]
 8012d50:	099b      	lsrs	r3, r3, #6
 8012d52:	b2db      	uxtb	r3, r3
 8012d54:	f003 0301 	and.w	r3, r3, #1
 8012d58:	b2da      	uxtb	r2, r3
 8012d5a:	4b44      	ldr	r3, [pc, #272]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d5c:	74da      	strb	r2, [r3, #19]
	VC_SIMV.TRIG_LMT     	       = ( (Receive_Graph_Packet->Trigger_Limit) / 10);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	7c1b      	ldrb	r3, [r3, #16]
 8012d62:	4a43      	ldr	r2, [pc, #268]	; (8012e70 <Vc_Simv_Mode_Packet_Data+0x190>)
 8012d64:	fba2 2303 	umull	r2, r3, r2, r3
 8012d68:	08db      	lsrs	r3, r3, #3
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	ee07 3a90 	vmov	s15, r3
 8012d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d74:	4b3d      	ldr	r3, [pc, #244]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d76:	edc3 7a05 	vstr	s15, [r3, #20]
	VC_SIMV.TRIG_TIME     	       = ( (Receive_Graph_Packet->Trigger_Time) * 100);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	7bdb      	ldrb	r3, [r3, #15]
 8012d7e:	b29b      	uxth	r3, r3
 8012d80:	461a      	mov	r2, r3
 8012d82:	0092      	lsls	r2, r2, #2
 8012d84:	4413      	add	r3, r2
 8012d86:	461a      	mov	r2, r3
 8012d88:	0091      	lsls	r1, r2, #2
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	460b      	mov	r3, r1
 8012d8e:	4413      	add	r3, r2
 8012d90:	009b      	lsls	r3, r3, #2
 8012d92:	b29a      	uxth	r2, r3
 8012d94:	4b35      	ldr	r3, [pc, #212]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d96:	831a      	strh	r2, [r3, #24]

	VC_SIMV.CALC_TRIG_VAL 	                 =  (VC_SIMV.EXPIRATION_TIME   - Expiratory_Valve_Open_Time );
 8012d98:	4b34      	ldr	r3, [pc, #208]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012d9a:	68db      	ldr	r3, [r3, #12]
 8012d9c:	b29a      	uxth	r2, r3
 8012d9e:	4b35      	ldr	r3, [pc, #212]	; (8012e74 <Vc_Simv_Mode_Packet_Data+0x194>)
 8012da0:	881b      	ldrh	r3, [r3, #0]
 8012da2:	1ad3      	subs	r3, r2, r3
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	4b31      	ldr	r3, [pc, #196]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012da8:	835a      	strh	r2, [r3, #26]
	if(VC_SIMV.CALC_TRIG_VAL <0)
	{
		VC_SIMV.CALC_TRIG_VAL = (VC_SIMV.CALC_TRIG_VAL * (-1));
	}

	VC_SIMV.TOLERANCE_EWAVE =  VC_SIMV.TRIG_TIME;
 8012daa:	4b30      	ldr	r3, [pc, #192]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012dac:	8b1a      	ldrh	r2, [r3, #24]
 8012dae:	4b2f      	ldr	r3, [pc, #188]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012db0:	839a      	strh	r2, [r3, #28]
	if(VC_SIMV.CALC_TRIG_VAL < VC_SIMV.TRIG_TIME )
 8012db2:	4b2e      	ldr	r3, [pc, #184]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012db4:	8b5a      	ldrh	r2, [r3, #26]
 8012db6:	4b2d      	ldr	r3, [pc, #180]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012db8:	8b1b      	ldrh	r3, [r3, #24]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d205      	bcs.n	8012dca <Vc_Simv_Mode_Packet_Data+0xea>
	{
		VC_SIMV.TOLERANCE_EWAVE =  (VC_SIMV.TRIG_TIME - 200) ;
 8012dbe:	4b2b      	ldr	r3, [pc, #172]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012dc0:	8b1b      	ldrh	r3, [r3, #24]
 8012dc2:	3bc8      	subs	r3, #200	; 0xc8
 8012dc4:	b29a      	uxth	r2, r3
 8012dc6:	4b29      	ldr	r3, [pc, #164]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012dc8:	839a      	strh	r2, [r3, #28]
	}
	VC_SIMV.TRIG_WINDOW		                 = VC_SIMV.TOLERANCE_EWAVE;
 8012dca:	4b28      	ldr	r3, [pc, #160]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012dcc:	8b9a      	ldrh	r2, [r3, #28]
 8012dce:	4b27      	ldr	r3, [pc, #156]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012dd0:	83da      	strh	r2, [r3, #30]

	Alert_Check_Time              = ((float)VC_SIMV.INSPIRATION_TIME/3);
 8012dd2:	4b26      	ldr	r3, [pc, #152]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012dd4:	689b      	ldr	r3, [r3, #8]
 8012dd6:	ee07 3a90 	vmov	s15, r3
 8012dda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012dde:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012de2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012dea:	ee17 2a90 	vmov	r2, s15
 8012dee:	4b22      	ldr	r3, [pc, #136]	; (8012e78 <Vc_Simv_Mode_Packet_Data+0x198>)
 8012df0:	601a      	str	r2, [r3, #0]

	if(VC_SIMV.Assist_Control == 1)
 8012df2:	4b1e      	ldr	r3, [pc, #120]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d103      	bne.n	8012e04 <Vc_Simv_Mode_Packet_Data+0x124>
		Assist_Control=ASSIST_ON;
 8012dfc:	4b1f      	ldr	r3, [pc, #124]	; (8012e7c <Vc_Simv_Mode_Packet_Data+0x19c>)
 8012dfe:	2200      	movs	r2, #0
 8012e00:	701a      	strb	r2, [r3, #0]
 8012e02:	e007      	b.n	8012e14 <Vc_Simv_Mode_Packet_Data+0x134>
	else if(VC_SIMV.Assist_Control == 0)
 8012e04:	4b19      	ldr	r3, [pc, #100]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012e06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d102      	bne.n	8012e14 <Vc_Simv_Mode_Packet_Data+0x134>
		Assist_Control=ASSIST_OFF;
 8012e0e:	4b1b      	ldr	r3, [pc, #108]	; (8012e7c <Vc_Simv_Mode_Packet_Data+0x19c>)
 8012e10:	2201      	movs	r2, #1
 8012e12:	701a      	strb	r2, [r3, #0]
	if(VC_SIMV.TRIG_TYPE == 0)
 8012e14:	4b15      	ldr	r3, [pc, #84]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012e16:	7cdb      	ldrb	r3, [r3, #19]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d103      	bne.n	8012e24 <Vc_Simv_Mode_Packet_Data+0x144>
		Trigger_Type = Pressure_Trigger;
 8012e1c:	4b18      	ldr	r3, [pc, #96]	; (8012e80 <Vc_Simv_Mode_Packet_Data+0x1a0>)
 8012e1e:	2200      	movs	r2, #0
 8012e20:	701a      	strb	r2, [r3, #0]
 8012e22:	e006      	b.n	8012e32 <Vc_Simv_Mode_Packet_Data+0x152>
	else if(VC_SIMV.TRIG_TYPE == 1)
 8012e24:	4b11      	ldr	r3, [pc, #68]	; (8012e6c <Vc_Simv_Mode_Packet_Data+0x18c>)
 8012e26:	7cdb      	ldrb	r3, [r3, #19]
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	d102      	bne.n	8012e32 <Vc_Simv_Mode_Packet_Data+0x152>
		Trigger_Type = Flow_Trigger;
 8012e2c:	4b14      	ldr	r3, [pc, #80]	; (8012e80 <Vc_Simv_Mode_Packet_Data+0x1a0>)
 8012e2e:	2201      	movs	r2, #1
 8012e30:	701a      	strb	r2, [r3, #0]

	Vent_Type                     = ET_TUBE_MODE;
 8012e32:	4b14      	ldr	r3, [pc, #80]	; (8012e84 <Vc_Simv_Mode_Packet_Data+0x1a4>)
 8012e34:	2200      	movs	r2, #0
 8012e36:	701a      	strb	r2, [r3, #0]
	OOM202.offset_minimum         = ( 0x7F & (Receive_Graph_Packet->Vent_Type_Min_O2));
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	7c5b      	ldrb	r3, [r3, #17]
 8012e3c:	b29b      	uxth	r3, r3
 8012e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	4b10      	ldr	r3, [pc, #64]	; (8012e88 <Vc_Simv_Mode_Packet_Data+0x1a8>)
 8012e46:	805a      	strh	r2, [r3, #2]
	OOM202.offset_maximum         = Receive_Graph_Packet->Max_O2;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	7c9b      	ldrb	r3, [r3, #18]
 8012e4c:	b29a      	uxth	r2, r3
 8012e4e:	4b0e      	ldr	r3, [pc, #56]	; (8012e88 <Vc_Simv_Mode_Packet_Data+0x1a8>)
 8012e50:	809a      	strh	r2, [r3, #4]

	Mode_Initial_Flag_Set                        = OPEN;
 8012e52:	4b0e      	ldr	r3, [pc, #56]	; (8012e8c <Vc_Simv_Mode_Packet_Data+0x1ac>)
 8012e54:	2201      	movs	r2, #1
 8012e56:	701a      	strb	r2, [r3, #0]
	vTaskResume(Mode_initial_Flag_Set_Handler);
 8012e58:	4b0d      	ldr	r3, [pc, #52]	; (8012e90 <Vc_Simv_Mode_Packet_Data+0x1b0>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f008 f9ed 	bl	801b23c <vTaskResume>
}
 8012e62:	bf00      	nop
 8012e64:	3710      	adds	r7, #16
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	20012cb8 	.word	0x20012cb8
 8012e70:	cccccccd 	.word	0xcccccccd
 8012e74:	20000012 	.word	0x20000012
 8012e78:	2001246c 	.word	0x2001246c
 8012e7c:	200122cc 	.word	0x200122cc
 8012e80:	20012244 	.word	0x20012244
 8012e84:	200129f4 	.word	0x200129f4
 8012e88:	20012224 	.word	0x20012224
 8012e8c:	20012cb1 	.word	0x20012cb1
 8012e90:	200129ac 	.word	0x200129ac

08012e94 <Vc_Simv_Assist_ON_Task>:
/**
 * @brief Vc_Simv_Assist_ON_Task.
 * This Task calls  two function based on inspiration and expiration time.
 * */
void Vc_Simv_Assist_ON_Task(void *argument)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (Run_Current_Breathe_State)
 8012e9c:	4b14      	ldr	r3, [pc, #80]	; (8012ef0 <Vc_Simv_Assist_ON_Task+0x5c>)
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	2b02      	cmp	r3, #2
 8012ea2:	d00b      	beq.n	8012ebc <Vc_Simv_Assist_ON_Task+0x28>
 8012ea4:	2b02      	cmp	r3, #2
 8012ea6:	dc1c      	bgt.n	8012ee2 <Vc_Simv_Assist_ON_Task+0x4e>
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d01c      	beq.n	8012ee6 <Vc_Simv_Assist_ON_Task+0x52>
 8012eac:	2b01      	cmp	r3, #1
 8012eae:	d118      	bne.n	8012ee2 <Vc_Simv_Assist_ON_Task+0x4e>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON(Volume_Mode_Blower_control.BLOWER_DAC_VAL);
 8012eb0:	4b10      	ldr	r3, [pc, #64]	; (8012ef4 <Vc_Simv_Assist_ON_Task+0x60>)
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f000 f849 	bl	8012f4c <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON>

			break;
 8012eba:	e015      	b.n	8012ee8 <Vc_Simv_Assist_ON_Task+0x54>
			case Run_Expiration_Cycle:
				Volume_Mode_Blower_control.BLOWER_DAC_VAL=0;
 8012ebc:	4b0d      	ldr	r3, [pc, #52]	; (8012ef4 <Vc_Simv_Assist_ON_Task+0x60>)
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	801a      	strh	r2, [r3, #0]
				Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 8012ec2:	4b0c      	ldr	r3, [pc, #48]	; (8012ef4 <Vc_Simv_Assist_ON_Task+0x60>)
 8012ec4:	881b      	ldrh	r3, [r3, #0]
 8012ec6:	4a0c      	ldr	r2, [pc, #48]	; (8012ef8 <Vc_Simv_Assist_ON_Task+0x64>)
 8012ec8:	edd2 7a00 	vldr	s15, [r2]
													  PEEP_Maintain_Parameter.PEEP_Temp,
													  PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8012ecc:	4a0a      	ldr	r2, [pc, #40]	; (8012ef8 <Vc_Simv_Assist_ON_Task+0x64>)
 8012ece:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
				Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 8012ed2:	b292      	uxth	r2, r2
 8012ed4:	4611      	mov	r1, r2
 8012ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8012eda:	4618      	mov	r0, r3
 8012edc:	f000 f846 	bl	8012f6c <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON>
			break;
 8012ee0:	e002      	b.n	8012ee8 <Vc_Simv_Assist_ON_Task+0x54>
			case No_Run_State:
			break;
			default:
			break;
 8012ee2:	bf00      	nop
 8012ee4:	e000      	b.n	8012ee8 <Vc_Simv_Assist_ON_Task+0x54>
			break;
 8012ee6:	bf00      	nop
		}

		vTaskDelay(Two_Millisecond_Delay);
 8012ee8:	2002      	movs	r0, #2
 8012eea:	f008 f8af 	bl	801b04c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 8012eee:	e7d5      	b.n	8012e9c <Vc_Simv_Assist_ON_Task+0x8>
 8012ef0:	20012870 	.word	0x20012870
 8012ef4:	200129b0 	.word	0x200129b0
 8012ef8:	20012c74 	.word	0x20012c74

08012efc <VC_SIMV_Inspiration_Time_Variables_Reset>:
 * @brief VC_SIMV_Inspiration_Time_Variables_Reset.
 * This function decides which function needs to be called based on assist control.
 * */

void VC_SIMV_Inspiration_Time_Variables_Reset()
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	af00      	add	r7, sp, #0
	if(Assist_Control == ASSIST_ON)
 8012f00:	4b07      	ldr	r3, [pc, #28]	; (8012f20 <VC_SIMV_Inspiration_Time_Variables_Reset+0x24>)
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d102      	bne.n	8012f0e <VC_SIMV_Inspiration_Time_Variables_Reset+0x12>
	{
		VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset();
 8012f08:	f000 f8e6 	bl	80130d8 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>
	}
	else if(Assist_Control == ASSIST_OFF)
	{
		VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset();
	}
}
 8012f0c:	e005      	b.n	8012f1a <VC_SIMV_Inspiration_Time_Variables_Reset+0x1e>
	else if(Assist_Control == ASSIST_OFF)
 8012f0e:	4b04      	ldr	r3, [pc, #16]	; (8012f20 <VC_SIMV_Inspiration_Time_Variables_Reset+0x24>)
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d101      	bne.n	8012f1a <VC_SIMV_Inspiration_Time_Variables_Reset+0x1e>
		VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset();
 8012f16:	f7ff fca9 	bl	801286c <VC_SIMV_Assist_OFF_Inspiration_Time_Variables_Reset>
}
 8012f1a:	bf00      	nop
 8012f1c:	bd80      	pop	{r7, pc}
 8012f1e:	bf00      	nop
 8012f20:	200122cc 	.word	0x200122cc

08012f24 <VC_SIMV_Expiration_Time_Variables_Reset>:
/**
 * @brief VC_SIMV_Expiration_Time_Variables_Reset.
 * This function decides which function needs to be called based on assist control.
 * */
void VC_SIMV_Expiration_Time_Variables_Reset()
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	af00      	add	r7, sp, #0
	if(Assist_Control == ASSIST_ON)
 8012f28:	4b07      	ldr	r3, [pc, #28]	; (8012f48 <VC_SIMV_Expiration_Time_Variables_Reset+0x24>)
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d102      	bne.n	8012f36 <VC_SIMV_Expiration_Time_Variables_Reset+0x12>
	{
		VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset();
 8012f30:	f000 f9e0 	bl	80132f4 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>
	}
	else if(Assist_Control == ASSIST_OFF)
	{
		VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset();
	}
}
 8012f34:	e005      	b.n	8012f42 <VC_SIMV_Expiration_Time_Variables_Reset+0x1e>
	else if(Assist_Control == ASSIST_OFF)
 8012f36:	4b04      	ldr	r3, [pc, #16]	; (8012f48 <VC_SIMV_Expiration_Time_Variables_Reset+0x24>)
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	2b01      	cmp	r3, #1
 8012f3c:	d101      	bne.n	8012f42 <VC_SIMV_Expiration_Time_Variables_Reset+0x1e>
		VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset();
 8012f3e:	f7ff fcb1 	bl	80128a4 <VC_SIMV_Assist_OFF_Expiration_Time_Variables_Reset>
}
 8012f42:	bf00      	nop
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	200122cc 	.word	0x200122cc

08012f4c <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON>:
 * @brief Inspiration_Time_Blower_Control_VC_SIMV.
 * This function uploads a DAC value to the DAC1 peripheral to control a blower every 2 milliseconds during inspiration time.
 * @param Blower_Signal as Pressure_Mode_blower_control.BLOWER_DAC_VAL.
 * */
static void Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON(uint16_t Blower_Signal)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b083      	sub	sp, #12
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	4603      	mov	r3, r0
 8012f54:	80fb      	strh	r3, [r7, #6]
	Blower_Signal(Blower_Signal);
 8012f56:	4a04      	ldr	r2, [pc, #16]	; (8012f68 <Inspiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x1c>)
 8012f58:	88fb      	ldrh	r3, [r7, #6]
 8012f5a:	6093      	str	r3, [r2, #8]
}
 8012f5c:	bf00      	nop
 8012f5e:	370c      	adds	r7, #12
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr
 8012f68:	40007400 	.word	0x40007400

08012f6c <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON>:
 * @param  PEEP to lock the expiratory valve in peep area.
 * @param  Expiratory_Valve_Open_Time to control the expiratory valve lock delay.
 * */

static void Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	4603      	mov	r3, r0
 8012f74:	ed87 0a00 	vstr	s0, [r7]
 8012f78:	460a      	mov	r2, r1
 8012f7a:	80fb      	strh	r3, [r7, #6]
 8012f7c:	4613      	mov	r3, r2
 8012f7e:	80bb      	strh	r3, [r7, #4]
	Blower_Signal( Blower_Signal);
 8012f80:	4a27      	ldr	r2, [pc, #156]	; (8013020 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb4>)
 8012f82:	88fb      	ldrh	r3, [r7, #6]
 8012f84:	6093      	str	r3, [r2, #8]
		if(Peep_Status==PEEP_ACHEIVED)
 8012f86:	4b27      	ldr	r3, [pc, #156]	; (8013024 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb8>)
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	2b01      	cmp	r3, #1
 8012f8c:	d113      	bne.n	8012fb6 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x4a>
		{
				if(GRAPH_VALUES.pressure < PEEP)
 8012f8e:	4b26      	ldr	r3, [pc, #152]	; (8013028 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xbc>)
 8012f90:	781b      	ldrb	r3, [r3, #0]
 8012f92:	ee07 3a90 	vmov	s15, r3
 8012f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f9a:	ed97 7a00 	vldr	s14, [r7]
 8012f9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa6:	dd03      	ble.n	8012fb0 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x44>
				{
					Blower_Signal( Blower_Signal);
 8012fa8:	4a1d      	ldr	r2, [pc, #116]	; (8013020 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb4>)
 8012faa:	88fb      	ldrh	r3, [r7, #6]
 8012fac:	6093      	str	r3, [r2, #8]
 8012fae:	e002      	b.n	8012fb6 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x4a>
				}
				else
				{
					Blower_Signal( Blower_Signal);
 8012fb0:	4a1b      	ldr	r2, [pc, #108]	; (8013020 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb4>)
 8012fb2:	88fb      	ldrh	r3, [r7, #6]
 8012fb4:	6093      	str	r3, [r2, #8]
				}
		 }
		if(GRAPH_VALUES.pressure<= PEEP)
 8012fb6:	4b1c      	ldr	r3, [pc, #112]	; (8013028 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xbc>)
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	ee07 3a90 	vmov	s15, r3
 8012fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fc2:	ed97 7a00 	vldr	s14, [r7]
 8012fc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fce:	db14      	blt.n	8012ffa <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x8e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 8012fd0:	4b16      	ldr	r3, [pc, #88]	; (801302c <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc0>)
 8012fd2:	781b      	ldrb	r3, [r3, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d106      	bne.n	8012fe6 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0x7a>
			{
				Expiratory_Valve_Lock_Delay=CLOSED;
 8012fd8:	4b14      	ldr	r3, [pc, #80]	; (801302c <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc0>)
 8012fda:	2201      	movs	r2, #1
 8012fdc:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Expiratory_Valve_Open_Time);
 8012fde:	88bb      	ldrh	r3, [r7, #4]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f008 f833 	bl	801b04c <vTaskDelay>
			}
			Peep_Status=PEEP_ACHEIVED;
 8012fe6:	4b0f      	ldr	r3, [pc, #60]	; (8013024 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb8>)
 8012fe8:	2201      	movs	r2, #1
 8012fea:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 8012fec:	4b10      	ldr	r3, [pc, #64]	; (8013030 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc4>)
 8012fee:	695b      	ldr	r3, [r3, #20]
 8012ff0:	4a0f      	ldr	r2, [pc, #60]	; (8013030 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc4>)
 8012ff2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012ff6:	6153      	str	r3, [r2, #20]
 8012ff8:	e009      	b.n	801300e <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xa2>
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 8012ffa:	4b0a      	ldr	r3, [pc, #40]	; (8013024 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xb8>)
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d105      	bne.n	801300e <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xa2>
		{
			ExpValve_OPEN();
 8013002:	4b0b      	ldr	r3, [pc, #44]	; (8013030 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc4>)
 8013004:	695b      	ldr	r3, [r3, #20]
 8013006:	4a0a      	ldr	r2, [pc, #40]	; (8013030 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc4>)
 8013008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801300c:	6153      	str	r3, [r2, #20]
		}

		CHECK_TRIGGER_ASSIST_ON(VC_SIMV.TRIG_WINDOW);
 801300e:	4b09      	ldr	r3, [pc, #36]	; (8013034 <Expiration_Time_Blower_Control_VC_SIMV_ASSIST_ON+0xc8>)
 8013010:	8bdb      	ldrh	r3, [r3, #30]
 8013012:	4618      	mov	r0, r3
 8013014:	f000 f810 	bl	8013038 <CHECK_TRIGGER_ASSIST_ON>
}
 8013018:	bf00      	nop
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	40007400 	.word	0x40007400
 8013024:	20012a37 	.word	0x20012a37
 8013028:	200125f8 	.word	0x200125f8
 801302c:	20012a34 	.word	0x20012a34
 8013030:	40020400 	.word	0x40020400
 8013034:	20012cb8 	.word	0x20012cb8

08013038 <CHECK_TRIGGER_ASSIST_ON>:
/**
 * @brief CHECK_TRIGGER_ASSIST_ON.
 * This function senses the type of patient trigger that occurred during breath
 * */
static void CHECK_TRIGGER_ASSIST_ON(uint16_t Trigger_Check_Time)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	4603      	mov	r3, r0
 8013040:	80fb      	strh	r3, [r7, #6]
	if ( (TIME_Base_parameter._EXPIRATION_TIME <= Trigger_Check_Time) && (TIME_Base_parameter._EXPIRATION_TIME != 0))
 8013042:	4b0f      	ldr	r3, [pc, #60]	; (8013080 <CHECK_TRIGGER_ASSIST_ON+0x48>)
 8013044:	685a      	ldr	r2, [r3, #4]
 8013046:	88fb      	ldrh	r3, [r7, #6]
 8013048:	429a      	cmp	r2, r3
 801304a:	dc11      	bgt.n	8013070 <CHECK_TRIGGER_ASSIST_ON+0x38>
 801304c:	4b0c      	ldr	r3, [pc, #48]	; (8013080 <CHECK_TRIGGER_ASSIST_ON+0x48>)
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d00d      	beq.n	8013070 <CHECK_TRIGGER_ASSIST_ON+0x38>
	{
		if (Trigger_Type == Pressure_Trigger)
 8013054:	4b0b      	ldr	r3, [pc, #44]	; (8013084 <CHECK_TRIGGER_ASSIST_ON+0x4c>)
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d102      	bne.n	8013062 <CHECK_TRIGGER_ASSIST_ON+0x2a>
		{
			CHECK_PRESSURE_TRIGGER();
 801305c:	f000 f9a2 	bl	80133a4 <CHECK_PRESSURE_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 8013060:	e009      	b.n	8013076 <CHECK_TRIGGER_ASSIST_ON+0x3e>
		}
		else if (Trigger_Type == Flow_Trigger)
 8013062:	4b08      	ldr	r3, [pc, #32]	; (8013084 <CHECK_TRIGGER_ASSIST_ON+0x4c>)
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	2b01      	cmp	r3, #1
 8013068:	d105      	bne.n	8013076 <CHECK_TRIGGER_ASSIST_ON+0x3e>
		{
			CHECK_FLOW_TRIGGER();
 801306a:	f000 f9c3 	bl	80133f4 <CHECK_FLOW_TRIGGER>
		if (Trigger_Type == Pressure_Trigger)
 801306e:	e002      	b.n	8013076 <CHECK_TRIGGER_ASSIST_ON+0x3e>
		}
	}

	else
	{
		CHECK_TRIGGER_OFFSET();
 8013070:	f000 f9ee 	bl	8013450 <CHECK_TRIGGER_OFFSET>
	}
}
 8013074:	e000      	b.n	8013078 <CHECK_TRIGGER_ASSIST_ON+0x40>
		if (Trigger_Type == Pressure_Trigger)
 8013076:	bf00      	nop
}
 8013078:	bf00      	nop
 801307a:	3708      	adds	r7, #8
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}
 8013080:	20012b38 	.word	0x20012b38
 8013084:	20012244 	.word	0x20012244

08013088 <Switch_TASK_Inspiration_CYCLE>:
/**
 * @brief Switch_TASK_Inspiration_CYCLE.
 * This function deletes and creates a one-time task to deliver a breath.
 * */
static void Switch_TASK_Inspiration_CYCLE()
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b082      	sub	sp, #8
 801308c:	af02      	add	r7, sp, #8
	vTaskDelete(One_Time_Handler);
 801308e:	4b0d      	ldr	r3, [pc, #52]	; (80130c4 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	4618      	mov	r0, r3
 8013094:	f007 ff4a 	bl	801af2c <vTaskDelete>
	TIME_Base_parameter._INSPIRATION_TIME = 0 ;
 8013098:	4b0b      	ldr	r3, [pc, #44]	; (80130c8 <Switch_TASK_Inspiration_CYCLE+0x40>)
 801309a:	2200      	movs	r2, #0
 801309c:	601a      	str	r2, [r3, #0]
	TIME_Base_parameter._EXPIRATION_TIME  = 0 ;
 801309e:	4b0a      	ldr	r3, [pc, #40]	; (80130c8 <Switch_TASK_Inspiration_CYCLE+0x40>)
 80130a0:	2200      	movs	r2, #0
 80130a2:	605a      	str	r2, [r3, #4]
	Next_Half_Breath_Cycle                = Generate_Inspiration_Cycle;
 80130a4:	4b09      	ldr	r3, [pc, #36]	; (80130cc <Switch_TASK_Inspiration_CYCLE+0x44>)
 80130a6:	2200      	movs	r2, #0
 80130a8:	701a      	strb	r2, [r3, #0]
	xTaskCreate(One_Time_Task,"One-Time-Task", 128, NULL,3, &One_Time_Handler);
 80130aa:	4b06      	ldr	r3, [pc, #24]	; (80130c4 <Switch_TASK_Inspiration_CYCLE+0x3c>)
 80130ac:	9301      	str	r3, [sp, #4]
 80130ae:	2303      	movs	r3, #3
 80130b0:	9300      	str	r3, [sp, #0]
 80130b2:	2300      	movs	r3, #0
 80130b4:	2280      	movs	r2, #128	; 0x80
 80130b6:	4906      	ldr	r1, [pc, #24]	; (80130d0 <Switch_TASK_Inspiration_CYCLE+0x48>)
 80130b8:	4806      	ldr	r0, [pc, #24]	; (80130d4 <Switch_TASK_Inspiration_CYCLE+0x4c>)
 80130ba:	f007 fe00 	bl	801acbe <xTaskCreate>
}
 80130be:	bf00      	nop
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	200129cc 	.word	0x200129cc
 80130c8:	20012b38 	.word	0x20012b38
 80130cc:	2001269e 	.word	0x2001269e
 80130d0:	0801d23c 	.word	0x0801d23c
 80130d4:	08011609 	.word	0x08011609

080130d8 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset>:
/**
 * @brief VC_SIMV_Inspiration_Time_Variables_Reset.
 * This function resets variables to start an inspiration cycle.
 * */
void VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset()
{
 80130d8:	b590      	push	{r4, r7, lr}
 80130da:	b083      	sub	sp, #12
 80130dc:	af02      	add	r7, sp, #8
	Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 80130de:	4b69      	ldr	r3, [pc, #420]	; (8013284 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1ac>)
 80130e0:	2200      	movs	r2, #0
 80130e2:	701a      	strb	r2, [r3, #0]
	Find_Average_Flow();
 80130e4:	f7fa fed0 	bl	800de88 <Find_Average_Flow>
	Reset_Blower_Status();
 80130e8:	f000 fe30 	bl	8013d4c <Reset_Blower_Status>
	Breath_Count         = Count_The_Breath;
 80130ec:	4b66      	ldr	r3, [pc, #408]	; (8013288 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b0>)
 80130ee:	2201      	movs	r2, #1
 80130f0:	701a      	strb	r2, [r3, #0]

	if(Patient_Trigger  == NO_PATIENT_TRIGGER)
 80130f2:	4b66      	ldr	r3, [pc, #408]	; (801328c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b4>)
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d114      	bne.n	8013124 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x4c>
	{
		if(VC_SIMV.PEEP_Val == PEEP_Maintain_Parameter.PEEP_AVG_VAL )
 80130fa:	4b65      	ldr	r3, [pc, #404]	; (8013290 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b8>)
 80130fc:	789a      	ldrb	r2, [r3, #2]
 80130fe:	4b65      	ldr	r3, [pc, #404]	; (8013294 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1bc>)
 8013100:	7c1b      	ldrb	r3, [r3, #16]
 8013102:	429a      	cmp	r2, r3
 8013104:	d102      	bne.n	801310c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x34>
		{
		   CHECK_Flow_Increment();
 8013106:	f000 f9df 	bl	80134c8 <CHECK_Flow_Increment>
 801310a:	e016      	b.n	801313a <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x62>
		}
		else
		{
			Flow_increment       = Flow_fine;
 801310c:	4b62      	ldr	r3, [pc, #392]	; (8013298 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c0>)
 801310e:	2200      	movs	r2, #0
 8013110:	701a      	strb	r2, [r3, #0]
			memset(Volume_Array, 0,(VOL_ARR_SIZE*sizeof(Volume_Array[0])) );
 8013112:	223c      	movs	r2, #60	; 0x3c
 8013114:	2100      	movs	r1, #0
 8013116:	4861      	ldr	r0, [pc, #388]	; (801329c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c4>)
 8013118:	f009 fef6 	bl	801cf08 <memset>
			Volume_Array_count = 0;
 801311c:	4b60      	ldr	r3, [pc, #384]	; (80132a0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c8>)
 801311e:	2200      	movs	r2, #0
 8013120:	801a      	strh	r2, [r3, #0]
 8013122:	e00a      	b.n	801313a <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x62>
		}
	}
	else
	{
		Flow_increment       = Flow_fine;
 8013124:	4b5c      	ldr	r3, [pc, #368]	; (8013298 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c0>)
 8013126:	2200      	movs	r2, #0
 8013128:	701a      	strb	r2, [r3, #0]
		memset(Volume_Array, 0,(VOL_ARR_SIZE*sizeof(Volume_Array[0])) );
 801312a:	223c      	movs	r2, #60	; 0x3c
 801312c:	2100      	movs	r1, #0
 801312e:	485b      	ldr	r0, [pc, #364]	; (801329c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c4>)
 8013130:	f009 feea 	bl	801cf08 <memset>
		Volume_Array_count = 0;
 8013134:	4b5a      	ldr	r3, [pc, #360]	; (80132a0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1c8>)
 8013136:	2200      	movs	r2, #0
 8013138:	801a      	strh	r2, [r3, #0]
	}

	Volume_Not_Acheieved();
 801313a:	f000 fe21 	bl	8013d80 <Volume_Not_Acheieved>
	ExpValve_CLOSE();
 801313e:	4b59      	ldr	r3, [pc, #356]	; (80132a4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1cc>)
 8013140:	695b      	ldr	r3, [r3, #20]
 8013142:	4a58      	ldr	r2, [pc, #352]	; (80132a4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1cc>)
 8013144:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013148:	6153      	str	r3, [r2, #20]
	PIP_AVERAGE();
 801314a:	f7f5 fded 	bl	8008d28 <PIP_AVERAGE>
	PEEP_AVERAGE();
 801314e:	f7f5 fe11 	bl	8008d74 <PEEP_AVERAGE>
	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 8013152:	4b55      	ldr	r3, [pc, #340]	; (80132a8 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1d0>)
 8013154:	78db      	ldrb	r3, [r3, #3]
 8013156:	4618      	mov	r0, r3
 8013158:	f7f9 fb9e 	bl	800c898 <O2_DAC_Control>
	Check_Alert();
 801315c:	f7ed ffd2 	bl	8001104 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 8013160:	f7ee f888 	bl	8001274 <Alert_Inspiration_Time_Parameter>
	LED_Alert();
 8013164:	f7ee fd2e 	bl	8001bc4 <LED_Alert>
	Alert_Status = NO_ALERT;
 8013168:	4b50      	ldr	r3, [pc, #320]	; (80132ac <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1d4>)
 801316a:	2200      	movs	r2, #0
 801316c:	701a      	strb	r2, [r3, #0]
	Sampled_Parameter_Inspiration_time();
 801316e:	f7fe ff8b 	bl	8012088 <Sampled_Parameter_Inspiration_time>
	GRAPH_VALUES.Maximum_oxygen_flow   = 0;                 //new
 8013172:	4b4f      	ldr	r3, [pc, #316]	; (80132b0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1d8>)
 8013174:	2200      	movs	r2, #0
 8013176:	829a      	strh	r2, [r3, #20]
	if(VC_SIMV.PEEP_Val != PEEP_Maintain_Parameter.PEEP_AVG_VAL )
 8013178:	4b45      	ldr	r3, [pc, #276]	; (8013290 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b8>)
 801317a:	789a      	ldrb	r2, [r3, #2]
 801317c:	4b45      	ldr	r3, [pc, #276]	; (8013294 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1bc>)
 801317e:	7c1b      	ldrb	r3, [r3, #16]
 8013180:	429a      	cmp	r2, r3
 8013182:	d013      	beq.n	80131ac <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0xd4>
	{
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time      = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 8013184:	4b43      	ldr	r3, [pc, #268]	; (8013294 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1bc>)
 8013186:	7c18      	ldrb	r0, [r3, #16]
 8013188:	4b41      	ldr	r3, [pc, #260]	; (8013290 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b8>)
 801318a:	78d9      	ldrb	r1, [r3, #3]
 801318c:	4b40      	ldr	r3, [pc, #256]	; (8013290 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b8>)
 801318e:	689a      	ldr	r2, [r3, #8]
 8013190:	4b3f      	ldr	r3, [pc, #252]	; (8013290 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b8>)
 8013192:	789c      	ldrb	r4, [r3, #2]
																												           VC_SIMV.RESPIRATORY_RATE_Val,
													                                                                       VC_SIMV.INSPIRATION_TIME,
													                                                                       VC_SIMV.PEEP_Val,
																												           PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8013194:	4b3f      	ldr	r3, [pc, #252]	; (8013294 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1bc>)
 8013196:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time      = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 801319a:	b29b      	uxth	r3, r3
 801319c:	9300      	str	r3, [sp, #0]
 801319e:	4623      	mov	r3, r4
 80131a0:	f7f4 fcea 	bl	8007b78 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode>
 80131a4:	4603      	mov	r3, r0
 80131a6:	b21a      	sxth	r2, r3
 80131a8:	4b3a      	ldr	r3, [pc, #232]	; (8013294 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1bc>)
 80131aa:	809a      	strh	r2, [r3, #4]

	}
    VOLUME_STOP_POINT(Common_Mode_Parameter._VOLUME_Val,Volume_control_Task.Achieved_Volume);
 80131ac:	4b3e      	ldr	r3, [pc, #248]	; (80132a8 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1d0>)
 80131ae:	889b      	ldrh	r3, [r3, #4]
 80131b0:	4a40      	ldr	r2, [pc, #256]	; (80132b4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1dc>)
 80131b2:	8852      	ldrh	r2, [r2, #2]
 80131b4:	4611      	mov	r1, r2
 80131b6:	4618      	mov	r0, r3
 80131b8:	f000 ff36 	bl	8014028 <VOLUME_STOP_POINT>
	if(Stop_Increment_Count <= Stop_blower_Performance_Value)
 80131bc:	4b3e      	ldr	r3, [pc, #248]	; (80132b8 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e0>)
 80131be:	781a      	ldrb	r2, [r3, #0]
 80131c0:	4b3e      	ldr	r3, [pc, #248]	; (80132bc <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e4>)
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d811      	bhi.n	80131ec <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x114>
	{
			Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL          =  TUNE_INITIAL_DAC_VAL(Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL,
 80131c8:	4b3d      	ldr	r3, [pc, #244]	; (80132c0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e8>)
 80131ca:	88db      	ldrh	r3, [r3, #6]
 80131cc:	4a36      	ldr	r2, [pc, #216]	; (80132a8 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1d0>)
 80131ce:	7991      	ldrb	r1, [r2, #6]
 80131d0:	4a38      	ldr	r2, [pc, #224]	; (80132b4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1dc>)
 80131d2:	7852      	ldrb	r2, [r2, #1]
 80131d4:	4618      	mov	r0, r3
 80131d6:	f000 ff87 	bl	80140e8 <TUNE_INITIAL_DAC_VAL>
 80131da:	4603      	mov	r3, r0
 80131dc:	461a      	mov	r2, r3
 80131de:	4b38      	ldr	r3, [pc, #224]	; (80132c0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e8>)
 80131e0:	805a      	strh	r2, [r3, #2]
    		                                                                           Common_Mode_Parameter._FLOW_RATE,
																					   Volume_control_Task.Flow_Max_Achieved);
			Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL = Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL;
 80131e2:	4b37      	ldr	r3, [pc, #220]	; (80132c0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e8>)
 80131e4:	885a      	ldrh	r2, [r3, #2]
 80131e6:	4b36      	ldr	r3, [pc, #216]	; (80132c0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e8>)
 80131e8:	80da      	strh	r2, [r3, #6]
 80131ea:	e007      	b.n	80131fc <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x124>
	}
	else
	{
		Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL          = Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL;
 80131ec:	4b34      	ldr	r3, [pc, #208]	; (80132c0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e8>)
 80131ee:	88da      	ldrh	r2, [r3, #6]
 80131f0:	4b33      	ldr	r3, [pc, #204]	; (80132c0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e8>)
 80131f2:	805a      	strh	r2, [r3, #2]
		Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL = Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL;
 80131f4:	4b32      	ldr	r3, [pc, #200]	; (80132c0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e8>)
 80131f6:	885a      	ldrh	r2, [r3, #2]
 80131f8:	4b31      	ldr	r3, [pc, #196]	; (80132c0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1e8>)
 80131fa:	80da      	strh	r2, [r3, #6]
	}

	if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 80131fc:	4b23      	ldr	r3, [pc, #140]	; (801328c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b4>)
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	2b01      	cmp	r3, #1
 8013202:	d103      	bne.n	801320c <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x134>
	{
		BREATH_STATE                                      = PATIENT_TRIGGER_INSPIRATION;
 8013204:	4b2f      	ldr	r3, [pc, #188]	; (80132c4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1ec>)
 8013206:	2202      	movs	r2, #2
 8013208:	701a      	strb	r2, [r3, #0]
 801320a:	e002      	b.n	8013212 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x13a>

	}
	else
	{
		BREATH_STATE                                       = INSPIRATION_CYCLE;
 801320c:	4b2d      	ldr	r3, [pc, #180]	; (80132c4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1ec>)
 801320e:	2200      	movs	r2, #0
 8013210:	701a      	strb	r2, [r3, #0]
	}

	Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 8013212:	4b2d      	ldr	r3, [pc, #180]	; (80132c8 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1f0>)
 8013214:	2200      	movs	r2, #0
 8013216:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			                   = OPENED;
 8013218:	4b2c      	ldr	r3, [pc, #176]	; (80132cc <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1f4>)
 801321a:	2200      	movs	r2, #0
 801321c:	701a      	strb	r2, [r3, #0]
	PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 801321e:	4b2c      	ldr	r3, [pc, #176]	; (80132d0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1f8>)
 8013220:	2200      	movs	r2, #0
 8013222:	701a      	strb	r2, [r3, #0]
	Maximum_Flow_Achieved                                      = FLOW_NOT_ACHIEVED;
 8013224:	4b2b      	ldr	r3, [pc, #172]	; (80132d4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1fc>)
 8013226:	2200      	movs	r2, #0
 8013228:	701a      	strb	r2, [r3, #0]
	Volume_control_Task.Flow_Max_Achieved                      = RESET;
 801322a:	4b22      	ldr	r3, [pc, #136]	; (80132b4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1dc>)
 801322c:	2200      	movs	r2, #0
 801322e:	705a      	strb	r2, [r3, #1]
	Volume_control_Task.LOW_Flow_Max_Achieved                  = RESET;
 8013230:	4b20      	ldr	r3, [pc, #128]	; (80132b4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1dc>)
 8013232:	2200      	movs	r2, #0
 8013234:	711a      	strb	r2, [r3, #4]
	Volume_Achieved_Status                                     = VOLUME_NOT_ACHIEVED;
 8013236:	4b28      	ldr	r3, [pc, #160]	; (80132d8 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x200>)
 8013238:	2200      	movs	r2, #0
 801323a:	701a      	strb	r2, [r3, #0]
	TIME_Base_parameter._INSPIRATION_TIME                      = VC_SIMV.INSPIRATION_TIME;
 801323c:	4b14      	ldr	r3, [pc, #80]	; (8013290 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b8>)
 801323e:	689b      	ldr	r3, [r3, #8]
 8013240:	461a      	mov	r2, r3
 8013242:	4b26      	ldr	r3, [pc, #152]	; (80132dc <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x204>)
 8013244:	601a      	str	r2, [r3, #0]
	Volume_Achieved_Time                                       = 0;
 8013246:	4b26      	ldr	r3, [pc, #152]	; (80132e0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x208>)
 8013248:	2200      	movs	r2, #0
 801324a:	801a      	strh	r2, [r3, #0]
	Total_Volume_Achieved_Time                                 = 0;
 801324c:	4b25      	ldr	r3, [pc, #148]	; (80132e4 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x20c>)
 801324e:	2200      	movs	r2, #0
 8013250:	801a      	strh	r2, [r3, #0]

	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 8013252:	4b22      	ldr	r3, [pc, #136]	; (80132dc <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x204>)
 8013254:	2200      	movs	r2, #0
 8013256:	609a      	str	r2, [r3, #8]
	GRAPH_VALUES.volume                                        = RESET;
 8013258:	4b15      	ldr	r3, [pc, #84]	; (80132b0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1d8>)
 801325a:	f04f 0200 	mov.w	r2, #0
 801325e:	609a      	str	r2, [r3, #8]
	Volume_max                                                 = RESET;
 8013260:	4b21      	ldr	r3, [pc, #132]	; (80132e8 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x210>)
 8013262:	2200      	movs	r2, #0
 8013264:	601a      	str	r2, [r3, #0]
	Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 8013266:	4b21      	ldr	r3, [pc, #132]	; (80132ec <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x214>)
 8013268:	2201      	movs	r2, #1
 801326a:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 801326c:	4b20      	ldr	r3, [pc, #128]	; (80132f0 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x218>)
 801326e:	2201      	movs	r2, #1
 8013270:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_SIMV.INSPIRATION_TIME);
 8013272:	4b07      	ldr	r3, [pc, #28]	; (8013290 <VC_SIMV_Assist_ON_Inspiration_Time_Variables_Reset+0x1b8>)
 8013274:	689b      	ldr	r3, [r3, #8]
 8013276:	4618      	mov	r0, r3
 8013278:	f007 fee8 	bl	801b04c <vTaskDelay>
}
 801327c:	bf00      	nop
 801327e:	3704      	adds	r7, #4
 8013280:	46bd      	mov	sp, r7
 8013282:	bd90      	pop	{r4, r7, pc}
 8013284:	20012b71 	.word	0x20012b71
 8013288:	200122a8 	.word	0x200122a8
 801328c:	2001263d 	.word	0x2001263d
 8013290:	20012cb8 	.word	0x20012cb8
 8013294:	20012c74 	.word	0x20012c74
 8013298:	2001280c 	.word	0x2001280c
 801329c:	20012734 	.word	0x20012734
 80132a0:	20012a88 	.word	0x20012a88
 80132a4:	40020400 	.word	0x40020400
 80132a8:	200124f0 	.word	0x200124f0
 80132ac:	2001287c 	.word	0x2001287c
 80132b0:	200125f8 	.word	0x200125f8
 80132b4:	20012840 	.word	0x20012840
 80132b8:	20012369 	.word	0x20012369
 80132bc:	20000057 	.word	0x20000057
 80132c0:	200129b0 	.word	0x200129b0
 80132c4:	20012a3c 	.word	0x20012a3c
 80132c8:	20012a37 	.word	0x20012a37
 80132cc:	20012a34 	.word	0x20012a34
 80132d0:	200124bc 	.word	0x200124bc
 80132d4:	200126b9 	.word	0x200126b9
 80132d8:	2001269f 	.word	0x2001269f
 80132dc:	20012b38 	.word	0x20012b38
 80132e0:	200122f4 	.word	0x200122f4
 80132e4:	20012c28 	.word	0x20012c28
 80132e8:	20012c70 	.word	0x20012c70
 80132ec:	2001269e 	.word	0x2001269e
 80132f0:	20012870 	.word	0x20012870

080132f4 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset>:
/**
 * @brief VC_SIMV_Expiration_Time_Variables_Reset.
 * This function resets variables to start an expiration cycle.
 * */
void VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset()
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	af00      	add	r7, sp, #0
	Volume_control_Task.Achieved_Volume                 = GRAPH_VALUES.volume ;
 80132f8:	4b20      	ldr	r3, [pc, #128]	; (801337c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x88>)
 80132fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80132fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013302:	ee17 3a90 	vmov	r3, s15
 8013306:	b29a      	uxth	r2, r3
 8013308:	4b1d      	ldr	r3, [pc, #116]	; (8013380 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x8c>)
 801330a:	805a      	strh	r2, [r3, #2]
	if(Patient_Trigger  == PATIENT_TRIGGER_HAPPEN)
 801330c:	4b1d      	ldr	r3, [pc, #116]	; (8013384 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x90>)
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	2b01      	cmp	r3, #1
 8013312:	d103      	bne.n	801331c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x28>
	{
		BREATH_STATE                                      = PATIENT_TRIGGER_EXPIRATION;
 8013314:	4b1c      	ldr	r3, [pc, #112]	; (8013388 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x94>)
 8013316:	2203      	movs	r2, #3
 8013318:	701a      	strb	r2, [r3, #0]
 801331a:	e002      	b.n	8013322 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x2e>
	}
	else
	{
		BREATH_STATE                                       = EXPIRATION_CYCLE;
 801331c:	4b1a      	ldr	r3, [pc, #104]	; (8013388 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x94>)
 801331e:	2201      	movs	r2, #1
 8013320:	701a      	strb	r2, [r3, #0]
	}
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 8013322:	4b1a      	ldr	r3, [pc, #104]	; (801338c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x98>)
 8013324:	2200      	movs	r2, #0
 8013326:	615a      	str	r2, [r3, #20]
	PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 8013328:	4b18      	ldr	r3, [pc, #96]	; (801338c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x98>)
 801332a:	2200      	movs	r2, #0
 801332c:	619a      	str	r2, [r3, #24]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 801332e:	4b17      	ldr	r3, [pc, #92]	; (801338c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x98>)
 8013330:	2200      	movs	r2, #0
 8013332:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 8013334:	4b15      	ldr	r3, [pc, #84]	; (801338c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x98>)
 8013336:	2200      	movs	r2, #0
 8013338:	60da      	str	r2, [r3, #12]

	Patient_Trigger                                     = NO_PATIENT_TRIGGER;
 801333a:	4b12      	ldr	r3, [pc, #72]	; (8013384 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x90>)
 801333c:	2200      	movs	r2, #0
 801333e:	701a      	strb	r2, [r3, #0]
	Trigger_Time_Monitor();
 8013340:	f000 f9a6 	bl	8013690 <Trigger_Time_Monitor>

	Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 8013344:	4b12      	ldr	r3, [pc, #72]	; (8013390 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0x9c>)
 8013346:	78db      	ldrb	r3, [r3, #3]
 8013348:	4618      	mov	r0, r3
 801334a:	f7f9 f8b1 	bl	800c4b0 <Calculate_O2>
	Alert_Expiration_Time_Parameter();
 801334e:	f7ee f80b 	bl	8001368 <Alert_Expiration_Time_Parameter>
	TIME_Base_parameter._EXPIRATION_TIME                = VC_SIMV.EXPIRATION_TIME;
 8013352:	4b10      	ldr	r3, [pc, #64]	; (8013394 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xa0>)
 8013354:	68db      	ldr	r3, [r3, #12]
 8013356:	461a      	mov	r2, r3
 8013358:	4b0f      	ldr	r3, [pc, #60]	; (8013398 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xa4>)
 801335a:	605a      	str	r2, [r3, #4]

	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 801335c:	4b0e      	ldr	r3, [pc, #56]	; (8013398 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xa4>)
 801335e:	2200      	movs	r2, #0
 8013360:	60da      	str	r2, [r3, #12]
	Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 8013362:	4b0e      	ldr	r3, [pc, #56]	; (801339c <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xa8>)
 8013364:	2200      	movs	r2, #0
 8013366:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 8013368:	4b0d      	ldr	r3, [pc, #52]	; (80133a0 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xac>)
 801336a:	2202      	movs	r2, #2
 801336c:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_SIMV.EXPIRATION_TIME);
 801336e:	4b09      	ldr	r3, [pc, #36]	; (8013394 <VC_SIMV_Assist_ON_Expiration_Time_Variables_Reset+0xa0>)
 8013370:	68db      	ldr	r3, [r3, #12]
 8013372:	4618      	mov	r0, r3
 8013374:	f007 fe6a 	bl	801b04c <vTaskDelay>
}
 8013378:	bf00      	nop
 801337a:	bd80      	pop	{r7, pc}
 801337c:	200125f8 	.word	0x200125f8
 8013380:	20012840 	.word	0x20012840
 8013384:	2001263d 	.word	0x2001263d
 8013388:	20012a3c 	.word	0x20012a3c
 801338c:	20012c74 	.word	0x20012c74
 8013390:	200124f0 	.word	0x200124f0
 8013394:	20012cb8 	.word	0x20012cb8
 8013398:	20012b38 	.word	0x20012b38
 801339c:	2001269e 	.word	0x2001269e
 80133a0:	20012870 	.word	0x20012870

080133a4 <CHECK_PRESSURE_TRIGGER>:
/**
 * @brief CHECK_PRESSURE_TRIGGER.
 * This function checks pressure trigger limit.
 * */
static void CHECK_PRESSURE_TRIGGER()
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	af00      	add	r7, sp, #0
	if (( GRAPH_VALUES.pressure < (Pressure_Trigger_Offset - VC_SIMV.TRIG_LMT )))
 80133a8:	4b0e      	ldr	r3, [pc, #56]	; (80133e4 <CHECK_PRESSURE_TRIGGER+0x40>)
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	ee07 3a90 	vmov	s15, r3
 80133b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80133b4:	4b0c      	ldr	r3, [pc, #48]	; (80133e8 <CHECK_PRESSURE_TRIGGER+0x44>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	ee07 3a90 	vmov	s15, r3
 80133bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80133c0:	4b0a      	ldr	r3, [pc, #40]	; (80133ec <CHECK_PRESSURE_TRIGGER+0x48>)
 80133c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80133c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80133ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80133ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d2:	d400      	bmi.n	80133d6 <CHECK_PRESSURE_TRIGGER+0x32>
	{
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 80133d4:	e004      	b.n	80133e0 <CHECK_PRESSURE_TRIGGER+0x3c>
		Patient_Trigger = PATIENT_TRIGGER_HAPPEN;
 80133d6:	4b06      	ldr	r3, [pc, #24]	; (80133f0 <CHECK_PRESSURE_TRIGGER+0x4c>)
 80133d8:	2201      	movs	r2, #1
 80133da:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 80133dc:	f7ff fe54 	bl	8013088 <Switch_TASK_Inspiration_CYCLE>
}
 80133e0:	bf00      	nop
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	200125f8 	.word	0x200125f8
 80133e8:	2001296c 	.word	0x2001296c
 80133ec:	20012cb8 	.word	0x20012cb8
 80133f0:	2001263d 	.word	0x2001263d

080133f4 <CHECK_FLOW_TRIGGER>:
/**
 * @brief CHECK_FLOW_TRIGGER.
 * This function checks the flow trigger limit.
 * */
static void CHECK_FLOW_TRIGGER()
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	af00      	add	r7, sp, #0
	if ((FLOW_TRIGGER > (Flow_Trigger_Offset+VC_SIMV.TRIG_LMT )))
 80133f8:	4b10      	ldr	r3, [pc, #64]	; (801343c <CHECK_FLOW_TRIGGER+0x48>)
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	ee07 3a90 	vmov	s15, r3
 8013400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013404:	4b0e      	ldr	r3, [pc, #56]	; (8013440 <CHECK_FLOW_TRIGGER+0x4c>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	ee07 3a90 	vmov	s15, r3
 801340c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013410:	4b0c      	ldr	r3, [pc, #48]	; (8013444 <CHECK_FLOW_TRIGGER+0x50>)
 8013412:	edd3 7a05 	vldr	s15, [r3, #20]
 8013416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801341a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013422:	dc00      	bgt.n	8013426 <CHECK_FLOW_TRIGGER+0x32>
	{
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
		Switch_TASK_Inspiration_CYCLE();
	}
}
 8013424:	e008      	b.n	8013438 <CHECK_FLOW_TRIGGER+0x44>
		LAST_FLOW_TRIGGER = FLOW_TRIGGER;
 8013426:	4b05      	ldr	r3, [pc, #20]	; (801343c <CHECK_FLOW_TRIGGER+0x48>)
 8013428:	781a      	ldrb	r2, [r3, #0]
 801342a:	4b07      	ldr	r3, [pc, #28]	; (8013448 <CHECK_FLOW_TRIGGER+0x54>)
 801342c:	701a      	strb	r2, [r3, #0]
		Patient_Trigger   = PATIENT_TRIGGER_HAPPEN;
 801342e:	4b07      	ldr	r3, [pc, #28]	; (801344c <CHECK_FLOW_TRIGGER+0x58>)
 8013430:	2201      	movs	r2, #1
 8013432:	701a      	strb	r2, [r3, #0]
		Switch_TASK_Inspiration_CYCLE();
 8013434:	f7ff fe28 	bl	8013088 <Switch_TASK_Inspiration_CYCLE>
}
 8013438:	bf00      	nop
 801343a:	bd80      	pop	{r7, pc}
 801343c:	200129aa 	.word	0x200129aa
 8013440:	20012900 	.word	0x20012900
 8013444:	20012cb8 	.word	0x20012cb8
 8013448:	20012b70 	.word	0x20012b70
 801344c:	2001263d 	.word	0x2001263d

08013450 <CHECK_TRIGGER_OFFSET>:
/**
 * @brief CHECK_FLOW_TRIGGER.
 * This function finds the trigger offset.
 * */
static void CHECK_TRIGGER_OFFSET()
{
 8013450:	b480      	push	{r7}
 8013452:	af00      	add	r7, sp, #0
	if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 8013454:	4b18      	ldr	r3, [pc, #96]	; (80134b8 <CHECK_TRIGGER_OFFSET+0x68>)
 8013456:	edd3 7a01 	vldr	s15, [r3, #4]
 801345a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801345e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013462:	d013      	beq.n	801348c <CHECK_TRIGGER_OFFSET+0x3c>
 8013464:	4b14      	ldr	r3, [pc, #80]	; (80134b8 <CHECK_TRIGGER_OFFSET+0x68>)
 8013466:	edd3 7a01 	vldr	s15, [r3, #4]
 801346a:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 801346e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013476:	da00      	bge.n	801347a <CHECK_TRIGGER_OFFSET+0x2a>
	{
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
		FLOW_TRIGGER             =  RESET;
	}
}
 8013478:	e019      	b.n	80134ae <CHECK_TRIGGER_OFFSET+0x5e>
	if(GRAPH_VALUES.flow==0 || (GRAPH_VALUES.flow>=(-8) && GRAPH_VALUES.flow<0))
 801347a:	4b0f      	ldr	r3, [pc, #60]	; (80134b8 <CHECK_TRIGGER_OFFSET+0x68>)
 801347c:	edd3 7a01 	vldr	s15, [r3, #4]
 8013480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013488:	d400      	bmi.n	801348c <CHECK_TRIGGER_OFFSET+0x3c>
}
 801348a:	e010      	b.n	80134ae <CHECK_TRIGGER_OFFSET+0x5e>
		Pressure_Trigger_Offset  =  GRAPH_VALUES.pressure;
 801348c:	4b0a      	ldr	r3, [pc, #40]	; (80134b8 <CHECK_TRIGGER_OFFSET+0x68>)
 801348e:	781b      	ldrb	r3, [r3, #0]
 8013490:	461a      	mov	r2, r3
 8013492:	4b0a      	ldr	r3, [pc, #40]	; (80134bc <CHECK_TRIGGER_OFFSET+0x6c>)
 8013494:	601a      	str	r2, [r3, #0]
		Flow_Trigger_Offset      =  GRAPH_VALUES.flow;
 8013496:	4b08      	ldr	r3, [pc, #32]	; (80134b8 <CHECK_TRIGGER_OFFSET+0x68>)
 8013498:	edd3 7a01 	vldr	s15, [r3, #4]
 801349c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134a0:	ee17 2a90 	vmov	r2, s15
 80134a4:	4b06      	ldr	r3, [pc, #24]	; (80134c0 <CHECK_TRIGGER_OFFSET+0x70>)
 80134a6:	601a      	str	r2, [r3, #0]
		FLOW_TRIGGER             =  RESET;
 80134a8:	4b06      	ldr	r3, [pc, #24]	; (80134c4 <CHECK_TRIGGER_OFFSET+0x74>)
 80134aa:	2200      	movs	r2, #0
 80134ac:	701a      	strb	r2, [r3, #0]
}
 80134ae:	bf00      	nop
 80134b0:	46bd      	mov	sp, r7
 80134b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b6:	4770      	bx	lr
 80134b8:	200125f8 	.word	0x200125f8
 80134bc:	2001296c 	.word	0x2001296c
 80134c0:	20012900 	.word	0x20012900
 80134c4:	200129aa 	.word	0x200129aa

080134c8 <CHECK_Flow_Increment>:
/**
 * @brief CHECK_Flow_Increment.
 * This function identifies the flow achieved in the last breath cycle.
 * */
static void CHECK_Flow_Increment()
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	af00      	add	r7, sp, #0
	if(Stop_Increment_Count <= Stop_blower_Performance_Value)
 80134cc:	4b24      	ldr	r3, [pc, #144]	; (8013560 <CHECK_Flow_Increment+0x98>)
 80134ce:	781a      	ldrb	r2, [r3, #0]
 80134d0:	4b24      	ldr	r3, [pc, #144]	; (8013564 <CHECK_Flow_Increment+0x9c>)
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d838      	bhi.n	801354a <CHECK_Flow_Increment+0x82>
	{
	   if( Flow_increment == Low_Flow_Problem )
 80134d8:	4b23      	ldr	r3, [pc, #140]	; (8013568 <CHECK_Flow_Increment+0xa0>)
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	2b01      	cmp	r3, #1
 80134de:	d110      	bne.n	8013502 <CHECK_Flow_Increment+0x3a>
	   {
		   INCREMENT_DAC_VAL_PER_ITERATION = (INCREMENT_DAC_VAL_PER_ITERATION + 1);
 80134e0:	4b22      	ldr	r3, [pc, #136]	; (801356c <CHECK_Flow_Increment+0xa4>)
 80134e2:	781b      	ldrb	r3, [r3, #0]
 80134e4:	3301      	adds	r3, #1
 80134e6:	b2da      	uxtb	r2, r3
 80134e8:	4b20      	ldr	r3, [pc, #128]	; (801356c <CHECK_Flow_Increment+0xa4>)
 80134ea:	701a      	strb	r2, [r3, #0]
		       if(INCREMENT_DAC_VAL_PER_ITERATION >Maximum_Increment_Limit)
 80134ec:	4b1f      	ldr	r3, [pc, #124]	; (801356c <CHECK_Flow_Increment+0xa4>)
 80134ee:	781a      	ldrb	r2, [r3, #0]
 80134f0:	4b1f      	ldr	r3, [pc, #124]	; (8013570 <CHECK_Flow_Increment+0xa8>)
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d918      	bls.n	801352a <CHECK_Flow_Increment+0x62>
		    	   INCREMENT_DAC_VAL_PER_ITERATION=Maximum_Increment_Limit;
 80134f8:	4b1d      	ldr	r3, [pc, #116]	; (8013570 <CHECK_Flow_Increment+0xa8>)
 80134fa:	781a      	ldrb	r2, [r3, #0]
 80134fc:	4b1b      	ldr	r3, [pc, #108]	; (801356c <CHECK_Flow_Increment+0xa4>)
 80134fe:	701a      	strb	r2, [r3, #0]
 8013500:	e013      	b.n	801352a <CHECK_Flow_Increment+0x62>
	   }
	   else if(Flow_increment == High_Flow_Problem)
 8013502:	4b19      	ldr	r3, [pc, #100]	; (8013568 <CHECK_Flow_Increment+0xa0>)
 8013504:	781b      	ldrb	r3, [r3, #0]
 8013506:	2b02      	cmp	r3, #2
 8013508:	d10f      	bne.n	801352a <CHECK_Flow_Increment+0x62>
	   {
		   INCREMENT_DAC_VAL_PER_ITERATION = (INCREMENT_DAC_VAL_PER_ITERATION - 1);
 801350a:	4b18      	ldr	r3, [pc, #96]	; (801356c <CHECK_Flow_Increment+0xa4>)
 801350c:	781b      	ldrb	r3, [r3, #0]
 801350e:	3b01      	subs	r3, #1
 8013510:	b2da      	uxtb	r2, r3
 8013512:	4b16      	ldr	r3, [pc, #88]	; (801356c <CHECK_Flow_Increment+0xa4>)
 8013514:	701a      	strb	r2, [r3, #0]
		       if(INCREMENT_DAC_VAL_PER_ITERATION <Minimum_Increment_Limit)
 8013516:	4b15      	ldr	r3, [pc, #84]	; (801356c <CHECK_Flow_Increment+0xa4>)
 8013518:	781a      	ldrb	r2, [r3, #0]
 801351a:	4b16      	ldr	r3, [pc, #88]	; (8013574 <CHECK_Flow_Increment+0xac>)
 801351c:	781b      	ldrb	r3, [r3, #0]
 801351e:	429a      	cmp	r2, r3
 8013520:	d203      	bcs.n	801352a <CHECK_Flow_Increment+0x62>
		    	   INCREMENT_DAC_VAL_PER_ITERATION=Minimum_Increment_Limit;
 8013522:	4b14      	ldr	r3, [pc, #80]	; (8013574 <CHECK_Flow_Increment+0xac>)
 8013524:	781a      	ldrb	r2, [r3, #0]
 8013526:	4b11      	ldr	r3, [pc, #68]	; (801356c <CHECK_Flow_Increment+0xa4>)
 8013528:	701a      	strb	r2, [r3, #0]
	   }

	   Last_Flow_increment = Flow_increment;
 801352a:	4b0f      	ldr	r3, [pc, #60]	; (8013568 <CHECK_Flow_Increment+0xa0>)
 801352c:	781a      	ldrb	r2, [r3, #0]
 801352e:	4b12      	ldr	r3, [pc, #72]	; (8013578 <CHECK_Flow_Increment+0xb0>)
 8013530:	701a      	strb	r2, [r3, #0]
	    Set_Flow_value       = Not_Detect;
 8013532:	4b12      	ldr	r3, [pc, #72]	; (801357c <CHECK_Flow_Increment+0xb4>)
 8013534:	2200      	movs	r2, #0
 8013536:	701a      	strb	r2, [r3, #0]
		Flow_increment       = Flow_fine;
 8013538:	4b0b      	ldr	r3, [pc, #44]	; (8013568 <CHECK_Flow_Increment+0xa0>)
 801353a:	2200      	movs	r2, #0
 801353c:	701a      	strb	r2, [r3, #0]
		Check_Flow_Graph(VC_SIMV.FLOW_RATE_Val);
 801353e:	4b10      	ldr	r3, [pc, #64]	; (8013580 <CHECK_Flow_Increment+0xb8>)
 8013540:	7c9b      	ldrb	r3, [r3, #18]
 8013542:	b25b      	sxtb	r3, r3
 8013544:	4618      	mov	r0, r3
 8013546:	f000 f821 	bl	801358c <Check_Flow_Graph>
	}
	memset(Volume_Array, 0,(VOL_ARR_SIZE*sizeof(Volume_Array[0])) );
 801354a:	223c      	movs	r2, #60	; 0x3c
 801354c:	2100      	movs	r1, #0
 801354e:	480d      	ldr	r0, [pc, #52]	; (8013584 <CHECK_Flow_Increment+0xbc>)
 8013550:	f009 fcda 	bl	801cf08 <memset>
	Volume_Array_count = 0;
 8013554:	4b0c      	ldr	r3, [pc, #48]	; (8013588 <CHECK_Flow_Increment+0xc0>)
 8013556:	2200      	movs	r2, #0
 8013558:	801a      	strh	r2, [r3, #0]
}
 801355a:	bf00      	nop
 801355c:	bd80      	pop	{r7, pc}
 801355e:	bf00      	nop
 8013560:	20012369 	.word	0x20012369
 8013564:	20000057 	.word	0x20000057
 8013568:	2001280c 	.word	0x2001280c
 801356c:	200129f8 	.word	0x200129f8
 8013570:	20000056 	.word	0x20000056
 8013574:	20000055 	.word	0x20000055
 8013578:	20012804 	.word	0x20012804
 801357c:	20012a39 	.word	0x20012a39
 8013580:	20012cb8 	.word	0x20012cb8
 8013584:	20012734 	.word	0x20012734
 8013588:	20012a88 	.word	0x20012a88

0801358c <Check_Flow_Graph>:
/**
 * @brief Check_Flow_Graph.
 * This function identifies the flow achieved in the last breath cycle using array element.
 * */
static void Check_Flow_Graph(int8_t flow_rate)
{
 801358c:	b480      	push	{r7}
 801358e:	b085      	sub	sp, #20
 8013590:	af00      	add	r7, sp, #0
 8013592:	4603      	mov	r3, r0
 8013594:	71fb      	strb	r3, [r7, #7]
	Low_Flow_Rate = flow_rate - 17;
 8013596:	79fb      	ldrb	r3, [r7, #7]
 8013598:	3b11      	subs	r3, #17
 801359a:	b2db      	uxtb	r3, r3
 801359c:	b25a      	sxtb	r2, r3
 801359e:	4b34      	ldr	r3, [pc, #208]	; (8013670 <Check_Flow_Graph+0xe4>)
 80135a0:	701a      	strb	r2, [r3, #0]

	if(Low_Flow_Rate <= 1)
 80135a2:	4b33      	ldr	r3, [pc, #204]	; (8013670 <Check_Flow_Graph+0xe4>)
 80135a4:	f993 3000 	ldrsb.w	r3, [r3]
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	dc02      	bgt.n	80135b2 <Check_Flow_Graph+0x26>
	{
		Low_Flow_Rate = 1;
 80135ac:	4b30      	ldr	r3, [pc, #192]	; (8013670 <Check_Flow_Graph+0xe4>)
 80135ae:	2201      	movs	r2, #1
 80135b0:	701a      	strb	r2, [r3, #0]
	}
	for(int i=0;i<VOL_ARR_SIZE;i++)
 80135b2:	2300      	movs	r3, #0
 80135b4:	60fb      	str	r3, [r7, #12]
 80135b6:	e033      	b.n	8013620 <Check_Flow_Graph+0x94>
	{
		if(Volume_Array[i] == flow_rate)
 80135b8:	4a2e      	ldr	r2, [pc, #184]	; (8013674 <Check_Flow_Graph+0xe8>)
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	4413      	add	r3, r2
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	461a      	mov	r2, r3
 80135c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d102      	bne.n	80135d0 <Check_Flow_Graph+0x44>
		{
			Set_Flow_value = Detect;
 80135ca:	4b2b      	ldr	r3, [pc, #172]	; (8013678 <Check_Flow_Graph+0xec>)
 80135cc:	2201      	movs	r2, #1
 80135ce:	701a      	strb	r2, [r3, #0]
		}
		if(Set_Flow_value == Detect)
 80135d0:	4b29      	ldr	r3, [pc, #164]	; (8013678 <Check_Flow_Graph+0xec>)
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	2b01      	cmp	r3, #1
 80135d6:	d120      	bne.n	801361a <Check_Flow_Graph+0x8e>
		{
			if( (Volume_Array[i] > (flow_rate+7)))                                 //new
 80135d8:	4a26      	ldr	r2, [pc, #152]	; (8013674 <Check_Flow_Graph+0xe8>)
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	4413      	add	r3, r2
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	461a      	mov	r2, r3
 80135e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80135e6:	3307      	adds	r3, #7
 80135e8:	429a      	cmp	r2, r3
 80135ea:	dd03      	ble.n	80135f4 <Check_Flow_Graph+0x68>
			{
				Flow_increment = High_Flow_Problem;
 80135ec:	4b23      	ldr	r3, [pc, #140]	; (801367c <Check_Flow_Graph+0xf0>)
 80135ee:	2202      	movs	r2, #2
 80135f0:	701a      	strb	r2, [r3, #0]
 80135f2:	e012      	b.n	801361a <Check_Flow_Graph+0x8e>
			}
			else if( (Volume_Array[i] < (Low_Flow_Rate))  && (Volume_Array[i] !=0) )  //new line changed as ulta
 80135f4:	4a1f      	ldr	r2, [pc, #124]	; (8013674 <Check_Flow_Graph+0xe8>)
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	4413      	add	r3, r2
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	461a      	mov	r2, r3
 80135fe:	4b1c      	ldr	r3, [pc, #112]	; (8013670 <Check_Flow_Graph+0xe4>)
 8013600:	f993 3000 	ldrsb.w	r3, [r3]
 8013604:	429a      	cmp	r2, r3
 8013606:	da08      	bge.n	801361a <Check_Flow_Graph+0x8e>
 8013608:	4a1a      	ldr	r2, [pc, #104]	; (8013674 <Check_Flow_Graph+0xe8>)
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	4413      	add	r3, r2
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d002      	beq.n	801361a <Check_Flow_Graph+0x8e>
			{
				Flow_increment = Low_Flow_Problem;
 8013614:	4b19      	ldr	r3, [pc, #100]	; (801367c <Check_Flow_Graph+0xf0>)
 8013616:	2201      	movs	r2, #1
 8013618:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<VOL_ARR_SIZE;i++)
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	3301      	adds	r3, #1
 801361e:	60fb      	str	r3, [r7, #12]
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2b3b      	cmp	r3, #59	; 0x3b
 8013624:	ddc8      	ble.n	80135b8 <Check_Flow_Graph+0x2c>
			}
		}
	}

	if(  (Last_Flow_increment != Flow_increment) && (Flow_increment != Flow_fine)  && (Last_Flow_increment != Flow_fine) )
 8013626:	4b16      	ldr	r3, [pc, #88]	; (8013680 <Check_Flow_Graph+0xf4>)
 8013628:	781a      	ldrb	r2, [r3, #0]
 801362a:	4b14      	ldr	r3, [pc, #80]	; (801367c <Check_Flow_Graph+0xf0>)
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	429a      	cmp	r2, r3
 8013630:	d017      	beq.n	8013662 <Check_Flow_Graph+0xd6>
 8013632:	4b12      	ldr	r3, [pc, #72]	; (801367c <Check_Flow_Graph+0xf0>)
 8013634:	781b      	ldrb	r3, [r3, #0]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d013      	beq.n	8013662 <Check_Flow_Graph+0xd6>
 801363a:	4b11      	ldr	r3, [pc, #68]	; (8013680 <Check_Flow_Graph+0xf4>)
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d00f      	beq.n	8013662 <Check_Flow_Graph+0xd6>
	{
		if(Stop_Increment_Count <= Stop_blower_Performance_Value)
 8013642:	4b10      	ldr	r3, [pc, #64]	; (8013684 <Check_Flow_Graph+0xf8>)
 8013644:	781a      	ldrb	r2, [r3, #0]
 8013646:	4b10      	ldr	r3, [pc, #64]	; (8013688 <Check_Flow_Graph+0xfc>)
 8013648:	781b      	ldrb	r3, [r3, #0]
 801364a:	429a      	cmp	r2, r3
 801364c:	d809      	bhi.n	8013662 <Check_Flow_Graph+0xd6>
		{
			if(Patient_Trigger  == NO_PATIENT_TRIGGER)
 801364e:	4b0f      	ldr	r3, [pc, #60]	; (801368c <Check_Flow_Graph+0x100>)
 8013650:	781b      	ldrb	r3, [r3, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d105      	bne.n	8013662 <Check_Flow_Graph+0xd6>
			{
				Stop_Increment_Count++;
 8013656:	4b0b      	ldr	r3, [pc, #44]	; (8013684 <Check_Flow_Graph+0xf8>)
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	3301      	adds	r3, #1
 801365c:	b2da      	uxtb	r2, r3
 801365e:	4b09      	ldr	r3, [pc, #36]	; (8013684 <Check_Flow_Graph+0xf8>)
 8013660:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8013662:	bf00      	nop
 8013664:	3714      	adds	r7, #20
 8013666:	46bd      	mov	sp, r7
 8013668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366c:	4770      	bx	lr
 801366e:	bf00      	nop
 8013670:	200129a0 	.word	0x200129a0
 8013674:	20012734 	.word	0x20012734
 8013678:	20012a39 	.word	0x20012a39
 801367c:	2001280c 	.word	0x2001280c
 8013680:	20012804 	.word	0x20012804
 8013684:	20012369 	.word	0x20012369
 8013688:	20000057 	.word	0x20000057
 801368c:	2001263d 	.word	0x2001263d

08013690 <Trigger_Time_Monitor>:
/**
 * @brief Trigger_Time_Monitor.
 * This function calculate the trigger time.
 * */
static void Trigger_Time_Monitor()
{
 8013690:	b480      	push	{r7}
 8013692:	af00      	add	r7, sp, #0
	VC_SIMV.CALC_TRIG_VAL 	                 =  (VC_SIMV.EXPIRATION_TIME   - PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time );
 8013694:	4b11      	ldr	r3, [pc, #68]	; (80136dc <Trigger_Time_Monitor+0x4c>)
 8013696:	68db      	ldr	r3, [r3, #12]
 8013698:	b29a      	uxth	r2, r3
 801369a:	4b11      	ldr	r3, [pc, #68]	; (80136e0 <Trigger_Time_Monitor+0x50>)
 801369c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	1ad3      	subs	r3, r2, r3
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	4b0d      	ldr	r3, [pc, #52]	; (80136dc <Trigger_Time_Monitor+0x4c>)
 80136a8:	835a      	strh	r2, [r3, #26]
	if(VC_SIMV.CALC_TRIG_VAL <0)
	{
		VC_SIMV.CALC_TRIG_VAL = (VC_SIMV.CALC_TRIG_VAL * (-1));
	}
	VC_SIMV.TOLERANCE_EWAVE =  VC_SIMV.TRIG_TIME;
 80136aa:	4b0c      	ldr	r3, [pc, #48]	; (80136dc <Trigger_Time_Monitor+0x4c>)
 80136ac:	8b1a      	ldrh	r2, [r3, #24]
 80136ae:	4b0b      	ldr	r3, [pc, #44]	; (80136dc <Trigger_Time_Monitor+0x4c>)
 80136b0:	839a      	strh	r2, [r3, #28]
	if(VC_SIMV.CALC_TRIG_VAL < VC_SIMV.TRIG_TIME )
 80136b2:	4b0a      	ldr	r3, [pc, #40]	; (80136dc <Trigger_Time_Monitor+0x4c>)
 80136b4:	8b5a      	ldrh	r2, [r3, #26]
 80136b6:	4b09      	ldr	r3, [pc, #36]	; (80136dc <Trigger_Time_Monitor+0x4c>)
 80136b8:	8b1b      	ldrh	r3, [r3, #24]
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d205      	bcs.n	80136ca <Trigger_Time_Monitor+0x3a>
	{
		VC_SIMV.TOLERANCE_EWAVE =  (VC_SIMV.TRIG_TIME - 200) ;
 80136be:	4b07      	ldr	r3, [pc, #28]	; (80136dc <Trigger_Time_Monitor+0x4c>)
 80136c0:	8b1b      	ldrh	r3, [r3, #24]
 80136c2:	3bc8      	subs	r3, #200	; 0xc8
 80136c4:	b29a      	uxth	r2, r3
 80136c6:	4b05      	ldr	r3, [pc, #20]	; (80136dc <Trigger_Time_Monitor+0x4c>)
 80136c8:	839a      	strh	r2, [r3, #28]
	}

	VC_SIMV.TRIG_WINDOW		                 = VC_SIMV.TOLERANCE_EWAVE;
 80136ca:	4b04      	ldr	r3, [pc, #16]	; (80136dc <Trigger_Time_Monitor+0x4c>)
 80136cc:	8b9a      	ldrh	r2, [r3, #28]
 80136ce:	4b03      	ldr	r3, [pc, #12]	; (80136dc <Trigger_Time_Monitor+0x4c>)
 80136d0:	83da      	strh	r2, [r3, #30]
}
 80136d2:	bf00      	nop
 80136d4:	46bd      	mov	sp, r7
 80136d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136da:	4770      	bx	lr
 80136dc:	20012cb8 	.word	0x20012cb8
 80136e0:	20012c74 	.word	0x20012c74

080136e4 <Vc_Cmv_Mode_Packet_Data>:
 * This task is to extract the VCCMV mode variable from NRF Bluetooth.
 * @param RECEIVE_GRAPH_PACKET structure pointer.
 */

void Vc_Cmv_Mode_Packet_Data(RECEIVE_GRAPH_PACKET *Receive_Graph_Packet)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b084      	sub	sp, #16
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
	uint32_t One_Breathe_time;
	VC_CMV.VOLUME_Val             = Receive_Graph_Packet->VTI_VS;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	88da      	ldrh	r2, [r3, #6]
 80136f0:	4b2a      	ldr	r3, [pc, #168]	; (801379c <Vc_Cmv_Mode_Packet_Data+0xb8>)
 80136f2:	801a      	strh	r2, [r3, #0]
	VC_CMV.PEEP_Val               = Receive_Graph_Packet->PEEP_CPAP_Plow;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	795a      	ldrb	r2, [r3, #5]
 80136f8:	4b28      	ldr	r3, [pc, #160]	; (801379c <Vc_Cmv_Mode_Packet_Data+0xb8>)
 80136fa:	709a      	strb	r2, [r3, #2]
	VC_CMV.FIO2_Val               = Receive_Graph_Packet->FiO2;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	7a1a      	ldrb	r2, [r3, #8]
 8013700:	4b26      	ldr	r3, [pc, #152]	; (801379c <Vc_Cmv_Mode_Packet_Data+0xb8>)
 8013702:	711a      	strb	r2, [r3, #4]
	VC_CMV.RESPIRATORY_RATE_Val   = Receive_Graph_Packet->RR;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	7a5a      	ldrb	r2, [r3, #9]
 8013708:	4b24      	ldr	r3, [pc, #144]	; (801379c <Vc_Cmv_Mode_Packet_Data+0xb8>)
 801370a:	70da      	strb	r2, [r3, #3]
	One_Breathe_time              = (One_Minite_In_MS / VC_CMV.RESPIRATORY_RATE_Val);
 801370c:	4b23      	ldr	r3, [pc, #140]	; (801379c <Vc_Cmv_Mode_Packet_Data+0xb8>)
 801370e:	78db      	ldrb	r3, [r3, #3]
 8013710:	461a      	mov	r2, r3
 8013712:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013716:	fb93 f3f2 	sdiv	r3, r3, r2
 801371a:	60fb      	str	r3, [r7, #12]
	VC_CMV.INSPIRATION_TIME       = ( ( Receive_Graph_Packet->T_high) * 100 );
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	7a9b      	ldrb	r3, [r3, #10]
 8013720:	461a      	mov	r2, r3
 8013722:	2364      	movs	r3, #100	; 0x64
 8013724:	fb03 f302 	mul.w	r3, r3, r2
 8013728:	461a      	mov	r2, r3
 801372a:	4b1c      	ldr	r3, [pc, #112]	; (801379c <Vc_Cmv_Mode_Packet_Data+0xb8>)
 801372c:	609a      	str	r2, [r3, #8]
	VC_CMV.EXPIRATION_TIME        = (One_Breathe_time - VC_CMV.INSPIRATION_TIME);
 801372e:	4b1b      	ldr	r3, [pc, #108]	; (801379c <Vc_Cmv_Mode_Packet_Data+0xb8>)
 8013730:	689b      	ldr	r3, [r3, #8]
 8013732:	68fa      	ldr	r2, [r7, #12]
 8013734:	1ad3      	subs	r3, r2, r3
 8013736:	4a19      	ldr	r2, [pc, #100]	; (801379c <Vc_Cmv_Mode_Packet_Data+0xb8>)
 8013738:	60d3      	str	r3, [r2, #12]
	VC_CMV.FLOW_RATE_Val          = Receive_Graph_Packet->Flow_Limit_FiO2_Flow_Limit;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	7b5a      	ldrb	r2, [r3, #13]
 801373e:	4b17      	ldr	r3, [pc, #92]	; (801379c <Vc_Cmv_Mode_Packet_Data+0xb8>)
 8013740:	749a      	strb	r2, [r3, #18]

	Alert_Check_Time              = ((float)VC_CMV.INSPIRATION_TIME/3);
 8013742:	4b16      	ldr	r3, [pc, #88]	; (801379c <Vc_Cmv_Mode_Packet_Data+0xb8>)
 8013744:	689b      	ldr	r3, [r3, #8]
 8013746:	ee07 3a90 	vmov	s15, r3
 801374a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801374e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8013752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801375a:	ee17 2a90 	vmov	r2, s15
 801375e:	4b10      	ldr	r3, [pc, #64]	; (80137a0 <Vc_Cmv_Mode_Packet_Data+0xbc>)
 8013760:	601a      	str	r2, [r3, #0]
	Vent_Type                     = ET_TUBE_MODE;
 8013762:	4b10      	ldr	r3, [pc, #64]	; (80137a4 <Vc_Cmv_Mode_Packet_Data+0xc0>)
 8013764:	2200      	movs	r2, #0
 8013766:	701a      	strb	r2, [r3, #0]

	OOM202.offset_minimum         = ( 0x7F & (Receive_Graph_Packet->Vent_Type_Min_O2));
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	7c5b      	ldrb	r3, [r3, #17]
 801376c:	b29b      	uxth	r3, r3
 801376e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013772:	b29a      	uxth	r2, r3
 8013774:	4b0c      	ldr	r3, [pc, #48]	; (80137a8 <Vc_Cmv_Mode_Packet_Data+0xc4>)
 8013776:	805a      	strh	r2, [r3, #2]
	OOM202.offset_maximum         = Receive_Graph_Packet->Max_O2;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	7c9b      	ldrb	r3, [r3, #18]
 801377c:	b29a      	uxth	r2, r3
 801377e:	4b0a      	ldr	r3, [pc, #40]	; (80137a8 <Vc_Cmv_Mode_Packet_Data+0xc4>)
 8013780:	809a      	strh	r2, [r3, #4]

	Mode_Initial_Flag_Set         = OPEN;
 8013782:	4b0a      	ldr	r3, [pc, #40]	; (80137ac <Vc_Cmv_Mode_Packet_Data+0xc8>)
 8013784:	2201      	movs	r2, #1
 8013786:	701a      	strb	r2, [r3, #0]
	vTaskResume(Mode_initial_Flag_Set_Handler);
 8013788:	4b09      	ldr	r3, [pc, #36]	; (80137b0 <Vc_Cmv_Mode_Packet_Data+0xcc>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	4618      	mov	r0, r3
 801378e:	f007 fd55 	bl	801b23c <vTaskResume>
}
 8013792:	bf00      	nop
 8013794:	3710      	adds	r7, #16
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	20012c9c 	.word	0x20012c9c
 80137a0:	2001246c 	.word	0x2001246c
 80137a4:	200129f4 	.word	0x200129f4
 80137a8:	20012224 	.word	0x20012224
 80137ac:	20012cb1 	.word	0x20012cb1
 80137b0:	200129ac 	.word	0x200129ac

080137b4 <Vc_Cmv_Task>:
 * @brief Vc_Cmv_Task.
 * This Task calls  two function based on inspiration and expiration time.
 * */

void Vc_Cmv_Task (void *argument)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b082      	sub	sp, #8
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]

	while(1)
	{
		switch (Run_Current_Breathe_State)
 80137bc:	4b14      	ldr	r3, [pc, #80]	; (8013810 <Vc_Cmv_Task+0x5c>)
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	2b02      	cmp	r3, #2
 80137c2:	d00b      	beq.n	80137dc <Vc_Cmv_Task+0x28>
 80137c4:	2b02      	cmp	r3, #2
 80137c6:	dc1c      	bgt.n	8013802 <Vc_Cmv_Task+0x4e>
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d01c      	beq.n	8013806 <Vc_Cmv_Task+0x52>
 80137cc:	2b01      	cmp	r3, #1
 80137ce:	d118      	bne.n	8013802 <Vc_Cmv_Task+0x4e>
		{
			case Run_Inspiration_Cycle:
				Inspiration_Time_Blower_Control_VC_CMV(Volume_Mode_Blower_control.BLOWER_DAC_VAL);
 80137d0:	4b10      	ldr	r3, [pc, #64]	; (8013814 <Vc_Cmv_Task+0x60>)
 80137d2:	881b      	ldrh	r3, [r3, #0]
 80137d4:	4618      	mov	r0, r3
 80137d6:	f000 f821 	bl	801381c <Inspiration_Time_Blower_Control_VC_CMV>
			break;
 80137da:	e015      	b.n	8013808 <Vc_Cmv_Task+0x54>
			case Run_Expiration_Cycle:
				    	Volume_Mode_Blower_control.BLOWER_DAC_VAL=0;
 80137dc:	4b0d      	ldr	r3, [pc, #52]	; (8013814 <Vc_Cmv_Task+0x60>)
 80137de:	2200      	movs	r2, #0
 80137e0:	801a      	strh	r2, [r3, #0]
						Expiration_Time_Blower_Control_VC_CMV(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 80137e2:	4b0c      	ldr	r3, [pc, #48]	; (8013814 <Vc_Cmv_Task+0x60>)
 80137e4:	881b      	ldrh	r3, [r3, #0]
 80137e6:	4a0c      	ldr	r2, [pc, #48]	; (8013818 <Vc_Cmv_Task+0x64>)
 80137e8:	edd2 7a00 	vldr	s15, [r2]
								   	   	   	   	   	          PEEP_Maintain_Parameter.PEEP_Temp,
								                              PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 80137ec:	4a0a      	ldr	r2, [pc, #40]	; (8013818 <Vc_Cmv_Task+0x64>)
 80137ee:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
						Expiration_Time_Blower_Control_VC_CMV(Volume_Mode_Blower_control.BLOWER_DAC_VAL,
 80137f2:	b292      	uxth	r2, r2
 80137f4:	4611      	mov	r1, r2
 80137f6:	eeb0 0a67 	vmov.f32	s0, s15
 80137fa:	4618      	mov	r0, r3
 80137fc:	f000 f81e 	bl	801383c <Expiration_Time_Blower_Control_VC_CMV>
			break;
 8013800:	e002      	b.n	8013808 <Vc_Cmv_Task+0x54>
			case No_Run_State:
			break;
			default:
			break;
 8013802:	bf00      	nop
 8013804:	e000      	b.n	8013808 <Vc_Cmv_Task+0x54>
			break;
 8013806:	bf00      	nop
		}

		vTaskDelay(2);
 8013808:	2002      	movs	r0, #2
 801380a:	f007 fc1f 	bl	801b04c <vTaskDelay>
		switch (Run_Current_Breathe_State)
 801380e:	e7d5      	b.n	80137bc <Vc_Cmv_Task+0x8>
 8013810:	20012870 	.word	0x20012870
 8013814:	200129b0 	.word	0x200129b0
 8013818:	20012c74 	.word	0x20012c74

0801381c <Inspiration_Time_Blower_Control_VC_CMV>:
 * @param Blower_Signal as Pressure_Mode_blower_control.BLOWER_DAC_VAL.
 * */


static void Inspiration_Time_Blower_Control_VC_CMV(uint16_t Blower_Signal)
{
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	4603      	mov	r3, r0
 8013824:	80fb      	strh	r3, [r7, #6]
	Blower_Signal(Blower_Signal);
 8013826:	4a04      	ldr	r2, [pc, #16]	; (8013838 <Inspiration_Time_Blower_Control_VC_CMV+0x1c>)
 8013828:	88fb      	ldrh	r3, [r7, #6]
 801382a:	6093      	str	r3, [r2, #8]
}
 801382c:	bf00      	nop
 801382e:	370c      	adds	r7, #12
 8013830:	46bd      	mov	sp, r7
 8013832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013836:	4770      	bx	lr
 8013838:	40007400 	.word	0x40007400

0801383c <Expiration_Time_Blower_Control_VC_CMV>:
 * @param  Expiratory_Valve_Open_Time to control the expiratory valve lock delay.
 * */


static void Expiration_Time_Blower_Control_VC_CMV(uint16_t Blower_Signal,float PEEP,uint16_t Expiratory_Valve_Open_Time)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b082      	sub	sp, #8
 8013840:	af00      	add	r7, sp, #0
 8013842:	4603      	mov	r3, r0
 8013844:	ed87 0a00 	vstr	s0, [r7]
 8013848:	460a      	mov	r2, r1
 801384a:	80fb      	strh	r3, [r7, #6]
 801384c:	4613      	mov	r3, r2
 801384e:	80bb      	strh	r3, [r7, #4]
	Blower_Signal( Blower_Signal);
 8013850:	4a25      	ldr	r2, [pc, #148]	; (80138e8 <Expiration_Time_Blower_Control_VC_CMV+0xac>)
 8013852:	88fb      	ldrh	r3, [r7, #6]
 8013854:	6093      	str	r3, [r2, #8]
		if(Peep_Status==PEEP_ACHEIVED)
 8013856:	4b25      	ldr	r3, [pc, #148]	; (80138ec <Expiration_Time_Blower_Control_VC_CMV+0xb0>)
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	2b01      	cmp	r3, #1
 801385c:	d113      	bne.n	8013886 <Expiration_Time_Blower_Control_VC_CMV+0x4a>
		{
				if(GRAPH_VALUES.pressure < PEEP)
 801385e:	4b24      	ldr	r3, [pc, #144]	; (80138f0 <Expiration_Time_Blower_Control_VC_CMV+0xb4>)
 8013860:	781b      	ldrb	r3, [r3, #0]
 8013862:	ee07 3a90 	vmov	s15, r3
 8013866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801386a:	ed97 7a00 	vldr	s14, [r7]
 801386e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013876:	dd03      	ble.n	8013880 <Expiration_Time_Blower_Control_VC_CMV+0x44>
				{
					Blower_Signal( Blower_Signal);
 8013878:	4a1b      	ldr	r2, [pc, #108]	; (80138e8 <Expiration_Time_Blower_Control_VC_CMV+0xac>)
 801387a:	88fb      	ldrh	r3, [r7, #6]
 801387c:	6093      	str	r3, [r2, #8]
 801387e:	e002      	b.n	8013886 <Expiration_Time_Blower_Control_VC_CMV+0x4a>
				}
				else
				{
					Blower_Signal( Blower_Signal);
 8013880:	4a19      	ldr	r2, [pc, #100]	; (80138e8 <Expiration_Time_Blower_Control_VC_CMV+0xac>)
 8013882:	88fb      	ldrh	r3, [r7, #6]
 8013884:	6093      	str	r3, [r2, #8]
				}
		 }
		if(GRAPH_VALUES.pressure<= PEEP)
 8013886:	4b1a      	ldr	r3, [pc, #104]	; (80138f0 <Expiration_Time_Blower_Control_VC_CMV+0xb4>)
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	ee07 3a90 	vmov	s15, r3
 801388e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013892:	ed97 7a00 	vldr	s14, [r7]
 8013896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801389a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801389e:	db14      	blt.n	80138ca <Expiration_Time_Blower_Control_VC_CMV+0x8e>
		{
			if(Expiratory_Valve_Lock_Delay==OPENED)
 80138a0:	4b14      	ldr	r3, [pc, #80]	; (80138f4 <Expiration_Time_Blower_Control_VC_CMV+0xb8>)
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d106      	bne.n	80138b6 <Expiration_Time_Blower_Control_VC_CMV+0x7a>
			{
				//Blower_OFF();
				Expiratory_Valve_Lock_Delay=CLOSED;
 80138a8:	4b12      	ldr	r3, [pc, #72]	; (80138f4 <Expiration_Time_Blower_Control_VC_CMV+0xb8>)
 80138aa:	2201      	movs	r2, #1
 80138ac:	701a      	strb	r2, [r3, #0]
				vTaskDelay(Expiratory_Valve_Open_Time);
 80138ae:	88bb      	ldrh	r3, [r7, #4]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f007 fbcb 	bl	801b04c <vTaskDelay>
			}
			Peep_Status=PEEP_ACHEIVED;
 80138b6:	4b0d      	ldr	r3, [pc, #52]	; (80138ec <Expiration_Time_Blower_Control_VC_CMV+0xb0>)
 80138b8:	2201      	movs	r2, #1
 80138ba:	701a      	strb	r2, [r3, #0]
			ExpValve_CLOSE();
 80138bc:	4b0e      	ldr	r3, [pc, #56]	; (80138f8 <Expiration_Time_Blower_Control_VC_CMV+0xbc>)
 80138be:	695b      	ldr	r3, [r3, #20]
 80138c0:	4a0d      	ldr	r2, [pc, #52]	; (80138f8 <Expiration_Time_Blower_Control_VC_CMV+0xbc>)
 80138c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80138c6:	6153      	str	r3, [r2, #20]
		}
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
		{
			ExpValve_OPEN();
		}
}
 80138c8:	e009      	b.n	80138de <Expiration_Time_Blower_Control_VC_CMV+0xa2>
		else if(Peep_Status==PEEP_NOT_ACHEIVED)
 80138ca:	4b08      	ldr	r3, [pc, #32]	; (80138ec <Expiration_Time_Blower_Control_VC_CMV+0xb0>)
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d105      	bne.n	80138de <Expiration_Time_Blower_Control_VC_CMV+0xa2>
			ExpValve_OPEN();
 80138d2:	4b09      	ldr	r3, [pc, #36]	; (80138f8 <Expiration_Time_Blower_Control_VC_CMV+0xbc>)
 80138d4:	695b      	ldr	r3, [r3, #20]
 80138d6:	4a08      	ldr	r2, [pc, #32]	; (80138f8 <Expiration_Time_Blower_Control_VC_CMV+0xbc>)
 80138d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80138dc:	6153      	str	r3, [r2, #20]
}
 80138de:	bf00      	nop
 80138e0:	3708      	adds	r7, #8
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	40007400 	.word	0x40007400
 80138ec:	20012a37 	.word	0x20012a37
 80138f0:	200125f8 	.word	0x200125f8
 80138f4:	20012a34 	.word	0x20012a34
 80138f8:	40020400 	.word	0x40020400

080138fc <VC_CMV_Inspiration_Time_Variables_Reset>:
 * @brief VC_CMV_Inspiration_Time_Variables_Reset.
 * This function resets variables to start an inspiration cycle.
 * */

void VC_CMV_Inspiration_Time_Variables_Reset()
{
 80138fc:	b590      	push	{r4, r7, lr}
 80138fe:	b083      	sub	sp, #12
 8013900:	af02      	add	r7, sp, #8
	Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 8013902:	4b62      	ldr	r3, [pc, #392]	; (8013a8c <VC_CMV_Inspiration_Time_Variables_Reset+0x190>)
 8013904:	2200      	movs	r2, #0
 8013906:	701a      	strb	r2, [r3, #0]
	Find_Average_Flow();
 8013908:	f7fa fabe 	bl	800de88 <Find_Average_Flow>
	Breath_Count                       = Count_The_Breath;
 801390c:	4b60      	ldr	r3, [pc, #384]	; (8013a90 <VC_CMV_Inspiration_Time_Variables_Reset+0x194>)
 801390e:	2201      	movs	r2, #1
 8013910:	701a      	strb	r2, [r3, #0]
	if( (VC_CMV.PEEP_Val == PEEP_Maintain_Parameter.PEEP_AVG_VAL ) )
 8013912:	4b60      	ldr	r3, [pc, #384]	; (8013a94 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 8013914:	789a      	ldrb	r2, [r3, #2]
 8013916:	4b60      	ldr	r3, [pc, #384]	; (8013a98 <VC_CMV_Inspiration_Time_Variables_Reset+0x19c>)
 8013918:	7c1b      	ldrb	r3, [r3, #16]
 801391a:	429a      	cmp	r2, r3
 801391c:	d102      	bne.n	8013924 <VC_CMV_Inspiration_Time_Variables_Reset+0x28>
	{
	   CHECK_Flow_Increment();
 801391e:	f000 f937 	bl	8013b90 <CHECK_Flow_Increment>
 8013922:	e00a      	b.n	801393a <VC_CMV_Inspiration_Time_Variables_Reset+0x3e>
	}
	else
	{
		Flow_increment       = Flow_fine;
 8013924:	4b5d      	ldr	r3, [pc, #372]	; (8013a9c <VC_CMV_Inspiration_Time_Variables_Reset+0x1a0>)
 8013926:	2200      	movs	r2, #0
 8013928:	701a      	strb	r2, [r3, #0]
		memset(Volume_Array, 0,(VOL_ARR_SIZE*sizeof(Volume_Array[0])) );
 801392a:	223c      	movs	r2, #60	; 0x3c
 801392c:	2100      	movs	r1, #0
 801392e:	485c      	ldr	r0, [pc, #368]	; (8013aa0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1a4>)
 8013930:	f009 faea 	bl	801cf08 <memset>
		Volume_Array_count = 0;
 8013934:	4b5b      	ldr	r3, [pc, #364]	; (8013aa4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1a8>)
 8013936:	2200      	movs	r2, #0
 8013938:	801a      	strh	r2, [r3, #0]
	}
	Reset_Blower_Status();
 801393a:	f000 fa07 	bl	8013d4c <Reset_Blower_Status>
	Volume_Not_Acheieved();
 801393e:	f000 fa1f 	bl	8013d80 <Volume_Not_Acheieved>
	ExpValve_CLOSE();
 8013942:	4b59      	ldr	r3, [pc, #356]	; (8013aa8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1ac>)
 8013944:	695b      	ldr	r3, [r3, #20]
 8013946:	4a58      	ldr	r2, [pc, #352]	; (8013aa8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1ac>)
 8013948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801394c:	6153      	str	r3, [r2, #20]
	PIP_AVERAGE();
 801394e:	f7f5 f9eb 	bl	8008d28 <PIP_AVERAGE>
	PEEP_AVERAGE();
 8013952:	f7f5 fa0f 	bl	8008d74 <PEEP_AVERAGE>
	O2_DAC_Control(Common_Mode_Parameter._FIO2_Val);
 8013956:	4b55      	ldr	r3, [pc, #340]	; (8013aac <VC_CMV_Inspiration_Time_Variables_Reset+0x1b0>)
 8013958:	78db      	ldrb	r3, [r3, #3]
 801395a:	4618      	mov	r0, r3
 801395c:	f7f8 ff9c 	bl	800c898 <O2_DAC_Control>
	Check_Alert();
 8013960:	f7ed fbd0 	bl	8001104 <Check_Alert>
	Alert_Inspiration_Time_Parameter();
 8013964:	f7ed fc86 	bl	8001274 <Alert_Inspiration_Time_Parameter>
	GRAPH_VALUES.Maximum_oxygen_flow   = 0;                 //new
 8013968:	4b51      	ldr	r3, [pc, #324]	; (8013ab0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1b4>)
 801396a:	2200      	movs	r2, #0
 801396c:	829a      	strh	r2, [r3, #20]
	LED_Alert();
 801396e:	f7ee f929 	bl	8001bc4 <LED_Alert>
	Alert_Status = NO_ALERT;
 8013972:	4b50      	ldr	r3, [pc, #320]	; (8013ab4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1b8>)
 8013974:	2200      	movs	r2, #0
 8013976:	701a      	strb	r2, [r3, #0]
	Sampled_Parameter_Inspiration_time();
 8013978:	f7fe fb86 	bl	8012088 <Sampled_Parameter_Inspiration_time>
	if( (VC_CMV.PEEP_Val != PEEP_Maintain_Parameter.PEEP_AVG_VAL ) )
 801397c:	4b45      	ldr	r3, [pc, #276]	; (8013a94 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 801397e:	789a      	ldrb	r2, [r3, #2]
 8013980:	4b45      	ldr	r3, [pc, #276]	; (8013a98 <VC_CMV_Inspiration_Time_Variables_Reset+0x19c>)
 8013982:	7c1b      	ldrb	r3, [r3, #16]
 8013984:	429a      	cmp	r2, r3
 8013986:	d013      	beq.n	80139b0 <VC_CMV_Inspiration_Time_Variables_Reset+0xb4>
	{
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time     = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 8013988:	4b43      	ldr	r3, [pc, #268]	; (8013a98 <VC_CMV_Inspiration_Time_Variables_Reset+0x19c>)
 801398a:	7c18      	ldrb	r0, [r3, #16]
 801398c:	4b41      	ldr	r3, [pc, #260]	; (8013a94 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 801398e:	78d9      	ldrb	r1, [r3, #3]
 8013990:	4b40      	ldr	r3, [pc, #256]	; (8013a94 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 8013992:	689a      	ldr	r2, [r3, #8]
 8013994:	4b3f      	ldr	r3, [pc, #252]	; (8013a94 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 8013996:	789c      	ldrb	r4, [r3, #2]
																												           VC_CMV.RESPIRATORY_RATE_Val,
													                                                                       VC_CMV.INSPIRATION_TIME,
													                                                                       VC_CMV.PEEP_Val,
																												           PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time);
 8013998:	4b3f      	ldr	r3, [pc, #252]	; (8013a98 <VC_CMV_Inspiration_Time_Variables_Reset+0x19c>)
 801399a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		PEEP_Maintain_Parameter.Expiratory_Valve_Open_Time     = PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode(PEEP_Maintain_Parameter.PEEP_AVG_VAL,
 801399e:	b29b      	uxth	r3, r3
 80139a0:	9300      	str	r3, [sp, #0]
 80139a2:	4623      	mov	r3, r4
 80139a4:	f7f4 f8e8 	bl	8007b78 <PEEP_Control_For_Expiratory_Valve_Open_Time_In_Volume_Mode>
 80139a8:	4603      	mov	r3, r0
 80139aa:	b21a      	sxth	r2, r3
 80139ac:	4b3a      	ldr	r3, [pc, #232]	; (8013a98 <VC_CMV_Inspiration_Time_Variables_Reset+0x19c>)
 80139ae:	809a      	strh	r2, [r3, #4]

	}
    VOLUME_STOP_POINT(Common_Mode_Parameter._VOLUME_Val,Volume_control_Task.Achieved_Volume);
 80139b0:	4b3e      	ldr	r3, [pc, #248]	; (8013aac <VC_CMV_Inspiration_Time_Variables_Reset+0x1b0>)
 80139b2:	889b      	ldrh	r3, [r3, #4]
 80139b4:	4a40      	ldr	r2, [pc, #256]	; (8013ab8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1bc>)
 80139b6:	8852      	ldrh	r2, [r2, #2]
 80139b8:	4611      	mov	r1, r2
 80139ba:	4618      	mov	r0, r3
 80139bc:	f000 fb34 	bl	8014028 <VOLUME_STOP_POINT>
	if(Stop_Increment_Count <= Stop_blower_Performance_Value)
 80139c0:	4b3e      	ldr	r3, [pc, #248]	; (8013abc <VC_CMV_Inspiration_Time_Variables_Reset+0x1c0>)
 80139c2:	781a      	ldrb	r2, [r3, #0]
 80139c4:	4b3e      	ldr	r3, [pc, #248]	; (8013ac0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c4>)
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d811      	bhi.n	80139f0 <VC_CMV_Inspiration_Time_Variables_Reset+0xf4>
	{
			Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL          =  TUNE_INITIAL_DAC_VAL(Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL,
 80139cc:	4b3d      	ldr	r3, [pc, #244]	; (8013ac4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80139ce:	88db      	ldrh	r3, [r3, #6]
 80139d0:	4a36      	ldr	r2, [pc, #216]	; (8013aac <VC_CMV_Inspiration_Time_Variables_Reset+0x1b0>)
 80139d2:	7991      	ldrb	r1, [r2, #6]
 80139d4:	4a38      	ldr	r2, [pc, #224]	; (8013ab8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1bc>)
 80139d6:	7852      	ldrb	r2, [r2, #1]
 80139d8:	4618      	mov	r0, r3
 80139da:	f000 fb85 	bl	80140e8 <TUNE_INITIAL_DAC_VAL>
 80139de:	4603      	mov	r3, r0
 80139e0:	461a      	mov	r2, r3
 80139e2:	4b38      	ldr	r3, [pc, #224]	; (8013ac4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80139e4:	805a      	strh	r2, [r3, #2]
    		                                                                           Common_Mode_Parameter._FLOW_RATE,
																					   Volume_control_Task.Flow_Max_Achieved);
			Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL = Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL;
 80139e6:	4b37      	ldr	r3, [pc, #220]	; (8013ac4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80139e8:	885a      	ldrh	r2, [r3, #2]
 80139ea:	4b36      	ldr	r3, [pc, #216]	; (8013ac4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80139ec:	80da      	strh	r2, [r3, #6]
 80139ee:	e007      	b.n	8013a00 <VC_CMV_Inspiration_Time_Variables_Reset+0x104>
	}
	else
	{
		Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL             = Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL;
 80139f0:	4b34      	ldr	r3, [pc, #208]	; (8013ac4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80139f2:	88da      	ldrh	r2, [r3, #6]
 80139f4:	4b33      	ldr	r3, [pc, #204]	; (8013ac4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80139f6:	805a      	strh	r2, [r3, #2]
		Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL = Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL;
 80139f8:	4b32      	ldr	r3, [pc, #200]	; (8013ac4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80139fa:	885a      	ldrh	r2, [r3, #2]
 80139fc:	4b31      	ldr	r3, [pc, #196]	; (8013ac4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1c8>)
 80139fe:	80da      	strh	r2, [r3, #6]
	}
    LOW_COMPLIANCE_DAC                                         = LOW_Compliance_DAC_value(Common_Mode_Parameter._FLOW_RATE);
 8013a00:	4b2a      	ldr	r3, [pc, #168]	; (8013aac <VC_CMV_Inspiration_Time_Variables_Reset+0x1b0>)
 8013a02:	799b      	ldrb	r3, [r3, #6]
 8013a04:	4618      	mov	r0, r3
 8013a06:	f000 fbef 	bl	80141e8 <LOW_Compliance_DAC_value>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	461a      	mov	r2, r3
 8013a0e:	4b2e      	ldr	r3, [pc, #184]	; (8013ac8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1cc>)
 8013a10:	801a      	strh	r2, [r3, #0]
	BREATH_STATE                                               = INSPIRATION_CYCLE;
 8013a12:	4b2e      	ldr	r3, [pc, #184]	; (8013acc <VC_CMV_Inspiration_Time_Variables_Reset+0x1d0>)
 8013a14:	2200      	movs	r2, #0
 8013a16:	701a      	strb	r2, [r3, #0]
	Peep_Status                   				               = PEEP_NOT_ACHEIVED;
 8013a18:	4b2d      	ldr	r3, [pc, #180]	; (8013ad0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1d4>)
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	701a      	strb	r2, [r3, #0]
	Expiratory_Valve_Lock_Delay   			                   = OPENED;
 8013a1e:	4b2d      	ldr	r3, [pc, #180]	; (8013ad4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1d8>)
 8013a20:	2200      	movs	r2, #0
 8013a22:	701a      	strb	r2, [r3, #0]
	PIP_Average_Parameter.Maximum_PIP_Acheived                 = RESET;
 8013a24:	4b2c      	ldr	r3, [pc, #176]	; (8013ad8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1dc>)
 8013a26:	2200      	movs	r2, #0
 8013a28:	701a      	strb	r2, [r3, #0]
	Maximum_Flow_Achieved                                      = FLOW_NOT_ACHIEVED;
 8013a2a:	4b2c      	ldr	r3, [pc, #176]	; (8013adc <VC_CMV_Inspiration_Time_Variables_Reset+0x1e0>)
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	701a      	strb	r2, [r3, #0]
	Volume_control_Task.Flow_Max_Achieved                      = RESET;
 8013a30:	4b21      	ldr	r3, [pc, #132]	; (8013ab8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1bc>)
 8013a32:	2200      	movs	r2, #0
 8013a34:	705a      	strb	r2, [r3, #1]
	Volume_control_Task.LOW_Flow_Max_Achieved                  = RESET;
 8013a36:	4b20      	ldr	r3, [pc, #128]	; (8013ab8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1bc>)
 8013a38:	2200      	movs	r2, #0
 8013a3a:	711a      	strb	r2, [r3, #4]
	Volume_Achieved_Status                                     = VOLUME_NOT_ACHIEVED;
 8013a3c:	4b28      	ldr	r3, [pc, #160]	; (8013ae0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1e4>)
 8013a3e:	2200      	movs	r2, #0
 8013a40:	701a      	strb	r2, [r3, #0]
	TIME_Base_parameter._INSPIRATION_TIME                      = VC_CMV.INSPIRATION_TIME;
 8013a42:	4b14      	ldr	r3, [pc, #80]	; (8013a94 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 8013a44:	689b      	ldr	r3, [r3, #8]
 8013a46:	461a      	mov	r2, r3
 8013a48:	4b26      	ldr	r3, [pc, #152]	; (8013ae4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1e8>)
 8013a4a:	601a      	str	r2, [r3, #0]
	Volume_Achieved_Time                                       = 0;
 8013a4c:	4b26      	ldr	r3, [pc, #152]	; (8013ae8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1ec>)
 8013a4e:	2200      	movs	r2, #0
 8013a50:	801a      	strh	r2, [r3, #0]
	Total_Volume_Achieved_Time                                 = 0;
 8013a52:	4b26      	ldr	r3, [pc, #152]	; (8013aec <VC_CMV_Inspiration_Time_Variables_Reset+0x1f0>)
 8013a54:	2200      	movs	r2, #0
 8013a56:	801a      	strh	r2, [r3, #0]
	TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED              = RESET;
 8013a58:	4b22      	ldr	r3, [pc, #136]	; (8013ae4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1e8>)
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	609a      	str	r2, [r3, #8]
	GRAPH_VALUES.volume                                        = RESET;
 8013a5e:	4b14      	ldr	r3, [pc, #80]	; (8013ab0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1b4>)
 8013a60:	f04f 0200 	mov.w	r2, #0
 8013a64:	609a      	str	r2, [r3, #8]
	Volume_max                                                 = RESET;
 8013a66:	4b22      	ldr	r3, [pc, #136]	; (8013af0 <VC_CMV_Inspiration_Time_Variables_Reset+0x1f4>)
 8013a68:	2200      	movs	r2, #0
 8013a6a:	601a      	str	r2, [r3, #0]
	Next_Half_Breath_Cycle                                     = Generate_Expiration_Cycle;
 8013a6c:	4b21      	ldr	r3, [pc, #132]	; (8013af4 <VC_CMV_Inspiration_Time_Variables_Reset+0x1f8>)
 8013a6e:	2201      	movs	r2, #1
 8013a70:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                                  = Run_Inspiration_Cycle;
 8013a72:	4b21      	ldr	r3, [pc, #132]	; (8013af8 <VC_CMV_Inspiration_Time_Variables_Reset+0x1fc>)
 8013a74:	2201      	movs	r2, #1
 8013a76:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_CMV.INSPIRATION_TIME);
 8013a78:	4b06      	ldr	r3, [pc, #24]	; (8013a94 <VC_CMV_Inspiration_Time_Variables_Reset+0x198>)
 8013a7a:	689b      	ldr	r3, [r3, #8]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f007 fae5 	bl	801b04c <vTaskDelay>
}
 8013a82:	bf00      	nop
 8013a84:	3704      	adds	r7, #4
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd90      	pop	{r4, r7, pc}
 8013a8a:	bf00      	nop
 8013a8c:	20012b71 	.word	0x20012b71
 8013a90:	200122a8 	.word	0x200122a8
 8013a94:	20012c9c 	.word	0x20012c9c
 8013a98:	20012c74 	.word	0x20012c74
 8013a9c:	2001280c 	.word	0x2001280c
 8013aa0:	20012734 	.word	0x20012734
 8013aa4:	20012a88 	.word	0x20012a88
 8013aa8:	40020400 	.word	0x40020400
 8013aac:	200124f0 	.word	0x200124f0
 8013ab0:	200125f8 	.word	0x200125f8
 8013ab4:	2001287c 	.word	0x2001287c
 8013ab8:	20012840 	.word	0x20012840
 8013abc:	20012369 	.word	0x20012369
 8013ac0:	20000057 	.word	0x20000057
 8013ac4:	200129b0 	.word	0x200129b0
 8013ac8:	200125d4 	.word	0x200125d4
 8013acc:	20012a3c 	.word	0x20012a3c
 8013ad0:	20012a37 	.word	0x20012a37
 8013ad4:	20012a34 	.word	0x20012a34
 8013ad8:	200124bc 	.word	0x200124bc
 8013adc:	200126b9 	.word	0x200126b9
 8013ae0:	2001269f 	.word	0x2001269f
 8013ae4:	20012b38 	.word	0x20012b38
 8013ae8:	200122f4 	.word	0x200122f4
 8013aec:	20012c28 	.word	0x20012c28
 8013af0:	20012c70 	.word	0x20012c70
 8013af4:	2001269e 	.word	0x2001269e
 8013af8:	20012870 	.word	0x20012870

08013afc <VC_CMV_Expiration_Time_Variables_Reset>:
 * @brief VC_CMV_Expiration_Time_Variables_Reset.
 * This function resets variables to start an expiration cycle.
 * */

void VC_CMV_Expiration_Time_Variables_Reset()
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	af00      	add	r7, sp, #0
	Volume_control_Task.Achieved_Volume                 = GRAPH_VALUES.volume ;
 8013b00:	4b1a      	ldr	r3, [pc, #104]	; (8013b6c <VC_CMV_Expiration_Time_Variables_Reset+0x70>)
 8013b02:	edd3 7a02 	vldr	s15, [r3, #8]
 8013b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013b0a:	ee17 3a90 	vmov	r3, s15
 8013b0e:	b29a      	uxth	r2, r3
 8013b10:	4b17      	ldr	r3, [pc, #92]	; (8013b70 <VC_CMV_Expiration_Time_Variables_Reset+0x74>)
 8013b12:	805a      	strh	r2, [r3, #2]
	BREATH_STATE                                        = EXPIRATION_CYCLE;
 8013b14:	4b17      	ldr	r3, [pc, #92]	; (8013b74 <VC_CMV_Expiration_Time_Variables_Reset+0x78>)
 8013b16:	2201      	movs	r2, #1
 8013b18:	701a      	strb	r2, [r3, #0]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val_Trigger = RESET;
 8013b1a:	4b17      	ldr	r3, [pc, #92]	; (8013b78 <VC_CMV_Expiration_Time_Variables_Reset+0x7c>)
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	615a      	str	r2, [r3, #20]
	PEEP_Maintain_Parameter.PEEP_Event_Count_Trigger    = RESET;
 8013b20:	4b15      	ldr	r3, [pc, #84]	; (8013b78 <VC_CMV_Expiration_Time_Variables_Reset+0x7c>)
 8013b22:	2200      	movs	r2, #0
 8013b24:	619a      	str	r2, [r3, #24]
	PEEP_Maintain_Parameter.PEEP_Cumulative_Val         = RESET;
 8013b26:	4b14      	ldr	r3, [pc, #80]	; (8013b78 <VC_CMV_Expiration_Time_Variables_Reset+0x7c>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	609a      	str	r2, [r3, #8]
	PEEP_Maintain_Parameter.PEEP_Event_Count            = RESET;
 8013b2c:	4b12      	ldr	r3, [pc, #72]	; (8013b78 <VC_CMV_Expiration_Time_Variables_Reset+0x7c>)
 8013b2e:	2200      	movs	r2, #0
 8013b30:	60da      	str	r2, [r3, #12]
	Calculate_O2(Common_Mode_Parameter._FIO2_Val);
 8013b32:	4b12      	ldr	r3, [pc, #72]	; (8013b7c <VC_CMV_Expiration_Time_Variables_Reset+0x80>)
 8013b34:	78db      	ldrb	r3, [r3, #3]
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7f8 fcba 	bl	800c4b0 <Calculate_O2>
	Alert_Expiration_Time_Parameter();
 8013b3c:	f7ed fc14 	bl	8001368 <Alert_Expiration_Time_Parameter>
	TIME_Base_parameter._EXPIRATION_TIME                = VC_CMV.EXPIRATION_TIME;
 8013b40:	4b0f      	ldr	r3, [pc, #60]	; (8013b80 <VC_CMV_Expiration_Time_Variables_Reset+0x84>)
 8013b42:	68db      	ldr	r3, [r3, #12]
 8013b44:	461a      	mov	r2, r3
 8013b46:	4b0f      	ldr	r3, [pc, #60]	; (8013b84 <VC_CMV_Expiration_Time_Variables_Reset+0x88>)
 8013b48:	605a      	str	r2, [r3, #4]
	TIME_Base_parameter.EXPIRATION_TIME_ACHEIVED        = RESET;
 8013b4a:	4b0e      	ldr	r3, [pc, #56]	; (8013b84 <VC_CMV_Expiration_Time_Variables_Reset+0x88>)
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	60da      	str	r2, [r3, #12]
	Next_Half_Breath_Cycle                              = Generate_Inspiration_Cycle;
 8013b50:	4b0d      	ldr	r3, [pc, #52]	; (8013b88 <VC_CMV_Expiration_Time_Variables_Reset+0x8c>)
 8013b52:	2200      	movs	r2, #0
 8013b54:	701a      	strb	r2, [r3, #0]
	Run_Current_Breathe_State                           = Run_Expiration_Cycle;
 8013b56:	4b0d      	ldr	r3, [pc, #52]	; (8013b8c <VC_CMV_Expiration_Time_Variables_Reset+0x90>)
 8013b58:	2202      	movs	r2, #2
 8013b5a:	701a      	strb	r2, [r3, #0]
	vTaskDelay(VC_CMV.EXPIRATION_TIME);
 8013b5c:	4b08      	ldr	r3, [pc, #32]	; (8013b80 <VC_CMV_Expiration_Time_Variables_Reset+0x84>)
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	4618      	mov	r0, r3
 8013b62:	f007 fa73 	bl	801b04c <vTaskDelay>
}
 8013b66:	bf00      	nop
 8013b68:	bd80      	pop	{r7, pc}
 8013b6a:	bf00      	nop
 8013b6c:	200125f8 	.word	0x200125f8
 8013b70:	20012840 	.word	0x20012840
 8013b74:	20012a3c 	.word	0x20012a3c
 8013b78:	20012c74 	.word	0x20012c74
 8013b7c:	200124f0 	.word	0x200124f0
 8013b80:	20012c9c 	.word	0x20012c9c
 8013b84:	20012b38 	.word	0x20012b38
 8013b88:	2001269e 	.word	0x2001269e
 8013b8c:	20012870 	.word	0x20012870

08013b90 <CHECK_Flow_Increment>:
 * @brief CHECK_Flow_Increment.
 * This function identifies the flow achieved in the last breath cycle.
 * */

static void CHECK_Flow_Increment()
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	af00      	add	r7, sp, #0


	if(Stop_Increment_Count <= Stop_blower_Performance_Value)
 8013b94:	4b24      	ldr	r3, [pc, #144]	; (8013c28 <CHECK_Flow_Increment+0x98>)
 8013b96:	781a      	ldrb	r2, [r3, #0]
 8013b98:	4b24      	ldr	r3, [pc, #144]	; (8013c2c <CHECK_Flow_Increment+0x9c>)
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d838      	bhi.n	8013c12 <CHECK_Flow_Increment+0x82>
	{
	   if( Flow_increment == Low_Flow_Problem )
 8013ba0:	4b23      	ldr	r3, [pc, #140]	; (8013c30 <CHECK_Flow_Increment+0xa0>)
 8013ba2:	781b      	ldrb	r3, [r3, #0]
 8013ba4:	2b01      	cmp	r3, #1
 8013ba6:	d110      	bne.n	8013bca <CHECK_Flow_Increment+0x3a>
	   {
			   INCREMENT_DAC_VAL_PER_ITERATION = (INCREMENT_DAC_VAL_PER_ITERATION + 1);
 8013ba8:	4b22      	ldr	r3, [pc, #136]	; (8013c34 <CHECK_Flow_Increment+0xa4>)
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	3301      	adds	r3, #1
 8013bae:	b2da      	uxtb	r2, r3
 8013bb0:	4b20      	ldr	r3, [pc, #128]	; (8013c34 <CHECK_Flow_Increment+0xa4>)
 8013bb2:	701a      	strb	r2, [r3, #0]
				   if(INCREMENT_DAC_VAL_PER_ITERATION >Maximum_Increment_Limit)
 8013bb4:	4b1f      	ldr	r3, [pc, #124]	; (8013c34 <CHECK_Flow_Increment+0xa4>)
 8013bb6:	781a      	ldrb	r2, [r3, #0]
 8013bb8:	4b1f      	ldr	r3, [pc, #124]	; (8013c38 <CHECK_Flow_Increment+0xa8>)
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d918      	bls.n	8013bf2 <CHECK_Flow_Increment+0x62>
				      INCREMENT_DAC_VAL_PER_ITERATION=Maximum_Increment_Limit;
 8013bc0:	4b1d      	ldr	r3, [pc, #116]	; (8013c38 <CHECK_Flow_Increment+0xa8>)
 8013bc2:	781a      	ldrb	r2, [r3, #0]
 8013bc4:	4b1b      	ldr	r3, [pc, #108]	; (8013c34 <CHECK_Flow_Increment+0xa4>)
 8013bc6:	701a      	strb	r2, [r3, #0]
 8013bc8:	e013      	b.n	8013bf2 <CHECK_Flow_Increment+0x62>

	   }
	   else if(Flow_increment == High_Flow_Problem)
 8013bca:	4b19      	ldr	r3, [pc, #100]	; (8013c30 <CHECK_Flow_Increment+0xa0>)
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	2b02      	cmp	r3, #2
 8013bd0:	d10f      	bne.n	8013bf2 <CHECK_Flow_Increment+0x62>
	   {
		   INCREMENT_DAC_VAL_PER_ITERATION = (INCREMENT_DAC_VAL_PER_ITERATION - 1);
 8013bd2:	4b18      	ldr	r3, [pc, #96]	; (8013c34 <CHECK_Flow_Increment+0xa4>)
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	3b01      	subs	r3, #1
 8013bd8:	b2da      	uxtb	r2, r3
 8013bda:	4b16      	ldr	r3, [pc, #88]	; (8013c34 <CHECK_Flow_Increment+0xa4>)
 8013bdc:	701a      	strb	r2, [r3, #0]
		       if(INCREMENT_DAC_VAL_PER_ITERATION <Minimum_Increment_Limit)
 8013bde:	4b15      	ldr	r3, [pc, #84]	; (8013c34 <CHECK_Flow_Increment+0xa4>)
 8013be0:	781a      	ldrb	r2, [r3, #0]
 8013be2:	4b16      	ldr	r3, [pc, #88]	; (8013c3c <CHECK_Flow_Increment+0xac>)
 8013be4:	781b      	ldrb	r3, [r3, #0]
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d203      	bcs.n	8013bf2 <CHECK_Flow_Increment+0x62>
		    	   INCREMENT_DAC_VAL_PER_ITERATION=Minimum_Increment_Limit;
 8013bea:	4b14      	ldr	r3, [pc, #80]	; (8013c3c <CHECK_Flow_Increment+0xac>)
 8013bec:	781a      	ldrb	r2, [r3, #0]
 8013bee:	4b11      	ldr	r3, [pc, #68]	; (8013c34 <CHECK_Flow_Increment+0xa4>)
 8013bf0:	701a      	strb	r2, [r3, #0]
	   }

	    Last_Flow_increment = Flow_increment;
 8013bf2:	4b0f      	ldr	r3, [pc, #60]	; (8013c30 <CHECK_Flow_Increment+0xa0>)
 8013bf4:	781a      	ldrb	r2, [r3, #0]
 8013bf6:	4b12      	ldr	r3, [pc, #72]	; (8013c40 <CHECK_Flow_Increment+0xb0>)
 8013bf8:	701a      	strb	r2, [r3, #0]

	    Set_Flow_value       = Not_Detect;
 8013bfa:	4b12      	ldr	r3, [pc, #72]	; (8013c44 <CHECK_Flow_Increment+0xb4>)
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	701a      	strb	r2, [r3, #0]
		Flow_increment       = Flow_fine;
 8013c00:	4b0b      	ldr	r3, [pc, #44]	; (8013c30 <CHECK_Flow_Increment+0xa0>)
 8013c02:	2200      	movs	r2, #0
 8013c04:	701a      	strb	r2, [r3, #0]
		Check_Flow_Graph(VC_CMV.FLOW_RATE_Val);
 8013c06:	4b10      	ldr	r3, [pc, #64]	; (8013c48 <CHECK_Flow_Increment+0xb8>)
 8013c08:	7c9b      	ldrb	r3, [r3, #18]
 8013c0a:	b25b      	sxtb	r3, r3
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f000 f821 	bl	8013c54 <Check_Flow_Graph>
	}

	memset(Volume_Array, 0,(VOL_ARR_SIZE*sizeof(Volume_Array[0])) );
 8013c12:	223c      	movs	r2, #60	; 0x3c
 8013c14:	2100      	movs	r1, #0
 8013c16:	480d      	ldr	r0, [pc, #52]	; (8013c4c <CHECK_Flow_Increment+0xbc>)
 8013c18:	f009 f976 	bl	801cf08 <memset>
	Volume_Array_count   = 0;
 8013c1c:	4b0c      	ldr	r3, [pc, #48]	; (8013c50 <CHECK_Flow_Increment+0xc0>)
 8013c1e:	2200      	movs	r2, #0
 8013c20:	801a      	strh	r2, [r3, #0]

}
 8013c22:	bf00      	nop
 8013c24:	bd80      	pop	{r7, pc}
 8013c26:	bf00      	nop
 8013c28:	20012369 	.word	0x20012369
 8013c2c:	20000057 	.word	0x20000057
 8013c30:	2001280c 	.word	0x2001280c
 8013c34:	200129f8 	.word	0x200129f8
 8013c38:	20000056 	.word	0x20000056
 8013c3c:	20000055 	.word	0x20000055
 8013c40:	20012804 	.word	0x20012804
 8013c44:	20012a39 	.word	0x20012a39
 8013c48:	20012c9c 	.word	0x20012c9c
 8013c4c:	20012734 	.word	0x20012734
 8013c50:	20012a88 	.word	0x20012a88

08013c54 <Check_Flow_Graph>:
 * This function identifies the flow achieved in the last breath cycle using array element.
 * */


static void Check_Flow_Graph(int8_t flow_rate)
{
 8013c54:	b480      	push	{r7}
 8013c56:	b085      	sub	sp, #20
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	71fb      	strb	r3, [r7, #7]
	Low_Flow_Rate = flow_rate - 17;
 8013c5e:	79fb      	ldrb	r3, [r7, #7]
 8013c60:	3b11      	subs	r3, #17
 8013c62:	b2db      	uxtb	r3, r3
 8013c64:	b25a      	sxtb	r2, r3
 8013c66:	4b32      	ldr	r3, [pc, #200]	; (8013d30 <Check_Flow_Graph+0xdc>)
 8013c68:	701a      	strb	r2, [r3, #0]

	if(Low_Flow_Rate <= 1)
 8013c6a:	4b31      	ldr	r3, [pc, #196]	; (8013d30 <Check_Flow_Graph+0xdc>)
 8013c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8013c70:	2b01      	cmp	r3, #1
 8013c72:	dc02      	bgt.n	8013c7a <Check_Flow_Graph+0x26>
	{
		Low_Flow_Rate = 1;
 8013c74:	4b2e      	ldr	r3, [pc, #184]	; (8013d30 <Check_Flow_Graph+0xdc>)
 8013c76:	2201      	movs	r2, #1
 8013c78:	701a      	strb	r2, [r3, #0]
	}
	for(int i=0;i<VOL_ARR_SIZE;i++)
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	60fb      	str	r3, [r7, #12]
 8013c7e:	e033      	b.n	8013ce8 <Check_Flow_Graph+0x94>
	{
		if( Volume_Array[i] == flow_rate)
 8013c80:	4a2c      	ldr	r2, [pc, #176]	; (8013d34 <Check_Flow_Graph+0xe0>)
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	4413      	add	r3, r2
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	461a      	mov	r2, r3
 8013c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d102      	bne.n	8013c98 <Check_Flow_Graph+0x44>
		{
			Set_Flow_value = Detect;
 8013c92:	4b29      	ldr	r3, [pc, #164]	; (8013d38 <Check_Flow_Graph+0xe4>)
 8013c94:	2201      	movs	r2, #1
 8013c96:	701a      	strb	r2, [r3, #0]
		}
		if(Set_Flow_value == Detect)
 8013c98:	4b27      	ldr	r3, [pc, #156]	; (8013d38 <Check_Flow_Graph+0xe4>)
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	2b01      	cmp	r3, #1
 8013c9e:	d120      	bne.n	8013ce2 <Check_Flow_Graph+0x8e>
		{
			if( (Volume_Array[i] > (flow_rate+7)))                                 //new
 8013ca0:	4a24      	ldr	r2, [pc, #144]	; (8013d34 <Check_Flow_Graph+0xe0>)
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	4413      	add	r3, r2
 8013ca6:	781b      	ldrb	r3, [r3, #0]
 8013ca8:	461a      	mov	r2, r3
 8013caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cae:	3307      	adds	r3, #7
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	dd03      	ble.n	8013cbc <Check_Flow_Graph+0x68>
			{
				Flow_increment = High_Flow_Problem;
 8013cb4:	4b21      	ldr	r3, [pc, #132]	; (8013d3c <Check_Flow_Graph+0xe8>)
 8013cb6:	2202      	movs	r2, #2
 8013cb8:	701a      	strb	r2, [r3, #0]
 8013cba:	e012      	b.n	8013ce2 <Check_Flow_Graph+0x8e>
			}
			else if( (Volume_Array[i] < (Low_Flow_Rate))  && (Volume_Array[i] !=0) )  //new line changed as ulta
 8013cbc:	4a1d      	ldr	r2, [pc, #116]	; (8013d34 <Check_Flow_Graph+0xe0>)
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	4413      	add	r3, r2
 8013cc2:	781b      	ldrb	r3, [r3, #0]
 8013cc4:	461a      	mov	r2, r3
 8013cc6:	4b1a      	ldr	r3, [pc, #104]	; (8013d30 <Check_Flow_Graph+0xdc>)
 8013cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8013ccc:	429a      	cmp	r2, r3
 8013cce:	da08      	bge.n	8013ce2 <Check_Flow_Graph+0x8e>
 8013cd0:	4a18      	ldr	r2, [pc, #96]	; (8013d34 <Check_Flow_Graph+0xe0>)
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	4413      	add	r3, r2
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d002      	beq.n	8013ce2 <Check_Flow_Graph+0x8e>
			{
				Flow_increment = Low_Flow_Problem;
 8013cdc:	4b17      	ldr	r3, [pc, #92]	; (8013d3c <Check_Flow_Graph+0xe8>)
 8013cde:	2201      	movs	r2, #1
 8013ce0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<VOL_ARR_SIZE;i++)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	3301      	adds	r3, #1
 8013ce6:	60fb      	str	r3, [r7, #12]
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2b3b      	cmp	r3, #59	; 0x3b
 8013cec:	ddc8      	ble.n	8013c80 <Check_Flow_Graph+0x2c>
			}
		}
	}

	if(  (Last_Flow_increment != Flow_increment) && (Flow_increment != Flow_fine)  && (Last_Flow_increment != Flow_fine) )
 8013cee:	4b14      	ldr	r3, [pc, #80]	; (8013d40 <Check_Flow_Graph+0xec>)
 8013cf0:	781a      	ldrb	r2, [r3, #0]
 8013cf2:	4b12      	ldr	r3, [pc, #72]	; (8013d3c <Check_Flow_Graph+0xe8>)
 8013cf4:	781b      	ldrb	r3, [r3, #0]
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d013      	beq.n	8013d22 <Check_Flow_Graph+0xce>
 8013cfa:	4b10      	ldr	r3, [pc, #64]	; (8013d3c <Check_Flow_Graph+0xe8>)
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d00f      	beq.n	8013d22 <Check_Flow_Graph+0xce>
 8013d02:	4b0f      	ldr	r3, [pc, #60]	; (8013d40 <Check_Flow_Graph+0xec>)
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00b      	beq.n	8013d22 <Check_Flow_Graph+0xce>
	{
		if(Stop_Increment_Count <= Stop_blower_Performance_Value)
 8013d0a:	4b0e      	ldr	r3, [pc, #56]	; (8013d44 <Check_Flow_Graph+0xf0>)
 8013d0c:	781a      	ldrb	r2, [r3, #0]
 8013d0e:	4b0e      	ldr	r3, [pc, #56]	; (8013d48 <Check_Flow_Graph+0xf4>)
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d805      	bhi.n	8013d22 <Check_Flow_Graph+0xce>
		{
			Stop_Increment_Count++;
 8013d16:	4b0b      	ldr	r3, [pc, #44]	; (8013d44 <Check_Flow_Graph+0xf0>)
 8013d18:	781b      	ldrb	r3, [r3, #0]
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	b2da      	uxtb	r2, r3
 8013d1e:	4b09      	ldr	r3, [pc, #36]	; (8013d44 <Check_Flow_Graph+0xf0>)
 8013d20:	701a      	strb	r2, [r3, #0]
		}
	}


}
 8013d22:	bf00      	nop
 8013d24:	3714      	adds	r7, #20
 8013d26:	46bd      	mov	sp, r7
 8013d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2c:	4770      	bx	lr
 8013d2e:	bf00      	nop
 8013d30:	200129a0 	.word	0x200129a0
 8013d34:	20012734 	.word	0x20012734
 8013d38:	20012a39 	.word	0x20012a39
 8013d3c:	2001280c 	.word	0x2001280c
 8013d40:	20012804 	.word	0x20012804
 8013d44:	20012369 	.word	0x20012369
 8013d48:	20000057 	.word	0x20000057

08013d4c <Reset_Blower_Status>:
 * @brief Reset_Blower_Status.
 * This function Reset the blower from abnormal breath
 * */

void Reset_Blower_Status()
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	af00      	add	r7, sp, #0
	Blower_Status       = BlOWER_ON;
 8013d50:	4b08      	ldr	r3, [pc, #32]	; (8013d74 <Reset_Blower_Status+0x28>)
 8013d52:	2200      	movs	r2, #0
 8013d54:	701a      	strb	r2, [r3, #0]
	Current_Pressure    = 0;
 8013d56:	4b08      	ldr	r3, [pc, #32]	; (8013d78 <Reset_Blower_Status+0x2c>)
 8013d58:	2200      	movs	r2, #0
 8013d5a:	601a      	str	r2, [r3, #0]

	if(Over_Pressure_Count > 10)
 8013d5c:	4b07      	ldr	r3, [pc, #28]	; (8013d7c <Reset_Blower_Status+0x30>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	2b0a      	cmp	r3, #10
 8013d62:	dd02      	ble.n	8013d6a <Reset_Blower_Status+0x1e>
	{
		Over_Pressure_Count = 0;
 8013d64:	4b05      	ldr	r3, [pc, #20]	; (8013d7c <Reset_Blower_Status+0x30>)
 8013d66:	2200      	movs	r2, #0
 8013d68:	601a      	str	r2, [r3, #0]
	}
}
 8013d6a:	bf00      	nop
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr
 8013d74:	20012828 	.word	0x20012828
 8013d78:	200121d0 	.word	0x200121d0
 8013d7c:	20012b74 	.word	0x20012b74

08013d80 <Volume_Not_Acheieved>:


void Volume_Not_Acheieved()
{
 8013d80:	b480      	push	{r7}
 8013d82:	af00      	add	r7, sp, #0

}
 8013d84:	bf00      	nop
 8013d86:	46bd      	mov	sp, r7
 8013d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8c:	4770      	bx	lr

08013d8e <Volume_Acheieved>:


void Volume_Acheieved()
{
 8013d8e:	b480      	push	{r7}
 8013d90:	af00      	add	r7, sp, #0

}
 8013d92:	bf00      	nop
 8013d94:	46bd      	mov	sp, r7
 8013d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9a:	4770      	bx	lr

08013d9c <Volume_Control_Task>:
 * @brief Volume_Control_Task.
 * This Task control the inspiration and expiration blower dac control
 * */

void Volume_Control_Task (void *argument)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 8013da4:	4b17      	ldr	r3, [pc, #92]	; (8013e04 <Volume_Control_Task+0x68>)
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	2b01      	cmp	r3, #1
 8013daa:	d127      	bne.n	8013dfc <Volume_Control_Task+0x60>
		{
				if(GRAPH_VALUES.pressure >= 60)
 8013dac:	4b16      	ldr	r3, [pc, #88]	; (8013e08 <Volume_Control_Task+0x6c>)
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	2b3b      	cmp	r3, #59	; 0x3b
 8013db2:	d906      	bls.n	8013dc2 <Volume_Control_Task+0x26>
				{
					Volume_Mode_Blower_control.BLOWER_DAC_VAL=0;
 8013db4:	4b15      	ldr	r3, [pc, #84]	; (8013e0c <Volume_Control_Task+0x70>)
 8013db6:	2200      	movs	r2, #0
 8013db8:	801a      	strh	r2, [r3, #0]
					Blower_Status =BlOWER_OFF;
 8013dba:	4b15      	ldr	r3, [pc, #84]	; (8013e10 <Volume_Control_Task+0x74>)
 8013dbc:	2201      	movs	r2, #1
 8013dbe:	701a      	strb	r2, [r3, #0]
 8013dc0:	e01c      	b.n	8013dfc <Volume_Control_Task+0x60>
				}
				else
				{
					if(Blower_Status == BlOWER_ON)
 8013dc2:	4b13      	ldr	r3, [pc, #76]	; (8013e10 <Volume_Control_Task+0x74>)
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d118      	bne.n	8013dfc <Volume_Control_Task+0x60>
					{
						  if(Stop_Increment_Count <= Stop_Value)
 8013dca:	4b12      	ldr	r3, [pc, #72]	; (8013e14 <Volume_Control_Task+0x78>)
 8013dcc:	781a      	ldrb	r2, [r3, #0]
 8013dce:	4b12      	ldr	r3, [pc, #72]	; (8013e18 <Volume_Control_Task+0x7c>)
 8013dd0:	781b      	ldrb	r3, [r3, #0]
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d809      	bhi.n	8013dea <Volume_Control_Task+0x4e>
						  {
							  Volume_Control(Common_Mode_Parameter._VOLUME_Val,Common_Mode_Parameter._FLOW_RATE,Volume_control_Task.Volume_Stop_Value);
 8013dd6:	4b11      	ldr	r3, [pc, #68]	; (8013e1c <Volume_Control_Task+0x80>)
 8013dd8:	889b      	ldrh	r3, [r3, #4]
 8013dda:	4a10      	ldr	r2, [pc, #64]	; (8013e1c <Volume_Control_Task+0x80>)
 8013ddc:	7991      	ldrb	r1, [r2, #6]
 8013dde:	4a10      	ldr	r2, [pc, #64]	; (8013e20 <Volume_Control_Task+0x84>)
 8013de0:	7812      	ldrb	r2, [r2, #0]
 8013de2:	4618      	mov	r0, r3
 8013de4:	f000 f81e 	bl	8013e24 <Volume_Control>
 8013de8:	e008      	b.n	8013dfc <Volume_Control_Task+0x60>
						  }
						  else
						  {
							  Flow_Restriction_Control(Common_Mode_Parameter._VOLUME_Val,Common_Mode_Parameter._FLOW_RATE,Volume_control_Task.Volume_Stop_Value);
 8013dea:	4b0c      	ldr	r3, [pc, #48]	; (8013e1c <Volume_Control_Task+0x80>)
 8013dec:	889b      	ldrh	r3, [r3, #4]
 8013dee:	4a0b      	ldr	r2, [pc, #44]	; (8013e1c <Volume_Control_Task+0x80>)
 8013df0:	7991      	ldrb	r1, [r2, #6]
 8013df2:	4a0b      	ldr	r2, [pc, #44]	; (8013e20 <Volume_Control_Task+0x84>)
 8013df4:	7812      	ldrb	r2, [r2, #0]
 8013df6:	4618      	mov	r0, r3
 8013df8:	f000 fad0 	bl	801439c <Flow_Restriction_Control>
						  }
					   }
				}
		}
		vTaskDelay(10);
 8013dfc:	200a      	movs	r0, #10
 8013dfe:	f007 f925 	bl	801b04c <vTaskDelay>
		if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 8013e02:	e7cf      	b.n	8013da4 <Volume_Control_Task+0x8>
 8013e04:	20012870 	.word	0x20012870
 8013e08:	200125f8 	.word	0x200125f8
 8013e0c:	200129b0 	.word	0x200129b0
 8013e10:	20012828 	.word	0x20012828
 8013e14:	20012369 	.word	0x20012369
 8013e18:	2000005c 	.word	0x2000005c
 8013e1c:	200124f0 	.word	0x200124f0
 8013e20:	20012840 	.word	0x20012840

08013e24 <Volume_Control>:
 * This function control flow upto to set tidal volume to be achieved.
 * */


void Volume_Control(uint16_t Set_Volume_Val,uint8_t Set_Flow_Rate,uint8_t Volume_Stop_Value)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	80fb      	strh	r3, [r7, #6]
 8013e2e:	460b      	mov	r3, r1
 8013e30:	717b      	strb	r3, [r7, #5]
 8013e32:	4613      	mov	r3, r2
 8013e34:	713b      	strb	r3, [r7, #4]
	if(Run_Current_Breathe_State == Run_Inspiration_Cycle)
 8013e36:	4b68      	ldr	r3, [pc, #416]	; (8013fd8 <Volume_Control+0x1b4>)
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	2b01      	cmp	r3, #1
 8013e3c:	f040 80c7 	bne.w	8013fce <Volume_Control+0x1aa>
	{
		Set_Volume_Val= (Set_Volume_Val-Volume_Stop_Value);
 8013e40:	793b      	ldrb	r3, [r7, #4]
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	88fa      	ldrh	r2, [r7, #6]
 8013e46:	1ad3      	subs	r3, r2, r3
 8013e48:	80fb      	strh	r3, [r7, #6]
			if(GRAPH_VALUES.volume  <= Set_Volume_Val)
 8013e4a:	4b64      	ldr	r3, [pc, #400]	; (8013fdc <Volume_Control+0x1b8>)
 8013e4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8013e50:	88fb      	ldrh	r3, [r7, #6]
 8013e52:	ee07 3a90 	vmov	s15, r3
 8013e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e62:	f200 809f 	bhi.w	8013fa4 <Volume_Control+0x180>
			{
				if(Volume_Array_count <(VOL_ARR_SIZE-1))
 8013e66:	4b5e      	ldr	r3, [pc, #376]	; (8013fe0 <Volume_Control+0x1bc>)
 8013e68:	881b      	ldrh	r3, [r3, #0]
 8013e6a:	2b3a      	cmp	r3, #58	; 0x3a
 8013e6c:	d820      	bhi.n	8013eb0 <Volume_Control+0x8c>
				{
					Volume_Achieved_Time++;
 8013e6e:	4b5d      	ldr	r3, [pc, #372]	; (8013fe4 <Volume_Control+0x1c0>)
 8013e70:	881b      	ldrh	r3, [r3, #0]
 8013e72:	3301      	adds	r3, #1
 8013e74:	b29a      	uxth	r2, r3
 8013e76:	4b5b      	ldr	r3, [pc, #364]	; (8013fe4 <Volume_Control+0x1c0>)
 8013e78:	801a      	strh	r2, [r3, #0]
					Volume_Array[Volume_Array_count]=GRAPH_VALUES.flow;
 8013e7a:	4b58      	ldr	r3, [pc, #352]	; (8013fdc <Volume_Control+0x1b8>)
 8013e7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8013e80:	4b57      	ldr	r3, [pc, #348]	; (8013fe0 <Volume_Control+0x1bc>)
 8013e82:	881b      	ldrh	r3, [r3, #0]
 8013e84:	461a      	mov	r2, r3
 8013e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013e8a:	edc7 7a00 	vstr	s15, [r7]
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	b2d9      	uxtb	r1, r3
 8013e92:	4b55      	ldr	r3, [pc, #340]	; (8013fe8 <Volume_Control+0x1c4>)
 8013e94:	5499      	strb	r1, [r3, r2]
					Volume_Array_count++;
 8013e96:	4b52      	ldr	r3, [pc, #328]	; (8013fe0 <Volume_Control+0x1bc>)
 8013e98:	881b      	ldrh	r3, [r3, #0]
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	b29a      	uxth	r2, r3
 8013e9e:	4b50      	ldr	r3, [pc, #320]	; (8013fe0 <Volume_Control+0x1bc>)
 8013ea0:	801a      	strh	r2, [r3, #0]
					if(Volume_Array_count>=(VOL_ARR_SIZE - 1))
 8013ea2:	4b4f      	ldr	r3, [pc, #316]	; (8013fe0 <Volume_Control+0x1bc>)
 8013ea4:	881b      	ldrh	r3, [r3, #0]
 8013ea6:	2b3a      	cmp	r3, #58	; 0x3a
 8013ea8:	d902      	bls.n	8013eb0 <Volume_Control+0x8c>
						Volume_Array_count=(VOL_ARR_SIZE - 1);
 8013eaa:	4b4d      	ldr	r3, [pc, #308]	; (8013fe0 <Volume_Control+0x1bc>)
 8013eac:	223b      	movs	r2, #59	; 0x3b
 8013eae:	801a      	strh	r2, [r3, #0]
				}


						 if(Volume_Achieved_Status == VOLUME_NOT_ACHIEVED)
 8013eb0:	4b4e      	ldr	r3, [pc, #312]	; (8013fec <Volume_Control+0x1c8>)
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	f040 808a 	bne.w	8013fce <Volume_Control+0x1aa>
						 {
							 Volume_Mode_Blower_control.BLOWER_DAC_VAL          =   Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL+INCREMENT_DAC_VAL_PER_ITERATION;
 8013eba:	4b4d      	ldr	r3, [pc, #308]	; (8013ff0 <Volume_Control+0x1cc>)
 8013ebc:	885a      	ldrh	r2, [r3, #2]
 8013ebe:	4b4d      	ldr	r3, [pc, #308]	; (8013ff4 <Volume_Control+0x1d0>)
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	4413      	add	r3, r2
 8013ec6:	b29a      	uxth	r2, r3
 8013ec8:	4b49      	ldr	r3, [pc, #292]	; (8013ff0 <Volume_Control+0x1cc>)
 8013eca:	801a      	strh	r2, [r3, #0]
							 Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL  =   Volume_Mode_Blower_control.BLOWER_DAC_VAL;
 8013ecc:	4b48      	ldr	r3, [pc, #288]	; (8013ff0 <Volume_Control+0x1cc>)
 8013ece:	881a      	ldrh	r2, [r3, #0]
 8013ed0:	4b47      	ldr	r3, [pc, #284]	; (8013ff0 <Volume_Control+0x1cc>)
 8013ed2:	805a      	strh	r2, [r3, #2]

									if(Volume_Mode_Blower_control.BLOWER_DAC_VAL >= 1800)   //new
 8013ed4:	4b46      	ldr	r3, [pc, #280]	; (8013ff0 <Volume_Control+0x1cc>)
 8013ed6:	881b      	ldrh	r3, [r3, #0]
 8013ed8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8013edc:	d305      	bcc.n	8013eea <Volume_Control+0xc6>
									{
										Blower_Status =BlOWER_OFF;
 8013ede:	4b46      	ldr	r3, [pc, #280]	; (8013ff8 <Volume_Control+0x1d4>)
 8013ee0:	2201      	movs	r2, #1
 8013ee2:	701a      	strb	r2, [r3, #0]
										Volume_Mode_Blower_control.BLOWER_DAC_VAL = 0;
 8013ee4:	4b42      	ldr	r3, [pc, #264]	; (8013ff0 <Volume_Control+0x1cc>)
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	801a      	strh	r2, [r3, #0]
									}

									if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED > Blower_Cut_Off_Time)  //new
 8013eea:	4b44      	ldr	r3, [pc, #272]	; (8013ffc <Volume_Control+0x1d8>)
 8013eec:	689b      	ldr	r3, [r3, #8]
 8013eee:	4a44      	ldr	r2, [pc, #272]	; (8014000 <Volume_Control+0x1dc>)
 8013ef0:	8812      	ldrh	r2, [r2, #0]
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	dd19      	ble.n	8013f2a <Volume_Control+0x106>
									{
										if(GRAPH_VALUES.flow <=5)
 8013ef6:	4b39      	ldr	r3, [pc, #228]	; (8013fdc <Volume_Control+0x1b8>)
 8013ef8:	edd3 7a01 	vldr	s15, [r3, #4]
 8013efc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8013f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f08:	d80f      	bhi.n	8013f2a <Volume_Control+0x106>
										{
											Blower_Status =BlOWER_OFF;
 8013f0a:	4b3b      	ldr	r3, [pc, #236]	; (8013ff8 <Volume_Control+0x1d4>)
 8013f0c:	2201      	movs	r2, #1
 8013f0e:	701a      	strb	r2, [r3, #0]
											Volume_Mode_Blower_control.BLOWER_DAC_VAL = 0;
 8013f10:	4b37      	ldr	r3, [pc, #220]	; (8013ff0 <Volume_Control+0x1cc>)
 8013f12:	2200      	movs	r2, #0
 8013f14:	801a      	strh	r2, [r3, #0]
											if(Alert_Check < 4)
 8013f16:	4b3b      	ldr	r3, [pc, #236]	; (8014004 <Volume_Control+0x1e0>)
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	2b03      	cmp	r3, #3
 8013f1c:	d805      	bhi.n	8013f2a <Volume_Control+0x106>
											{
												Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 8013f1e:	4b3a      	ldr	r3, [pc, #232]	; (8014008 <Volume_Control+0x1e4>)
 8013f20:	2200      	movs	r2, #0
 8013f22:	701a      	strb	r2, [r3, #0]
												Parkar_valve_Signal(0);
 8013f24:	4b39      	ldr	r3, [pc, #228]	; (801400c <Volume_Control+0x1e8>)
 8013f26:	2200      	movs	r2, #0
 8013f28:	615a      	str	r2, [r3, #20]
											}
										}
									}

									if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED > 100)  //new
 8013f2a:	4b34      	ldr	r3, [pc, #208]	; (8013ffc <Volume_Control+0x1d8>)
 8013f2c:	689b      	ldr	r3, [r3, #8]
 8013f2e:	2b64      	cmp	r3, #100	; 0x64
 8013f30:	dd14      	ble.n	8013f5c <Volume_Control+0x138>
									{
										Flow_Cummulative_Val  += GRAPH_VALUES.flow;
 8013f32:	4b2a      	ldr	r3, [pc, #168]	; (8013fdc <Volume_Control+0x1b8>)
 8013f34:	ed93 7a01 	vldr	s14, [r3, #4]
 8013f38:	4b35      	ldr	r3, [pc, #212]	; (8014010 <Volume_Control+0x1ec>)
 8013f3a:	edd3 7a00 	vldr	s15, [r3]
 8013f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f42:	4b33      	ldr	r3, [pc, #204]	; (8014010 <Volume_Control+0x1ec>)
 8013f44:	edc3 7a00 	vstr	s15, [r3]
										Flow_Count++;
 8013f48:	4b32      	ldr	r3, [pc, #200]	; (8014014 <Volume_Control+0x1f0>)
 8013f4a:	edd3 7a00 	vldr	s15, [r3]
 8013f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f56:	4b2f      	ldr	r3, [pc, #188]	; (8014014 <Volume_Control+0x1f0>)
 8013f58:	edc3 7a00 	vstr	s15, [r3]
									}

									if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED < Flow_Detect_Time)   //new
 8013f5c:	4b27      	ldr	r3, [pc, #156]	; (8013ffc <Volume_Control+0x1d8>)
 8013f5e:	689b      	ldr	r3, [r3, #8]
 8013f60:	4a2d      	ldr	r2, [pc, #180]	; (8014018 <Volume_Control+0x1f4>)
 8013f62:	8812      	ldrh	r2, [r2, #0]
 8013f64:	4293      	cmp	r3, r2
 8013f66:	da13      	bge.n	8013f90 <Volume_Control+0x16c>
									{
										if(GRAPH_VALUES.flow >= Set_Flow_Rate)
 8013f68:	4b1c      	ldr	r3, [pc, #112]	; (8013fdc <Volume_Control+0x1b8>)
 8013f6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8013f6e:	797b      	ldrb	r3, [r7, #5]
 8013f70:	ee07 3a90 	vmov	s15, r3
 8013f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f80:	db06      	blt.n	8013f90 <Volume_Control+0x16c>
										{
											  if(Maximum_Flow_Achieved  == FLOW_NOT_ACHIEVED)
 8013f82:	4b26      	ldr	r3, [pc, #152]	; (801401c <Volume_Control+0x1f8>)
 8013f84:	781b      	ldrb	r3, [r3, #0]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d102      	bne.n	8013f90 <Volume_Control+0x16c>
											  {
													Maximum_Flow_Achieved                     = FLOW_ACHIEVED;
 8013f8a:	4b24      	ldr	r3, [pc, #144]	; (801401c <Volume_Control+0x1f8>)
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	701a      	strb	r2, [r3, #0]
													//TIME_Base_parameter.FLOW_ACHIEVED_TIMER   = Time_Limit;
											  }
									    }
									}

									if(Alert_Check < 4)
 8013f90:	4b1c      	ldr	r3, [pc, #112]	; (8014004 <Volume_Control+0x1e0>)
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	2b03      	cmp	r3, #3
 8013f96:	d81a      	bhi.n	8013fce <Volume_Control+0x1aa>
									{
										Cut_Off_Region(Common_Mode_Parameter._FLOW_RATE);
 8013f98:	4b21      	ldr	r3, [pc, #132]	; (8014020 <Volume_Control+0x1fc>)
 8013f9a:	799b      	ldrb	r3, [r3, #6]
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f000 f971 	bl	8014284 <Cut_Off_Region>
				Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL = Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL;

			}

		}
}
 8013fa2:	e014      	b.n	8013fce <Volume_Control+0x1aa>
			    Total_Volume_Achieved_Time                        = (Volume_Achieved_Time *10);
 8013fa4:	4b0f      	ldr	r3, [pc, #60]	; (8013fe4 <Volume_Control+0x1c0>)
 8013fa6:	881b      	ldrh	r3, [r3, #0]
 8013fa8:	461a      	mov	r2, r3
 8013faa:	0092      	lsls	r2, r2, #2
 8013fac:	4413      	add	r3, r2
 8013fae:	005b      	lsls	r3, r3, #1
 8013fb0:	b29a      	uxth	r2, r3
 8013fb2:	4b1c      	ldr	r3, [pc, #112]	; (8014024 <Volume_Control+0x200>)
 8013fb4:	801a      	strh	r2, [r3, #0]
				Volume_Acheieved();
 8013fb6:	f7ff feea 	bl	8013d8e <Volume_Acheieved>
				Volume_Achieved_Status                            = VOLUME_ACHIEVED;
 8013fba:	4b0c      	ldr	r3, [pc, #48]	; (8013fec <Volume_Control+0x1c8>)
 8013fbc:	2201      	movs	r2, #1
 8013fbe:	701a      	strb	r2, [r3, #0]
				Volume_Mode_Blower_control.BLOWER_DAC_VAL         = RESET;
 8013fc0:	4b0b      	ldr	r3, [pc, #44]	; (8013ff0 <Volume_Control+0x1cc>)
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	801a      	strh	r2, [r3, #0]
				Volume_Mode_Blower_control.INITIAL_BLOWER_DAC_VAL = Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL;
 8013fc6:	4b0a      	ldr	r3, [pc, #40]	; (8013ff0 <Volume_Control+0x1cc>)
 8013fc8:	88da      	ldrh	r2, [r3, #6]
 8013fca:	4b09      	ldr	r3, [pc, #36]	; (8013ff0 <Volume_Control+0x1cc>)
 8013fcc:	805a      	strh	r2, [r3, #2]
}
 8013fce:	bf00      	nop
 8013fd0:	3708      	adds	r7, #8
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	20012870 	.word	0x20012870
 8013fdc:	200125f8 	.word	0x200125f8
 8013fe0:	20012a88 	.word	0x20012a88
 8013fe4:	200122f4 	.word	0x200122f4
 8013fe8:	20012734 	.word	0x20012734
 8013fec:	2001269f 	.word	0x2001269f
 8013ff0:	200129b0 	.word	0x200129b0
 8013ff4:	200129f8 	.word	0x200129f8
 8013ff8:	20012828 	.word	0x20012828
 8013ffc:	20012b38 	.word	0x20012b38
 8014000:	20000058 	.word	0x20000058
 8014004:	20012aa0 	.word	0x20012aa0
 8014008:	20012b71 	.word	0x20012b71
 801400c:	40007400 	.word	0x40007400
 8014010:	200122f8 	.word	0x200122f8
 8014014:	200128a0 	.word	0x200128a0
 8014018:	2000005e 	.word	0x2000005e
 801401c:	200126b9 	.word	0x200126b9
 8014020:	200124f0 	.word	0x200124f0
 8014024:	20012c28 	.word	0x20012c28

08014028 <VOLUME_STOP_POINT>:
 * @brief VOLUME_STOP_POINT.
 * This function control stop the blower before volume reach.
 * */

void VOLUME_STOP_POINT(uint16_t Set_Volume,uint16_t Achieved_Volume)
{
 8014028:	b480      	push	{r7}
 801402a:	b083      	sub	sp, #12
 801402c:	af00      	add	r7, sp, #0
 801402e:	4603      	mov	r3, r0
 8014030:	460a      	mov	r2, r1
 8014032:	80fb      	strh	r3, [r7, #6]
 8014034:	4613      	mov	r3, r2
 8014036:	80bb      	strh	r3, [r7, #4]
	static uint8_t count;
	static uint8_t count_2;
       if(Achieved_Volume > (Set_Volume + 5))
 8014038:	88ba      	ldrh	r2, [r7, #4]
 801403a:	88fb      	ldrh	r3, [r7, #6]
 801403c:	3305      	adds	r3, #5
 801403e:	429a      	cmp	r2, r3
 8014040:	dd1d      	ble.n	801407e <VOLUME_STOP_POINT+0x56>
	   {
    	   count++;
 8014042:	4b26      	ldr	r3, [pc, #152]	; (80140dc <VOLUME_STOP_POINT+0xb4>)
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	3301      	adds	r3, #1
 8014048:	b2da      	uxtb	r2, r3
 801404a:	4b24      	ldr	r3, [pc, #144]	; (80140dc <VOLUME_STOP_POINT+0xb4>)
 801404c:	701a      	strb	r2, [r3, #0]
			if (count >= 3)
 801404e:	4b23      	ldr	r3, [pc, #140]	; (80140dc <VOLUME_STOP_POINT+0xb4>)
 8014050:	781b      	ldrb	r3, [r3, #0]
 8014052:	2b02      	cmp	r3, #2
 8014054:	d93c      	bls.n	80140d0 <VOLUME_STOP_POINT+0xa8>
			{
				Volume_control_Task.Volume_Stop_Value = Volume_control_Task.Volume_Stop_Value + 5;
 8014056:	4b22      	ldr	r3, [pc, #136]	; (80140e0 <VOLUME_STOP_POINT+0xb8>)
 8014058:	781b      	ldrb	r3, [r3, #0]
 801405a:	3305      	adds	r3, #5
 801405c:	b2da      	uxtb	r2, r3
 801405e:	4b20      	ldr	r3, [pc, #128]	; (80140e0 <VOLUME_STOP_POINT+0xb8>)
 8014060:	701a      	strb	r2, [r3, #0]
				count   = 0;
 8014062:	4b1e      	ldr	r3, [pc, #120]	; (80140dc <VOLUME_STOP_POINT+0xb4>)
 8014064:	2200      	movs	r2, #0
 8014066:	701a      	strb	r2, [r3, #0]
				count_2 = 0;
 8014068:	4b1e      	ldr	r3, [pc, #120]	; (80140e4 <VOLUME_STOP_POINT+0xbc>)
 801406a:	2200      	movs	r2, #0
 801406c:	701a      	strb	r2, [r3, #0]

				if(Volume_control_Task.Volume_Stop_Value >= 100)
 801406e:	4b1c      	ldr	r3, [pc, #112]	; (80140e0 <VOLUME_STOP_POINT+0xb8>)
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	2b63      	cmp	r3, #99	; 0x63
 8014074:	d92c      	bls.n	80140d0 <VOLUME_STOP_POINT+0xa8>
					Volume_control_Task.Volume_Stop_Value = 100;
 8014076:	4b1a      	ldr	r3, [pc, #104]	; (80140e0 <VOLUME_STOP_POINT+0xb8>)
 8014078:	2264      	movs	r2, #100	; 0x64
 801407a:	701a      	strb	r2, [r3, #0]
       else
       {
			count_2 = 0;
			count   = 0;
       }
}
 801407c:	e028      	b.n	80140d0 <VOLUME_STOP_POINT+0xa8>
       else if(Achieved_Volume < (Set_Volume - 10))
 801407e:	88ba      	ldrh	r2, [r7, #4]
 8014080:	88fb      	ldrh	r3, [r7, #6]
 8014082:	3b0a      	subs	r3, #10
 8014084:	429a      	cmp	r2, r3
 8014086:	da1d      	bge.n	80140c4 <VOLUME_STOP_POINT+0x9c>
    	   count_2++;
 8014088:	4b16      	ldr	r3, [pc, #88]	; (80140e4 <VOLUME_STOP_POINT+0xbc>)
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	3301      	adds	r3, #1
 801408e:	b2da      	uxtb	r2, r3
 8014090:	4b14      	ldr	r3, [pc, #80]	; (80140e4 <VOLUME_STOP_POINT+0xbc>)
 8014092:	701a      	strb	r2, [r3, #0]
			if (count_2 >= 3)
 8014094:	4b13      	ldr	r3, [pc, #76]	; (80140e4 <VOLUME_STOP_POINT+0xbc>)
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	2b02      	cmp	r3, #2
 801409a:	d919      	bls.n	80140d0 <VOLUME_STOP_POINT+0xa8>
				Volume_control_Task.Volume_Stop_Value = Volume_control_Task.Volume_Stop_Value - 5;
 801409c:	4b10      	ldr	r3, [pc, #64]	; (80140e0 <VOLUME_STOP_POINT+0xb8>)
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	3b05      	subs	r3, #5
 80140a2:	b2da      	uxtb	r2, r3
 80140a4:	4b0e      	ldr	r3, [pc, #56]	; (80140e0 <VOLUME_STOP_POINT+0xb8>)
 80140a6:	701a      	strb	r2, [r3, #0]
				count_2 = 0;
 80140a8:	4b0e      	ldr	r3, [pc, #56]	; (80140e4 <VOLUME_STOP_POINT+0xbc>)
 80140aa:	2200      	movs	r2, #0
 80140ac:	701a      	strb	r2, [r3, #0]
				count   = 0;
 80140ae:	4b0b      	ldr	r3, [pc, #44]	; (80140dc <VOLUME_STOP_POINT+0xb4>)
 80140b0:	2200      	movs	r2, #0
 80140b2:	701a      	strb	r2, [r3, #0]
				if(Volume_control_Task.Volume_Stop_Value <= 5)
 80140b4:	4b0a      	ldr	r3, [pc, #40]	; (80140e0 <VOLUME_STOP_POINT+0xb8>)
 80140b6:	781b      	ldrb	r3, [r3, #0]
 80140b8:	2b05      	cmp	r3, #5
 80140ba:	d809      	bhi.n	80140d0 <VOLUME_STOP_POINT+0xa8>
									Volume_control_Task.Volume_Stop_Value = 5;
 80140bc:	4b08      	ldr	r3, [pc, #32]	; (80140e0 <VOLUME_STOP_POINT+0xb8>)
 80140be:	2205      	movs	r2, #5
 80140c0:	701a      	strb	r2, [r3, #0]
}
 80140c2:	e005      	b.n	80140d0 <VOLUME_STOP_POINT+0xa8>
			count_2 = 0;
 80140c4:	4b07      	ldr	r3, [pc, #28]	; (80140e4 <VOLUME_STOP_POINT+0xbc>)
 80140c6:	2200      	movs	r2, #0
 80140c8:	701a      	strb	r2, [r3, #0]
			count   = 0;
 80140ca:	4b04      	ldr	r3, [pc, #16]	; (80140dc <VOLUME_STOP_POINT+0xb4>)
 80140cc:	2200      	movs	r2, #0
 80140ce:	701a      	strb	r2, [r3, #0]
}
 80140d0:	bf00      	nop
 80140d2:	370c      	adds	r7, #12
 80140d4:	46bd      	mov	sp, r7
 80140d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140da:	4770      	bx	lr
 80140dc:	200000b8 	.word	0x200000b8
 80140e0:	20012840 	.word	0x20012840
 80140e4:	200000b9 	.word	0x200000b9

080140e8 <TUNE_INITIAL_DAC_VAL>:
 * function selects the initial DAC value based on the last breath achieved flow rate.
 * */


uint16_t TUNE_INITIAL_DAC_VAL(uint16_t Previous_Dac_Val, uint8_t Flow_Rate,uint8_t Flow_Max)
{
 80140e8:	b480      	push	{r7}
 80140ea:	b085      	sub	sp, #20
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	4603      	mov	r3, r0
 80140f0:	80fb      	strh	r3, [r7, #6]
 80140f2:	460b      	mov	r3, r1
 80140f4:	717b      	strb	r3, [r7, #5]
 80140f6:	4613      	mov	r3, r2
 80140f8:	713b      	strb	r3, [r7, #4]
	uint16_t DAC_VALUE=Previous_Dac_Val;
 80140fa:	88fb      	ldrh	r3, [r7, #6]
 80140fc:	81fb      	strh	r3, [r7, #14]
	    if (Flow_Max > (Flow_Rate +5))           //new
 80140fe:	793a      	ldrb	r2, [r7, #4]
 8014100:	797b      	ldrb	r3, [r7, #5]
 8014102:	3305      	adds	r3, #5
 8014104:	429a      	cmp	r2, r3
 8014106:	dd2b      	ble.n	8014160 <TUNE_INITIAL_DAC_VAL+0x78>
		{
			if (Flow_Max > (Flow_Rate + 10))
 8014108:	793a      	ldrb	r2, [r7, #4]
 801410a:	797b      	ldrb	r3, [r7, #5]
 801410c:	330a      	adds	r3, #10
 801410e:	429a      	cmp	r2, r3
 8014110:	dd03      	ble.n	801411a <TUNE_INITIAL_DAC_VAL+0x32>
			{
				DAC_VALUE = Previous_Dac_Val - 20;
 8014112:	88fb      	ldrh	r3, [r7, #6]
 8014114:	3b14      	subs	r3, #20
 8014116:	81fb      	strh	r3, [r7, #14]
 8014118:	e01a      	b.n	8014150 <TUNE_INITIAL_DAC_VAL+0x68>
			}
			else if ((Flow_Max <= (Flow_Rate + 10))&& (Flow_Max > (Flow_Rate + 8)))
 801411a:	793a      	ldrb	r2, [r7, #4]
 801411c:	797b      	ldrb	r3, [r7, #5]
 801411e:	330a      	adds	r3, #10
 8014120:	429a      	cmp	r2, r3
 8014122:	dc08      	bgt.n	8014136 <TUNE_INITIAL_DAC_VAL+0x4e>
 8014124:	793a      	ldrb	r2, [r7, #4]
 8014126:	797b      	ldrb	r3, [r7, #5]
 8014128:	3308      	adds	r3, #8
 801412a:	429a      	cmp	r2, r3
 801412c:	dd03      	ble.n	8014136 <TUNE_INITIAL_DAC_VAL+0x4e>
			{
				DAC_VALUE = Previous_Dac_Val - 4;
 801412e:	88fb      	ldrh	r3, [r7, #6]
 8014130:	3b04      	subs	r3, #4
 8014132:	81fb      	strh	r3, [r7, #14]
 8014134:	e00c      	b.n	8014150 <TUNE_INITIAL_DAC_VAL+0x68>
			}
			else if ((Flow_Max <= (Flow_Rate + 8)) && (Flow_Max > (Flow_Rate + 5)))
 8014136:	793a      	ldrb	r2, [r7, #4]
 8014138:	797b      	ldrb	r3, [r7, #5]
 801413a:	3308      	adds	r3, #8
 801413c:	429a      	cmp	r2, r3
 801413e:	dc07      	bgt.n	8014150 <TUNE_INITIAL_DAC_VAL+0x68>
 8014140:	793a      	ldrb	r2, [r7, #4]
 8014142:	797b      	ldrb	r3, [r7, #5]
 8014144:	3305      	adds	r3, #5
 8014146:	429a      	cmp	r2, r3
 8014148:	dd02      	ble.n	8014150 <TUNE_INITIAL_DAC_VAL+0x68>
			{
				DAC_VALUE = Previous_Dac_Val - 2;
 801414a:	88fb      	ldrh	r3, [r7, #6]
 801414c:	3b02      	subs	r3, #2
 801414e:	81fb      	strh	r3, [r7, #14]
			}
			if (DAC_VALUE < 500)
 8014150:	89fb      	ldrh	r3, [r7, #14]
 8014152:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8014156:	d23d      	bcs.n	80141d4 <TUNE_INITIAL_DAC_VAL+0xec>
			{
				DAC_VALUE = 500;
 8014158:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801415c:	81fb      	strh	r3, [r7, #14]
 801415e:	e039      	b.n	80141d4 <TUNE_INITIAL_DAC_VAL+0xec>
			}
		}
		else if ( (Flow_Max < (Flow_Rate) ))                                         //new
 8014160:	793a      	ldrb	r2, [r7, #4]
 8014162:	797b      	ldrb	r3, [r7, #5]
 8014164:	429a      	cmp	r2, r3
 8014166:	d233      	bcs.n	80141d0 <TUNE_INITIAL_DAC_VAL+0xe8>
		{
			if ( (Volume_control_Task.LOW_Flow_Max_Achieved < (Flow_Rate) ) && (Volume_control_Task.LOW_Flow_Max_Achieved > (Flow_Rate- 3) ))          //new
 8014168:	4b1e      	ldr	r3, [pc, #120]	; (80141e4 <TUNE_INITIAL_DAC_VAL+0xfc>)
 801416a:	791b      	ldrb	r3, [r3, #4]
 801416c:	797a      	ldrb	r2, [r7, #5]
 801416e:	429a      	cmp	r2, r3
 8014170:	d909      	bls.n	8014186 <TUNE_INITIAL_DAC_VAL+0x9e>
 8014172:	797b      	ldrb	r3, [r7, #5]
 8014174:	3b02      	subs	r3, #2
 8014176:	4a1b      	ldr	r2, [pc, #108]	; (80141e4 <TUNE_INITIAL_DAC_VAL+0xfc>)
 8014178:	7912      	ldrb	r2, [r2, #4]
 801417a:	4293      	cmp	r3, r2
 801417c:	dc03      	bgt.n	8014186 <TUNE_INITIAL_DAC_VAL+0x9e>
			{
				DAC_VALUE = Previous_Dac_Val + 10;
 801417e:	88fb      	ldrh	r3, [r7, #6]
 8014180:	330a      	adds	r3, #10
 8014182:	81fb      	strh	r3, [r7, #14]
 8014184:	e01c      	b.n	80141c0 <TUNE_INITIAL_DAC_VAL+0xd8>
			}
			else if ((Volume_control_Task.LOW_Flow_Max_Achieved <= (Flow_Rate-3) ) && (Volume_control_Task.LOW_Flow_Max_Achieved > (Flow_Rate-8) ))                                   //new
 8014186:	797b      	ldrb	r3, [r7, #5]
 8014188:	3b02      	subs	r3, #2
 801418a:	4a16      	ldr	r2, [pc, #88]	; (80141e4 <TUNE_INITIAL_DAC_VAL+0xfc>)
 801418c:	7912      	ldrb	r2, [r2, #4]
 801418e:	4293      	cmp	r3, r2
 8014190:	dd09      	ble.n	80141a6 <TUNE_INITIAL_DAC_VAL+0xbe>
 8014192:	797b      	ldrb	r3, [r7, #5]
 8014194:	3b07      	subs	r3, #7
 8014196:	4a13      	ldr	r2, [pc, #76]	; (80141e4 <TUNE_INITIAL_DAC_VAL+0xfc>)
 8014198:	7912      	ldrb	r2, [r2, #4]
 801419a:	4293      	cmp	r3, r2
 801419c:	dc03      	bgt.n	80141a6 <TUNE_INITIAL_DAC_VAL+0xbe>
			{
				DAC_VALUE = Previous_Dac_Val + 20;
 801419e:	88fb      	ldrh	r3, [r7, #6]
 80141a0:	3314      	adds	r3, #20
 80141a2:	81fb      	strh	r3, [r7, #14]
 80141a4:	e00c      	b.n	80141c0 <TUNE_INITIAL_DAC_VAL+0xd8>
			}
			else if ((Volume_control_Task.LOW_Flow_Max_Achieved <= (Flow_Rate-8) )  )                                   //new
 80141a6:	797b      	ldrb	r3, [r7, #5]
 80141a8:	3b07      	subs	r3, #7
 80141aa:	4a0e      	ldr	r2, [pc, #56]	; (80141e4 <TUNE_INITIAL_DAC_VAL+0xfc>)
 80141ac:	7912      	ldrb	r2, [r2, #4]
 80141ae:	4293      	cmp	r3, r2
 80141b0:	dd03      	ble.n	80141ba <TUNE_INITIAL_DAC_VAL+0xd2>
			{
				DAC_VALUE = Previous_Dac_Val + 30;
 80141b2:	88fb      	ldrh	r3, [r7, #6]
 80141b4:	331e      	adds	r3, #30
 80141b6:	81fb      	strh	r3, [r7, #14]
 80141b8:	e002      	b.n	80141c0 <TUNE_INITIAL_DAC_VAL+0xd8>
			}
			else
			{
				DAC_VALUE = Previous_Dac_Val + 30;
 80141ba:	88fb      	ldrh	r3, [r7, #6]
 80141bc:	331e      	adds	r3, #30
 80141be:	81fb      	strh	r3, [r7, #14]
			}

			    if (DAC_VALUE >= 1600)
 80141c0:	89fb      	ldrh	r3, [r7, #14]
 80141c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80141c6:	d305      	bcc.n	80141d4 <TUNE_INITIAL_DAC_VAL+0xec>
				{
					DAC_VALUE = 1600;
 80141c8:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80141cc:	81fb      	strh	r3, [r7, #14]
 80141ce:	e001      	b.n	80141d4 <TUNE_INITIAL_DAC_VAL+0xec>
				}
		}
		else
		{
			DAC_VALUE     = Previous_Dac_Val;
 80141d0:	88fb      	ldrh	r3, [r7, #6]
 80141d2:	81fb      	strh	r3, [r7, #14]
		}
	    return DAC_VALUE;
 80141d4:	89fb      	ldrh	r3, [r7, #14]
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	3714      	adds	r7, #20
 80141da:	46bd      	mov	sp, r7
 80141dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e0:	4770      	bx	lr
 80141e2:	bf00      	nop
 80141e4:	20012840 	.word	0x20012840

080141e8 <LOW_Compliance_DAC_value>:
 * This function selects the initial DAC value based on the flow rate when the mode start condition is met.
 * */


uint16_t LOW_Compliance_DAC_value(uint8_t Flow_Rate)
{
 80141e8:	b480      	push	{r7}
 80141ea:	b085      	sub	sp, #20
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	4603      	mov	r3, r0
 80141f0:	71fb      	strb	r3, [r7, #7]
	uint16_t Temp_DAC;

	if(Flow_Rate >= 60)
 80141f2:	79fb      	ldrb	r3, [r7, #7]
 80141f4:	2b3b      	cmp	r3, #59	; 0x3b
 80141f6:	d903      	bls.n	8014200 <LOW_Compliance_DAC_value+0x18>
		Temp_DAC = 900;
 80141f8:	f44f 7361 	mov.w	r3, #900	; 0x384
 80141fc:	81fb      	strh	r3, [r7, #14]
 80141fe:	e03a      	b.n	8014276 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 60) && (Flow_Rate >= 50) )         //new
 8014200:	79fb      	ldrb	r3, [r7, #7]
 8014202:	2b3b      	cmp	r3, #59	; 0x3b
 8014204:	d806      	bhi.n	8014214 <LOW_Compliance_DAC_value+0x2c>
 8014206:	79fb      	ldrb	r3, [r7, #7]
 8014208:	2b31      	cmp	r3, #49	; 0x31
 801420a:	d903      	bls.n	8014214 <LOW_Compliance_DAC_value+0x2c>
		Temp_DAC = 850;
 801420c:	f240 3352 	movw	r3, #850	; 0x352
 8014210:	81fb      	strh	r3, [r7, #14]
 8014212:	e030      	b.n	8014276 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 50) && (Flow_Rate >= 40) )
 8014214:	79fb      	ldrb	r3, [r7, #7]
 8014216:	2b31      	cmp	r3, #49	; 0x31
 8014218:	d806      	bhi.n	8014228 <LOW_Compliance_DAC_value+0x40>
 801421a:	79fb      	ldrb	r3, [r7, #7]
 801421c:	2b27      	cmp	r3, #39	; 0x27
 801421e:	d903      	bls.n	8014228 <LOW_Compliance_DAC_value+0x40>
		Temp_DAC = 800;
 8014220:	f44f 7348 	mov.w	r3, #800	; 0x320
 8014224:	81fb      	strh	r3, [r7, #14]
 8014226:	e026      	b.n	8014276 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 40) && (Flow_Rate >= 30) )
 8014228:	79fb      	ldrb	r3, [r7, #7]
 801422a:	2b27      	cmp	r3, #39	; 0x27
 801422c:	d806      	bhi.n	801423c <LOW_Compliance_DAC_value+0x54>
 801422e:	79fb      	ldrb	r3, [r7, #7]
 8014230:	2b1d      	cmp	r3, #29
 8014232:	d903      	bls.n	801423c <LOW_Compliance_DAC_value+0x54>
		Temp_DAC = 750;
 8014234:	f240 23ee 	movw	r3, #750	; 0x2ee
 8014238:	81fb      	strh	r3, [r7, #14]
 801423a:	e01c      	b.n	8014276 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 30) && (Flow_Rate >= 20) )
 801423c:	79fb      	ldrb	r3, [r7, #7]
 801423e:	2b1d      	cmp	r3, #29
 8014240:	d806      	bhi.n	8014250 <LOW_Compliance_DAC_value+0x68>
 8014242:	79fb      	ldrb	r3, [r7, #7]
 8014244:	2b13      	cmp	r3, #19
 8014246:	d903      	bls.n	8014250 <LOW_Compliance_DAC_value+0x68>
		Temp_DAC = 650;
 8014248:	f240 238a 	movw	r3, #650	; 0x28a
 801424c:	81fb      	strh	r3, [r7, #14]
 801424e:	e012      	b.n	8014276 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 20) && (Flow_Rate >= 10) )
 8014250:	79fb      	ldrb	r3, [r7, #7]
 8014252:	2b13      	cmp	r3, #19
 8014254:	d806      	bhi.n	8014264 <LOW_Compliance_DAC_value+0x7c>
 8014256:	79fb      	ldrb	r3, [r7, #7]
 8014258:	2b09      	cmp	r3, #9
 801425a:	d903      	bls.n	8014264 <LOW_Compliance_DAC_value+0x7c>
		Temp_DAC = 650;
 801425c:	f240 238a 	movw	r3, #650	; 0x28a
 8014260:	81fb      	strh	r3, [r7, #14]
 8014262:	e008      	b.n	8014276 <LOW_Compliance_DAC_value+0x8e>
	else if( (Flow_Rate < 10) && (Flow_Rate > 0) )
 8014264:	79fb      	ldrb	r3, [r7, #7]
 8014266:	2b09      	cmp	r3, #9
 8014268:	d805      	bhi.n	8014276 <LOW_Compliance_DAC_value+0x8e>
 801426a:	79fb      	ldrb	r3, [r7, #7]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d002      	beq.n	8014276 <LOW_Compliance_DAC_value+0x8e>
		Temp_DAC = 650;
 8014270:	f240 238a 	movw	r3, #650	; 0x28a
 8014274:	81fb      	strh	r3, [r7, #14]

	return Temp_DAC;
 8014276:	89fb      	ldrh	r3, [r7, #14]
}
 8014278:	4618      	mov	r0, r3
 801427a:	3714      	adds	r7, #20
 801427c:	46bd      	mov	sp, r7
 801427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014282:	4770      	bx	lr

08014284 <Cut_Off_Region>:
 * @brief Cut_Off_Region.
 * This function checks if any abnormal flow occurs during the inspiration time and stops the blower if detected.
 * */

void Cut_Off_Region(uint8_t Set_Flow_Rate)
{
 8014284:	b480      	push	{r7}
 8014286:	b083      	sub	sp, #12
 8014288:	af00      	add	r7, sp, #0
 801428a:	4603      	mov	r3, r0
 801428c:	71fb      	strb	r3, [r7, #7]
	  if( (Maximum_Flow_Achieved  == FLOW_ACHIEVED) )
 801428e:	4b35      	ldr	r3, [pc, #212]	; (8014364 <Cut_Off_Region+0xe0>)
 8014290:	781b      	ldrb	r3, [r3, #0]
 8014292:	2b01      	cmp	r3, #1
 8014294:	d15f      	bne.n	8014356 <Cut_Off_Region+0xd2>
	  {
				  Cut_Off_flow_Rate_Val=Set_Flow_Rate - Cut_Off_flow_Rate_Level;
 8014296:	4b34      	ldr	r3, [pc, #208]	; (8014368 <Cut_Off_Region+0xe4>)
 8014298:	f993 3000 	ldrsb.w	r3, [r3]
 801429c:	b2db      	uxtb	r3, r3
 801429e:	79fa      	ldrb	r2, [r7, #7]
 80142a0:	1ad3      	subs	r3, r2, r3
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	b25a      	sxtb	r2, r3
 80142a6:	4b31      	ldr	r3, [pc, #196]	; (801436c <Cut_Off_Region+0xe8>)
 80142a8:	701a      	strb	r2, [r3, #0]
				  if(Cut_Off_flow_Rate_Val<5)
 80142aa:	4b30      	ldr	r3, [pc, #192]	; (801436c <Cut_Off_Region+0xe8>)
 80142ac:	f993 3000 	ldrsb.w	r3, [r3]
 80142b0:	2b04      	cmp	r3, #4
 80142b2:	dc02      	bgt.n	80142ba <Cut_Off_Region+0x36>
				  {
					  Cut_Off_flow_Rate_Val =5;
 80142b4:	4b2d      	ldr	r3, [pc, #180]	; (801436c <Cut_Off_Region+0xe8>)
 80142b6:	2205      	movs	r2, #5
 80142b8:	701a      	strb	r2, [r3, #0]
				  }
				  if( (GRAPH_VALUES.flow < (Cut_Off_flow_Rate_Val)) )
 80142ba:	4b2d      	ldr	r3, [pc, #180]	; (8014370 <Cut_Off_Region+0xec>)
 80142bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80142c0:	4b2a      	ldr	r3, [pc, #168]	; (801436c <Cut_Off_Region+0xe8>)
 80142c2:	f993 3000 	ldrsb.w	r3, [r3]
 80142c6:	ee07 3a90 	vmov	s15, r3
 80142ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d6:	d514      	bpl.n	8014302 <Cut_Off_Region+0x7e>
				  {
					  Blower_Status                             = BlOWER_OFF;
 80142d8:	4b26      	ldr	r3, [pc, #152]	; (8014374 <Cut_Off_Region+0xf0>)
 80142da:	2201      	movs	r2, #1
 80142dc:	701a      	strb	r2, [r3, #0]
					  Volume_Mode_Blower_control.BLOWER_DAC_VAL = 0;
 80142de:	4b26      	ldr	r3, [pc, #152]	; (8014378 <Cut_Off_Region+0xf4>)
 80142e0:	2200      	movs	r2, #0
 80142e2:	801a      	strh	r2, [r3, #0]
					  if(Stop_Increment_Count > Stop_Value)
 80142e4:	4b25      	ldr	r3, [pc, #148]	; (801437c <Cut_Off_Region+0xf8>)
 80142e6:	781a      	ldrb	r2, [r3, #0]
 80142e8:	4b25      	ldr	r3, [pc, #148]	; (8014380 <Cut_Off_Region+0xfc>)
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d902      	bls.n	80142f6 <Cut_Off_Region+0x72>
					  {
								Flow_increment    = Flow_fine;
 80142f0:	4b24      	ldr	r3, [pc, #144]	; (8014384 <Cut_Off_Region+0x100>)
 80142f2:	2200      	movs	r2, #0
 80142f4:	701a      	strb	r2, [r3, #0]
					  }
						Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 80142f6:	4b24      	ldr	r3, [pc, #144]	; (8014388 <Cut_Off_Region+0x104>)
 80142f8:	2200      	movs	r2, #0
 80142fa:	701a      	strb	r2, [r3, #0]
						Parkar_valve_Signal(0);
 80142fc:	4b23      	ldr	r3, [pc, #140]	; (801438c <Cut_Off_Region+0x108>)
 80142fe:	2200      	movs	r2, #0
 8014300:	615a      	str	r2, [r3, #20]
				 }


			      Cut_Off_flow_Rate_Val_high=Set_Flow_Rate + Cut_Off_flow_Rate_Val_high_limit;
 8014302:	4b23      	ldr	r3, [pc, #140]	; (8014390 <Cut_Off_Region+0x10c>)
 8014304:	f993 3000 	ldrsb.w	r3, [r3]
 8014308:	b2da      	uxtb	r2, r3
 801430a:	79fb      	ldrb	r3, [r7, #7]
 801430c:	4413      	add	r3, r2
 801430e:	b2db      	uxtb	r3, r3
 8014310:	b25a      	sxtb	r2, r3
 8014312:	4b20      	ldr	r3, [pc, #128]	; (8014394 <Cut_Off_Region+0x110>)
 8014314:	701a      	strb	r2, [r3, #0]

				  if( (GRAPH_VALUES.flow > (Cut_Off_flow_Rate_Val_high)) )
 8014316:	4b16      	ldr	r3, [pc, #88]	; (8014370 <Cut_Off_Region+0xec>)
 8014318:	ed93 7a01 	vldr	s14, [r3, #4]
 801431c:	4b1d      	ldr	r3, [pc, #116]	; (8014394 <Cut_Off_Region+0x110>)
 801431e:	f993 3000 	ldrsb.w	r3, [r3]
 8014322:	ee07 3a90 	vmov	s15, r3
 8014326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801432a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014332:	dc00      	bgt.n	8014336 <Cut_Off_Region+0xb2>
						  Oxygen_Blending_Status=OXYGEN_ACHIEVED;
						  Parkar_valve_Signal(0);
						}
				  }
	  }
}
 8014334:	e00f      	b.n	8014356 <Cut_Off_Region+0xd2>
						if(Patient_Trigger  == NO_PATIENT_TRIGGER)
 8014336:	4b18      	ldr	r3, [pc, #96]	; (8014398 <Cut_Off_Region+0x114>)
 8014338:	781b      	ldrb	r3, [r3, #0]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d10b      	bne.n	8014356 <Cut_Off_Region+0xd2>
						  Blower_Status =BlOWER_OFF;
 801433e:	4b0d      	ldr	r3, [pc, #52]	; (8014374 <Cut_Off_Region+0xf0>)
 8014340:	2201      	movs	r2, #1
 8014342:	701a      	strb	r2, [r3, #0]
						  Volume_Mode_Blower_control.BLOWER_DAC_VAL = 0;
 8014344:	4b0c      	ldr	r3, [pc, #48]	; (8014378 <Cut_Off_Region+0xf4>)
 8014346:	2200      	movs	r2, #0
 8014348:	801a      	strh	r2, [r3, #0]
						  Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 801434a:	4b0f      	ldr	r3, [pc, #60]	; (8014388 <Cut_Off_Region+0x104>)
 801434c:	2200      	movs	r2, #0
 801434e:	701a      	strb	r2, [r3, #0]
						  Parkar_valve_Signal(0);
 8014350:	4b0e      	ldr	r3, [pc, #56]	; (801438c <Cut_Off_Region+0x108>)
 8014352:	2200      	movs	r2, #0
 8014354:	615a      	str	r2, [r3, #20]
}
 8014356:	bf00      	nop
 8014358:	370c      	adds	r7, #12
 801435a:	46bd      	mov	sp, r7
 801435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop
 8014364:	200126b9 	.word	0x200126b9
 8014368:	2000005a 	.word	0x2000005a
 801436c:	20012df4 	.word	0x20012df4
 8014370:	200125f8 	.word	0x200125f8
 8014374:	20012828 	.word	0x20012828
 8014378:	200129b0 	.word	0x200129b0
 801437c:	20012369 	.word	0x20012369
 8014380:	2000005c 	.word	0x2000005c
 8014384:	2001280c 	.word	0x2001280c
 8014388:	20012b71 	.word	0x20012b71
 801438c:	40007400 	.word	0x40007400
 8014390:	2000005b 	.word	0x2000005b
 8014394:	20012df3 	.word	0x20012df3
 8014398:	2001263d 	.word	0x2001263d

0801439c <Flow_Restriction_Control>:
 * @brief Flow_Restriction_Control.
 * This function didnt have above function.
 * */

void Flow_Restriction_Control(uint16_t Set_Volume_Val,uint8_t Set_Flow_Rate,uint8_t Volume_Stop_Value)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b082      	sub	sp, #8
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	4603      	mov	r3, r0
 80143a4:	80fb      	strh	r3, [r7, #6]
 80143a6:	460b      	mov	r3, r1
 80143a8:	717b      	strb	r3, [r7, #5]
 80143aa:	4613      	mov	r3, r2
 80143ac:	713b      	strb	r3, [r7, #4]
	    Set_Volume_Val= (Set_Volume_Val-Volume_Stop_Value);
 80143ae:	793b      	ldrb	r3, [r7, #4]
 80143b0:	b29b      	uxth	r3, r3
 80143b2:	88fa      	ldrh	r2, [r7, #6]
 80143b4:	1ad3      	subs	r3, r2, r3
 80143b6:	80fb      	strh	r3, [r7, #6]

		if(GRAPH_VALUES.volume  <= Set_Volume_Val)
 80143b8:	4b40      	ldr	r3, [pc, #256]	; (80144bc <Flow_Restriction_Control+0x120>)
 80143ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80143be:	88fb      	ldrh	r3, [r7, #6]
 80143c0:	ee07 3a90 	vmov	s15, r3
 80143c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d0:	d85e      	bhi.n	8014490 <Flow_Restriction_Control+0xf4>
		{
					 if(Volume_Achieved_Status == VOLUME_NOT_ACHIEVED)
 80143d2:	4b3b      	ldr	r3, [pc, #236]	; (80144c0 <Flow_Restriction_Control+0x124>)
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d16b      	bne.n	80144b2 <Flow_Restriction_Control+0x116>
					 {
						 Volume_Mode_Blower_control.BLOWER_DAC_VAL  = (Volume_Mode_Blower_control.PREVIOUS_INITIAL_BLOWER_DAC_VAL+200);
 80143da:	4b3a      	ldr	r3, [pc, #232]	; (80144c4 <Flow_Restriction_Control+0x128>)
 80143dc:	88db      	ldrh	r3, [r3, #6]
 80143de:	33c8      	adds	r3, #200	; 0xc8
 80143e0:	b29a      	uxth	r2, r3
 80143e2:	4b38      	ldr	r3, [pc, #224]	; (80144c4 <Flow_Restriction_Control+0x128>)
 80143e4:	801a      	strh	r2, [r3, #0]
								if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED > Blower_Cut_Off_Time)  //new
 80143e6:	4b38      	ldr	r3, [pc, #224]	; (80144c8 <Flow_Restriction_Control+0x12c>)
 80143e8:	689b      	ldr	r3, [r3, #8]
 80143ea:	4a38      	ldr	r2, [pc, #224]	; (80144cc <Flow_Restriction_Control+0x130>)
 80143ec:	8812      	ldrh	r2, [r2, #0]
 80143ee:	4293      	cmp	r3, r2
 80143f0:	dd19      	ble.n	8014426 <Flow_Restriction_Control+0x8a>
								{
									if(GRAPH_VALUES.flow <=5)
 80143f2:	4b32      	ldr	r3, [pc, #200]	; (80144bc <Flow_Restriction_Control+0x120>)
 80143f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80143f8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80143fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014404:	d80f      	bhi.n	8014426 <Flow_Restriction_Control+0x8a>
									{
										Blower_Status =BlOWER_OFF;
 8014406:	4b32      	ldr	r3, [pc, #200]	; (80144d0 <Flow_Restriction_Control+0x134>)
 8014408:	2201      	movs	r2, #1
 801440a:	701a      	strb	r2, [r3, #0]
										Volume_Mode_Blower_control.BLOWER_DAC_VAL = 0;
 801440c:	4b2d      	ldr	r3, [pc, #180]	; (80144c4 <Flow_Restriction_Control+0x128>)
 801440e:	2200      	movs	r2, #0
 8014410:	801a      	strh	r2, [r3, #0]
										if(Alert_Check < 4)
 8014412:	4b30      	ldr	r3, [pc, #192]	; (80144d4 <Flow_Restriction_Control+0x138>)
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	2b03      	cmp	r3, #3
 8014418:	d805      	bhi.n	8014426 <Flow_Restriction_Control+0x8a>
										{
											Oxygen_Blending_Status=OXYGEN_ACHIEVED;
 801441a:	4b2f      	ldr	r3, [pc, #188]	; (80144d8 <Flow_Restriction_Control+0x13c>)
 801441c:	2200      	movs	r2, #0
 801441e:	701a      	strb	r2, [r3, #0]
											Parkar_valve_Signal(0);
 8014420:	4b2e      	ldr	r3, [pc, #184]	; (80144dc <Flow_Restriction_Control+0x140>)
 8014422:	2200      	movs	r2, #0
 8014424:	615a      	str	r2, [r3, #20]
										}
									}
								}

								if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED > 100)  //new
 8014426:	4b28      	ldr	r3, [pc, #160]	; (80144c8 <Flow_Restriction_Control+0x12c>)
 8014428:	689b      	ldr	r3, [r3, #8]
 801442a:	2b64      	cmp	r3, #100	; 0x64
 801442c:	dd14      	ble.n	8014458 <Flow_Restriction_Control+0xbc>
								{
									Flow_Cummulative_Val  += GRAPH_VALUES.flow;
 801442e:	4b23      	ldr	r3, [pc, #140]	; (80144bc <Flow_Restriction_Control+0x120>)
 8014430:	ed93 7a01 	vldr	s14, [r3, #4]
 8014434:	4b2a      	ldr	r3, [pc, #168]	; (80144e0 <Flow_Restriction_Control+0x144>)
 8014436:	edd3 7a00 	vldr	s15, [r3]
 801443a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801443e:	4b28      	ldr	r3, [pc, #160]	; (80144e0 <Flow_Restriction_Control+0x144>)
 8014440:	edc3 7a00 	vstr	s15, [r3]
									Flow_Count++;
 8014444:	4b27      	ldr	r3, [pc, #156]	; (80144e4 <Flow_Restriction_Control+0x148>)
 8014446:	edd3 7a00 	vldr	s15, [r3]
 801444a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801444e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014452:	4b24      	ldr	r3, [pc, #144]	; (80144e4 <Flow_Restriction_Control+0x148>)
 8014454:	edc3 7a00 	vstr	s15, [r3]
								}

								if(TIME_Base_parameter.INSPIRATION_TIME_ACHEIVED < Flow_Detect_Time)   //new
 8014458:	4b1b      	ldr	r3, [pc, #108]	; (80144c8 <Flow_Restriction_Control+0x12c>)
 801445a:	689b      	ldr	r3, [r3, #8]
 801445c:	4a22      	ldr	r2, [pc, #136]	; (80144e8 <Flow_Restriction_Control+0x14c>)
 801445e:	8812      	ldrh	r2, [r2, #0]
 8014460:	4293      	cmp	r3, r2
 8014462:	da26      	bge.n	80144b2 <Flow_Restriction_Control+0x116>
								{
									if(GRAPH_VALUES.flow >= Set_Flow_Rate)
 8014464:	4b15      	ldr	r3, [pc, #84]	; (80144bc <Flow_Restriction_Control+0x120>)
 8014466:	ed93 7a01 	vldr	s14, [r3, #4]
 801446a:	797b      	ldrb	r3, [r7, #5]
 801446c:	ee07 3a90 	vmov	s15, r3
 8014470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801447c:	da00      	bge.n	8014480 <Flow_Restriction_Control+0xe4>
		    Total_Volume_Achieved_Time                        = (Volume_Achieved_Time *10);
			Volume_Acheieved();
			Volume_Achieved_Status                            = VOLUME_ACHIEVED;
			Volume_Mode_Blower_control.BLOWER_DAC_VAL         = RESET;
		}
}
 801447e:	e018      	b.n	80144b2 <Flow_Restriction_Control+0x116>
										  if(Maximum_Flow_Achieved  == FLOW_NOT_ACHIEVED)
 8014480:	4b1a      	ldr	r3, [pc, #104]	; (80144ec <Flow_Restriction_Control+0x150>)
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d114      	bne.n	80144b2 <Flow_Restriction_Control+0x116>
												Maximum_Flow_Achieved                     = FLOW_ACHIEVED;
 8014488:	4b18      	ldr	r3, [pc, #96]	; (80144ec <Flow_Restriction_Control+0x150>)
 801448a:	2201      	movs	r2, #1
 801448c:	701a      	strb	r2, [r3, #0]
}
 801448e:	e010      	b.n	80144b2 <Flow_Restriction_Control+0x116>
		    Total_Volume_Achieved_Time                        = (Volume_Achieved_Time *10);
 8014490:	4b17      	ldr	r3, [pc, #92]	; (80144f0 <Flow_Restriction_Control+0x154>)
 8014492:	881b      	ldrh	r3, [r3, #0]
 8014494:	461a      	mov	r2, r3
 8014496:	0092      	lsls	r2, r2, #2
 8014498:	4413      	add	r3, r2
 801449a:	005b      	lsls	r3, r3, #1
 801449c:	b29a      	uxth	r2, r3
 801449e:	4b15      	ldr	r3, [pc, #84]	; (80144f4 <Flow_Restriction_Control+0x158>)
 80144a0:	801a      	strh	r2, [r3, #0]
			Volume_Acheieved();
 80144a2:	f7ff fc74 	bl	8013d8e <Volume_Acheieved>
			Volume_Achieved_Status                            = VOLUME_ACHIEVED;
 80144a6:	4b06      	ldr	r3, [pc, #24]	; (80144c0 <Flow_Restriction_Control+0x124>)
 80144a8:	2201      	movs	r2, #1
 80144aa:	701a      	strb	r2, [r3, #0]
			Volume_Mode_Blower_control.BLOWER_DAC_VAL         = RESET;
 80144ac:	4b05      	ldr	r3, [pc, #20]	; (80144c4 <Flow_Restriction_Control+0x128>)
 80144ae:	2200      	movs	r2, #0
 80144b0:	801a      	strh	r2, [r3, #0]
}
 80144b2:	bf00      	nop
 80144b4:	3708      	adds	r7, #8
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
 80144ba:	bf00      	nop
 80144bc:	200125f8 	.word	0x200125f8
 80144c0:	2001269f 	.word	0x2001269f
 80144c4:	200129b0 	.word	0x200129b0
 80144c8:	20012b38 	.word	0x20012b38
 80144cc:	20000058 	.word	0x20000058
 80144d0:	20012828 	.word	0x20012828
 80144d4:	20012aa0 	.word	0x20012aa0
 80144d8:	20012b71 	.word	0x20012b71
 80144dc:	40007400 	.word	0x40007400
 80144e0:	200122f8 	.word	0x200122f8
 80144e4:	200128a0 	.word	0x200128a0
 80144e8:	2000005e 	.word	0x2000005e
 80144ec:	200126b9 	.word	0x200126b9
 80144f0:	200122f4 	.word	0x200122f4
 80144f4:	20012c28 	.word	0x20012c28

080144f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80144f8:	b480      	push	{r7}
 80144fa:	b085      	sub	sp, #20
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	4a07      	ldr	r2, [pc, #28]	; (8014524 <vApplicationGetIdleTaskMemory+0x2c>)
 8014508:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	4a06      	ldr	r2, [pc, #24]	; (8014528 <vApplicationGetIdleTaskMemory+0x30>)
 801450e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2280      	movs	r2, #128	; 0x80
 8014514:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8014516:	bf00      	nop
 8014518:	3714      	adds	r7, #20
 801451a:	46bd      	mov	sp, r7
 801451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014520:	4770      	bx	lr
 8014522:	bf00      	nop
 8014524:	200000bc 	.word	0x200000bc
 8014528:	20000110 	.word	0x20000110

0801452c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 801452c:	b480      	push	{r7}
 801452e:	b085      	sub	sp, #20
 8014530:	af00      	add	r7, sp, #0
 8014532:	60f8      	str	r0, [r7, #12]
 8014534:	60b9      	str	r1, [r7, #8]
 8014536:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	4a07      	ldr	r2, [pc, #28]	; (8014558 <vApplicationGetTimerTaskMemory+0x2c>)
 801453c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	4a06      	ldr	r2, [pc, #24]	; (801455c <vApplicationGetTimerTaskMemory+0x30>)
 8014542:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	f44f 7280 	mov.w	r2, #256	; 0x100
 801454a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 801454c:	bf00      	nop
 801454e:	3714      	adds	r7, #20
 8014550:	46bd      	mov	sp, r7
 8014552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014556:	4770      	bx	lr
 8014558:	20000310 	.word	0x20000310
 801455c:	20000364 	.word	0x20000364

08014560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8014564:	f000 fdda 	bl	801511c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8014568:	f000 f812 	bl	8014590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801456c:	f000 f9c6 	bl	80148fc <MX_GPIO_Init>
  MX_DMA_Init();
 8014570:	f000 f9a4 	bl	80148bc <MX_DMA_Init>
  MX_ADC1_Init();
 8014574:	f000 f876 	bl	8014664 <MX_ADC1_Init>
  MX_DAC_Init();
 8014578:	f000 f8e2 	bl	8014740 <MX_DAC_Init>
  MX_I2C2_Init();
 801457c:	f000 f942 	bl	8014804 <MX_I2C2_Init>
  MX_I2C3_Init();
 8014580:	f000 f96e 	bl	8014860 <MX_I2C3_Init>
  MX_I2C1_Init();
 8014584:	f000 f910 	bl	80147a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Initial_Task_Create();                            //Code
 8014588:	f7fd fd9e 	bl	80120c8 <Initial_Task_Create>
  /* USER CODE END 2 */


  /* USER CODE BEGIN WHILE */
  while (1)
 801458c:	e7fe      	b.n	801458c <main+0x2c>
	...

08014590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b094      	sub	sp, #80	; 0x50
 8014594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8014596:	f107 0320 	add.w	r3, r7, #32
 801459a:	2230      	movs	r2, #48	; 0x30
 801459c:	2100      	movs	r1, #0
 801459e:	4618      	mov	r0, r3
 80145a0:	f008 fcb2 	bl	801cf08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80145a4:	f107 030c 	add.w	r3, r7, #12
 80145a8:	2200      	movs	r2, #0
 80145aa:	601a      	str	r2, [r3, #0]
 80145ac:	605a      	str	r2, [r3, #4]
 80145ae:	609a      	str	r2, [r3, #8]
 80145b0:	60da      	str	r2, [r3, #12]
 80145b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80145b4:	2300      	movs	r3, #0
 80145b6:	60bb      	str	r3, [r7, #8]
 80145b8:	4b28      	ldr	r3, [pc, #160]	; (801465c <SystemClock_Config+0xcc>)
 80145ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145bc:	4a27      	ldr	r2, [pc, #156]	; (801465c <SystemClock_Config+0xcc>)
 80145be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145c2:	6413      	str	r3, [r2, #64]	; 0x40
 80145c4:	4b25      	ldr	r3, [pc, #148]	; (801465c <SystemClock_Config+0xcc>)
 80145c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80145cc:	60bb      	str	r3, [r7, #8]
 80145ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80145d0:	2300      	movs	r3, #0
 80145d2:	607b      	str	r3, [r7, #4]
 80145d4:	4b22      	ldr	r3, [pc, #136]	; (8014660 <SystemClock_Config+0xd0>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	4a21      	ldr	r2, [pc, #132]	; (8014660 <SystemClock_Config+0xd0>)
 80145da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80145de:	6013      	str	r3, [r2, #0]
 80145e0:	4b1f      	ldr	r3, [pc, #124]	; (8014660 <SystemClock_Config+0xd0>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80145e8:	607b      	str	r3, [r7, #4]
 80145ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80145ec:	2301      	movs	r3, #1
 80145ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80145f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80145f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80145f6:	2302      	movs	r3, #2
 80145f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80145fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80145fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8014600:	2308      	movs	r3, #8
 8014602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8014604:	23a8      	movs	r3, #168	; 0xa8
 8014606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8014608:	2302      	movs	r3, #2
 801460a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 801460c:	2307      	movs	r3, #7
 801460e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014610:	f107 0320 	add.w	r3, r7, #32
 8014614:	4618      	mov	r0, r3
 8014616:	f003 faa1 	bl	8017b5c <HAL_RCC_OscConfig>
 801461a:	4603      	mov	r3, r0
 801461c:	2b00      	cmp	r3, #0
 801461e:	d001      	beq.n	8014624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8014620:	f000 fa60 	bl	8014ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014624:	230f      	movs	r3, #15
 8014626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8014628:	2302      	movs	r3, #2
 801462a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801462c:	2300      	movs	r3, #0
 801462e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8014630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8014634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8014636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801463a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801463c:	f107 030c 	add.w	r3, r7, #12
 8014640:	2105      	movs	r1, #5
 8014642:	4618      	mov	r0, r3
 8014644:	f003 fd02 	bl	801804c <HAL_RCC_ClockConfig>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	d001      	beq.n	8014652 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 801464e:	f000 fa49 	bl	8014ae4 <Error_Handler>
  }
}
 8014652:	bf00      	nop
 8014654:	3750      	adds	r7, #80	; 0x50
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
 801465a:	bf00      	nop
 801465c:	40023800 	.word	0x40023800
 8014660:	40007000 	.word	0x40007000

08014664 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b084      	sub	sp, #16
 8014668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801466a:	463b      	mov	r3, r7
 801466c:	2200      	movs	r2, #0
 801466e:	601a      	str	r2, [r3, #0]
 8014670:	605a      	str	r2, [r3, #4]
 8014672:	609a      	str	r2, [r3, #8]
 8014674:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8014676:	4b2f      	ldr	r3, [pc, #188]	; (8014734 <MX_ADC1_Init+0xd0>)
 8014678:	4a2f      	ldr	r2, [pc, #188]	; (8014738 <MX_ADC1_Init+0xd4>)
 801467a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801467c:	4b2d      	ldr	r3, [pc, #180]	; (8014734 <MX_ADC1_Init+0xd0>)
 801467e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014682:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8014684:	4b2b      	ldr	r3, [pc, #172]	; (8014734 <MX_ADC1_Init+0xd0>)
 8014686:	2200      	movs	r2, #0
 8014688:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 801468a:	4b2a      	ldr	r3, [pc, #168]	; (8014734 <MX_ADC1_Init+0xd0>)
 801468c:	2201      	movs	r2, #1
 801468e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8014690:	4b28      	ldr	r3, [pc, #160]	; (8014734 <MX_ADC1_Init+0xd0>)
 8014692:	2201      	movs	r2, #1
 8014694:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014696:	4b27      	ldr	r3, [pc, #156]	; (8014734 <MX_ADC1_Init+0xd0>)
 8014698:	2200      	movs	r2, #0
 801469a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801469e:	4b25      	ldr	r3, [pc, #148]	; (8014734 <MX_ADC1_Init+0xd0>)
 80146a0:	2200      	movs	r2, #0
 80146a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80146a4:	4b23      	ldr	r3, [pc, #140]	; (8014734 <MX_ADC1_Init+0xd0>)
 80146a6:	4a25      	ldr	r2, [pc, #148]	; (801473c <MX_ADC1_Init+0xd8>)
 80146a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80146aa:	4b22      	ldr	r3, [pc, #136]	; (8014734 <MX_ADC1_Init+0xd0>)
 80146ac:	2200      	movs	r2, #0
 80146ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80146b0:	4b20      	ldr	r3, [pc, #128]	; (8014734 <MX_ADC1_Init+0xd0>)
 80146b2:	2203      	movs	r2, #3
 80146b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80146b6:	4b1f      	ldr	r3, [pc, #124]	; (8014734 <MX_ADC1_Init+0xd0>)
 80146b8:	2201      	movs	r2, #1
 80146ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80146be:	4b1d      	ldr	r3, [pc, #116]	; (8014734 <MX_ADC1_Init+0xd0>)
 80146c0:	2201      	movs	r2, #1
 80146c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80146c4:	481b      	ldr	r0, [pc, #108]	; (8014734 <MX_ADC1_Init+0xd0>)
 80146c6:	f000 fd6b 	bl	80151a0 <HAL_ADC_Init>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d001      	beq.n	80146d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80146d0:	f000 fa08 	bl	8014ae4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80146d4:	2303      	movs	r3, #3
 80146d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80146d8:	2301      	movs	r3, #1
 80146da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80146dc:	2307      	movs	r3, #7
 80146de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80146e0:	463b      	mov	r3, r7
 80146e2:	4619      	mov	r1, r3
 80146e4:	4813      	ldr	r0, [pc, #76]	; (8014734 <MX_ADC1_Init+0xd0>)
 80146e6:	f000 fecd 	bl	8015484 <HAL_ADC_ConfigChannel>
 80146ea:	4603      	mov	r3, r0
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d001      	beq.n	80146f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80146f0:	f000 f9f8 	bl	8014ae4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80146f4:	230f      	movs	r3, #15
 80146f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80146f8:	2302      	movs	r3, #2
 80146fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80146fc:	463b      	mov	r3, r7
 80146fe:	4619      	mov	r1, r3
 8014700:	480c      	ldr	r0, [pc, #48]	; (8014734 <MX_ADC1_Init+0xd0>)
 8014702:	f000 febf 	bl	8015484 <HAL_ADC_ConfigChannel>
 8014706:	4603      	mov	r3, r0
 8014708:	2b00      	cmp	r3, #0
 801470a:	d001      	beq.n	8014710 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 801470c:	f000 f9ea 	bl	8014ae4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8014710:	2306      	movs	r3, #6
 8014712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8014714:	2303      	movs	r3, #3
 8014716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014718:	463b      	mov	r3, r7
 801471a:	4619      	mov	r1, r3
 801471c:	4805      	ldr	r0, [pc, #20]	; (8014734 <MX_ADC1_Init+0xd0>)
 801471e:	f000 feb1 	bl	8015484 <HAL_ADC_ConfigChannel>
 8014722:	4603      	mov	r3, r0
 8014724:	2b00      	cmp	r3, #0
 8014726:	d001      	beq.n	801472c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8014728:	f000 f9dc 	bl	8014ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 801472c:	bf00      	nop
 801472e:	3710      	adds	r7, #16
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	200126c8 	.word	0x200126c8
 8014738:	40012000 	.word	0x40012000
 801473c:	0f000001 	.word	0x0f000001

08014740 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8014746:	463b      	mov	r3, r7
 8014748:	2200      	movs	r2, #0
 801474a:	601a      	str	r2, [r3, #0]
 801474c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 801474e:	4b14      	ldr	r3, [pc, #80]	; (80147a0 <MX_DAC_Init+0x60>)
 8014750:	4a14      	ldr	r2, [pc, #80]	; (80147a4 <MX_DAC_Init+0x64>)
 8014752:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8014754:	4812      	ldr	r0, [pc, #72]	; (80147a0 <MX_DAC_Init+0x60>)
 8014756:	f001 fa17 	bl	8015b88 <HAL_DAC_Init>
 801475a:	4603      	mov	r3, r0
 801475c:	2b00      	cmp	r3, #0
 801475e:	d001      	beq.n	8014764 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8014760:	f000 f9c0 	bl	8014ae4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8014764:	2300      	movs	r3, #0
 8014766:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8014768:	2300      	movs	r3, #0
 801476a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 801476c:	463b      	mov	r3, r7
 801476e:	2200      	movs	r2, #0
 8014770:	4619      	mov	r1, r3
 8014772:	480b      	ldr	r0, [pc, #44]	; (80147a0 <MX_DAC_Init+0x60>)
 8014774:	f001 fae0 	bl	8015d38 <HAL_DAC_ConfigChannel>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	d001      	beq.n	8014782 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 801477e:	f000 f9b1 	bl	8014ae4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8014782:	463b      	mov	r3, r7
 8014784:	2210      	movs	r2, #16
 8014786:	4619      	mov	r1, r3
 8014788:	4805      	ldr	r0, [pc, #20]	; (80147a0 <MX_DAC_Init+0x60>)
 801478a:	f001 fad5 	bl	8015d38 <HAL_DAC_ConfigChannel>
 801478e:	4603      	mov	r3, r0
 8014790:	2b00      	cmp	r3, #0
 8014792:	d001      	beq.n	8014798 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8014794:	f000 f9a6 	bl	8014ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8014798:	bf00      	nop
 801479a:	3708      	adds	r7, #8
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	2001284c 	.word	0x2001284c
 80147a4:	40007400 	.word	0x40007400

080147a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80147ac:	4b12      	ldr	r3, [pc, #72]	; (80147f8 <MX_I2C1_Init+0x50>)
 80147ae:	4a13      	ldr	r2, [pc, #76]	; (80147fc <MX_I2C1_Init+0x54>)
 80147b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80147b2:	4b11      	ldr	r3, [pc, #68]	; (80147f8 <MX_I2C1_Init+0x50>)
 80147b4:	4a12      	ldr	r2, [pc, #72]	; (8014800 <MX_I2C1_Init+0x58>)
 80147b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80147b8:	4b0f      	ldr	r3, [pc, #60]	; (80147f8 <MX_I2C1_Init+0x50>)
 80147ba:	2200      	movs	r2, #0
 80147bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80147be:	4b0e      	ldr	r3, [pc, #56]	; (80147f8 <MX_I2C1_Init+0x50>)
 80147c0:	2200      	movs	r2, #0
 80147c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80147c4:	4b0c      	ldr	r3, [pc, #48]	; (80147f8 <MX_I2C1_Init+0x50>)
 80147c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80147ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80147cc:	4b0a      	ldr	r3, [pc, #40]	; (80147f8 <MX_I2C1_Init+0x50>)
 80147ce:	2200      	movs	r2, #0
 80147d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80147d2:	4b09      	ldr	r3, [pc, #36]	; (80147f8 <MX_I2C1_Init+0x50>)
 80147d4:	2200      	movs	r2, #0
 80147d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80147d8:	4b07      	ldr	r3, [pc, #28]	; (80147f8 <MX_I2C1_Init+0x50>)
 80147da:	2200      	movs	r2, #0
 80147dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80147de:	4b06      	ldr	r3, [pc, #24]	; (80147f8 <MX_I2C1_Init+0x50>)
 80147e0:	2200      	movs	r2, #0
 80147e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80147e4:	4804      	ldr	r0, [pc, #16]	; (80147f8 <MX_I2C1_Init+0x50>)
 80147e6:	f002 f8f5 	bl	80169d4 <HAL_I2C_Init>
 80147ea:	4603      	mov	r3, r0
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d001      	beq.n	80147f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80147f0:	f000 f978 	bl	8014ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80147f4:	bf00      	nop
 80147f6:	bd80      	pop	{r7, pc}
 80147f8:	2001236c 	.word	0x2001236c
 80147fc:	40005400 	.word	0x40005400
 8014800:	00061a80 	.word	0x00061a80

08014804 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8014808:	4b12      	ldr	r3, [pc, #72]	; (8014854 <MX_I2C2_Init+0x50>)
 801480a:	4a13      	ldr	r2, [pc, #76]	; (8014858 <MX_I2C2_Init+0x54>)
 801480c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 801480e:	4b11      	ldr	r3, [pc, #68]	; (8014854 <MX_I2C2_Init+0x50>)
 8014810:	4a12      	ldr	r2, [pc, #72]	; (801485c <MX_I2C2_Init+0x58>)
 8014812:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014814:	4b0f      	ldr	r3, [pc, #60]	; (8014854 <MX_I2C2_Init+0x50>)
 8014816:	2200      	movs	r2, #0
 8014818:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 801481a:	4b0e      	ldr	r3, [pc, #56]	; (8014854 <MX_I2C2_Init+0x50>)
 801481c:	2200      	movs	r2, #0
 801481e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014820:	4b0c      	ldr	r3, [pc, #48]	; (8014854 <MX_I2C2_Init+0x50>)
 8014822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014826:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014828:	4b0a      	ldr	r3, [pc, #40]	; (8014854 <MX_I2C2_Init+0x50>)
 801482a:	2200      	movs	r2, #0
 801482c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 801482e:	4b09      	ldr	r3, [pc, #36]	; (8014854 <MX_I2C2_Init+0x50>)
 8014830:	2200      	movs	r2, #0
 8014832:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014834:	4b07      	ldr	r3, [pc, #28]	; (8014854 <MX_I2C2_Init+0x50>)
 8014836:	2200      	movs	r2, #0
 8014838:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801483a:	4b06      	ldr	r3, [pc, #24]	; (8014854 <MX_I2C2_Init+0x50>)
 801483c:	2200      	movs	r2, #0
 801483e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8014840:	4804      	ldr	r0, [pc, #16]	; (8014854 <MX_I2C2_Init+0x50>)
 8014842:	f002 f8c7 	bl	80169d4 <HAL_I2C_Init>
 8014846:	4603      	mov	r3, r0
 8014848:	2b00      	cmp	r3, #0
 801484a:	d001      	beq.n	8014850 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 801484c:	f000 f94a 	bl	8014ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8014850:	bf00      	nop
 8014852:	bd80      	pop	{r7, pc}
 8014854:	20012418 	.word	0x20012418
 8014858:	40005800 	.word	0x40005800
 801485c:	00061a80 	.word	0x00061a80

08014860 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8014864:	4b12      	ldr	r3, [pc, #72]	; (80148b0 <MX_I2C3_Init+0x50>)
 8014866:	4a13      	ldr	r2, [pc, #76]	; (80148b4 <MX_I2C3_Init+0x54>)
 8014868:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 801486a:	4b11      	ldr	r3, [pc, #68]	; (80148b0 <MX_I2C3_Init+0x50>)
 801486c:	4a12      	ldr	r2, [pc, #72]	; (80148b8 <MX_I2C3_Init+0x58>)
 801486e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8014870:	4b0f      	ldr	r3, [pc, #60]	; (80148b0 <MX_I2C3_Init+0x50>)
 8014872:	2200      	movs	r2, #0
 8014874:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8014876:	4b0e      	ldr	r3, [pc, #56]	; (80148b0 <MX_I2C3_Init+0x50>)
 8014878:	2200      	movs	r2, #0
 801487a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801487c:	4b0c      	ldr	r3, [pc, #48]	; (80148b0 <MX_I2C3_Init+0x50>)
 801487e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014882:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014884:	4b0a      	ldr	r3, [pc, #40]	; (80148b0 <MX_I2C3_Init+0x50>)
 8014886:	2200      	movs	r2, #0
 8014888:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 801488a:	4b09      	ldr	r3, [pc, #36]	; (80148b0 <MX_I2C3_Init+0x50>)
 801488c:	2200      	movs	r2, #0
 801488e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014890:	4b07      	ldr	r3, [pc, #28]	; (80148b0 <MX_I2C3_Init+0x50>)
 8014892:	2200      	movs	r2, #0
 8014894:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014896:	4b06      	ldr	r3, [pc, #24]	; (80148b0 <MX_I2C3_Init+0x50>)
 8014898:	2200      	movs	r2, #0
 801489a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 801489c:	4804      	ldr	r0, [pc, #16]	; (80148b0 <MX_I2C3_Init+0x50>)
 801489e:	f002 f899 	bl	80169d4 <HAL_I2C_Init>
 80148a2:	4603      	mov	r3, r0
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d001      	beq.n	80148ac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80148a8:	f000 f91c 	bl	8014ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80148ac:	bf00      	nop
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	20012254 	.word	0x20012254
 80148b4:	40005c00 	.word	0x40005c00
 80148b8:	00061a80 	.word	0x00061a80

080148bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80148c2:	2300      	movs	r3, #0
 80148c4:	607b      	str	r3, [r7, #4]
 80148c6:	4b0c      	ldr	r3, [pc, #48]	; (80148f8 <MX_DMA_Init+0x3c>)
 80148c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148ca:	4a0b      	ldr	r2, [pc, #44]	; (80148f8 <MX_DMA_Init+0x3c>)
 80148cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80148d0:	6313      	str	r3, [r2, #48]	; 0x30
 80148d2:	4b09      	ldr	r3, [pc, #36]	; (80148f8 <MX_DMA_Init+0x3c>)
 80148d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80148da:	607b      	str	r3, [r7, #4]
 80148dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80148de:	2200      	movs	r2, #0
 80148e0:	2105      	movs	r1, #5
 80148e2:	2038      	movs	r0, #56	; 0x38
 80148e4:	f001 f926 	bl	8015b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80148e8:	2038      	movs	r0, #56	; 0x38
 80148ea:	f001 f93f 	bl	8015b6c <HAL_NVIC_EnableIRQ>

}
 80148ee:	bf00      	nop
 80148f0:	3708      	adds	r7, #8
 80148f2:	46bd      	mov	sp, r7
 80148f4:	bd80      	pop	{r7, pc}
 80148f6:	bf00      	nop
 80148f8:	40023800 	.word	0x40023800

080148fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b08c      	sub	sp, #48	; 0x30
 8014900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014902:	f107 031c 	add.w	r3, r7, #28
 8014906:	2200      	movs	r2, #0
 8014908:	601a      	str	r2, [r3, #0]
 801490a:	605a      	str	r2, [r3, #4]
 801490c:	609a      	str	r2, [r3, #8]
 801490e:	60da      	str	r2, [r3, #12]
 8014910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8014912:	2300      	movs	r3, #0
 8014914:	61bb      	str	r3, [r7, #24]
 8014916:	4b65      	ldr	r3, [pc, #404]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801491a:	4a64      	ldr	r2, [pc, #400]	; (8014aac <MX_GPIO_Init+0x1b0>)
 801491c:	f043 0310 	orr.w	r3, r3, #16
 8014920:	6313      	str	r3, [r2, #48]	; 0x30
 8014922:	4b62      	ldr	r3, [pc, #392]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014926:	f003 0310 	and.w	r3, r3, #16
 801492a:	61bb      	str	r3, [r7, #24]
 801492c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801492e:	2300      	movs	r3, #0
 8014930:	617b      	str	r3, [r7, #20]
 8014932:	4b5e      	ldr	r3, [pc, #376]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014936:	4a5d      	ldr	r2, [pc, #372]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801493c:	6313      	str	r3, [r2, #48]	; 0x30
 801493e:	4b5b      	ldr	r3, [pc, #364]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014946:	617b      	str	r3, [r7, #20]
 8014948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801494a:	2300      	movs	r3, #0
 801494c:	613b      	str	r3, [r7, #16]
 801494e:	4b57      	ldr	r3, [pc, #348]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014952:	4a56      	ldr	r2, [pc, #344]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014954:	f043 0301 	orr.w	r3, r3, #1
 8014958:	6313      	str	r3, [r2, #48]	; 0x30
 801495a:	4b54      	ldr	r3, [pc, #336]	; (8014aac <MX_GPIO_Init+0x1b0>)
 801495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801495e:	f003 0301 	and.w	r3, r3, #1
 8014962:	613b      	str	r3, [r7, #16]
 8014964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8014966:	2300      	movs	r3, #0
 8014968:	60fb      	str	r3, [r7, #12]
 801496a:	4b50      	ldr	r3, [pc, #320]	; (8014aac <MX_GPIO_Init+0x1b0>)
 801496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801496e:	4a4f      	ldr	r2, [pc, #316]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014970:	f043 0304 	orr.w	r3, r3, #4
 8014974:	6313      	str	r3, [r2, #48]	; 0x30
 8014976:	4b4d      	ldr	r3, [pc, #308]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801497a:	f003 0304 	and.w	r3, r3, #4
 801497e:	60fb      	str	r3, [r7, #12]
 8014980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014982:	2300      	movs	r3, #0
 8014984:	60bb      	str	r3, [r7, #8]
 8014986:	4b49      	ldr	r3, [pc, #292]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801498a:	4a48      	ldr	r2, [pc, #288]	; (8014aac <MX_GPIO_Init+0x1b0>)
 801498c:	f043 0302 	orr.w	r3, r3, #2
 8014990:	6313      	str	r3, [r2, #48]	; 0x30
 8014992:	4b46      	ldr	r3, [pc, #280]	; (8014aac <MX_GPIO_Init+0x1b0>)
 8014994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014996:	f003 0302 	and.w	r3, r3, #2
 801499a:	60bb      	str	r3, [r7, #8]
 801499c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801499e:	2300      	movs	r3, #0
 80149a0:	607b      	str	r3, [r7, #4]
 80149a2:	4b42      	ldr	r3, [pc, #264]	; (8014aac <MX_GPIO_Init+0x1b0>)
 80149a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149a6:	4a41      	ldr	r2, [pc, #260]	; (8014aac <MX_GPIO_Init+0x1b0>)
 80149a8:	f043 0308 	orr.w	r3, r3, #8
 80149ac:	6313      	str	r3, [r2, #48]	; 0x30
 80149ae:	4b3f      	ldr	r3, [pc, #252]	; (8014aac <MX_GPIO_Init+0x1b0>)
 80149b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149b2:	f003 0308 	and.w	r3, r3, #8
 80149b6:	607b      	str	r3, [r7, #4]
 80149b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Blower_Enable_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80149ba:	2200      	movs	r2, #0
 80149bc:	2122      	movs	r1, #34	; 0x22
 80149be:	483c      	ldr	r0, [pc, #240]	; (8014ab0 <MX_GPIO_Init+0x1b4>)
 80149c0:	f001 ffca 	bl	8016958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Expiratory_Valve_Control_Pin|Nebuliser_Motor_Control_Pin, GPIO_PIN_RESET);
 80149c4:	2200      	movs	r2, #0
 80149c6:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80149ca:	483a      	ldr	r0, [pc, #232]	; (8014ab4 <MX_GPIO_Init+0x1b8>)
 80149cc:	f001 ffc4 	bl	8016958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80149d0:	2200      	movs	r2, #0
 80149d2:	f248 017a 	movw	r1, #32890	; 0x807a
 80149d6:	4838      	ldr	r0, [pc, #224]	; (8014ab8 <MX_GPIO_Init+0x1bc>)
 80149d8:	f001 ffbe 	bl	8016958 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80149dc:	2304      	movs	r3, #4
 80149de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80149e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80149e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80149e6:	2302      	movs	r3, #2
 80149e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80149ea:	f107 031c 	add.w	r3, r7, #28
 80149ee:	4619      	mov	r1, r3
 80149f0:	482f      	ldr	r0, [pc, #188]	; (8014ab0 <MX_GPIO_Init+0x1b4>)
 80149f2:	f001 fdfd 	bl	80165f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blower_Enable_Pin PE1 */
  GPIO_InitStruct.Pin = Blower_Enable_Pin|GPIO_PIN_1;
 80149f6:	2322      	movs	r3, #34	; 0x22
 80149f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80149fa:	2301      	movs	r3, #1
 80149fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149fe:	2300      	movs	r3, #0
 8014a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014a02:	2300      	movs	r3, #0
 8014a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014a06:	f107 031c 	add.w	r3, r7, #28
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	4828      	ldr	r0, [pc, #160]	; (8014ab0 <MX_GPIO_Init+0x1b4>)
 8014a0e:	f001 fdef 	bl	80165f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014a12:	2340      	movs	r3, #64	; 0x40
 8014a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8014a16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8014a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014a20:	f107 031c 	add.w	r3, r7, #28
 8014a24:	4619      	mov	r1, r3
 8014a26:	4822      	ldr	r0, [pc, #136]	; (8014ab0 <MX_GPIO_Init+0x1b4>)
 8014a28:	f001 fde2 	bl	80165f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC_DC_Supply_new_Pin */
  GPIO_InitStruct.Pin = AC_DC_Supply_new_Pin;
 8014a2c:	2380      	movs	r3, #128	; 0x80
 8014a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8014a30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8014a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014a36:	2302      	movs	r3, #2
 8014a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AC_DC_Supply_new_GPIO_Port, &GPIO_InitStruct);
 8014a3a:	f107 031c 	add.w	r3, r7, #28
 8014a3e:	4619      	mov	r1, r3
 8014a40:	481e      	ldr	r0, [pc, #120]	; (8014abc <MX_GPIO_Init+0x1c0>)
 8014a42:	f001 fdd5 	bl	80165f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Expiratory_Valve_Control_Pin Nebuliser_Motor_Control_Pin */
  GPIO_InitStruct.Pin = Expiratory_Valve_Control_Pin|Nebuliser_Motor_Control_Pin;
 8014a46:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8014a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014a4c:	2301      	movs	r3, #1
 8014a4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a50:	2300      	movs	r3, #0
 8014a52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014a54:	2300      	movs	r3, #0
 8014a56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014a58:	f107 031c 	add.w	r3, r7, #28
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	4815      	ldr	r0, [pc, #84]	; (8014ab4 <MX_GPIO_Init+0x1b8>)
 8014a60:	f001 fdc6 	bl	80165f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD1 PD3 PD4
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8014a64:	f248 037a 	movw	r3, #32890	; 0x807a
 8014a68:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014a72:	2300      	movs	r3, #0
 8014a74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014a76:	f107 031c 	add.w	r3, r7, #28
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	480e      	ldr	r0, [pc, #56]	; (8014ab8 <MX_GPIO_Init+0x1bc>)
 8014a7e:	f001 fdb7 	bl	80165f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8014a82:	2200      	movs	r2, #0
 8014a84:	2105      	movs	r1, #5
 8014a86:	2008      	movs	r0, #8
 8014a88:	f001 f854 	bl	8015b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8014a8c:	2008      	movs	r0, #8
 8014a8e:	f001 f86d 	bl	8015b6c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8014a92:	2200      	movs	r2, #0
 8014a94:	2105      	movs	r1, #5
 8014a96:	2017      	movs	r0, #23
 8014a98:	f001 f84c 	bl	8015b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8014a9c:	2017      	movs	r0, #23
 8014a9e:	f001 f865 	bl	8015b6c <HAL_NVIC_EnableIRQ>

}
 8014aa2:	bf00      	nop
 8014aa4:	3730      	adds	r7, #48	; 0x30
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}
 8014aaa:	bf00      	nop
 8014aac:	40023800 	.word	0x40023800
 8014ab0:	40021000 	.word	0x40021000
 8014ab4:	40020400 	.word	0x40020400
 8014ab8:	40020c00 	.word	0x40020c00
 8014abc:	40020000 	.word	0x40020000

08014ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	4a04      	ldr	r2, [pc, #16]	; (8014ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8014ace:	4293      	cmp	r3, r2
 8014ad0:	d101      	bne.n	8014ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8014ad2:	f000 fb45 	bl	8015160 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8014ad6:	bf00      	nop
 8014ad8:	3708      	adds	r7, #8
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}
 8014ade:	bf00      	nop
 8014ae0:	40001000 	.word	0x40001000

08014ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8014ae8:	b672      	cpsid	i
}
 8014aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8014aec:	e7fe      	b.n	8014aec <Error_Handler+0x8>
	...

08014af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014af6:	2300      	movs	r3, #0
 8014af8:	607b      	str	r3, [r7, #4]
 8014afa:	4b12      	ldr	r3, [pc, #72]	; (8014b44 <HAL_MspInit+0x54>)
 8014afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014afe:	4a11      	ldr	r2, [pc, #68]	; (8014b44 <HAL_MspInit+0x54>)
 8014b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014b04:	6453      	str	r3, [r2, #68]	; 0x44
 8014b06:	4b0f      	ldr	r3, [pc, #60]	; (8014b44 <HAL_MspInit+0x54>)
 8014b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014b0e:	607b      	str	r3, [r7, #4]
 8014b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8014b12:	2300      	movs	r3, #0
 8014b14:	603b      	str	r3, [r7, #0]
 8014b16:	4b0b      	ldr	r3, [pc, #44]	; (8014b44 <HAL_MspInit+0x54>)
 8014b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b1a:	4a0a      	ldr	r2, [pc, #40]	; (8014b44 <HAL_MspInit+0x54>)
 8014b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b20:	6413      	str	r3, [r2, #64]	; 0x40
 8014b22:	4b08      	ldr	r3, [pc, #32]	; (8014b44 <HAL_MspInit+0x54>)
 8014b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014b2a:	603b      	str	r3, [r7, #0]
 8014b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8014b2e:	2200      	movs	r2, #0
 8014b30:	210f      	movs	r1, #15
 8014b32:	f06f 0001 	mvn.w	r0, #1
 8014b36:	f000 fffd 	bl	8015b34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014b3a:	bf00      	nop
 8014b3c:	3708      	adds	r7, #8
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	40023800 	.word	0x40023800

08014b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b08a      	sub	sp, #40	; 0x28
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b50:	f107 0314 	add.w	r3, r7, #20
 8014b54:	2200      	movs	r2, #0
 8014b56:	601a      	str	r2, [r3, #0]
 8014b58:	605a      	str	r2, [r3, #4]
 8014b5a:	609a      	str	r2, [r3, #8]
 8014b5c:	60da      	str	r2, [r3, #12]
 8014b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	4a3c      	ldr	r2, [pc, #240]	; (8014c58 <HAL_ADC_MspInit+0x110>)
 8014b66:	4293      	cmp	r3, r2
 8014b68:	d171      	bne.n	8014c4e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	613b      	str	r3, [r7, #16]
 8014b6e:	4b3b      	ldr	r3, [pc, #236]	; (8014c5c <HAL_ADC_MspInit+0x114>)
 8014b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b72:	4a3a      	ldr	r2, [pc, #232]	; (8014c5c <HAL_ADC_MspInit+0x114>)
 8014b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b78:	6453      	str	r3, [r2, #68]	; 0x44
 8014b7a:	4b38      	ldr	r3, [pc, #224]	; (8014c5c <HAL_ADC_MspInit+0x114>)
 8014b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b82:	613b      	str	r3, [r7, #16]
 8014b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b86:	2300      	movs	r3, #0
 8014b88:	60fb      	str	r3, [r7, #12]
 8014b8a:	4b34      	ldr	r3, [pc, #208]	; (8014c5c <HAL_ADC_MspInit+0x114>)
 8014b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b8e:	4a33      	ldr	r2, [pc, #204]	; (8014c5c <HAL_ADC_MspInit+0x114>)
 8014b90:	f043 0301 	orr.w	r3, r3, #1
 8014b94:	6313      	str	r3, [r2, #48]	; 0x30
 8014b96:	4b31      	ldr	r3, [pc, #196]	; (8014c5c <HAL_ADC_MspInit+0x114>)
 8014b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b9a:	f003 0301 	and.w	r3, r3, #1
 8014b9e:	60fb      	str	r3, [r7, #12]
 8014ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	60bb      	str	r3, [r7, #8]
 8014ba6:	4b2d      	ldr	r3, [pc, #180]	; (8014c5c <HAL_ADC_MspInit+0x114>)
 8014ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014baa:	4a2c      	ldr	r2, [pc, #176]	; (8014c5c <HAL_ADC_MspInit+0x114>)
 8014bac:	f043 0304 	orr.w	r3, r3, #4
 8014bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8014bb2:	4b2a      	ldr	r3, [pc, #168]	; (8014c5c <HAL_ADC_MspInit+0x114>)
 8014bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bb6:	f003 0304 	and.w	r3, r3, #4
 8014bba:	60bb      	str	r3, [r7, #8]
 8014bbc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA6     ------> ADC1_IN6
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Pressure_Sensor_Pin|Battery_Voltage_Read_New_Pin;
 8014bbe:	2348      	movs	r3, #72	; 0x48
 8014bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014bc2:	2303      	movs	r3, #3
 8014bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014bca:	f107 0314 	add.w	r3, r7, #20
 8014bce:	4619      	mov	r1, r3
 8014bd0:	4823      	ldr	r0, [pc, #140]	; (8014c60 <HAL_ADC_MspInit+0x118>)
 8014bd2:	f001 fd0d 	bl	80165f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_Voltage_Read_Pin;
 8014bd6:	2320      	movs	r3, #32
 8014bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014bda:	2303      	movs	r3, #3
 8014bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bde:	2300      	movs	r3, #0
 8014be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_Voltage_Read_GPIO_Port, &GPIO_InitStruct);
 8014be2:	f107 0314 	add.w	r3, r7, #20
 8014be6:	4619      	mov	r1, r3
 8014be8:	481e      	ldr	r0, [pc, #120]	; (8014c64 <HAL_ADC_MspInit+0x11c>)
 8014bea:	f001 fd01 	bl	80165f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8014bee:	4b1e      	ldr	r3, [pc, #120]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014bf0:	4a1e      	ldr	r2, [pc, #120]	; (8014c6c <HAL_ADC_MspInit+0x124>)
 8014bf2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8014bf4:	4b1c      	ldr	r3, [pc, #112]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014bfa:	4b1b      	ldr	r3, [pc, #108]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014c00:	4b19      	ldr	r3, [pc, #100]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014c02:	2200      	movs	r2, #0
 8014c04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8014c06:	4b18      	ldr	r3, [pc, #96]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014c0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014c0e:	4b16      	ldr	r3, [pc, #88]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014c16:	4b14      	ldr	r3, [pc, #80]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014c18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014c1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014c1e:	4b12      	ldr	r3, [pc, #72]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8014c26:	4b10      	ldr	r3, [pc, #64]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014c28:	2200      	movs	r2, #0
 8014c2a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014c2c:	4b0e      	ldr	r3, [pc, #56]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014c2e:	2200      	movs	r2, #0
 8014c30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8014c32:	480d      	ldr	r0, [pc, #52]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014c34:	f001 f8da 	bl	8015dec <HAL_DMA_Init>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d001      	beq.n	8014c42 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8014c3e:	f7ff ff51 	bl	8014ae4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	4a08      	ldr	r2, [pc, #32]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014c46:	639a      	str	r2, [r3, #56]	; 0x38
 8014c48:	4a07      	ldr	r2, [pc, #28]	; (8014c68 <HAL_ADC_MspInit+0x120>)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8014c4e:	bf00      	nop
 8014c50:	3728      	adds	r7, #40	; 0x28
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop
 8014c58:	40012000 	.word	0x40012000
 8014c5c:	40023800 	.word	0x40023800
 8014c60:	40020000 	.word	0x40020000
 8014c64:	40020800 	.word	0x40020800
 8014c68:	20012904 	.word	0x20012904
 8014c6c:	40026410 	.word	0x40026410

08014c70 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b08a      	sub	sp, #40	; 0x28
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014c78:	f107 0314 	add.w	r3, r7, #20
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	601a      	str	r2, [r3, #0]
 8014c80:	605a      	str	r2, [r3, #4]
 8014c82:	609a      	str	r2, [r3, #8]
 8014c84:	60da      	str	r2, [r3, #12]
 8014c86:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	4a1b      	ldr	r2, [pc, #108]	; (8014cfc <HAL_DAC_MspInit+0x8c>)
 8014c8e:	4293      	cmp	r3, r2
 8014c90:	d12f      	bne.n	8014cf2 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8014c92:	2300      	movs	r3, #0
 8014c94:	613b      	str	r3, [r7, #16]
 8014c96:	4b1a      	ldr	r3, [pc, #104]	; (8014d00 <HAL_DAC_MspInit+0x90>)
 8014c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c9a:	4a19      	ldr	r2, [pc, #100]	; (8014d00 <HAL_DAC_MspInit+0x90>)
 8014c9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8014ca2:	4b17      	ldr	r3, [pc, #92]	; (8014d00 <HAL_DAC_MspInit+0x90>)
 8014ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014caa:	613b      	str	r3, [r7, #16]
 8014cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014cae:	2300      	movs	r3, #0
 8014cb0:	60fb      	str	r3, [r7, #12]
 8014cb2:	4b13      	ldr	r3, [pc, #76]	; (8014d00 <HAL_DAC_MspInit+0x90>)
 8014cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cb6:	4a12      	ldr	r2, [pc, #72]	; (8014d00 <HAL_DAC_MspInit+0x90>)
 8014cb8:	f043 0301 	orr.w	r3, r3, #1
 8014cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8014cbe:	4b10      	ldr	r3, [pc, #64]	; (8014d00 <HAL_DAC_MspInit+0x90>)
 8014cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cc2:	f003 0301 	and.w	r3, r3, #1
 8014cc6:	60fb      	str	r3, [r7, #12]
 8014cc8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Blower_Signal_Pin|Propotional_valve_signal_Pin;
 8014cca:	2330      	movs	r3, #48	; 0x30
 8014ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014cce:	2303      	movs	r3, #3
 8014cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014cd6:	f107 0314 	add.w	r3, r7, #20
 8014cda:	4619      	mov	r1, r3
 8014cdc:	4809      	ldr	r0, [pc, #36]	; (8014d04 <HAL_DAC_MspInit+0x94>)
 8014cde:	f001 fc87 	bl	80165f0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	210f      	movs	r1, #15
 8014ce6:	2036      	movs	r0, #54	; 0x36
 8014ce8:	f000 ff24 	bl	8015b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8014cec:	2036      	movs	r0, #54	; 0x36
 8014cee:	f000 ff3d 	bl	8015b6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8014cf2:	bf00      	nop
 8014cf4:	3728      	adds	r7, #40	; 0x28
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	40007400 	.word	0x40007400
 8014d00:	40023800 	.word	0x40023800
 8014d04:	40020000 	.word	0x40020000

08014d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b08e      	sub	sp, #56	; 0x38
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014d14:	2200      	movs	r2, #0
 8014d16:	601a      	str	r2, [r3, #0]
 8014d18:	605a      	str	r2, [r3, #4]
 8014d1a:	609a      	str	r2, [r3, #8]
 8014d1c:	60da      	str	r2, [r3, #12]
 8014d1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	4a5b      	ldr	r2, [pc, #364]	; (8014e94 <HAL_I2C_MspInit+0x18c>)
 8014d26:	4293      	cmp	r3, r2
 8014d28:	d12c      	bne.n	8014d84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	623b      	str	r3, [r7, #32]
 8014d2e:	4b5a      	ldr	r3, [pc, #360]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d32:	4a59      	ldr	r2, [pc, #356]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014d34:	f043 0302 	orr.w	r3, r3, #2
 8014d38:	6313      	str	r3, [r2, #48]	; 0x30
 8014d3a:	4b57      	ldr	r3, [pc, #348]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d3e:	f003 0302 	and.w	r3, r3, #2
 8014d42:	623b      	str	r3, [r7, #32]
 8014d44:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8014d46:	23c0      	movs	r3, #192	; 0xc0
 8014d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014d4a:	2312      	movs	r3, #18
 8014d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d4e:	2300      	movs	r3, #0
 8014d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d52:	2303      	movs	r3, #3
 8014d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8014d56:	2304      	movs	r3, #4
 8014d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014d5e:	4619      	mov	r1, r3
 8014d60:	484e      	ldr	r0, [pc, #312]	; (8014e9c <HAL_I2C_MspInit+0x194>)
 8014d62:	f001 fc45 	bl	80165f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8014d66:	2300      	movs	r3, #0
 8014d68:	61fb      	str	r3, [r7, #28]
 8014d6a:	4b4b      	ldr	r3, [pc, #300]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d6e:	4a4a      	ldr	r2, [pc, #296]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014d74:	6413      	str	r3, [r2, #64]	; 0x40
 8014d76:	4b48      	ldr	r3, [pc, #288]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014d7e:	61fb      	str	r3, [r7, #28]
 8014d80:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8014d82:	e083      	b.n	8014e8c <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C2)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	4a45      	ldr	r2, [pc, #276]	; (8014ea0 <HAL_I2C_MspInit+0x198>)
 8014d8a:	4293      	cmp	r3, r2
 8014d8c:	d12d      	bne.n	8014dea <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014d8e:	2300      	movs	r3, #0
 8014d90:	61bb      	str	r3, [r7, #24]
 8014d92:	4b41      	ldr	r3, [pc, #260]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d96:	4a40      	ldr	r2, [pc, #256]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014d98:	f043 0302 	orr.w	r3, r3, #2
 8014d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8014d9e:	4b3e      	ldr	r3, [pc, #248]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014da2:	f003 0302 	and.w	r3, r3, #2
 8014da6:	61bb      	str	r3, [r7, #24]
 8014da8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ADS1115_SCL_Pin|ADS1115_SDA_Pin;
 8014daa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8014dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014db0:	2312      	movs	r3, #18
 8014db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014db4:	2300      	movs	r3, #0
 8014db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014db8:	2303      	movs	r3, #3
 8014dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8014dbc:	2304      	movs	r3, #4
 8014dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014dc4:	4619      	mov	r1, r3
 8014dc6:	4835      	ldr	r0, [pc, #212]	; (8014e9c <HAL_I2C_MspInit+0x194>)
 8014dc8:	f001 fc12 	bl	80165f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8014dcc:	2300      	movs	r3, #0
 8014dce:	617b      	str	r3, [r7, #20]
 8014dd0:	4b31      	ldr	r3, [pc, #196]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dd4:	4a30      	ldr	r2, [pc, #192]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8014dda:	6413      	str	r3, [r2, #64]	; 0x40
 8014ddc:	4b2e      	ldr	r3, [pc, #184]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014de4:	617b      	str	r3, [r7, #20]
 8014de6:	697b      	ldr	r3, [r7, #20]
}
 8014de8:	e050      	b.n	8014e8c <HAL_I2C_MspInit+0x184>
  else if(hi2c->Instance==I2C3)
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	4a2d      	ldr	r2, [pc, #180]	; (8014ea4 <HAL_I2C_MspInit+0x19c>)
 8014df0:	4293      	cmp	r3, r2
 8014df2:	d14b      	bne.n	8014e8c <HAL_I2C_MspInit+0x184>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014df4:	2300      	movs	r3, #0
 8014df6:	613b      	str	r3, [r7, #16]
 8014df8:	4b27      	ldr	r3, [pc, #156]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dfc:	4a26      	ldr	r2, [pc, #152]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014dfe:	f043 0304 	orr.w	r3, r3, #4
 8014e02:	6313      	str	r3, [r2, #48]	; 0x30
 8014e04:	4b24      	ldr	r3, [pc, #144]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e08:	f003 0304 	and.w	r3, r3, #4
 8014e0c:	613b      	str	r3, [r7, #16]
 8014e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e10:	2300      	movs	r3, #0
 8014e12:	60fb      	str	r3, [r7, #12]
 8014e14:	4b20      	ldr	r3, [pc, #128]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e18:	4a1f      	ldr	r2, [pc, #124]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014e1a:	f043 0301 	orr.w	r3, r3, #1
 8014e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8014e20:	4b1d      	ldr	r3, [pc, #116]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e24:	f003 0301 	and.w	r3, r3, #1
 8014e28:	60fb      	str	r3, [r7, #12]
 8014e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8014e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014e32:	2312      	movs	r3, #18
 8014e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e36:	2300      	movs	r3, #0
 8014e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014e3a:	2303      	movs	r3, #3
 8014e3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8014e3e:	2304      	movs	r3, #4
 8014e40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014e46:	4619      	mov	r1, r3
 8014e48:	4817      	ldr	r0, [pc, #92]	; (8014ea8 <HAL_I2C_MspInit+0x1a0>)
 8014e4a:	f001 fbd1 	bl	80165f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8014e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014e54:	2312      	movs	r3, #18
 8014e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e58:	2300      	movs	r3, #0
 8014e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014e5c:	2303      	movs	r3, #3
 8014e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8014e60:	2304      	movs	r3, #4
 8014e62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014e68:	4619      	mov	r1, r3
 8014e6a:	4810      	ldr	r0, [pc, #64]	; (8014eac <HAL_I2C_MspInit+0x1a4>)
 8014e6c:	f001 fbc0 	bl	80165f0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8014e70:	2300      	movs	r3, #0
 8014e72:	60bb      	str	r3, [r7, #8]
 8014e74:	4b08      	ldr	r3, [pc, #32]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e78:	4a07      	ldr	r2, [pc, #28]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014e7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8014e80:	4b05      	ldr	r3, [pc, #20]	; (8014e98 <HAL_I2C_MspInit+0x190>)
 8014e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014e88:	60bb      	str	r3, [r7, #8]
 8014e8a:	68bb      	ldr	r3, [r7, #8]
}
 8014e8c:	bf00      	nop
 8014e8e:	3738      	adds	r7, #56	; 0x38
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}
 8014e94:	40005400 	.word	0x40005400
 8014e98:	40023800 	.word	0x40023800
 8014e9c:	40020400 	.word	0x40020400
 8014ea0:	40005800 	.word	0x40005800
 8014ea4:	40005c00 	.word	0x40005c00
 8014ea8:	40020800 	.word	0x40020800
 8014eac:	40020000 	.word	0x40020000

08014eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b08a      	sub	sp, #40	; 0x28
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014eb8:	f107 0314 	add.w	r3, r7, #20
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	601a      	str	r2, [r3, #0]
 8014ec0:	605a      	str	r2, [r3, #4]
 8014ec2:	609a      	str	r2, [r3, #8]
 8014ec4:	60da      	str	r2, [r3, #12]
 8014ec6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	4a1d      	ldr	r2, [pc, #116]	; (8014f44 <HAL_UART_MspInit+0x94>)
 8014ece:	4293      	cmp	r3, r2
 8014ed0:	d133      	bne.n	8014f3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	613b      	str	r3, [r7, #16]
 8014ed6:	4b1c      	ldr	r3, [pc, #112]	; (8014f48 <HAL_UART_MspInit+0x98>)
 8014ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014eda:	4a1b      	ldr	r2, [pc, #108]	; (8014f48 <HAL_UART_MspInit+0x98>)
 8014edc:	f043 0320 	orr.w	r3, r3, #32
 8014ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8014ee2:	4b19      	ldr	r3, [pc, #100]	; (8014f48 <HAL_UART_MspInit+0x98>)
 8014ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ee6:	f003 0320 	and.w	r3, r3, #32
 8014eea:	613b      	str	r3, [r7, #16]
 8014eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014eee:	2300      	movs	r3, #0
 8014ef0:	60fb      	str	r3, [r7, #12]
 8014ef2:	4b15      	ldr	r3, [pc, #84]	; (8014f48 <HAL_UART_MspInit+0x98>)
 8014ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ef6:	4a14      	ldr	r2, [pc, #80]	; (8014f48 <HAL_UART_MspInit+0x98>)
 8014ef8:	f043 0304 	orr.w	r3, r3, #4
 8014efc:	6313      	str	r3, [r2, #48]	; 0x30
 8014efe:	4b12      	ldr	r3, [pc, #72]	; (8014f48 <HAL_UART_MspInit+0x98>)
 8014f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f02:	f003 0304 	and.w	r3, r3, #4
 8014f06:	60fb      	str	r3, [r7, #12]
 8014f08:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_Tx_Pin|Blutooth_Rx_Pin;
 8014f0a:	23c0      	movs	r3, #192	; 0xc0
 8014f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f0e:	2302      	movs	r3, #2
 8014f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f12:	2300      	movs	r3, #0
 8014f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f16:	2303      	movs	r3, #3
 8014f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8014f1a:	2308      	movs	r3, #8
 8014f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014f1e:	f107 0314 	add.w	r3, r7, #20
 8014f22:	4619      	mov	r1, r3
 8014f24:	4809      	ldr	r0, [pc, #36]	; (8014f4c <HAL_UART_MspInit+0x9c>)
 8014f26:	f001 fb63 	bl	80165f0 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	2105      	movs	r1, #5
 8014f2e:	2047      	movs	r0, #71	; 0x47
 8014f30:	f000 fe00 	bl	8015b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8014f34:	2047      	movs	r0, #71	; 0x47
 8014f36:	f000 fe19 	bl	8015b6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8014f3a:	bf00      	nop
 8014f3c:	3728      	adds	r7, #40	; 0x28
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bd80      	pop	{r7, pc}
 8014f42:	bf00      	nop
 8014f44:	40011400 	.word	0x40011400
 8014f48:	40023800 	.word	0x40023800
 8014f4c:	40020800 	.word	0x40020800

08014f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b08c      	sub	sp, #48	; 0x30
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8014f60:	2200      	movs	r2, #0
 8014f62:	6879      	ldr	r1, [r7, #4]
 8014f64:	2036      	movs	r0, #54	; 0x36
 8014f66:	f000 fde5 	bl	8015b34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8014f6a:	2036      	movs	r0, #54	; 0x36
 8014f6c:	f000 fdfe 	bl	8015b6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8014f70:	2300      	movs	r3, #0
 8014f72:	60fb      	str	r3, [r7, #12]
 8014f74:	4b1f      	ldr	r3, [pc, #124]	; (8014ff4 <HAL_InitTick+0xa4>)
 8014f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f78:	4a1e      	ldr	r2, [pc, #120]	; (8014ff4 <HAL_InitTick+0xa4>)
 8014f7a:	f043 0310 	orr.w	r3, r3, #16
 8014f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8014f80:	4b1c      	ldr	r3, [pc, #112]	; (8014ff4 <HAL_InitTick+0xa4>)
 8014f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f84:	f003 0310 	and.w	r3, r3, #16
 8014f88:	60fb      	str	r3, [r7, #12]
 8014f8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8014f8c:	f107 0210 	add.w	r2, r7, #16
 8014f90:	f107 0314 	add.w	r3, r7, #20
 8014f94:	4611      	mov	r1, r2
 8014f96:	4618      	mov	r0, r3
 8014f98:	f003 fa52 	bl	8018440 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8014f9c:	f003 fa28 	bl	80183f0 <HAL_RCC_GetPCLK1Freq>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	005b      	lsls	r3, r3, #1
 8014fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8014fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa8:	4a13      	ldr	r2, [pc, #76]	; (8014ff8 <HAL_InitTick+0xa8>)
 8014faa:	fba2 2303 	umull	r2, r3, r2, r3
 8014fae:	0c9b      	lsrs	r3, r3, #18
 8014fb0:	3b01      	subs	r3, #1
 8014fb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8014fb4:	4b11      	ldr	r3, [pc, #68]	; (8014ffc <HAL_InitTick+0xac>)
 8014fb6:	4a12      	ldr	r2, [pc, #72]	; (8015000 <HAL_InitTick+0xb0>)
 8014fb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8014fba:	4b10      	ldr	r3, [pc, #64]	; (8014ffc <HAL_InitTick+0xac>)
 8014fbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8014fc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8014fc2:	4a0e      	ldr	r2, [pc, #56]	; (8014ffc <HAL_InitTick+0xac>)
 8014fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8014fc8:	4b0c      	ldr	r3, [pc, #48]	; (8014ffc <HAL_InitTick+0xac>)
 8014fca:	2200      	movs	r2, #0
 8014fcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014fce:	4b0b      	ldr	r3, [pc, #44]	; (8014ffc <HAL_InitTick+0xac>)
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8014fd4:	4809      	ldr	r0, [pc, #36]	; (8014ffc <HAL_InitTick+0xac>)
 8014fd6:	f003 fa65 	bl	80184a4 <HAL_TIM_Base_Init>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d104      	bne.n	8014fea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8014fe0:	4806      	ldr	r0, [pc, #24]	; (8014ffc <HAL_InitTick+0xac>)
 8014fe2:	f003 fab9 	bl	8018558 <HAL_TIM_Base_Start_IT>
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	e000      	b.n	8014fec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8014fea:	2301      	movs	r3, #1
}
 8014fec:	4618      	mov	r0, r3
 8014fee:	3730      	adds	r7, #48	; 0x30
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}
 8014ff4:	40023800 	.word	0x40023800
 8014ff8:	431bde83 	.word	0x431bde83
 8014ffc:	20012df8 	.word	0x20012df8
 8015000:	40001000 	.word	0x40001000

08015004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015004:	b480      	push	{r7}
 8015006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8015008:	e7fe      	b.n	8015008 <NMI_Handler+0x4>

0801500a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801500a:	b480      	push	{r7}
 801500c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801500e:	e7fe      	b.n	801500e <HardFault_Handler+0x4>

08015010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015010:	b480      	push	{r7}
 8015012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015014:	e7fe      	b.n	8015014 <MemManage_Handler+0x4>

08015016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015016:	b480      	push	{r7}
 8015018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801501a:	e7fe      	b.n	801501a <BusFault_Handler+0x4>

0801501c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801501c:	b480      	push	{r7}
 801501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015020:	e7fe      	b.n	8015020 <UsageFault_Handler+0x4>

08015022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015022:	b480      	push	{r7}
 8015024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015026:	bf00      	nop
 8015028:	46bd      	mov	sp, r7
 801502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502e:	4770      	bx	lr

08015030 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8015034:	2004      	movs	r0, #4
 8015036:	f001 fca9 	bl	801698c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 801503a:	bf00      	nop
 801503c:	bd80      	pop	{r7, pc}

0801503e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 801503e:	b580      	push	{r7, lr}
 8015040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Battery_Voltage_Read_New_Pin);
 8015042:	2040      	movs	r0, #64	; 0x40
 8015044:	f001 fca2 	bl	801698c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(AC_DC_Supply_new_Pin);
 8015048:	2080      	movs	r0, #128	; 0x80
 801504a:	f001 fc9f 	bl	801698c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 801504e:	bf00      	nop
 8015050:	bd80      	pop	{r7, pc}
	...

08015054 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8015058:	4b06      	ldr	r3, [pc, #24]	; (8015074 <TIM6_DAC_IRQHandler+0x20>)
 801505a:	791b      	ldrb	r3, [r3, #4]
 801505c:	b2db      	uxtb	r3, r3
 801505e:	2b00      	cmp	r3, #0
 8015060:	d002      	beq.n	8015068 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8015062:	4804      	ldr	r0, [pc, #16]	; (8015074 <TIM6_DAC_IRQHandler+0x20>)
 8015064:	f000 fe04 	bl	8015c70 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8015068:	4803      	ldr	r0, [pc, #12]	; (8015078 <TIM6_DAC_IRQHandler+0x24>)
 801506a:	f003 fcbb 	bl	80189e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801506e:	bf00      	nop
 8015070:	bd80      	pop	{r7, pc}
 8015072:	bf00      	nop
 8015074:	2001284c 	.word	0x2001284c
 8015078:	20012df8 	.word	0x20012df8

0801507c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8015080:	4802      	ldr	r0, [pc, #8]	; (801508c <DMA2_Stream0_IRQHandler+0x10>)
 8015082:	f001 f84b 	bl	801611c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8015086:	bf00      	nop
 8015088:	bd80      	pop	{r7, pc}
 801508a:	bf00      	nop
 801508c:	20012904 	.word	0x20012904

08015090 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8015094:	4802      	ldr	r0, [pc, #8]	; (80150a0 <USART6_IRQHandler+0x10>)
 8015096:	f004 f803 	bl	80190a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 801509a:	bf00      	nop
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	20012a40 	.word	0x20012a40

080150a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80150a4:	b480      	push	{r7}
 80150a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80150a8:	4b06      	ldr	r3, [pc, #24]	; (80150c4 <SystemInit+0x20>)
 80150aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80150ae:	4a05      	ldr	r2, [pc, #20]	; (80150c4 <SystemInit+0x20>)
 80150b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80150b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80150b8:	bf00      	nop
 80150ba:	46bd      	mov	sp, r7
 80150bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c0:	4770      	bx	lr
 80150c2:	bf00      	nop
 80150c4:	e000ed00 	.word	0xe000ed00

080150c8 <Reset_Handler>:
 80150c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015100 <LoopFillZerobss+0x12>
 80150cc:	480d      	ldr	r0, [pc, #52]	; (8015104 <LoopFillZerobss+0x16>)
 80150ce:	490e      	ldr	r1, [pc, #56]	; (8015108 <LoopFillZerobss+0x1a>)
 80150d0:	4a0e      	ldr	r2, [pc, #56]	; (801510c <LoopFillZerobss+0x1e>)
 80150d2:	2300      	movs	r3, #0
 80150d4:	e002      	b.n	80150dc <LoopCopyDataInit>

080150d6 <CopyDataInit>:
 80150d6:	58d4      	ldr	r4, [r2, r3]
 80150d8:	50c4      	str	r4, [r0, r3]
 80150da:	3304      	adds	r3, #4

080150dc <LoopCopyDataInit>:
 80150dc:	18c4      	adds	r4, r0, r3
 80150de:	428c      	cmp	r4, r1
 80150e0:	d3f9      	bcc.n	80150d6 <CopyDataInit>
 80150e2:	4a0b      	ldr	r2, [pc, #44]	; (8015110 <LoopFillZerobss+0x22>)
 80150e4:	4c0b      	ldr	r4, [pc, #44]	; (8015114 <LoopFillZerobss+0x26>)
 80150e6:	2300      	movs	r3, #0
 80150e8:	e001      	b.n	80150ee <LoopFillZerobss>

080150ea <FillZerobss>:
 80150ea:	6013      	str	r3, [r2, #0]
 80150ec:	3204      	adds	r2, #4

080150ee <LoopFillZerobss>:
 80150ee:	42a2      	cmp	r2, r4
 80150f0:	d3fb      	bcc.n	80150ea <FillZerobss>
 80150f2:	f7ff ffd7 	bl	80150a4 <SystemInit>
 80150f6:	f007 fed5 	bl	801cea4 <__libc_init_array>
 80150fa:	f7ff fa31 	bl	8014560 <main>
 80150fe:	4770      	bx	lr
 8015100:	20020000 	.word	0x20020000
 8015104:	20000000 	.word	0x20000000
 8015108:	20000070 	.word	0x20000070
 801510c:	0801d294 	.word	0x0801d294
 8015110:	20000070 	.word	0x20000070
 8015114:	20012e84 	.word	0x20012e84

08015118 <ADC_IRQHandler>:
 8015118:	e7fe      	b.n	8015118 <ADC_IRQHandler>
	...

0801511c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015120:	4b0e      	ldr	r3, [pc, #56]	; (801515c <HAL_Init+0x40>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	4a0d      	ldr	r2, [pc, #52]	; (801515c <HAL_Init+0x40>)
 8015126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801512a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801512c:	4b0b      	ldr	r3, [pc, #44]	; (801515c <HAL_Init+0x40>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	4a0a      	ldr	r2, [pc, #40]	; (801515c <HAL_Init+0x40>)
 8015132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015138:	4b08      	ldr	r3, [pc, #32]	; (801515c <HAL_Init+0x40>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	4a07      	ldr	r2, [pc, #28]	; (801515c <HAL_Init+0x40>)
 801513e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015144:	2003      	movs	r0, #3
 8015146:	f000 fcea 	bl	8015b1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801514a:	200f      	movs	r0, #15
 801514c:	f7ff ff00 	bl	8014f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015150:	f7ff fcce 	bl	8014af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015154:	2300      	movs	r3, #0
}
 8015156:	4618      	mov	r0, r3
 8015158:	bd80      	pop	{r7, pc}
 801515a:	bf00      	nop
 801515c:	40023c00 	.word	0x40023c00

08015160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015160:	b480      	push	{r7}
 8015162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015164:	4b06      	ldr	r3, [pc, #24]	; (8015180 <HAL_IncTick+0x20>)
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	461a      	mov	r2, r3
 801516a:	4b06      	ldr	r3, [pc, #24]	; (8015184 <HAL_IncTick+0x24>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	4413      	add	r3, r2
 8015170:	4a04      	ldr	r2, [pc, #16]	; (8015184 <HAL_IncTick+0x24>)
 8015172:	6013      	str	r3, [r2, #0]
}
 8015174:	bf00      	nop
 8015176:	46bd      	mov	sp, r7
 8015178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517c:	4770      	bx	lr
 801517e:	bf00      	nop
 8015180:	20000068 	.word	0x20000068
 8015184:	20012e40 	.word	0x20012e40

08015188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015188:	b480      	push	{r7}
 801518a:	af00      	add	r7, sp, #0
  return uwTick;
 801518c:	4b03      	ldr	r3, [pc, #12]	; (801519c <HAL_GetTick+0x14>)
 801518e:	681b      	ldr	r3, [r3, #0]
}
 8015190:	4618      	mov	r0, r3
 8015192:	46bd      	mov	sp, r7
 8015194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015198:	4770      	bx	lr
 801519a:	bf00      	nop
 801519c:	20012e40 	.word	0x20012e40

080151a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b084      	sub	sp, #16
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80151a8:	2300      	movs	r3, #0
 80151aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d101      	bne.n	80151b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80151b2:	2301      	movs	r3, #1
 80151b4:	e033      	b.n	801521e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d109      	bne.n	80151d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f7ff fcc2 	bl	8014b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2200      	movs	r2, #0
 80151c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2200      	movs	r2, #0
 80151ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151d6:	f003 0310 	and.w	r3, r3, #16
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d118      	bne.n	8015210 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80151e6:	f023 0302 	bic.w	r3, r3, #2
 80151ea:	f043 0202 	orr.w	r2, r3, #2
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80151f2:	6878      	ldr	r0, [r7, #4]
 80151f4:	f000 fa68 	bl	80156c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	2200      	movs	r2, #0
 80151fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015202:	f023 0303 	bic.w	r3, r3, #3
 8015206:	f043 0201 	orr.w	r2, r3, #1
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	641a      	str	r2, [r3, #64]	; 0x40
 801520e:	e001      	b.n	8015214 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8015210:	2301      	movs	r3, #1
 8015212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2200      	movs	r2, #0
 8015218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801521c:	7bfb      	ldrb	r3, [r7, #15]
}
 801521e:	4618      	mov	r0, r3
 8015220:	3710      	adds	r7, #16
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}
	...

08015228 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b086      	sub	sp, #24
 801522c:	af00      	add	r7, sp, #0
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8015234:	2300      	movs	r3, #0
 8015236:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801523e:	2b01      	cmp	r3, #1
 8015240:	d101      	bne.n	8015246 <HAL_ADC_Start_DMA+0x1e>
 8015242:	2302      	movs	r3, #2
 8015244:	e0e9      	b.n	801541a <HAL_ADC_Start_DMA+0x1f2>
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	2201      	movs	r2, #1
 801524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	689b      	ldr	r3, [r3, #8]
 8015254:	f003 0301 	and.w	r3, r3, #1
 8015258:	2b01      	cmp	r3, #1
 801525a:	d018      	beq.n	801528e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	689a      	ldr	r2, [r3, #8]
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	f042 0201 	orr.w	r2, r2, #1
 801526a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801526c:	4b6d      	ldr	r3, [pc, #436]	; (8015424 <HAL_ADC_Start_DMA+0x1fc>)
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	4a6d      	ldr	r2, [pc, #436]	; (8015428 <HAL_ADC_Start_DMA+0x200>)
 8015272:	fba2 2303 	umull	r2, r3, r2, r3
 8015276:	0c9a      	lsrs	r2, r3, #18
 8015278:	4613      	mov	r3, r2
 801527a:	005b      	lsls	r3, r3, #1
 801527c:	4413      	add	r3, r2
 801527e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8015280:	e002      	b.n	8015288 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8015282:	693b      	ldr	r3, [r7, #16]
 8015284:	3b01      	subs	r3, #1
 8015286:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8015288:	693b      	ldr	r3, [r7, #16]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d1f9      	bne.n	8015282 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	689b      	ldr	r3, [r3, #8]
 8015294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801529c:	d107      	bne.n	80152ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	689a      	ldr	r2, [r3, #8]
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80152ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	689b      	ldr	r3, [r3, #8]
 80152b4:	f003 0301 	and.w	r3, r3, #1
 80152b8:	2b01      	cmp	r3, #1
 80152ba:	f040 80a1 	bne.w	8015400 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80152c6:	f023 0301 	bic.w	r3, r3, #1
 80152ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d007      	beq.n	80152f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80152e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80152f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80152fc:	d106      	bne.n	801530c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015302:	f023 0206 	bic.w	r2, r3, #6
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	645a      	str	r2, [r3, #68]	; 0x44
 801530a:	e002      	b.n	8015312 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2200      	movs	r2, #0
 8015310:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	2200      	movs	r2, #0
 8015316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801531a:	4b44      	ldr	r3, [pc, #272]	; (801542c <HAL_ADC_Start_DMA+0x204>)
 801531c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015322:	4a43      	ldr	r2, [pc, #268]	; (8015430 <HAL_ADC_Start_DMA+0x208>)
 8015324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801532a:	4a42      	ldr	r2, [pc, #264]	; (8015434 <HAL_ADC_Start_DMA+0x20c>)
 801532c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015332:	4a41      	ldr	r2, [pc, #260]	; (8015438 <HAL_ADC_Start_DMA+0x210>)
 8015334:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801533e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	685a      	ldr	r2, [r3, #4]
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801534e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	689a      	ldr	r2, [r3, #8]
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801535e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	334c      	adds	r3, #76	; 0x4c
 801536a:	4619      	mov	r1, r3
 801536c:	68ba      	ldr	r2, [r7, #8]
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	f000 fdea 	bl	8015f48 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8015374:	697b      	ldr	r3, [r7, #20]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	f003 031f 	and.w	r3, r3, #31
 801537c:	2b00      	cmp	r3, #0
 801537e:	d12a      	bne.n	80153d6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	4a2d      	ldr	r2, [pc, #180]	; (801543c <HAL_ADC_Start_DMA+0x214>)
 8015386:	4293      	cmp	r3, r2
 8015388:	d015      	beq.n	80153b6 <HAL_ADC_Start_DMA+0x18e>
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4a2c      	ldr	r2, [pc, #176]	; (8015440 <HAL_ADC_Start_DMA+0x218>)
 8015390:	4293      	cmp	r3, r2
 8015392:	d105      	bne.n	80153a0 <HAL_ADC_Start_DMA+0x178>
 8015394:	4b25      	ldr	r3, [pc, #148]	; (801542c <HAL_ADC_Start_DMA+0x204>)
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	f003 031f 	and.w	r3, r3, #31
 801539c:	2b00      	cmp	r3, #0
 801539e:	d00a      	beq.n	80153b6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	4a27      	ldr	r2, [pc, #156]	; (8015444 <HAL_ADC_Start_DMA+0x21c>)
 80153a6:	4293      	cmp	r3, r2
 80153a8:	d136      	bne.n	8015418 <HAL_ADC_Start_DMA+0x1f0>
 80153aa:	4b20      	ldr	r3, [pc, #128]	; (801542c <HAL_ADC_Start_DMA+0x204>)
 80153ac:	685b      	ldr	r3, [r3, #4]
 80153ae:	f003 0310 	and.w	r3, r3, #16
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d130      	bne.n	8015418 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	689b      	ldr	r3, [r3, #8]
 80153bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d129      	bne.n	8015418 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	689a      	ldr	r2, [r3, #8]
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80153d2:	609a      	str	r2, [r3, #8]
 80153d4:	e020      	b.n	8015418 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	4a18      	ldr	r2, [pc, #96]	; (801543c <HAL_ADC_Start_DMA+0x214>)
 80153dc:	4293      	cmp	r3, r2
 80153de:	d11b      	bne.n	8015418 <HAL_ADC_Start_DMA+0x1f0>
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	689b      	ldr	r3, [r3, #8]
 80153e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d114      	bne.n	8015418 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	689a      	ldr	r2, [r3, #8]
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80153fc:	609a      	str	r2, [r3, #8]
 80153fe:	e00b      	b.n	8015418 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015404:	f043 0210 	orr.w	r2, r3, #16
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015410:	f043 0201 	orr.w	r2, r3, #1
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8015418:	2300      	movs	r3, #0
}
 801541a:	4618      	mov	r0, r3
 801541c:	3718      	adds	r7, #24
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	20000060 	.word	0x20000060
 8015428:	431bde83 	.word	0x431bde83
 801542c:	40012300 	.word	0x40012300
 8015430:	080158c1 	.word	0x080158c1
 8015434:	0801597b 	.word	0x0801597b
 8015438:	08015997 	.word	0x08015997
 801543c:	40012000 	.word	0x40012000
 8015440:	40012100 	.word	0x40012100
 8015444:	40012200 	.word	0x40012200

08015448 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8015448:	b480      	push	{r7}
 801544a:	b083      	sub	sp, #12
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8015450:	bf00      	nop
 8015452:	370c      	adds	r7, #12
 8015454:	46bd      	mov	sp, r7
 8015456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545a:	4770      	bx	lr

0801545c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801545c:	b480      	push	{r7}
 801545e:	b083      	sub	sp, #12
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8015464:	bf00      	nop
 8015466:	370c      	adds	r7, #12
 8015468:	46bd      	mov	sp, r7
 801546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546e:	4770      	bx	lr

08015470 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8015470:	b480      	push	{r7}
 8015472:	b083      	sub	sp, #12
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8015478:	bf00      	nop
 801547a:	370c      	adds	r7, #12
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr

08015484 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8015484:	b480      	push	{r7}
 8015486:	b085      	sub	sp, #20
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801548e:	2300      	movs	r3, #0
 8015490:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015498:	2b01      	cmp	r3, #1
 801549a:	d101      	bne.n	80154a0 <HAL_ADC_ConfigChannel+0x1c>
 801549c:	2302      	movs	r3, #2
 801549e:	e105      	b.n	80156ac <HAL_ADC_ConfigChannel+0x228>
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2201      	movs	r2, #1
 80154a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	2b09      	cmp	r3, #9
 80154ae:	d925      	bls.n	80154fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	68d9      	ldr	r1, [r3, #12]
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	461a      	mov	r2, r3
 80154be:	4613      	mov	r3, r2
 80154c0:	005b      	lsls	r3, r3, #1
 80154c2:	4413      	add	r3, r2
 80154c4:	3b1e      	subs	r3, #30
 80154c6:	2207      	movs	r2, #7
 80154c8:	fa02 f303 	lsl.w	r3, r2, r3
 80154cc:	43da      	mvns	r2, r3
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	400a      	ands	r2, r1
 80154d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	68d9      	ldr	r1, [r3, #12]
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	689a      	ldr	r2, [r3, #8]
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	4618      	mov	r0, r3
 80154e8:	4603      	mov	r3, r0
 80154ea:	005b      	lsls	r3, r3, #1
 80154ec:	4403      	add	r3, r0
 80154ee:	3b1e      	subs	r3, #30
 80154f0:	409a      	lsls	r2, r3
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	430a      	orrs	r2, r1
 80154f8:	60da      	str	r2, [r3, #12]
 80154fa:	e022      	b.n	8015542 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	6919      	ldr	r1, [r3, #16]
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	b29b      	uxth	r3, r3
 8015508:	461a      	mov	r2, r3
 801550a:	4613      	mov	r3, r2
 801550c:	005b      	lsls	r3, r3, #1
 801550e:	4413      	add	r3, r2
 8015510:	2207      	movs	r2, #7
 8015512:	fa02 f303 	lsl.w	r3, r2, r3
 8015516:	43da      	mvns	r2, r3
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	400a      	ands	r2, r1
 801551e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	6919      	ldr	r1, [r3, #16]
 8015526:	683b      	ldr	r3, [r7, #0]
 8015528:	689a      	ldr	r2, [r3, #8]
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	b29b      	uxth	r3, r3
 8015530:	4618      	mov	r0, r3
 8015532:	4603      	mov	r3, r0
 8015534:	005b      	lsls	r3, r3, #1
 8015536:	4403      	add	r3, r0
 8015538:	409a      	lsls	r2, r3
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	430a      	orrs	r2, r1
 8015540:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	685b      	ldr	r3, [r3, #4]
 8015546:	2b06      	cmp	r3, #6
 8015548:	d824      	bhi.n	8015594 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	685a      	ldr	r2, [r3, #4]
 8015554:	4613      	mov	r3, r2
 8015556:	009b      	lsls	r3, r3, #2
 8015558:	4413      	add	r3, r2
 801555a:	3b05      	subs	r3, #5
 801555c:	221f      	movs	r2, #31
 801555e:	fa02 f303 	lsl.w	r3, r2, r3
 8015562:	43da      	mvns	r2, r3
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	400a      	ands	r2, r1
 801556a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	b29b      	uxth	r3, r3
 8015578:	4618      	mov	r0, r3
 801557a:	683b      	ldr	r3, [r7, #0]
 801557c:	685a      	ldr	r2, [r3, #4]
 801557e:	4613      	mov	r3, r2
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	4413      	add	r3, r2
 8015584:	3b05      	subs	r3, #5
 8015586:	fa00 f203 	lsl.w	r2, r0, r3
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	430a      	orrs	r2, r1
 8015590:	635a      	str	r2, [r3, #52]	; 0x34
 8015592:	e04c      	b.n	801562e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	2b0c      	cmp	r3, #12
 801559a:	d824      	bhi.n	80155e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	685a      	ldr	r2, [r3, #4]
 80155a6:	4613      	mov	r3, r2
 80155a8:	009b      	lsls	r3, r3, #2
 80155aa:	4413      	add	r3, r2
 80155ac:	3b23      	subs	r3, #35	; 0x23
 80155ae:	221f      	movs	r2, #31
 80155b0:	fa02 f303 	lsl.w	r3, r2, r3
 80155b4:	43da      	mvns	r2, r3
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	400a      	ands	r2, r1
 80155bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80155c4:	683b      	ldr	r3, [r7, #0]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	4618      	mov	r0, r3
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	685a      	ldr	r2, [r3, #4]
 80155d0:	4613      	mov	r3, r2
 80155d2:	009b      	lsls	r3, r3, #2
 80155d4:	4413      	add	r3, r2
 80155d6:	3b23      	subs	r3, #35	; 0x23
 80155d8:	fa00 f203 	lsl.w	r2, r0, r3
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	430a      	orrs	r2, r1
 80155e2:	631a      	str	r2, [r3, #48]	; 0x30
 80155e4:	e023      	b.n	801562e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	685a      	ldr	r2, [r3, #4]
 80155f0:	4613      	mov	r3, r2
 80155f2:	009b      	lsls	r3, r3, #2
 80155f4:	4413      	add	r3, r2
 80155f6:	3b41      	subs	r3, #65	; 0x41
 80155f8:	221f      	movs	r2, #31
 80155fa:	fa02 f303 	lsl.w	r3, r2, r3
 80155fe:	43da      	mvns	r2, r3
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	400a      	ands	r2, r1
 8015606:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	b29b      	uxth	r3, r3
 8015614:	4618      	mov	r0, r3
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	685a      	ldr	r2, [r3, #4]
 801561a:	4613      	mov	r3, r2
 801561c:	009b      	lsls	r3, r3, #2
 801561e:	4413      	add	r3, r2
 8015620:	3b41      	subs	r3, #65	; 0x41
 8015622:	fa00 f203 	lsl.w	r2, r0, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	430a      	orrs	r2, r1
 801562c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801562e:	4b22      	ldr	r3, [pc, #136]	; (80156b8 <HAL_ADC_ConfigChannel+0x234>)
 8015630:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	4a21      	ldr	r2, [pc, #132]	; (80156bc <HAL_ADC_ConfigChannel+0x238>)
 8015638:	4293      	cmp	r3, r2
 801563a:	d109      	bne.n	8015650 <HAL_ADC_ConfigChannel+0x1cc>
 801563c:	683b      	ldr	r3, [r7, #0]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	2b12      	cmp	r3, #18
 8015642:	d105      	bne.n	8015650 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	685b      	ldr	r3, [r3, #4]
 8015648:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	4a19      	ldr	r2, [pc, #100]	; (80156bc <HAL_ADC_ConfigChannel+0x238>)
 8015656:	4293      	cmp	r3, r2
 8015658:	d123      	bne.n	80156a2 <HAL_ADC_ConfigChannel+0x21e>
 801565a:	683b      	ldr	r3, [r7, #0]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	2b10      	cmp	r3, #16
 8015660:	d003      	beq.n	801566a <HAL_ADC_ConfigChannel+0x1e6>
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	2b11      	cmp	r3, #17
 8015668:	d11b      	bne.n	80156a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	2b10      	cmp	r3, #16
 801567c:	d111      	bne.n	80156a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801567e:	4b10      	ldr	r3, [pc, #64]	; (80156c0 <HAL_ADC_ConfigChannel+0x23c>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	4a10      	ldr	r2, [pc, #64]	; (80156c4 <HAL_ADC_ConfigChannel+0x240>)
 8015684:	fba2 2303 	umull	r2, r3, r2, r3
 8015688:	0c9a      	lsrs	r2, r3, #18
 801568a:	4613      	mov	r3, r2
 801568c:	009b      	lsls	r3, r3, #2
 801568e:	4413      	add	r3, r2
 8015690:	005b      	lsls	r3, r3, #1
 8015692:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8015694:	e002      	b.n	801569c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	3b01      	subs	r3, #1
 801569a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d1f9      	bne.n	8015696 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2200      	movs	r2, #0
 80156a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80156aa:	2300      	movs	r3, #0
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	3714      	adds	r7, #20
 80156b0:	46bd      	mov	sp, r7
 80156b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b6:	4770      	bx	lr
 80156b8:	40012300 	.word	0x40012300
 80156bc:	40012000 	.word	0x40012000
 80156c0:	20000060 	.word	0x20000060
 80156c4:	431bde83 	.word	0x431bde83

080156c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80156c8:	b480      	push	{r7}
 80156ca:	b085      	sub	sp, #20
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80156d0:	4b79      	ldr	r3, [pc, #484]	; (80158b8 <ADC_Init+0x1f0>)
 80156d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	685b      	ldr	r3, [r3, #4]
 80156d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	685a      	ldr	r2, [r3, #4]
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	685b      	ldr	r3, [r3, #4]
 80156e8:	431a      	orrs	r2, r3
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	685a      	ldr	r2, [r3, #4]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80156fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	6859      	ldr	r1, [r3, #4]
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	691b      	ldr	r3, [r3, #16]
 8015708:	021a      	lsls	r2, r3, #8
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	430a      	orrs	r2, r1
 8015710:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	685a      	ldr	r2, [r3, #4]
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8015720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	6859      	ldr	r1, [r3, #4]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	689a      	ldr	r2, [r3, #8]
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	430a      	orrs	r2, r1
 8015732:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	689a      	ldr	r2, [r3, #8]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	6899      	ldr	r1, [r3, #8]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	68da      	ldr	r2, [r3, #12]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	430a      	orrs	r2, r1
 8015754:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801575a:	4a58      	ldr	r2, [pc, #352]	; (80158bc <ADC_Init+0x1f4>)
 801575c:	4293      	cmp	r3, r2
 801575e:	d022      	beq.n	80157a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	689a      	ldr	r2, [r3, #8]
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801576e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	6899      	ldr	r1, [r3, #8]
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	430a      	orrs	r2, r1
 8015780:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	689a      	ldr	r2, [r3, #8]
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8015790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	6899      	ldr	r1, [r3, #8]
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	430a      	orrs	r2, r1
 80157a2:	609a      	str	r2, [r3, #8]
 80157a4:	e00f      	b.n	80157c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	689a      	ldr	r2, [r3, #8]
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80157b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	689a      	ldr	r2, [r3, #8]
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80157c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	689a      	ldr	r2, [r3, #8]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	f022 0202 	bic.w	r2, r2, #2
 80157d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	6899      	ldr	r1, [r3, #8]
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	7e1b      	ldrb	r3, [r3, #24]
 80157e0:	005a      	lsls	r2, r3, #1
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	430a      	orrs	r2, r1
 80157e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d01b      	beq.n	801582c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	685a      	ldr	r2, [r3, #4]
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8015802:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	685a      	ldr	r2, [r3, #4]
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8015812:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	6859      	ldr	r1, [r3, #4]
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801581e:	3b01      	subs	r3, #1
 8015820:	035a      	lsls	r2, r3, #13
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	430a      	orrs	r2, r1
 8015828:	605a      	str	r2, [r3, #4]
 801582a:	e007      	b.n	801583c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	685a      	ldr	r2, [r3, #4]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801583a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801584a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	69db      	ldr	r3, [r3, #28]
 8015856:	3b01      	subs	r3, #1
 8015858:	051a      	lsls	r2, r3, #20
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	430a      	orrs	r2, r1
 8015860:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	689a      	ldr	r2, [r3, #8]
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8015870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	6899      	ldr	r1, [r3, #8]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801587e:	025a      	lsls	r2, r3, #9
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	430a      	orrs	r2, r1
 8015886:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	689a      	ldr	r2, [r3, #8]
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	6899      	ldr	r1, [r3, #8]
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	695b      	ldr	r3, [r3, #20]
 80158a2:	029a      	lsls	r2, r3, #10
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	430a      	orrs	r2, r1
 80158aa:	609a      	str	r2, [r3, #8]
}
 80158ac:	bf00      	nop
 80158ae:	3714      	adds	r7, #20
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr
 80158b8:	40012300 	.word	0x40012300
 80158bc:	0f000001 	.word	0x0f000001

080158c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b084      	sub	sp, #16
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d13c      	bne.n	8015954 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	689b      	ldr	r3, [r3, #8]
 80158ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d12b      	bne.n	801594c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d127      	bne.n	801594c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015902:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8015906:	2b00      	cmp	r3, #0
 8015908:	d006      	beq.n	8015918 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	689b      	ldr	r3, [r3, #8]
 8015910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8015914:	2b00      	cmp	r3, #0
 8015916:	d119      	bne.n	801594c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	685a      	ldr	r2, [r3, #4]
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	f022 0220 	bic.w	r2, r2, #32
 8015926:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801592c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801593c:	2b00      	cmp	r3, #0
 801593e:	d105      	bne.n	801594c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015944:	f043 0201 	orr.w	r2, r3, #1
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801594c:	68f8      	ldr	r0, [r7, #12]
 801594e:	f7ff fd7b 	bl	8015448 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8015952:	e00e      	b.n	8015972 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015958:	f003 0310 	and.w	r3, r3, #16
 801595c:	2b00      	cmp	r3, #0
 801595e:	d003      	beq.n	8015968 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8015960:	68f8      	ldr	r0, [r7, #12]
 8015962:	f7ff fd85 	bl	8015470 <HAL_ADC_ErrorCallback>
}
 8015966:	e004      	b.n	8015972 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801596c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	4798      	blx	r3
}
 8015972:	bf00      	nop
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}

0801597a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801597a:	b580      	push	{r7, lr}
 801597c:	b084      	sub	sp, #16
 801597e:	af00      	add	r7, sp, #0
 8015980:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015986:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8015988:	68f8      	ldr	r0, [r7, #12]
 801598a:	f7ff fd67 	bl	801545c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801598e:	bf00      	nop
 8015990:	3710      	adds	r7, #16
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}

08015996 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8015996:	b580      	push	{r7, lr}
 8015998:	b084      	sub	sp, #16
 801599a:	af00      	add	r7, sp, #0
 801599c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2240      	movs	r2, #64	; 0x40
 80159a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159ae:	f043 0204 	orr.w	r2, r3, #4
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80159b6:	68f8      	ldr	r0, [r7, #12]
 80159b8:	f7ff fd5a 	bl	8015470 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80159bc:	bf00      	nop
 80159be:	3710      	adds	r7, #16
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}

080159c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80159c4:	b480      	push	{r7}
 80159c6:	b085      	sub	sp, #20
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f003 0307 	and.w	r3, r3, #7
 80159d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80159d4:	4b0c      	ldr	r3, [pc, #48]	; (8015a08 <__NVIC_SetPriorityGrouping+0x44>)
 80159d6:	68db      	ldr	r3, [r3, #12]
 80159d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80159da:	68ba      	ldr	r2, [r7, #8]
 80159dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80159e0:	4013      	ands	r3, r2
 80159e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80159ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80159f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80159f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80159f6:	4a04      	ldr	r2, [pc, #16]	; (8015a08 <__NVIC_SetPriorityGrouping+0x44>)
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	60d3      	str	r3, [r2, #12]
}
 80159fc:	bf00      	nop
 80159fe:	3714      	adds	r7, #20
 8015a00:	46bd      	mov	sp, r7
 8015a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a06:	4770      	bx	lr
 8015a08:	e000ed00 	.word	0xe000ed00

08015a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015a10:	4b04      	ldr	r3, [pc, #16]	; (8015a24 <__NVIC_GetPriorityGrouping+0x18>)
 8015a12:	68db      	ldr	r3, [r3, #12]
 8015a14:	0a1b      	lsrs	r3, r3, #8
 8015a16:	f003 0307 	and.w	r3, r3, #7
}
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a22:	4770      	bx	lr
 8015a24:	e000ed00 	.word	0xe000ed00

08015a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b083      	sub	sp, #12
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	4603      	mov	r3, r0
 8015a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	db0b      	blt.n	8015a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015a3a:	79fb      	ldrb	r3, [r7, #7]
 8015a3c:	f003 021f 	and.w	r2, r3, #31
 8015a40:	4907      	ldr	r1, [pc, #28]	; (8015a60 <__NVIC_EnableIRQ+0x38>)
 8015a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a46:	095b      	lsrs	r3, r3, #5
 8015a48:	2001      	movs	r0, #1
 8015a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8015a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8015a52:	bf00      	nop
 8015a54:	370c      	adds	r7, #12
 8015a56:	46bd      	mov	sp, r7
 8015a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5c:	4770      	bx	lr
 8015a5e:	bf00      	nop
 8015a60:	e000e100 	.word	0xe000e100

08015a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015a64:	b480      	push	{r7}
 8015a66:	b083      	sub	sp, #12
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	6039      	str	r1, [r7, #0]
 8015a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	db0a      	blt.n	8015a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	b2da      	uxtb	r2, r3
 8015a7c:	490c      	ldr	r1, [pc, #48]	; (8015ab0 <__NVIC_SetPriority+0x4c>)
 8015a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a82:	0112      	lsls	r2, r2, #4
 8015a84:	b2d2      	uxtb	r2, r2
 8015a86:	440b      	add	r3, r1
 8015a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015a8c:	e00a      	b.n	8015aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	b2da      	uxtb	r2, r3
 8015a92:	4908      	ldr	r1, [pc, #32]	; (8015ab4 <__NVIC_SetPriority+0x50>)
 8015a94:	79fb      	ldrb	r3, [r7, #7]
 8015a96:	f003 030f 	and.w	r3, r3, #15
 8015a9a:	3b04      	subs	r3, #4
 8015a9c:	0112      	lsls	r2, r2, #4
 8015a9e:	b2d2      	uxtb	r2, r2
 8015aa0:	440b      	add	r3, r1
 8015aa2:	761a      	strb	r2, [r3, #24]
}
 8015aa4:	bf00      	nop
 8015aa6:	370c      	adds	r7, #12
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr
 8015ab0:	e000e100 	.word	0xe000e100
 8015ab4:	e000ed00 	.word	0xe000ed00

08015ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015ab8:	b480      	push	{r7}
 8015aba:	b089      	sub	sp, #36	; 0x24
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	60f8      	str	r0, [r7, #12]
 8015ac0:	60b9      	str	r1, [r7, #8]
 8015ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	f003 0307 	and.w	r3, r3, #7
 8015aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	f1c3 0307 	rsb	r3, r3, #7
 8015ad2:	2b04      	cmp	r3, #4
 8015ad4:	bf28      	it	cs
 8015ad6:	2304      	movcs	r3, #4
 8015ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015ada:	69fb      	ldr	r3, [r7, #28]
 8015adc:	3304      	adds	r3, #4
 8015ade:	2b06      	cmp	r3, #6
 8015ae0:	d902      	bls.n	8015ae8 <NVIC_EncodePriority+0x30>
 8015ae2:	69fb      	ldr	r3, [r7, #28]
 8015ae4:	3b03      	subs	r3, #3
 8015ae6:	e000      	b.n	8015aea <NVIC_EncodePriority+0x32>
 8015ae8:	2300      	movs	r3, #0
 8015aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015aec:	f04f 32ff 	mov.w	r2, #4294967295
 8015af0:	69bb      	ldr	r3, [r7, #24]
 8015af2:	fa02 f303 	lsl.w	r3, r2, r3
 8015af6:	43da      	mvns	r2, r3
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	401a      	ands	r2, r3
 8015afc:	697b      	ldr	r3, [r7, #20]
 8015afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015b00:	f04f 31ff 	mov.w	r1, #4294967295
 8015b04:	697b      	ldr	r3, [r7, #20]
 8015b06:	fa01 f303 	lsl.w	r3, r1, r3
 8015b0a:	43d9      	mvns	r1, r3
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015b10:	4313      	orrs	r3, r2
         );
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3724      	adds	r7, #36	; 0x24
 8015b16:	46bd      	mov	sp, r7
 8015b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1c:	4770      	bx	lr

08015b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015b1e:	b580      	push	{r7, lr}
 8015b20:	b082      	sub	sp, #8
 8015b22:	af00      	add	r7, sp, #0
 8015b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015b26:	6878      	ldr	r0, [r7, #4]
 8015b28:	f7ff ff4c 	bl	80159c4 <__NVIC_SetPriorityGrouping>
}
 8015b2c:	bf00      	nop
 8015b2e:	3708      	adds	r7, #8
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bd80      	pop	{r7, pc}

08015b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b086      	sub	sp, #24
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	60b9      	str	r1, [r7, #8]
 8015b3e:	607a      	str	r2, [r7, #4]
 8015b40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8015b42:	2300      	movs	r3, #0
 8015b44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8015b46:	f7ff ff61 	bl	8015a0c <__NVIC_GetPriorityGrouping>
 8015b4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	68b9      	ldr	r1, [r7, #8]
 8015b50:	6978      	ldr	r0, [r7, #20]
 8015b52:	f7ff ffb1 	bl	8015ab8 <NVIC_EncodePriority>
 8015b56:	4602      	mov	r2, r0
 8015b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b5c:	4611      	mov	r1, r2
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7ff ff80 	bl	8015a64 <__NVIC_SetPriority>
}
 8015b64:	bf00      	nop
 8015b66:	3718      	adds	r7, #24
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}

08015b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b082      	sub	sp, #8
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	4603      	mov	r3, r0
 8015b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7ff ff54 	bl	8015a28 <__NVIC_EnableIRQ>
}
 8015b80:	bf00      	nop
 8015b82:	3708      	adds	r7, #8
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}

08015b88 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b082      	sub	sp, #8
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d101      	bne.n	8015b9a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8015b96:	2301      	movs	r3, #1
 8015b98:	e014      	b.n	8015bc4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	791b      	ldrb	r3, [r3, #4]
 8015b9e:	b2db      	uxtb	r3, r3
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d105      	bne.n	8015bb0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	f7ff f860 	bl	8014c70 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2202      	movs	r2, #2
 8015bb4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2201      	movs	r2, #1
 8015bc0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8015bc2:	2300      	movs	r3, #0
}
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	3708      	adds	r7, #8
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}

08015bcc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8015bcc:	b480      	push	{r7}
 8015bce:	b083      	sub	sp, #12
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
 8015bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	795b      	ldrb	r3, [r3, #5]
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d101      	bne.n	8015be2 <HAL_DAC_Start+0x16>
 8015bde:	2302      	movs	r3, #2
 8015be0:	e040      	b.n	8015c64 <HAL_DAC_Start+0x98>
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2201      	movs	r2, #1
 8015be6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2202      	movs	r2, #2
 8015bec:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	6819      	ldr	r1, [r3, #0]
 8015bf4:	683b      	ldr	r3, [r7, #0]
 8015bf6:	f003 0310 	and.w	r3, r3, #16
 8015bfa:	2201      	movs	r2, #1
 8015bfc:	409a      	lsls	r2, r3
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	430a      	orrs	r2, r1
 8015c04:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d10f      	bne.n	8015c2c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8015c16:	2b3c      	cmp	r3, #60	; 0x3c
 8015c18:	d11d      	bne.n	8015c56 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	685a      	ldr	r2, [r3, #4]
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	f042 0201 	orr.w	r2, r2, #1
 8015c28:	605a      	str	r2, [r3, #4]
 8015c2a:	e014      	b.n	8015c56 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	f003 0310 	and.w	r3, r3, #16
 8015c3c:	213c      	movs	r1, #60	; 0x3c
 8015c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8015c42:	429a      	cmp	r2, r3
 8015c44:	d107      	bne.n	8015c56 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	685a      	ldr	r2, [r3, #4]
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	f042 0202 	orr.w	r2, r2, #2
 8015c54:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	2201      	movs	r2, #1
 8015c5a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2200      	movs	r2, #0
 8015c60:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8015c62:	2300      	movs	r3, #0
}
 8015c64:	4618      	mov	r0, r3
 8015c66:	370c      	adds	r7, #12
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6e:	4770      	bx	lr

08015c70 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015c86:	d120      	bne.n	8015cca <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015c96:	d118      	bne.n	8015cca <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2204      	movs	r2, #4
 8015c9c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	691b      	ldr	r3, [r3, #16]
 8015ca2:	f043 0201 	orr.w	r2, r3, #1
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015cb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8015cc2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f000 f82d 	bl	8015d24 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015cd8:	d120      	bne.n	8015d1c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015ce8:	d118      	bne.n	8015d1c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2204      	movs	r2, #4
 8015cee:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	691b      	ldr	r3, [r3, #16]
 8015cf4:	f043 0202 	orr.w	r2, r3, #2
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8015d04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	681a      	ldr	r2, [r3, #0]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8015d14:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f000 f85d 	bl	8015dd6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8015d1c:	bf00      	nop
 8015d1e:	3708      	adds	r7, #8
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}

08015d24 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8015d24:	b480      	push	{r7}
 8015d26:	b083      	sub	sp, #12
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8015d2c:	bf00      	nop
 8015d2e:	370c      	adds	r7, #12
 8015d30:	46bd      	mov	sp, r7
 8015d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d36:	4770      	bx	lr

08015d38 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8015d38:	b480      	push	{r7}
 8015d3a:	b087      	sub	sp, #28
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	60f8      	str	r0, [r7, #12]
 8015d40:	60b9      	str	r1, [r7, #8]
 8015d42:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	795b      	ldrb	r3, [r3, #5]
 8015d48:	2b01      	cmp	r3, #1
 8015d4a:	d101      	bne.n	8015d50 <HAL_DAC_ConfigChannel+0x18>
 8015d4c:	2302      	movs	r3, #2
 8015d4e:	e03c      	b.n	8015dca <HAL_DAC_ConfigChannel+0x92>
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	2201      	movs	r2, #1
 8015d54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	2202      	movs	r2, #2
 8015d5a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f003 0310 	and.w	r3, r3, #16
 8015d6a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8015d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8015d72:	43db      	mvns	r3, r3
 8015d74:	697a      	ldr	r2, [r7, #20]
 8015d76:	4013      	ands	r3, r2
 8015d78:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	681a      	ldr	r2, [r3, #0]
 8015d7e:	68bb      	ldr	r3, [r7, #8]
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	4313      	orrs	r3, r2
 8015d84:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f003 0310 	and.w	r3, r3, #16
 8015d8c:	693a      	ldr	r2, [r7, #16]
 8015d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8015d92:	697a      	ldr	r2, [r7, #20]
 8015d94:	4313      	orrs	r3, r2
 8015d96:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	697a      	ldr	r2, [r7, #20]
 8015d9e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	6819      	ldr	r1, [r3, #0]
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f003 0310 	and.w	r3, r3, #16
 8015dac:	22c0      	movs	r2, #192	; 0xc0
 8015dae:	fa02 f303 	lsl.w	r3, r2, r3
 8015db2:	43da      	mvns	r2, r3
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	400a      	ands	r2, r1
 8015dba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	2201      	movs	r2, #1
 8015dc0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8015dc8:	2300      	movs	r3, #0
}
 8015dca:	4618      	mov	r0, r3
 8015dcc:	371c      	adds	r7, #28
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd4:	4770      	bx	lr

08015dd6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8015dd6:	b480      	push	{r7}
 8015dd8:	b083      	sub	sp, #12
 8015dda:	af00      	add	r7, sp, #0
 8015ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8015dde:	bf00      	nop
 8015de0:	370c      	adds	r7, #12
 8015de2:	46bd      	mov	sp, r7
 8015de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de8:	4770      	bx	lr
	...

08015dec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b086      	sub	sp, #24
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8015df4:	2300      	movs	r3, #0
 8015df6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8015df8:	f7ff f9c6 	bl	8015188 <HAL_GetTick>
 8015dfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d101      	bne.n	8015e08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8015e04:	2301      	movs	r3, #1
 8015e06:	e099      	b.n	8015f3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	2202      	movs	r2, #2
 8015e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	2200      	movs	r2, #0
 8015e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	681a      	ldr	r2, [r3, #0]
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	f022 0201 	bic.w	r2, r2, #1
 8015e26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015e28:	e00f      	b.n	8015e4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015e2a:	f7ff f9ad 	bl	8015188 <HAL_GetTick>
 8015e2e:	4602      	mov	r2, r0
 8015e30:	693b      	ldr	r3, [r7, #16]
 8015e32:	1ad3      	subs	r3, r2, r3
 8015e34:	2b05      	cmp	r3, #5
 8015e36:	d908      	bls.n	8015e4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2220      	movs	r2, #32
 8015e3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2203      	movs	r2, #3
 8015e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8015e46:	2303      	movs	r3, #3
 8015e48:	e078      	b.n	8015f3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	f003 0301 	and.w	r3, r3, #1
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d1e8      	bne.n	8015e2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8015e60:	697a      	ldr	r2, [r7, #20]
 8015e62:	4b38      	ldr	r3, [pc, #224]	; (8015f44 <HAL_DMA_Init+0x158>)
 8015e64:	4013      	ands	r3, r2
 8015e66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	685a      	ldr	r2, [r3, #4]
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	689b      	ldr	r3, [r3, #8]
 8015e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	691b      	ldr	r3, [r3, #16]
 8015e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	699b      	ldr	r3, [r3, #24]
 8015e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	6a1b      	ldr	r3, [r3, #32]
 8015e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015e96:	697a      	ldr	r2, [r7, #20]
 8015e98:	4313      	orrs	r3, r2
 8015e9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ea0:	2b04      	cmp	r3, #4
 8015ea2:	d107      	bne.n	8015eb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015eac:	4313      	orrs	r3, r2
 8015eae:	697a      	ldr	r2, [r7, #20]
 8015eb0:	4313      	orrs	r3, r2
 8015eb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	697a      	ldr	r2, [r7, #20]
 8015eba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	695b      	ldr	r3, [r3, #20]
 8015ec2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8015ec4:	697b      	ldr	r3, [r7, #20]
 8015ec6:	f023 0307 	bic.w	r3, r3, #7
 8015eca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed0:	697a      	ldr	r2, [r7, #20]
 8015ed2:	4313      	orrs	r3, r2
 8015ed4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eda:	2b04      	cmp	r3, #4
 8015edc:	d117      	bne.n	8015f0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ee2:	697a      	ldr	r2, [r7, #20]
 8015ee4:	4313      	orrs	r3, r2
 8015ee6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d00e      	beq.n	8015f0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f000 fb01 	bl	80164f8 <DMA_CheckFifoParam>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d008      	beq.n	8015f0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2240      	movs	r2, #64	; 0x40
 8015f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2201      	movs	r2, #1
 8015f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	e016      	b.n	8015f3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	697a      	ldr	r2, [r7, #20]
 8015f14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 fab8 	bl	801648c <DMA_CalcBaseAndBitshift>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015f24:	223f      	movs	r2, #63	; 0x3f
 8015f26:	409a      	lsls	r2, r3
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2201      	movs	r2, #1
 8015f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8015f3a:	2300      	movs	r3, #0
}
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	3718      	adds	r7, #24
 8015f40:	46bd      	mov	sp, r7
 8015f42:	bd80      	pop	{r7, pc}
 8015f44:	f010803f 	.word	0xf010803f

08015f48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b086      	sub	sp, #24
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	60f8      	str	r0, [r7, #12]
 8015f50:	60b9      	str	r1, [r7, #8]
 8015f52:	607a      	str	r2, [r7, #4]
 8015f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015f56:	2300      	movs	r3, #0
 8015f58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015f66:	2b01      	cmp	r3, #1
 8015f68:	d101      	bne.n	8015f6e <HAL_DMA_Start_IT+0x26>
 8015f6a:	2302      	movs	r3, #2
 8015f6c:	e040      	b.n	8015ff0 <HAL_DMA_Start_IT+0xa8>
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	2201      	movs	r2, #1
 8015f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	2b01      	cmp	r3, #1
 8015f80:	d12f      	bne.n	8015fe2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	2202      	movs	r2, #2
 8015f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	687a      	ldr	r2, [r7, #4]
 8015f94:	68b9      	ldr	r1, [r7, #8]
 8015f96:	68f8      	ldr	r0, [r7, #12]
 8015f98:	f000 fa4a 	bl	8016430 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015fa0:	223f      	movs	r2, #63	; 0x3f
 8015fa2:	409a      	lsls	r2, r3
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	681a      	ldr	r2, [r3, #0]
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	f042 0216 	orr.w	r2, r2, #22
 8015fb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d007      	beq.n	8015fd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	681a      	ldr	r2, [r3, #0]
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	f042 0208 	orr.w	r2, r2, #8
 8015fce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	681a      	ldr	r2, [r3, #0]
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	f042 0201 	orr.w	r2, r2, #1
 8015fde:	601a      	str	r2, [r3, #0]
 8015fe0:	e005      	b.n	8015fee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8015fea:	2302      	movs	r3, #2
 8015fec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8015fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3718      	adds	r7, #24
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016004:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016006:	f7ff f8bf 	bl	8015188 <HAL_GetTick>
 801600a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016012:	b2db      	uxtb	r3, r3
 8016014:	2b02      	cmp	r3, #2
 8016016:	d008      	beq.n	801602a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2280      	movs	r2, #128	; 0x80
 801601c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2200      	movs	r2, #0
 8016022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016026:	2301      	movs	r3, #1
 8016028:	e052      	b.n	80160d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	681a      	ldr	r2, [r3, #0]
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	f022 0216 	bic.w	r2, r2, #22
 8016038:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	695a      	ldr	r2, [r3, #20]
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016048:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801604e:	2b00      	cmp	r3, #0
 8016050:	d103      	bne.n	801605a <HAL_DMA_Abort+0x62>
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016056:	2b00      	cmp	r3, #0
 8016058:	d007      	beq.n	801606a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	681a      	ldr	r2, [r3, #0]
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	f022 0208 	bic.w	r2, r2, #8
 8016068:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	681a      	ldr	r2, [r3, #0]
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	f022 0201 	bic.w	r2, r2, #1
 8016078:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801607a:	e013      	b.n	80160a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801607c:	f7ff f884 	bl	8015188 <HAL_GetTick>
 8016080:	4602      	mov	r2, r0
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	1ad3      	subs	r3, r2, r3
 8016086:	2b05      	cmp	r3, #5
 8016088:	d90c      	bls.n	80160a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	2220      	movs	r2, #32
 801608e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2203      	movs	r2, #3
 8016094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2200      	movs	r2, #0
 801609c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80160a0:	2303      	movs	r3, #3
 80160a2:	e015      	b.n	80160d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	f003 0301 	and.w	r3, r3, #1
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d1e4      	bne.n	801607c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80160b6:	223f      	movs	r2, #63	; 0x3f
 80160b8:	409a      	lsls	r2, r3
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	2201      	movs	r2, #1
 80160c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2200      	movs	r2, #0
 80160ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80160ce:	2300      	movs	r3, #0
}
 80160d0:	4618      	mov	r0, r3
 80160d2:	3710      	adds	r7, #16
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}

080160d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80160d8:	b480      	push	{r7}
 80160da:	b083      	sub	sp, #12
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80160e6:	b2db      	uxtb	r3, r3
 80160e8:	2b02      	cmp	r3, #2
 80160ea:	d004      	beq.n	80160f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2280      	movs	r2, #128	; 0x80
 80160f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80160f2:	2301      	movs	r3, #1
 80160f4:	e00c      	b.n	8016110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2205      	movs	r2, #5
 80160fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	681a      	ldr	r2, [r3, #0]
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	f022 0201 	bic.w	r2, r2, #1
 801610c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801610e:	2300      	movs	r3, #0
}
 8016110:	4618      	mov	r0, r3
 8016112:	370c      	adds	r7, #12
 8016114:	46bd      	mov	sp, r7
 8016116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611a:	4770      	bx	lr

0801611c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b086      	sub	sp, #24
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8016124:	2300      	movs	r3, #0
 8016126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8016128:	4b92      	ldr	r3, [pc, #584]	; (8016374 <HAL_DMA_IRQHandler+0x258>)
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	4a92      	ldr	r2, [pc, #584]	; (8016378 <HAL_DMA_IRQHandler+0x25c>)
 801612e:	fba2 2303 	umull	r2, r3, r2, r3
 8016132:	0a9b      	lsrs	r3, r3, #10
 8016134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801613a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801613c:	693b      	ldr	r3, [r7, #16]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016146:	2208      	movs	r2, #8
 8016148:	409a      	lsls	r2, r3
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	4013      	ands	r3, r2
 801614e:	2b00      	cmp	r3, #0
 8016150:	d01a      	beq.n	8016188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f003 0304 	and.w	r3, r3, #4
 801615c:	2b00      	cmp	r3, #0
 801615e:	d013      	beq.n	8016188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	681a      	ldr	r2, [r3, #0]
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	f022 0204 	bic.w	r2, r2, #4
 801616e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016174:	2208      	movs	r2, #8
 8016176:	409a      	lsls	r2, r3
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016180:	f043 0201 	orr.w	r2, r3, #1
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801618c:	2201      	movs	r2, #1
 801618e:	409a      	lsls	r2, r3
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	4013      	ands	r3, r2
 8016194:	2b00      	cmp	r3, #0
 8016196:	d012      	beq.n	80161be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	695b      	ldr	r3, [r3, #20]
 801619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d00b      	beq.n	80161be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161aa:	2201      	movs	r2, #1
 80161ac:	409a      	lsls	r2, r3
 80161ae:	693b      	ldr	r3, [r7, #16]
 80161b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80161b6:	f043 0202 	orr.w	r2, r3, #2
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161c2:	2204      	movs	r2, #4
 80161c4:	409a      	lsls	r2, r3
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	4013      	ands	r3, r2
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d012      	beq.n	80161f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	f003 0302 	and.w	r3, r3, #2
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d00b      	beq.n	80161f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161e0:	2204      	movs	r2, #4
 80161e2:	409a      	lsls	r2, r3
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80161ec:	f043 0204 	orr.w	r2, r3, #4
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161f8:	2210      	movs	r2, #16
 80161fa:	409a      	lsls	r2, r3
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	4013      	ands	r3, r2
 8016200:	2b00      	cmp	r3, #0
 8016202:	d043      	beq.n	801628c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	f003 0308 	and.w	r3, r3, #8
 801620e:	2b00      	cmp	r3, #0
 8016210:	d03c      	beq.n	801628c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016216:	2210      	movs	r2, #16
 8016218:	409a      	lsls	r2, r3
 801621a:	693b      	ldr	r3, [r7, #16]
 801621c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016228:	2b00      	cmp	r3, #0
 801622a:	d018      	beq.n	801625e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016236:	2b00      	cmp	r3, #0
 8016238:	d108      	bne.n	801624c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801623e:	2b00      	cmp	r3, #0
 8016240:	d024      	beq.n	801628c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	4798      	blx	r3
 801624a:	e01f      	b.n	801628c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016250:	2b00      	cmp	r3, #0
 8016252:	d01b      	beq.n	801628c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	4798      	blx	r3
 801625c:	e016      	b.n	801628c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016268:	2b00      	cmp	r3, #0
 801626a:	d107      	bne.n	801627c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	681a      	ldr	r2, [r3, #0]
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	f022 0208 	bic.w	r2, r2, #8
 801627a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016280:	2b00      	cmp	r3, #0
 8016282:	d003      	beq.n	801628c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016290:	2220      	movs	r2, #32
 8016292:	409a      	lsls	r2, r3
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	4013      	ands	r3, r2
 8016298:	2b00      	cmp	r3, #0
 801629a:	f000 808e 	beq.w	80163ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	f003 0310 	and.w	r3, r3, #16
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	f000 8086 	beq.w	80163ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80162b2:	2220      	movs	r2, #32
 80162b4:	409a      	lsls	r2, r3
 80162b6:	693b      	ldr	r3, [r7, #16]
 80162b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	2b05      	cmp	r3, #5
 80162c4:	d136      	bne.n	8016334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	681a      	ldr	r2, [r3, #0]
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	f022 0216 	bic.w	r2, r2, #22
 80162d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	695a      	ldr	r2, [r3, #20]
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80162e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d103      	bne.n	80162f6 <HAL_DMA_IRQHandler+0x1da>
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d007      	beq.n	8016306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	681a      	ldr	r2, [r3, #0]
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	f022 0208 	bic.w	r2, r2, #8
 8016304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801630a:	223f      	movs	r2, #63	; 0x3f
 801630c:	409a      	lsls	r2, r3
 801630e:	693b      	ldr	r3, [r7, #16]
 8016310:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2201      	movs	r2, #1
 8016316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2200      	movs	r2, #0
 801631e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016326:	2b00      	cmp	r3, #0
 8016328:	d07d      	beq.n	8016426 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	4798      	blx	r3
        }
        return;
 8016332:	e078      	b.n	8016426 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801633e:	2b00      	cmp	r3, #0
 8016340:	d01c      	beq.n	801637c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801634c:	2b00      	cmp	r3, #0
 801634e:	d108      	bne.n	8016362 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016354:	2b00      	cmp	r3, #0
 8016356:	d030      	beq.n	80163ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801635c:	6878      	ldr	r0, [r7, #4]
 801635e:	4798      	blx	r3
 8016360:	e02b      	b.n	80163ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016366:	2b00      	cmp	r3, #0
 8016368:	d027      	beq.n	80163ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	4798      	blx	r3
 8016372:	e022      	b.n	80163ba <HAL_DMA_IRQHandler+0x29e>
 8016374:	20000060 	.word	0x20000060
 8016378:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016386:	2b00      	cmp	r3, #0
 8016388:	d10f      	bne.n	80163aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	681a      	ldr	r2, [r3, #0]
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	f022 0210 	bic.w	r2, r2, #16
 8016398:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2201      	movs	r2, #1
 801639e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2200      	movs	r2, #0
 80163a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d003      	beq.n	80163ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d032      	beq.n	8016428 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80163c6:	f003 0301 	and.w	r3, r3, #1
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d022      	beq.n	8016414 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	2205      	movs	r2, #5
 80163d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	681a      	ldr	r2, [r3, #0]
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	f022 0201 	bic.w	r2, r2, #1
 80163e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80163e6:	68bb      	ldr	r3, [r7, #8]
 80163e8:	3301      	adds	r3, #1
 80163ea:	60bb      	str	r3, [r7, #8]
 80163ec:	697a      	ldr	r2, [r7, #20]
 80163ee:	429a      	cmp	r2, r3
 80163f0:	d307      	bcc.n	8016402 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	f003 0301 	and.w	r3, r3, #1
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d1f2      	bne.n	80163e6 <HAL_DMA_IRQHandler+0x2ca>
 8016400:	e000      	b.n	8016404 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8016402:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	2201      	movs	r2, #1
 8016408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2200      	movs	r2, #0
 8016410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016418:	2b00      	cmp	r3, #0
 801641a:	d005      	beq.n	8016428 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	4798      	blx	r3
 8016424:	e000      	b.n	8016428 <HAL_DMA_IRQHandler+0x30c>
        return;
 8016426:	bf00      	nop
    }
  }
}
 8016428:	3718      	adds	r7, #24
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}
 801642e:	bf00      	nop

08016430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016430:	b480      	push	{r7}
 8016432:	b085      	sub	sp, #20
 8016434:	af00      	add	r7, sp, #0
 8016436:	60f8      	str	r0, [r7, #12]
 8016438:	60b9      	str	r1, [r7, #8]
 801643a:	607a      	str	r2, [r7, #4]
 801643c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	681a      	ldr	r2, [r3, #0]
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801644c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	683a      	ldr	r2, [r7, #0]
 8016454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	689b      	ldr	r3, [r3, #8]
 801645a:	2b40      	cmp	r3, #64	; 0x40
 801645c:	d108      	bne.n	8016470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	687a      	ldr	r2, [r7, #4]
 8016464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	68ba      	ldr	r2, [r7, #8]
 801646c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801646e:	e007      	b.n	8016480 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	68ba      	ldr	r2, [r7, #8]
 8016476:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	687a      	ldr	r2, [r7, #4]
 801647e:	60da      	str	r2, [r3, #12]
}
 8016480:	bf00      	nop
 8016482:	3714      	adds	r7, #20
 8016484:	46bd      	mov	sp, r7
 8016486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648a:	4770      	bx	lr

0801648c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801648c:	b480      	push	{r7}
 801648e:	b085      	sub	sp, #20
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	b2db      	uxtb	r3, r3
 801649a:	3b10      	subs	r3, #16
 801649c:	4a14      	ldr	r2, [pc, #80]	; (80164f0 <DMA_CalcBaseAndBitshift+0x64>)
 801649e:	fba2 2303 	umull	r2, r3, r2, r3
 80164a2:	091b      	lsrs	r3, r3, #4
 80164a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80164a6:	4a13      	ldr	r2, [pc, #76]	; (80164f4 <DMA_CalcBaseAndBitshift+0x68>)
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	4413      	add	r3, r2
 80164ac:	781b      	ldrb	r3, [r3, #0]
 80164ae:	461a      	mov	r2, r3
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	2b03      	cmp	r3, #3
 80164b8:	d909      	bls.n	80164ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80164c2:	f023 0303 	bic.w	r3, r3, #3
 80164c6:	1d1a      	adds	r2, r3, #4
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	659a      	str	r2, [r3, #88]	; 0x58
 80164cc:	e007      	b.n	80164de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80164d6:	f023 0303 	bic.w	r3, r3, #3
 80164da:	687a      	ldr	r2, [r7, #4]
 80164dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80164e2:	4618      	mov	r0, r3
 80164e4:	3714      	adds	r7, #20
 80164e6:	46bd      	mov	sp, r7
 80164e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ec:	4770      	bx	lr
 80164ee:	bf00      	nop
 80164f0:	aaaaaaab 	.word	0xaaaaaaab
 80164f4:	0801d27c 	.word	0x0801d27c

080164f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80164f8:	b480      	push	{r7}
 80164fa:	b085      	sub	sp, #20
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016500:	2300      	movs	r3, #0
 8016502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016508:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	699b      	ldr	r3, [r3, #24]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d11f      	bne.n	8016552 <DMA_CheckFifoParam+0x5a>
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	2b03      	cmp	r3, #3
 8016516:	d856      	bhi.n	80165c6 <DMA_CheckFifoParam+0xce>
 8016518:	a201      	add	r2, pc, #4	; (adr r2, 8016520 <DMA_CheckFifoParam+0x28>)
 801651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801651e:	bf00      	nop
 8016520:	08016531 	.word	0x08016531
 8016524:	08016543 	.word	0x08016543
 8016528:	08016531 	.word	0x08016531
 801652c:	080165c7 	.word	0x080165c7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016538:	2b00      	cmp	r3, #0
 801653a:	d046      	beq.n	80165ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801653c:	2301      	movs	r3, #1
 801653e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016540:	e043      	b.n	80165ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016546:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801654a:	d140      	bne.n	80165ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801654c:	2301      	movs	r3, #1
 801654e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8016550:	e03d      	b.n	80165ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	699b      	ldr	r3, [r3, #24]
 8016556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801655a:	d121      	bne.n	80165a0 <DMA_CheckFifoParam+0xa8>
 801655c:	68bb      	ldr	r3, [r7, #8]
 801655e:	2b03      	cmp	r3, #3
 8016560:	d837      	bhi.n	80165d2 <DMA_CheckFifoParam+0xda>
 8016562:	a201      	add	r2, pc, #4	; (adr r2, 8016568 <DMA_CheckFifoParam+0x70>)
 8016564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016568:	08016579 	.word	0x08016579
 801656c:	0801657f 	.word	0x0801657f
 8016570:	08016579 	.word	0x08016579
 8016574:	08016591 	.word	0x08016591
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8016578:	2301      	movs	r3, #1
 801657a:	73fb      	strb	r3, [r7, #15]
      break;
 801657c:	e030      	b.n	80165e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016586:	2b00      	cmp	r3, #0
 8016588:	d025      	beq.n	80165d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801658a:	2301      	movs	r3, #1
 801658c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801658e:	e022      	b.n	80165d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016594:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8016598:	d11f      	bne.n	80165da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801659a:	2301      	movs	r3, #1
 801659c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801659e:	e01c      	b.n	80165da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	2b02      	cmp	r3, #2
 80165a4:	d903      	bls.n	80165ae <DMA_CheckFifoParam+0xb6>
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	2b03      	cmp	r3, #3
 80165aa:	d003      	beq.n	80165b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80165ac:	e018      	b.n	80165e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80165ae:	2301      	movs	r3, #1
 80165b0:	73fb      	strb	r3, [r7, #15]
      break;
 80165b2:	e015      	b.n	80165e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d00e      	beq.n	80165de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80165c0:	2301      	movs	r3, #1
 80165c2:	73fb      	strb	r3, [r7, #15]
      break;
 80165c4:	e00b      	b.n	80165de <DMA_CheckFifoParam+0xe6>
      break;
 80165c6:	bf00      	nop
 80165c8:	e00a      	b.n	80165e0 <DMA_CheckFifoParam+0xe8>
      break;
 80165ca:	bf00      	nop
 80165cc:	e008      	b.n	80165e0 <DMA_CheckFifoParam+0xe8>
      break;
 80165ce:	bf00      	nop
 80165d0:	e006      	b.n	80165e0 <DMA_CheckFifoParam+0xe8>
      break;
 80165d2:	bf00      	nop
 80165d4:	e004      	b.n	80165e0 <DMA_CheckFifoParam+0xe8>
      break;
 80165d6:	bf00      	nop
 80165d8:	e002      	b.n	80165e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80165da:	bf00      	nop
 80165dc:	e000      	b.n	80165e0 <DMA_CheckFifoParam+0xe8>
      break;
 80165de:	bf00      	nop
    }
  } 
  
  return status; 
 80165e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3714      	adds	r7, #20
 80165e6:	46bd      	mov	sp, r7
 80165e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ec:	4770      	bx	lr
 80165ee:	bf00      	nop

080165f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80165f0:	b480      	push	{r7}
 80165f2:	b089      	sub	sp, #36	; 0x24
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
 80165f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80165fa:	2300      	movs	r3, #0
 80165fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80165fe:	2300      	movs	r3, #0
 8016600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8016602:	2300      	movs	r3, #0
 8016604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016606:	2300      	movs	r3, #0
 8016608:	61fb      	str	r3, [r7, #28]
 801660a:	e16b      	b.n	80168e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801660c:	2201      	movs	r2, #1
 801660e:	69fb      	ldr	r3, [r7, #28]
 8016610:	fa02 f303 	lsl.w	r3, r2, r3
 8016614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	697a      	ldr	r2, [r7, #20]
 801661c:	4013      	ands	r3, r2
 801661e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016620:	693a      	ldr	r2, [r7, #16]
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	429a      	cmp	r2, r3
 8016626:	f040 815a 	bne.w	80168de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801662a:	683b      	ldr	r3, [r7, #0]
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	f003 0303 	and.w	r3, r3, #3
 8016632:	2b01      	cmp	r3, #1
 8016634:	d005      	beq.n	8016642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8016636:	683b      	ldr	r3, [r7, #0]
 8016638:	685b      	ldr	r3, [r3, #4]
 801663a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801663e:	2b02      	cmp	r3, #2
 8016640:	d130      	bne.n	80166a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	689b      	ldr	r3, [r3, #8]
 8016646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016648:	69fb      	ldr	r3, [r7, #28]
 801664a:	005b      	lsls	r3, r3, #1
 801664c:	2203      	movs	r2, #3
 801664e:	fa02 f303 	lsl.w	r3, r2, r3
 8016652:	43db      	mvns	r3, r3
 8016654:	69ba      	ldr	r2, [r7, #24]
 8016656:	4013      	ands	r3, r2
 8016658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801665a:	683b      	ldr	r3, [r7, #0]
 801665c:	68da      	ldr	r2, [r3, #12]
 801665e:	69fb      	ldr	r3, [r7, #28]
 8016660:	005b      	lsls	r3, r3, #1
 8016662:	fa02 f303 	lsl.w	r3, r2, r3
 8016666:	69ba      	ldr	r2, [r7, #24]
 8016668:	4313      	orrs	r3, r2
 801666a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	69ba      	ldr	r2, [r7, #24]
 8016670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	685b      	ldr	r3, [r3, #4]
 8016676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8016678:	2201      	movs	r2, #1
 801667a:	69fb      	ldr	r3, [r7, #28]
 801667c:	fa02 f303 	lsl.w	r3, r2, r3
 8016680:	43db      	mvns	r3, r3
 8016682:	69ba      	ldr	r2, [r7, #24]
 8016684:	4013      	ands	r3, r2
 8016686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	685b      	ldr	r3, [r3, #4]
 801668c:	091b      	lsrs	r3, r3, #4
 801668e:	f003 0201 	and.w	r2, r3, #1
 8016692:	69fb      	ldr	r3, [r7, #28]
 8016694:	fa02 f303 	lsl.w	r3, r2, r3
 8016698:	69ba      	ldr	r2, [r7, #24]
 801669a:	4313      	orrs	r3, r2
 801669c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	69ba      	ldr	r2, [r7, #24]
 80166a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80166a4:	683b      	ldr	r3, [r7, #0]
 80166a6:	685b      	ldr	r3, [r3, #4]
 80166a8:	f003 0303 	and.w	r3, r3, #3
 80166ac:	2b03      	cmp	r3, #3
 80166ae:	d017      	beq.n	80166e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	68db      	ldr	r3, [r3, #12]
 80166b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80166b6:	69fb      	ldr	r3, [r7, #28]
 80166b8:	005b      	lsls	r3, r3, #1
 80166ba:	2203      	movs	r2, #3
 80166bc:	fa02 f303 	lsl.w	r3, r2, r3
 80166c0:	43db      	mvns	r3, r3
 80166c2:	69ba      	ldr	r2, [r7, #24]
 80166c4:	4013      	ands	r3, r2
 80166c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	689a      	ldr	r2, [r3, #8]
 80166cc:	69fb      	ldr	r3, [r7, #28]
 80166ce:	005b      	lsls	r3, r3, #1
 80166d0:	fa02 f303 	lsl.w	r3, r2, r3
 80166d4:	69ba      	ldr	r2, [r7, #24]
 80166d6:	4313      	orrs	r3, r2
 80166d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	69ba      	ldr	r2, [r7, #24]
 80166de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	685b      	ldr	r3, [r3, #4]
 80166e4:	f003 0303 	and.w	r3, r3, #3
 80166e8:	2b02      	cmp	r3, #2
 80166ea:	d123      	bne.n	8016734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	08da      	lsrs	r2, r3, #3
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	3208      	adds	r2, #8
 80166f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80166fa:	69fb      	ldr	r3, [r7, #28]
 80166fc:	f003 0307 	and.w	r3, r3, #7
 8016700:	009b      	lsls	r3, r3, #2
 8016702:	220f      	movs	r2, #15
 8016704:	fa02 f303 	lsl.w	r3, r2, r3
 8016708:	43db      	mvns	r3, r3
 801670a:	69ba      	ldr	r2, [r7, #24]
 801670c:	4013      	ands	r3, r2
 801670e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	691a      	ldr	r2, [r3, #16]
 8016714:	69fb      	ldr	r3, [r7, #28]
 8016716:	f003 0307 	and.w	r3, r3, #7
 801671a:	009b      	lsls	r3, r3, #2
 801671c:	fa02 f303 	lsl.w	r3, r2, r3
 8016720:	69ba      	ldr	r2, [r7, #24]
 8016722:	4313      	orrs	r3, r2
 8016724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8016726:	69fb      	ldr	r3, [r7, #28]
 8016728:	08da      	lsrs	r2, r3, #3
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	3208      	adds	r2, #8
 801672e:	69b9      	ldr	r1, [r7, #24]
 8016730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801673a:	69fb      	ldr	r3, [r7, #28]
 801673c:	005b      	lsls	r3, r3, #1
 801673e:	2203      	movs	r2, #3
 8016740:	fa02 f303 	lsl.w	r3, r2, r3
 8016744:	43db      	mvns	r3, r3
 8016746:	69ba      	ldr	r2, [r7, #24]
 8016748:	4013      	ands	r3, r2
 801674a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801674c:	683b      	ldr	r3, [r7, #0]
 801674e:	685b      	ldr	r3, [r3, #4]
 8016750:	f003 0203 	and.w	r2, r3, #3
 8016754:	69fb      	ldr	r3, [r7, #28]
 8016756:	005b      	lsls	r3, r3, #1
 8016758:	fa02 f303 	lsl.w	r3, r2, r3
 801675c:	69ba      	ldr	r2, [r7, #24]
 801675e:	4313      	orrs	r3, r2
 8016760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	69ba      	ldr	r2, [r7, #24]
 8016766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	685b      	ldr	r3, [r3, #4]
 801676c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016770:	2b00      	cmp	r3, #0
 8016772:	f000 80b4 	beq.w	80168de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016776:	2300      	movs	r3, #0
 8016778:	60fb      	str	r3, [r7, #12]
 801677a:	4b60      	ldr	r3, [pc, #384]	; (80168fc <HAL_GPIO_Init+0x30c>)
 801677c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801677e:	4a5f      	ldr	r2, [pc, #380]	; (80168fc <HAL_GPIO_Init+0x30c>)
 8016780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016784:	6453      	str	r3, [r2, #68]	; 0x44
 8016786:	4b5d      	ldr	r3, [pc, #372]	; (80168fc <HAL_GPIO_Init+0x30c>)
 8016788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801678a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801678e:	60fb      	str	r3, [r7, #12]
 8016790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8016792:	4a5b      	ldr	r2, [pc, #364]	; (8016900 <HAL_GPIO_Init+0x310>)
 8016794:	69fb      	ldr	r3, [r7, #28]
 8016796:	089b      	lsrs	r3, r3, #2
 8016798:	3302      	adds	r3, #2
 801679a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801679e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80167a0:	69fb      	ldr	r3, [r7, #28]
 80167a2:	f003 0303 	and.w	r3, r3, #3
 80167a6:	009b      	lsls	r3, r3, #2
 80167a8:	220f      	movs	r2, #15
 80167aa:	fa02 f303 	lsl.w	r3, r2, r3
 80167ae:	43db      	mvns	r3, r3
 80167b0:	69ba      	ldr	r2, [r7, #24]
 80167b2:	4013      	ands	r3, r2
 80167b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	4a52      	ldr	r2, [pc, #328]	; (8016904 <HAL_GPIO_Init+0x314>)
 80167ba:	4293      	cmp	r3, r2
 80167bc:	d02b      	beq.n	8016816 <HAL_GPIO_Init+0x226>
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	4a51      	ldr	r2, [pc, #324]	; (8016908 <HAL_GPIO_Init+0x318>)
 80167c2:	4293      	cmp	r3, r2
 80167c4:	d025      	beq.n	8016812 <HAL_GPIO_Init+0x222>
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	4a50      	ldr	r2, [pc, #320]	; (801690c <HAL_GPIO_Init+0x31c>)
 80167ca:	4293      	cmp	r3, r2
 80167cc:	d01f      	beq.n	801680e <HAL_GPIO_Init+0x21e>
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	4a4f      	ldr	r2, [pc, #316]	; (8016910 <HAL_GPIO_Init+0x320>)
 80167d2:	4293      	cmp	r3, r2
 80167d4:	d019      	beq.n	801680a <HAL_GPIO_Init+0x21a>
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	4a4e      	ldr	r2, [pc, #312]	; (8016914 <HAL_GPIO_Init+0x324>)
 80167da:	4293      	cmp	r3, r2
 80167dc:	d013      	beq.n	8016806 <HAL_GPIO_Init+0x216>
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	4a4d      	ldr	r2, [pc, #308]	; (8016918 <HAL_GPIO_Init+0x328>)
 80167e2:	4293      	cmp	r3, r2
 80167e4:	d00d      	beq.n	8016802 <HAL_GPIO_Init+0x212>
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	4a4c      	ldr	r2, [pc, #304]	; (801691c <HAL_GPIO_Init+0x32c>)
 80167ea:	4293      	cmp	r3, r2
 80167ec:	d007      	beq.n	80167fe <HAL_GPIO_Init+0x20e>
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	4a4b      	ldr	r2, [pc, #300]	; (8016920 <HAL_GPIO_Init+0x330>)
 80167f2:	4293      	cmp	r3, r2
 80167f4:	d101      	bne.n	80167fa <HAL_GPIO_Init+0x20a>
 80167f6:	2307      	movs	r3, #7
 80167f8:	e00e      	b.n	8016818 <HAL_GPIO_Init+0x228>
 80167fa:	2308      	movs	r3, #8
 80167fc:	e00c      	b.n	8016818 <HAL_GPIO_Init+0x228>
 80167fe:	2306      	movs	r3, #6
 8016800:	e00a      	b.n	8016818 <HAL_GPIO_Init+0x228>
 8016802:	2305      	movs	r3, #5
 8016804:	e008      	b.n	8016818 <HAL_GPIO_Init+0x228>
 8016806:	2304      	movs	r3, #4
 8016808:	e006      	b.n	8016818 <HAL_GPIO_Init+0x228>
 801680a:	2303      	movs	r3, #3
 801680c:	e004      	b.n	8016818 <HAL_GPIO_Init+0x228>
 801680e:	2302      	movs	r3, #2
 8016810:	e002      	b.n	8016818 <HAL_GPIO_Init+0x228>
 8016812:	2301      	movs	r3, #1
 8016814:	e000      	b.n	8016818 <HAL_GPIO_Init+0x228>
 8016816:	2300      	movs	r3, #0
 8016818:	69fa      	ldr	r2, [r7, #28]
 801681a:	f002 0203 	and.w	r2, r2, #3
 801681e:	0092      	lsls	r2, r2, #2
 8016820:	4093      	lsls	r3, r2
 8016822:	69ba      	ldr	r2, [r7, #24]
 8016824:	4313      	orrs	r3, r2
 8016826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016828:	4935      	ldr	r1, [pc, #212]	; (8016900 <HAL_GPIO_Init+0x310>)
 801682a:	69fb      	ldr	r3, [r7, #28]
 801682c:	089b      	lsrs	r3, r3, #2
 801682e:	3302      	adds	r3, #2
 8016830:	69ba      	ldr	r2, [r7, #24]
 8016832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8016836:	4b3b      	ldr	r3, [pc, #236]	; (8016924 <HAL_GPIO_Init+0x334>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	43db      	mvns	r3, r3
 8016840:	69ba      	ldr	r2, [r7, #24]
 8016842:	4013      	ands	r3, r2
 8016844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	685b      	ldr	r3, [r3, #4]
 801684a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801684e:	2b00      	cmp	r3, #0
 8016850:	d003      	beq.n	801685a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8016852:	69ba      	ldr	r2, [r7, #24]
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	4313      	orrs	r3, r2
 8016858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801685a:	4a32      	ldr	r2, [pc, #200]	; (8016924 <HAL_GPIO_Init+0x334>)
 801685c:	69bb      	ldr	r3, [r7, #24]
 801685e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8016860:	4b30      	ldr	r3, [pc, #192]	; (8016924 <HAL_GPIO_Init+0x334>)
 8016862:	685b      	ldr	r3, [r3, #4]
 8016864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016866:	693b      	ldr	r3, [r7, #16]
 8016868:	43db      	mvns	r3, r3
 801686a:	69ba      	ldr	r2, [r7, #24]
 801686c:	4013      	ands	r3, r2
 801686e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	685b      	ldr	r3, [r3, #4]
 8016874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016878:	2b00      	cmp	r3, #0
 801687a:	d003      	beq.n	8016884 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 801687c:	69ba      	ldr	r2, [r7, #24]
 801687e:	693b      	ldr	r3, [r7, #16]
 8016880:	4313      	orrs	r3, r2
 8016882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8016884:	4a27      	ldr	r2, [pc, #156]	; (8016924 <HAL_GPIO_Init+0x334>)
 8016886:	69bb      	ldr	r3, [r7, #24]
 8016888:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801688a:	4b26      	ldr	r3, [pc, #152]	; (8016924 <HAL_GPIO_Init+0x334>)
 801688c:	689b      	ldr	r3, [r3, #8]
 801688e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016890:	693b      	ldr	r3, [r7, #16]
 8016892:	43db      	mvns	r3, r3
 8016894:	69ba      	ldr	r2, [r7, #24]
 8016896:	4013      	ands	r3, r2
 8016898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	685b      	ldr	r3, [r3, #4]
 801689e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d003      	beq.n	80168ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80168a6:	69ba      	ldr	r2, [r7, #24]
 80168a8:	693b      	ldr	r3, [r7, #16]
 80168aa:	4313      	orrs	r3, r2
 80168ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80168ae:	4a1d      	ldr	r2, [pc, #116]	; (8016924 <HAL_GPIO_Init+0x334>)
 80168b0:	69bb      	ldr	r3, [r7, #24]
 80168b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80168b4:	4b1b      	ldr	r3, [pc, #108]	; (8016924 <HAL_GPIO_Init+0x334>)
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80168ba:	693b      	ldr	r3, [r7, #16]
 80168bc:	43db      	mvns	r3, r3
 80168be:	69ba      	ldr	r2, [r7, #24]
 80168c0:	4013      	ands	r3, r2
 80168c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	685b      	ldr	r3, [r3, #4]
 80168c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d003      	beq.n	80168d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80168d0:	69ba      	ldr	r2, [r7, #24]
 80168d2:	693b      	ldr	r3, [r7, #16]
 80168d4:	4313      	orrs	r3, r2
 80168d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80168d8:	4a12      	ldr	r2, [pc, #72]	; (8016924 <HAL_GPIO_Init+0x334>)
 80168da:	69bb      	ldr	r3, [r7, #24]
 80168dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80168de:	69fb      	ldr	r3, [r7, #28]
 80168e0:	3301      	adds	r3, #1
 80168e2:	61fb      	str	r3, [r7, #28]
 80168e4:	69fb      	ldr	r3, [r7, #28]
 80168e6:	2b0f      	cmp	r3, #15
 80168e8:	f67f ae90 	bls.w	801660c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80168ec:	bf00      	nop
 80168ee:	bf00      	nop
 80168f0:	3724      	adds	r7, #36	; 0x24
 80168f2:	46bd      	mov	sp, r7
 80168f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f8:	4770      	bx	lr
 80168fa:	bf00      	nop
 80168fc:	40023800 	.word	0x40023800
 8016900:	40013800 	.word	0x40013800
 8016904:	40020000 	.word	0x40020000
 8016908:	40020400 	.word	0x40020400
 801690c:	40020800 	.word	0x40020800
 8016910:	40020c00 	.word	0x40020c00
 8016914:	40021000 	.word	0x40021000
 8016918:	40021400 	.word	0x40021400
 801691c:	40021800 	.word	0x40021800
 8016920:	40021c00 	.word	0x40021c00
 8016924:	40013c00 	.word	0x40013c00

08016928 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8016928:	b480      	push	{r7}
 801692a:	b085      	sub	sp, #20
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
 8016930:	460b      	mov	r3, r1
 8016932:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	691a      	ldr	r2, [r3, #16]
 8016938:	887b      	ldrh	r3, [r7, #2]
 801693a:	4013      	ands	r3, r2
 801693c:	2b00      	cmp	r3, #0
 801693e:	d002      	beq.n	8016946 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016940:	2301      	movs	r3, #1
 8016942:	73fb      	strb	r3, [r7, #15]
 8016944:	e001      	b.n	801694a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016946:	2300      	movs	r3, #0
 8016948:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801694a:	7bfb      	ldrb	r3, [r7, #15]
}
 801694c:	4618      	mov	r0, r3
 801694e:	3714      	adds	r7, #20
 8016950:	46bd      	mov	sp, r7
 8016952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016956:	4770      	bx	lr

08016958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016958:	b480      	push	{r7}
 801695a:	b083      	sub	sp, #12
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
 8016960:	460b      	mov	r3, r1
 8016962:	807b      	strh	r3, [r7, #2]
 8016964:	4613      	mov	r3, r2
 8016966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8016968:	787b      	ldrb	r3, [r7, #1]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d003      	beq.n	8016976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801696e:	887a      	ldrh	r2, [r7, #2]
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8016974:	e003      	b.n	801697e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8016976:	887b      	ldrh	r3, [r7, #2]
 8016978:	041a      	lsls	r2, r3, #16
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	619a      	str	r2, [r3, #24]
}
 801697e:	bf00      	nop
 8016980:	370c      	adds	r7, #12
 8016982:	46bd      	mov	sp, r7
 8016984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016988:	4770      	bx	lr
	...

0801698c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
 8016992:	4603      	mov	r3, r0
 8016994:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8016996:	4b08      	ldr	r3, [pc, #32]	; (80169b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8016998:	695a      	ldr	r2, [r3, #20]
 801699a:	88fb      	ldrh	r3, [r7, #6]
 801699c:	4013      	ands	r3, r2
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d006      	beq.n	80169b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80169a2:	4a05      	ldr	r2, [pc, #20]	; (80169b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80169a4:	88fb      	ldrh	r3, [r7, #6]
 80169a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80169a8:	88fb      	ldrh	r3, [r7, #6]
 80169aa:	4618      	mov	r0, r3
 80169ac:	f000 f806 	bl	80169bc <HAL_GPIO_EXTI_Callback>
  }
}
 80169b0:	bf00      	nop
 80169b2:	3708      	adds	r7, #8
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}
 80169b8:	40013c00 	.word	0x40013c00

080169bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80169bc:	b480      	push	{r7}
 80169be:	b083      	sub	sp, #12
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	4603      	mov	r3, r0
 80169c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80169c6:	bf00      	nop
 80169c8:	370c      	adds	r7, #12
 80169ca:	46bd      	mov	sp, r7
 80169cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d0:	4770      	bx	lr
	...

080169d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b084      	sub	sp, #16
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d101      	bne.n	80169e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80169e2:	2301      	movs	r3, #1
 80169e4:	e12b      	b.n	8016c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80169ec:	b2db      	uxtb	r3, r3
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d106      	bne.n	8016a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2200      	movs	r2, #0
 80169f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f7fe f984 	bl	8014d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2224      	movs	r2, #36	; 0x24
 8016a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	f022 0201 	bic.w	r2, r2, #1
 8016a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	681a      	ldr	r2, [r3, #0]
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	681a      	ldr	r2, [r3, #0]
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8016a38:	f001 fcda 	bl	80183f0 <HAL_RCC_GetPCLK1Freq>
 8016a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	4a81      	ldr	r2, [pc, #516]	; (8016c48 <HAL_I2C_Init+0x274>)
 8016a44:	4293      	cmp	r3, r2
 8016a46:	d807      	bhi.n	8016a58 <HAL_I2C_Init+0x84>
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	4a80      	ldr	r2, [pc, #512]	; (8016c4c <HAL_I2C_Init+0x278>)
 8016a4c:	4293      	cmp	r3, r2
 8016a4e:	bf94      	ite	ls
 8016a50:	2301      	movls	r3, #1
 8016a52:	2300      	movhi	r3, #0
 8016a54:	b2db      	uxtb	r3, r3
 8016a56:	e006      	b.n	8016a66 <HAL_I2C_Init+0x92>
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	4a7d      	ldr	r2, [pc, #500]	; (8016c50 <HAL_I2C_Init+0x27c>)
 8016a5c:	4293      	cmp	r3, r2
 8016a5e:	bf94      	ite	ls
 8016a60:	2301      	movls	r3, #1
 8016a62:	2300      	movhi	r3, #0
 8016a64:	b2db      	uxtb	r3, r3
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d001      	beq.n	8016a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8016a6a:	2301      	movs	r3, #1
 8016a6c:	e0e7      	b.n	8016c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	4a78      	ldr	r2, [pc, #480]	; (8016c54 <HAL_I2C_Init+0x280>)
 8016a72:	fba2 2303 	umull	r2, r3, r2, r3
 8016a76:	0c9b      	lsrs	r3, r3, #18
 8016a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	685b      	ldr	r3, [r3, #4]
 8016a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	68ba      	ldr	r2, [r7, #8]
 8016a8a:	430a      	orrs	r2, r1
 8016a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	6a1b      	ldr	r3, [r3, #32]
 8016a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	685b      	ldr	r3, [r3, #4]
 8016a9c:	4a6a      	ldr	r2, [pc, #424]	; (8016c48 <HAL_I2C_Init+0x274>)
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	d802      	bhi.n	8016aa8 <HAL_I2C_Init+0xd4>
 8016aa2:	68bb      	ldr	r3, [r7, #8]
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	e009      	b.n	8016abc <HAL_I2C_Init+0xe8>
 8016aa8:	68bb      	ldr	r3, [r7, #8]
 8016aaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8016aae:	fb02 f303 	mul.w	r3, r2, r3
 8016ab2:	4a69      	ldr	r2, [pc, #420]	; (8016c58 <HAL_I2C_Init+0x284>)
 8016ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8016ab8:	099b      	lsrs	r3, r3, #6
 8016aba:	3301      	adds	r3, #1
 8016abc:	687a      	ldr	r2, [r7, #4]
 8016abe:	6812      	ldr	r2, [r2, #0]
 8016ac0:	430b      	orrs	r3, r1
 8016ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	69db      	ldr	r3, [r3, #28]
 8016aca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8016ace:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	685b      	ldr	r3, [r3, #4]
 8016ad6:	495c      	ldr	r1, [pc, #368]	; (8016c48 <HAL_I2C_Init+0x274>)
 8016ad8:	428b      	cmp	r3, r1
 8016ada:	d819      	bhi.n	8016b10 <HAL_I2C_Init+0x13c>
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	1e59      	subs	r1, r3, #1
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	685b      	ldr	r3, [r3, #4]
 8016ae4:	005b      	lsls	r3, r3, #1
 8016ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8016aea:	1c59      	adds	r1, r3, #1
 8016aec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8016af0:	400b      	ands	r3, r1
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d00a      	beq.n	8016b0c <HAL_I2C_Init+0x138>
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	1e59      	subs	r1, r3, #1
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	685b      	ldr	r3, [r3, #4]
 8016afe:	005b      	lsls	r3, r3, #1
 8016b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8016b04:	3301      	adds	r3, #1
 8016b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b0a:	e051      	b.n	8016bb0 <HAL_I2C_Init+0x1dc>
 8016b0c:	2304      	movs	r3, #4
 8016b0e:	e04f      	b.n	8016bb0 <HAL_I2C_Init+0x1dc>
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	689b      	ldr	r3, [r3, #8]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d111      	bne.n	8016b3c <HAL_I2C_Init+0x168>
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	1e58      	subs	r0, r3, #1
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	6859      	ldr	r1, [r3, #4]
 8016b20:	460b      	mov	r3, r1
 8016b22:	005b      	lsls	r3, r3, #1
 8016b24:	440b      	add	r3, r1
 8016b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8016b2a:	3301      	adds	r3, #1
 8016b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	bf0c      	ite	eq
 8016b34:	2301      	moveq	r3, #1
 8016b36:	2300      	movne	r3, #0
 8016b38:	b2db      	uxtb	r3, r3
 8016b3a:	e012      	b.n	8016b62 <HAL_I2C_Init+0x18e>
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	1e58      	subs	r0, r3, #1
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	6859      	ldr	r1, [r3, #4]
 8016b44:	460b      	mov	r3, r1
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	440b      	add	r3, r1
 8016b4a:	0099      	lsls	r1, r3, #2
 8016b4c:	440b      	add	r3, r1
 8016b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8016b52:	3301      	adds	r3, #1
 8016b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	bf0c      	ite	eq
 8016b5c:	2301      	moveq	r3, #1
 8016b5e:	2300      	movne	r3, #0
 8016b60:	b2db      	uxtb	r3, r3
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d001      	beq.n	8016b6a <HAL_I2C_Init+0x196>
 8016b66:	2301      	movs	r3, #1
 8016b68:	e022      	b.n	8016bb0 <HAL_I2C_Init+0x1dc>
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	689b      	ldr	r3, [r3, #8]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d10e      	bne.n	8016b90 <HAL_I2C_Init+0x1bc>
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	1e58      	subs	r0, r3, #1
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	6859      	ldr	r1, [r3, #4]
 8016b7a:	460b      	mov	r3, r1
 8016b7c:	005b      	lsls	r3, r3, #1
 8016b7e:	440b      	add	r3, r1
 8016b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8016b84:	3301      	adds	r3, #1
 8016b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016b8e:	e00f      	b.n	8016bb0 <HAL_I2C_Init+0x1dc>
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	1e58      	subs	r0, r3, #1
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	6859      	ldr	r1, [r3, #4]
 8016b98:	460b      	mov	r3, r1
 8016b9a:	009b      	lsls	r3, r3, #2
 8016b9c:	440b      	add	r3, r1
 8016b9e:	0099      	lsls	r1, r3, #2
 8016ba0:	440b      	add	r3, r1
 8016ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8016ba6:	3301      	adds	r3, #1
 8016ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8016bb0:	6879      	ldr	r1, [r7, #4]
 8016bb2:	6809      	ldr	r1, [r1, #0]
 8016bb4:	4313      	orrs	r3, r2
 8016bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	69da      	ldr	r2, [r3, #28]
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6a1b      	ldr	r3, [r3, #32]
 8016bca:	431a      	orrs	r2, r3
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	430a      	orrs	r2, r1
 8016bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	689b      	ldr	r3, [r3, #8]
 8016bda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8016bde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8016be2:	687a      	ldr	r2, [r7, #4]
 8016be4:	6911      	ldr	r1, [r2, #16]
 8016be6:	687a      	ldr	r2, [r7, #4]
 8016be8:	68d2      	ldr	r2, [r2, #12]
 8016bea:	4311      	orrs	r1, r2
 8016bec:	687a      	ldr	r2, [r7, #4]
 8016bee:	6812      	ldr	r2, [r2, #0]
 8016bf0:	430b      	orrs	r3, r1
 8016bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	68db      	ldr	r3, [r3, #12]
 8016bfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	695a      	ldr	r2, [r3, #20]
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	699b      	ldr	r3, [r3, #24]
 8016c06:	431a      	orrs	r2, r3
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	430a      	orrs	r2, r1
 8016c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	681a      	ldr	r2, [r3, #0]
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	f042 0201 	orr.w	r2, r2, #1
 8016c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	2200      	movs	r2, #0
 8016c24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	2220      	movs	r2, #32
 8016c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	2200      	movs	r2, #0
 8016c32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2200      	movs	r2, #0
 8016c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8016c3c:	2300      	movs	r3, #0
}
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3710      	adds	r7, #16
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bd80      	pop	{r7, pc}
 8016c46:	bf00      	nop
 8016c48:	000186a0 	.word	0x000186a0
 8016c4c:	001e847f 	.word	0x001e847f
 8016c50:	003d08ff 	.word	0x003d08ff
 8016c54:	431bde83 	.word	0x431bde83
 8016c58:	10624dd3 	.word	0x10624dd3

08016c5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b088      	sub	sp, #32
 8016c60:	af02      	add	r7, sp, #8
 8016c62:	60f8      	str	r0, [r7, #12]
 8016c64:	607a      	str	r2, [r7, #4]
 8016c66:	461a      	mov	r2, r3
 8016c68:	460b      	mov	r3, r1
 8016c6a:	817b      	strh	r3, [r7, #10]
 8016c6c:	4613      	mov	r3, r2
 8016c6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016c70:	f7fe fa8a 	bl	8015188 <HAL_GetTick>
 8016c74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016c7c:	b2db      	uxtb	r3, r3
 8016c7e:	2b20      	cmp	r3, #32
 8016c80:	f040 80e0 	bne.w	8016e44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	9300      	str	r3, [sp, #0]
 8016c88:	2319      	movs	r3, #25
 8016c8a:	2201      	movs	r2, #1
 8016c8c:	4970      	ldr	r1, [pc, #448]	; (8016e50 <HAL_I2C_Master_Transmit+0x1f4>)
 8016c8e:	68f8      	ldr	r0, [r7, #12]
 8016c90:	f000 fd86 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 8016c94:	4603      	mov	r3, r0
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d001      	beq.n	8016c9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8016c9a:	2302      	movs	r3, #2
 8016c9c:	e0d3      	b.n	8016e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016ca4:	2b01      	cmp	r3, #1
 8016ca6:	d101      	bne.n	8016cac <HAL_I2C_Master_Transmit+0x50>
 8016ca8:	2302      	movs	r3, #2
 8016caa:	e0cc      	b.n	8016e46 <HAL_I2C_Master_Transmit+0x1ea>
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	2201      	movs	r2, #1
 8016cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	f003 0301 	and.w	r3, r3, #1
 8016cbe:	2b01      	cmp	r3, #1
 8016cc0:	d007      	beq.n	8016cd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	681a      	ldr	r2, [r3, #0]
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	f042 0201 	orr.w	r2, r2, #1
 8016cd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	681a      	ldr	r2, [r3, #0]
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016ce0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	2221      	movs	r2, #33	; 0x21
 8016ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	2210      	movs	r2, #16
 8016cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	687a      	ldr	r2, [r7, #4]
 8016cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	893a      	ldrh	r2, [r7, #8]
 8016d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d08:	b29a      	uxth	r2, r3
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	4a50      	ldr	r2, [pc, #320]	; (8016e54 <HAL_I2C_Master_Transmit+0x1f8>)
 8016d12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8016d14:	8979      	ldrh	r1, [r7, #10]
 8016d16:	697b      	ldr	r3, [r7, #20]
 8016d18:	6a3a      	ldr	r2, [r7, #32]
 8016d1a:	68f8      	ldr	r0, [r7, #12]
 8016d1c:	f000 fbf0 	bl	8017500 <I2C_MasterRequestWrite>
 8016d20:	4603      	mov	r3, r0
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d001      	beq.n	8016d2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8016d26:	2301      	movs	r3, #1
 8016d28:	e08d      	b.n	8016e46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	613b      	str	r3, [r7, #16]
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	695b      	ldr	r3, [r3, #20]
 8016d34:	613b      	str	r3, [r7, #16]
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	699b      	ldr	r3, [r3, #24]
 8016d3c:	613b      	str	r3, [r7, #16]
 8016d3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8016d40:	e066      	b.n	8016e10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016d42:	697a      	ldr	r2, [r7, #20]
 8016d44:	6a39      	ldr	r1, [r7, #32]
 8016d46:	68f8      	ldr	r0, [r7, #12]
 8016d48:	f000 fe00 	bl	801794c <I2C_WaitOnTXEFlagUntilTimeout>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d00d      	beq.n	8016d6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d56:	2b04      	cmp	r3, #4
 8016d58:	d107      	bne.n	8016d6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	681a      	ldr	r2, [r3, #0]
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016d68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	e06b      	b.n	8016e46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d72:	781a      	ldrb	r2, [r3, #0]
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d7e:	1c5a      	adds	r2, r3, #1
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	3b01      	subs	r3, #1
 8016d8c:	b29a      	uxth	r2, r3
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d96:	3b01      	subs	r3, #1
 8016d98:	b29a      	uxth	r2, r3
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	695b      	ldr	r3, [r3, #20]
 8016da4:	f003 0304 	and.w	r3, r3, #4
 8016da8:	2b04      	cmp	r3, #4
 8016daa:	d11b      	bne.n	8016de4 <HAL_I2C_Master_Transmit+0x188>
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d017      	beq.n	8016de4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016db8:	781a      	ldrb	r2, [r3, #0]
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dc4:	1c5a      	adds	r2, r3, #1
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016dce:	b29b      	uxth	r3, r3
 8016dd0:	3b01      	subs	r3, #1
 8016dd2:	b29a      	uxth	r2, r3
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ddc:	3b01      	subs	r3, #1
 8016dde:	b29a      	uxth	r2, r3
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016de4:	697a      	ldr	r2, [r7, #20]
 8016de6:	6a39      	ldr	r1, [r7, #32]
 8016de8:	68f8      	ldr	r0, [r7, #12]
 8016dea:	f000 fdf0 	bl	80179ce <I2C_WaitOnBTFFlagUntilTimeout>
 8016dee:	4603      	mov	r3, r0
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d00d      	beq.n	8016e10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016df8:	2b04      	cmp	r3, #4
 8016dfa:	d107      	bne.n	8016e0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	681a      	ldr	r2, [r3, #0]
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016e0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8016e0c:	2301      	movs	r3, #1
 8016e0e:	e01a      	b.n	8016e46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d194      	bne.n	8016d42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	681a      	ldr	r2, [r3, #0]
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	2220      	movs	r2, #32
 8016e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	2200      	movs	r2, #0
 8016e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8016e40:	2300      	movs	r3, #0
 8016e42:	e000      	b.n	8016e46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016e44:	2302      	movs	r3, #2
  }
}
 8016e46:	4618      	mov	r0, r3
 8016e48:	3718      	adds	r7, #24
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	bd80      	pop	{r7, pc}
 8016e4e:	bf00      	nop
 8016e50:	00100002 	.word	0x00100002
 8016e54:	ffff0000 	.word	0xffff0000

08016e58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b08c      	sub	sp, #48	; 0x30
 8016e5c:	af02      	add	r7, sp, #8
 8016e5e:	60f8      	str	r0, [r7, #12]
 8016e60:	607a      	str	r2, [r7, #4]
 8016e62:	461a      	mov	r2, r3
 8016e64:	460b      	mov	r3, r1
 8016e66:	817b      	strh	r3, [r7, #10]
 8016e68:	4613      	mov	r3, r2
 8016e6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8016e6c:	f7fe f98c 	bl	8015188 <HAL_GetTick>
 8016e70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016e78:	b2db      	uxtb	r3, r3
 8016e7a:	2b20      	cmp	r3, #32
 8016e7c:	f040 820b 	bne.w	8017296 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8016e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e82:	9300      	str	r3, [sp, #0]
 8016e84:	2319      	movs	r3, #25
 8016e86:	2201      	movs	r2, #1
 8016e88:	497c      	ldr	r1, [pc, #496]	; (801707c <HAL_I2C_Master_Receive+0x224>)
 8016e8a:	68f8      	ldr	r0, [r7, #12]
 8016e8c:	f000 fc88 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 8016e90:	4603      	mov	r3, r0
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d001      	beq.n	8016e9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8016e96:	2302      	movs	r3, #2
 8016e98:	e1fe      	b.n	8017298 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016ea0:	2b01      	cmp	r3, #1
 8016ea2:	d101      	bne.n	8016ea8 <HAL_I2C_Master_Receive+0x50>
 8016ea4:	2302      	movs	r3, #2
 8016ea6:	e1f7      	b.n	8017298 <HAL_I2C_Master_Receive+0x440>
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	2201      	movs	r2, #1
 8016eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	f003 0301 	and.w	r3, r3, #1
 8016eba:	2b01      	cmp	r3, #1
 8016ebc:	d007      	beq.n	8016ece <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	f042 0201 	orr.w	r2, r2, #1
 8016ecc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	681a      	ldr	r2, [r3, #0]
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016edc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	2222      	movs	r2, #34	; 0x22
 8016ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	2210      	movs	r2, #16
 8016eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	687a      	ldr	r2, [r7, #4]
 8016ef8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	893a      	ldrh	r2, [r7, #8]
 8016efe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016f04:	b29a      	uxth	r2, r3
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	4a5c      	ldr	r2, [pc, #368]	; (8017080 <HAL_I2C_Master_Receive+0x228>)
 8016f0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8016f10:	8979      	ldrh	r1, [r7, #10]
 8016f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f16:	68f8      	ldr	r0, [r7, #12]
 8016f18:	f000 fb74 	bl	8017604 <I2C_MasterRequestRead>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d001      	beq.n	8016f26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8016f22:	2301      	movs	r3, #1
 8016f24:	e1b8      	b.n	8017298 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d113      	bne.n	8016f56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016f2e:	2300      	movs	r3, #0
 8016f30:	623b      	str	r3, [r7, #32]
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	695b      	ldr	r3, [r3, #20]
 8016f38:	623b      	str	r3, [r7, #32]
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	699b      	ldr	r3, [r3, #24]
 8016f40:	623b      	str	r3, [r7, #32]
 8016f42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	681a      	ldr	r2, [r3, #0]
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f52:	601a      	str	r2, [r3, #0]
 8016f54:	e18c      	b.n	8017270 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f5a:	2b01      	cmp	r3, #1
 8016f5c:	d11b      	bne.n	8016f96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	681a      	ldr	r2, [r3, #0]
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016f6e:	2300      	movs	r3, #0
 8016f70:	61fb      	str	r3, [r7, #28]
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	695b      	ldr	r3, [r3, #20]
 8016f78:	61fb      	str	r3, [r7, #28]
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	699b      	ldr	r3, [r3, #24]
 8016f80:	61fb      	str	r3, [r7, #28]
 8016f82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	681a      	ldr	r2, [r3, #0]
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f92:	601a      	str	r2, [r3, #0]
 8016f94:	e16c      	b.n	8017270 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016f9a:	2b02      	cmp	r3, #2
 8016f9c:	d11b      	bne.n	8016fd6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	681a      	ldr	r2, [r3, #0]
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016fac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	681a      	ldr	r2, [r3, #0]
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	61bb      	str	r3, [r7, #24]
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	695b      	ldr	r3, [r3, #20]
 8016fc8:	61bb      	str	r3, [r7, #24]
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	699b      	ldr	r3, [r3, #24]
 8016fd0:	61bb      	str	r3, [r7, #24]
 8016fd2:	69bb      	ldr	r3, [r7, #24]
 8016fd4:	e14c      	b.n	8017270 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	681a      	ldr	r2, [r3, #0]
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	617b      	str	r3, [r7, #20]
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	695b      	ldr	r3, [r3, #20]
 8016ff0:	617b      	str	r3, [r7, #20]
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	699b      	ldr	r3, [r3, #24]
 8016ff8:	617b      	str	r3, [r7, #20]
 8016ffa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8016ffc:	e138      	b.n	8017270 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017002:	2b03      	cmp	r3, #3
 8017004:	f200 80f1 	bhi.w	80171ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801700c:	2b01      	cmp	r3, #1
 801700e:	d123      	bne.n	8017058 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017014:	68f8      	ldr	r0, [r7, #12]
 8017016:	f000 fd1b 	bl	8017a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 801701a:	4603      	mov	r3, r0
 801701c:	2b00      	cmp	r3, #0
 801701e:	d001      	beq.n	8017024 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8017020:	2301      	movs	r3, #1
 8017022:	e139      	b.n	8017298 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	691a      	ldr	r2, [r3, #16]
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801702e:	b2d2      	uxtb	r2, r2
 8017030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017036:	1c5a      	adds	r2, r3, #1
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017040:	3b01      	subs	r3, #1
 8017042:	b29a      	uxth	r2, r3
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801704c:	b29b      	uxth	r3, r3
 801704e:	3b01      	subs	r3, #1
 8017050:	b29a      	uxth	r2, r3
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017056:	e10b      	b.n	8017270 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801705c:	2b02      	cmp	r3, #2
 801705e:	d14e      	bne.n	80170fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8017060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017062:	9300      	str	r3, [sp, #0]
 8017064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017066:	2200      	movs	r2, #0
 8017068:	4906      	ldr	r1, [pc, #24]	; (8017084 <HAL_I2C_Master_Receive+0x22c>)
 801706a:	68f8      	ldr	r0, [r7, #12]
 801706c:	f000 fb98 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 8017070:	4603      	mov	r3, r0
 8017072:	2b00      	cmp	r3, #0
 8017074:	d008      	beq.n	8017088 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8017076:	2301      	movs	r3, #1
 8017078:	e10e      	b.n	8017298 <HAL_I2C_Master_Receive+0x440>
 801707a:	bf00      	nop
 801707c:	00100002 	.word	0x00100002
 8017080:	ffff0000 	.word	0xffff0000
 8017084:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	681a      	ldr	r2, [r3, #0]
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	691a      	ldr	r2, [r3, #16]
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170a2:	b2d2      	uxtb	r2, r2
 80170a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170aa:	1c5a      	adds	r2, r3, #1
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170b4:	3b01      	subs	r3, #1
 80170b6:	b29a      	uxth	r2, r3
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	3b01      	subs	r3, #1
 80170c4:	b29a      	uxth	r2, r3
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	691a      	ldr	r2, [r3, #16]
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170d4:	b2d2      	uxtb	r2, r2
 80170d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170dc:	1c5a      	adds	r2, r3, #1
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170e6:	3b01      	subs	r3, #1
 80170e8:	b29a      	uxth	r2, r3
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	3b01      	subs	r3, #1
 80170f6:	b29a      	uxth	r2, r3
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80170fc:	e0b8      	b.n	8017270 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80170fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017100:	9300      	str	r3, [sp, #0]
 8017102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017104:	2200      	movs	r2, #0
 8017106:	4966      	ldr	r1, [pc, #408]	; (80172a0 <HAL_I2C_Master_Receive+0x448>)
 8017108:	68f8      	ldr	r0, [r7, #12]
 801710a:	f000 fb49 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 801710e:	4603      	mov	r3, r0
 8017110:	2b00      	cmp	r3, #0
 8017112:	d001      	beq.n	8017118 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8017114:	2301      	movs	r3, #1
 8017116:	e0bf      	b.n	8017298 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	681a      	ldr	r2, [r3, #0]
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	691a      	ldr	r2, [r3, #16]
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017132:	b2d2      	uxtb	r2, r2
 8017134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801713a:	1c5a      	adds	r2, r3, #1
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017144:	3b01      	subs	r3, #1
 8017146:	b29a      	uxth	r2, r3
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017150:	b29b      	uxth	r3, r3
 8017152:	3b01      	subs	r3, #1
 8017154:	b29a      	uxth	r2, r3
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 801715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801715c:	9300      	str	r3, [sp, #0]
 801715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017160:	2200      	movs	r2, #0
 8017162:	494f      	ldr	r1, [pc, #316]	; (80172a0 <HAL_I2C_Master_Receive+0x448>)
 8017164:	68f8      	ldr	r0, [r7, #12]
 8017166:	f000 fb1b 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 801716a:	4603      	mov	r3, r0
 801716c:	2b00      	cmp	r3, #0
 801716e:	d001      	beq.n	8017174 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8017170:	2301      	movs	r3, #1
 8017172:	e091      	b.n	8017298 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	681a      	ldr	r2, [r3, #0]
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	691a      	ldr	r2, [r3, #16]
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801718e:	b2d2      	uxtb	r2, r2
 8017190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017196:	1c5a      	adds	r2, r3, #1
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171a0:	3b01      	subs	r3, #1
 80171a2:	b29a      	uxth	r2, r3
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	3b01      	subs	r3, #1
 80171b0:	b29a      	uxth	r2, r3
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	691a      	ldr	r2, [r3, #16]
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171c0:	b2d2      	uxtb	r2, r2
 80171c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171c8:	1c5a      	adds	r2, r3, #1
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171d2:	3b01      	subs	r3, #1
 80171d4:	b29a      	uxth	r2, r3
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80171de:	b29b      	uxth	r3, r3
 80171e0:	3b01      	subs	r3, #1
 80171e2:	b29a      	uxth	r2, r3
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80171e8:	e042      	b.n	8017270 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80171ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80171ee:	68f8      	ldr	r0, [r7, #12]
 80171f0:	f000 fc2e 	bl	8017a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80171f4:	4603      	mov	r3, r0
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d001      	beq.n	80171fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80171fa:	2301      	movs	r3, #1
 80171fc:	e04c      	b.n	8017298 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	691a      	ldr	r2, [r3, #16]
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017208:	b2d2      	uxtb	r2, r2
 801720a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017210:	1c5a      	adds	r2, r3, #1
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801721a:	3b01      	subs	r3, #1
 801721c:	b29a      	uxth	r2, r3
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017226:	b29b      	uxth	r3, r3
 8017228:	3b01      	subs	r3, #1
 801722a:	b29a      	uxth	r2, r3
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	695b      	ldr	r3, [r3, #20]
 8017236:	f003 0304 	and.w	r3, r3, #4
 801723a:	2b04      	cmp	r3, #4
 801723c:	d118      	bne.n	8017270 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	691a      	ldr	r2, [r3, #16]
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017248:	b2d2      	uxtb	r2, r2
 801724a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017250:	1c5a      	adds	r2, r3, #1
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801725a:	3b01      	subs	r3, #1
 801725c:	b29a      	uxth	r2, r3
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017266:	b29b      	uxth	r3, r3
 8017268:	3b01      	subs	r3, #1
 801726a:	b29a      	uxth	r2, r3
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017274:	2b00      	cmp	r3, #0
 8017276:	f47f aec2 	bne.w	8016ffe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	2220      	movs	r2, #32
 801727e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	2200      	movs	r2, #0
 8017286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	2200      	movs	r2, #0
 801728e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8017292:	2300      	movs	r3, #0
 8017294:	e000      	b.n	8017298 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8017296:	2302      	movs	r3, #2
  }
}
 8017298:	4618      	mov	r0, r3
 801729a:	3728      	adds	r7, #40	; 0x28
 801729c:	46bd      	mov	sp, r7
 801729e:	bd80      	pop	{r7, pc}
 80172a0:	00010004 	.word	0x00010004

080172a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b08a      	sub	sp, #40	; 0x28
 80172a8:	af02      	add	r7, sp, #8
 80172aa:	60f8      	str	r0, [r7, #12]
 80172ac:	607a      	str	r2, [r7, #4]
 80172ae:	603b      	str	r3, [r7, #0]
 80172b0:	460b      	mov	r3, r1
 80172b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80172b4:	f7fd ff68 	bl	8015188 <HAL_GetTick>
 80172b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80172ba:	2301      	movs	r3, #1
 80172bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80172c4:	b2db      	uxtb	r3, r3
 80172c6:	2b20      	cmp	r3, #32
 80172c8:	f040 8111 	bne.w	80174ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80172cc:	69fb      	ldr	r3, [r7, #28]
 80172ce:	9300      	str	r3, [sp, #0]
 80172d0:	2319      	movs	r3, #25
 80172d2:	2201      	movs	r2, #1
 80172d4:	4988      	ldr	r1, [pc, #544]	; (80174f8 <HAL_I2C_IsDeviceReady+0x254>)
 80172d6:	68f8      	ldr	r0, [r7, #12]
 80172d8:	f000 fa62 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d001      	beq.n	80172e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80172e2:	2302      	movs	r3, #2
 80172e4:	e104      	b.n	80174f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80172ec:	2b01      	cmp	r3, #1
 80172ee:	d101      	bne.n	80172f4 <HAL_I2C_IsDeviceReady+0x50>
 80172f0:	2302      	movs	r3, #2
 80172f2:	e0fd      	b.n	80174f0 <HAL_I2C_IsDeviceReady+0x24c>
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	2201      	movs	r2, #1
 80172f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	f003 0301 	and.w	r3, r3, #1
 8017306:	2b01      	cmp	r3, #1
 8017308:	d007      	beq.n	801731a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	681a      	ldr	r2, [r3, #0]
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	f042 0201 	orr.w	r2, r2, #1
 8017318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	681a      	ldr	r2, [r3, #0]
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017328:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	2224      	movs	r2, #36	; 0x24
 801732e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	2200      	movs	r2, #0
 8017336:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	4a70      	ldr	r2, [pc, #448]	; (80174fc <HAL_I2C_IsDeviceReady+0x258>)
 801733c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	681a      	ldr	r2, [r3, #0]
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801734c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 801734e:	69fb      	ldr	r3, [r7, #28]
 8017350:	9300      	str	r3, [sp, #0]
 8017352:	683b      	ldr	r3, [r7, #0]
 8017354:	2200      	movs	r2, #0
 8017356:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801735a:	68f8      	ldr	r0, [r7, #12]
 801735c:	f000 fa20 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 8017360:	4603      	mov	r3, r0
 8017362:	2b00      	cmp	r3, #0
 8017364:	d00d      	beq.n	8017382 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017374:	d103      	bne.n	801737e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	f44f 7200 	mov.w	r2, #512	; 0x200
 801737c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 801737e:	2303      	movs	r3, #3
 8017380:	e0b6      	b.n	80174f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8017382:	897b      	ldrh	r3, [r7, #10]
 8017384:	b2db      	uxtb	r3, r3
 8017386:	461a      	mov	r2, r3
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8017390:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8017392:	f7fd fef9 	bl	8015188 <HAL_GetTick>
 8017396:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	695b      	ldr	r3, [r3, #20]
 801739e:	f003 0302 	and.w	r3, r3, #2
 80173a2:	2b02      	cmp	r3, #2
 80173a4:	bf0c      	ite	eq
 80173a6:	2301      	moveq	r3, #1
 80173a8:	2300      	movne	r3, #0
 80173aa:	b2db      	uxtb	r3, r3
 80173ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	695b      	ldr	r3, [r3, #20]
 80173b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80173b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80173bc:	bf0c      	ite	eq
 80173be:	2301      	moveq	r3, #1
 80173c0:	2300      	movne	r3, #0
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80173c6:	e025      	b.n	8017414 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80173c8:	f7fd fede 	bl	8015188 <HAL_GetTick>
 80173cc:	4602      	mov	r2, r0
 80173ce:	69fb      	ldr	r3, [r7, #28]
 80173d0:	1ad3      	subs	r3, r2, r3
 80173d2:	683a      	ldr	r2, [r7, #0]
 80173d4:	429a      	cmp	r2, r3
 80173d6:	d302      	bcc.n	80173de <HAL_I2C_IsDeviceReady+0x13a>
 80173d8:	683b      	ldr	r3, [r7, #0]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d103      	bne.n	80173e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	22a0      	movs	r2, #160	; 0xa0
 80173e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	695b      	ldr	r3, [r3, #20]
 80173ec:	f003 0302 	and.w	r3, r3, #2
 80173f0:	2b02      	cmp	r3, #2
 80173f2:	bf0c      	ite	eq
 80173f4:	2301      	moveq	r3, #1
 80173f6:	2300      	movne	r3, #0
 80173f8:	b2db      	uxtb	r3, r3
 80173fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	695b      	ldr	r3, [r3, #20]
 8017402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801740a:	bf0c      	ite	eq
 801740c:	2301      	moveq	r3, #1
 801740e:	2300      	movne	r3, #0
 8017410:	b2db      	uxtb	r3, r3
 8017412:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801741a:	b2db      	uxtb	r3, r3
 801741c:	2ba0      	cmp	r3, #160	; 0xa0
 801741e:	d005      	beq.n	801742c <HAL_I2C_IsDeviceReady+0x188>
 8017420:	7dfb      	ldrb	r3, [r7, #23]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d102      	bne.n	801742c <HAL_I2C_IsDeviceReady+0x188>
 8017426:	7dbb      	ldrb	r3, [r7, #22]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d0cd      	beq.n	80173c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	2220      	movs	r2, #32
 8017430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	695b      	ldr	r3, [r3, #20]
 801743a:	f003 0302 	and.w	r3, r3, #2
 801743e:	2b02      	cmp	r3, #2
 8017440:	d129      	bne.n	8017496 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	681a      	ldr	r2, [r3, #0]
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017450:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017452:	2300      	movs	r3, #0
 8017454:	613b      	str	r3, [r7, #16]
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	695b      	ldr	r3, [r3, #20]
 801745c:	613b      	str	r3, [r7, #16]
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	699b      	ldr	r3, [r3, #24]
 8017464:	613b      	str	r3, [r7, #16]
 8017466:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8017468:	69fb      	ldr	r3, [r7, #28]
 801746a:	9300      	str	r3, [sp, #0]
 801746c:	2319      	movs	r3, #25
 801746e:	2201      	movs	r2, #1
 8017470:	4921      	ldr	r1, [pc, #132]	; (80174f8 <HAL_I2C_IsDeviceReady+0x254>)
 8017472:	68f8      	ldr	r0, [r7, #12]
 8017474:	f000 f994 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 8017478:	4603      	mov	r3, r0
 801747a:	2b00      	cmp	r3, #0
 801747c:	d001      	beq.n	8017482 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 801747e:	2301      	movs	r3, #1
 8017480:	e036      	b.n	80174f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	2220      	movs	r2, #32
 8017486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	2200      	movs	r2, #0
 801748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8017492:	2300      	movs	r3, #0
 8017494:	e02c      	b.n	80174f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	681a      	ldr	r2, [r3, #0]
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80174a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80174ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80174b0:	69fb      	ldr	r3, [r7, #28]
 80174b2:	9300      	str	r3, [sp, #0]
 80174b4:	2319      	movs	r3, #25
 80174b6:	2201      	movs	r2, #1
 80174b8:	490f      	ldr	r1, [pc, #60]	; (80174f8 <HAL_I2C_IsDeviceReady+0x254>)
 80174ba:	68f8      	ldr	r0, [r7, #12]
 80174bc:	f000 f970 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 80174c0:	4603      	mov	r3, r0
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d001      	beq.n	80174ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80174c6:	2301      	movs	r3, #1
 80174c8:	e012      	b.n	80174f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80174ca:	69bb      	ldr	r3, [r7, #24]
 80174cc:	3301      	adds	r3, #1
 80174ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80174d0:	69ba      	ldr	r2, [r7, #24]
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	f4ff af32 	bcc.w	801733e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	2220      	movs	r2, #32
 80174de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	2200      	movs	r2, #0
 80174e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80174ea:	2301      	movs	r3, #1
 80174ec:	e000      	b.n	80174f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80174ee:	2302      	movs	r3, #2
  }
}
 80174f0:	4618      	mov	r0, r3
 80174f2:	3720      	adds	r7, #32
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}
 80174f8:	00100002 	.word	0x00100002
 80174fc:	ffff0000 	.word	0xffff0000

08017500 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b088      	sub	sp, #32
 8017504:	af02      	add	r7, sp, #8
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	607a      	str	r2, [r7, #4]
 801750a:	603b      	str	r3, [r7, #0]
 801750c:	460b      	mov	r3, r1
 801750e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017514:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8017516:	697b      	ldr	r3, [r7, #20]
 8017518:	2b08      	cmp	r3, #8
 801751a:	d006      	beq.n	801752a <I2C_MasterRequestWrite+0x2a>
 801751c:	697b      	ldr	r3, [r7, #20]
 801751e:	2b01      	cmp	r3, #1
 8017520:	d003      	beq.n	801752a <I2C_MasterRequestWrite+0x2a>
 8017522:	697b      	ldr	r3, [r7, #20]
 8017524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017528:	d108      	bne.n	801753c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	681a      	ldr	r2, [r3, #0]
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017538:	601a      	str	r2, [r3, #0]
 801753a:	e00b      	b.n	8017554 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017540:	2b12      	cmp	r3, #18
 8017542:	d107      	bne.n	8017554 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	681a      	ldr	r2, [r3, #0]
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8017554:	683b      	ldr	r3, [r7, #0]
 8017556:	9300      	str	r3, [sp, #0]
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	2200      	movs	r2, #0
 801755c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8017560:	68f8      	ldr	r0, [r7, #12]
 8017562:	f000 f91d 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 8017566:	4603      	mov	r3, r0
 8017568:	2b00      	cmp	r3, #0
 801756a:	d00d      	beq.n	8017588 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801757a:	d103      	bne.n	8017584 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8017584:	2303      	movs	r3, #3
 8017586:	e035      	b.n	80175f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	691b      	ldr	r3, [r3, #16]
 801758c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017590:	d108      	bne.n	80175a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8017592:	897b      	ldrh	r3, [r7, #10]
 8017594:	b2db      	uxtb	r3, r3
 8017596:	461a      	mov	r2, r3
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80175a0:	611a      	str	r2, [r3, #16]
 80175a2:	e01b      	b.n	80175dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80175a4:	897b      	ldrh	r3, [r7, #10]
 80175a6:	11db      	asrs	r3, r3, #7
 80175a8:	b2db      	uxtb	r3, r3
 80175aa:	f003 0306 	and.w	r3, r3, #6
 80175ae:	b2db      	uxtb	r3, r3
 80175b0:	f063 030f 	orn	r3, r3, #15
 80175b4:	b2da      	uxtb	r2, r3
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80175bc:	683b      	ldr	r3, [r7, #0]
 80175be:	687a      	ldr	r2, [r7, #4]
 80175c0:	490e      	ldr	r1, [pc, #56]	; (80175fc <I2C_MasterRequestWrite+0xfc>)
 80175c2:	68f8      	ldr	r0, [r7, #12]
 80175c4:	f000 f943 	bl	801784e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80175c8:	4603      	mov	r3, r0
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d001      	beq.n	80175d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80175ce:	2301      	movs	r3, #1
 80175d0:	e010      	b.n	80175f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80175d2:	897b      	ldrh	r3, [r7, #10]
 80175d4:	b2da      	uxtb	r2, r3
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	687a      	ldr	r2, [r7, #4]
 80175e0:	4907      	ldr	r1, [pc, #28]	; (8017600 <I2C_MasterRequestWrite+0x100>)
 80175e2:	68f8      	ldr	r0, [r7, #12]
 80175e4:	f000 f933 	bl	801784e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80175e8:	4603      	mov	r3, r0
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d001      	beq.n	80175f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80175ee:	2301      	movs	r3, #1
 80175f0:	e000      	b.n	80175f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80175f2:	2300      	movs	r3, #0
}
 80175f4:	4618      	mov	r0, r3
 80175f6:	3718      	adds	r7, #24
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}
 80175fc:	00010008 	.word	0x00010008
 8017600:	00010002 	.word	0x00010002

08017604 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b088      	sub	sp, #32
 8017608:	af02      	add	r7, sp, #8
 801760a:	60f8      	str	r0, [r7, #12]
 801760c:	607a      	str	r2, [r7, #4]
 801760e:	603b      	str	r3, [r7, #0]
 8017610:	460b      	mov	r3, r1
 8017612:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017618:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	681a      	ldr	r2, [r3, #0]
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017628:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	2b08      	cmp	r3, #8
 801762e:	d006      	beq.n	801763e <I2C_MasterRequestRead+0x3a>
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	2b01      	cmp	r3, #1
 8017634:	d003      	beq.n	801763e <I2C_MasterRequestRead+0x3a>
 8017636:	697b      	ldr	r3, [r7, #20]
 8017638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801763c:	d108      	bne.n	8017650 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	681a      	ldr	r2, [r3, #0]
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801764c:	601a      	str	r2, [r3, #0]
 801764e:	e00b      	b.n	8017668 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017654:	2b11      	cmp	r3, #17
 8017656:	d107      	bne.n	8017668 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	681a      	ldr	r2, [r3, #0]
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8017668:	683b      	ldr	r3, [r7, #0]
 801766a:	9300      	str	r3, [sp, #0]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2200      	movs	r2, #0
 8017670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8017674:	68f8      	ldr	r0, [r7, #12]
 8017676:	f000 f893 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 801767a:	4603      	mov	r3, r0
 801767c:	2b00      	cmp	r3, #0
 801767e:	d00d      	beq.n	801769c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801768a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801768e:	d103      	bne.n	8017698 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8017698:	2303      	movs	r3, #3
 801769a:	e079      	b.n	8017790 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	691b      	ldr	r3, [r3, #16]
 80176a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80176a4:	d108      	bne.n	80176b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80176a6:	897b      	ldrh	r3, [r7, #10]
 80176a8:	b2db      	uxtb	r3, r3
 80176aa:	f043 0301 	orr.w	r3, r3, #1
 80176ae:	b2da      	uxtb	r2, r3
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	611a      	str	r2, [r3, #16]
 80176b6:	e05f      	b.n	8017778 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80176b8:	897b      	ldrh	r3, [r7, #10]
 80176ba:	11db      	asrs	r3, r3, #7
 80176bc:	b2db      	uxtb	r3, r3
 80176be:	f003 0306 	and.w	r3, r3, #6
 80176c2:	b2db      	uxtb	r3, r3
 80176c4:	f063 030f 	orn	r3, r3, #15
 80176c8:	b2da      	uxtb	r2, r3
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80176d0:	683b      	ldr	r3, [r7, #0]
 80176d2:	687a      	ldr	r2, [r7, #4]
 80176d4:	4930      	ldr	r1, [pc, #192]	; (8017798 <I2C_MasterRequestRead+0x194>)
 80176d6:	68f8      	ldr	r0, [r7, #12]
 80176d8:	f000 f8b9 	bl	801784e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80176dc:	4603      	mov	r3, r0
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d001      	beq.n	80176e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80176e2:	2301      	movs	r3, #1
 80176e4:	e054      	b.n	8017790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80176e6:	897b      	ldrh	r3, [r7, #10]
 80176e8:	b2da      	uxtb	r2, r3
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80176f0:	683b      	ldr	r3, [r7, #0]
 80176f2:	687a      	ldr	r2, [r7, #4]
 80176f4:	4929      	ldr	r1, [pc, #164]	; (801779c <I2C_MasterRequestRead+0x198>)
 80176f6:	68f8      	ldr	r0, [r7, #12]
 80176f8:	f000 f8a9 	bl	801784e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80176fc:	4603      	mov	r3, r0
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d001      	beq.n	8017706 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8017702:	2301      	movs	r3, #1
 8017704:	e044      	b.n	8017790 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017706:	2300      	movs	r3, #0
 8017708:	613b      	str	r3, [r7, #16]
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	695b      	ldr	r3, [r3, #20]
 8017710:	613b      	str	r3, [r7, #16]
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	699b      	ldr	r3, [r3, #24]
 8017718:	613b      	str	r3, [r7, #16]
 801771a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	681a      	ldr	r2, [r3, #0]
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801772a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801772c:	683b      	ldr	r3, [r7, #0]
 801772e:	9300      	str	r3, [sp, #0]
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2200      	movs	r2, #0
 8017734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8017738:	68f8      	ldr	r0, [r7, #12]
 801773a:	f000 f831 	bl	80177a0 <I2C_WaitOnFlagUntilTimeout>
 801773e:	4603      	mov	r3, r0
 8017740:	2b00      	cmp	r3, #0
 8017742:	d00d      	beq.n	8017760 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801774e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017752:	d103      	bne.n	801775c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	f44f 7200 	mov.w	r2, #512	; 0x200
 801775a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 801775c:	2303      	movs	r3, #3
 801775e:	e017      	b.n	8017790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8017760:	897b      	ldrh	r3, [r7, #10]
 8017762:	11db      	asrs	r3, r3, #7
 8017764:	b2db      	uxtb	r3, r3
 8017766:	f003 0306 	and.w	r3, r3, #6
 801776a:	b2db      	uxtb	r3, r3
 801776c:	f063 030e 	orn	r3, r3, #14
 8017770:	b2da      	uxtb	r2, r3
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	687a      	ldr	r2, [r7, #4]
 801777c:	4907      	ldr	r1, [pc, #28]	; (801779c <I2C_MasterRequestRead+0x198>)
 801777e:	68f8      	ldr	r0, [r7, #12]
 8017780:	f000 f865 	bl	801784e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8017784:	4603      	mov	r3, r0
 8017786:	2b00      	cmp	r3, #0
 8017788:	d001      	beq.n	801778e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 801778a:	2301      	movs	r3, #1
 801778c:	e000      	b.n	8017790 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 801778e:	2300      	movs	r3, #0
}
 8017790:	4618      	mov	r0, r3
 8017792:	3718      	adds	r7, #24
 8017794:	46bd      	mov	sp, r7
 8017796:	bd80      	pop	{r7, pc}
 8017798:	00010008 	.word	0x00010008
 801779c:	00010002 	.word	0x00010002

080177a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b084      	sub	sp, #16
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	60f8      	str	r0, [r7, #12]
 80177a8:	60b9      	str	r1, [r7, #8]
 80177aa:	603b      	str	r3, [r7, #0]
 80177ac:	4613      	mov	r3, r2
 80177ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80177b0:	e025      	b.n	80177fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80177b2:	683b      	ldr	r3, [r7, #0]
 80177b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177b8:	d021      	beq.n	80177fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80177ba:	f7fd fce5 	bl	8015188 <HAL_GetTick>
 80177be:	4602      	mov	r2, r0
 80177c0:	69bb      	ldr	r3, [r7, #24]
 80177c2:	1ad3      	subs	r3, r2, r3
 80177c4:	683a      	ldr	r2, [r7, #0]
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d302      	bcc.n	80177d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d116      	bne.n	80177fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	2200      	movs	r2, #0
 80177d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	2220      	movs	r2, #32
 80177da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	2200      	movs	r2, #0
 80177e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177ea:	f043 0220 	orr.w	r2, r3, #32
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	2200      	movs	r2, #0
 80177f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80177fa:	2301      	movs	r3, #1
 80177fc:	e023      	b.n	8017846 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80177fe:	68bb      	ldr	r3, [r7, #8]
 8017800:	0c1b      	lsrs	r3, r3, #16
 8017802:	b2db      	uxtb	r3, r3
 8017804:	2b01      	cmp	r3, #1
 8017806:	d10d      	bne.n	8017824 <I2C_WaitOnFlagUntilTimeout+0x84>
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	695b      	ldr	r3, [r3, #20]
 801780e:	43da      	mvns	r2, r3
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	4013      	ands	r3, r2
 8017814:	b29b      	uxth	r3, r3
 8017816:	2b00      	cmp	r3, #0
 8017818:	bf0c      	ite	eq
 801781a:	2301      	moveq	r3, #1
 801781c:	2300      	movne	r3, #0
 801781e:	b2db      	uxtb	r3, r3
 8017820:	461a      	mov	r2, r3
 8017822:	e00c      	b.n	801783e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	699b      	ldr	r3, [r3, #24]
 801782a:	43da      	mvns	r2, r3
 801782c:	68bb      	ldr	r3, [r7, #8]
 801782e:	4013      	ands	r3, r2
 8017830:	b29b      	uxth	r3, r3
 8017832:	2b00      	cmp	r3, #0
 8017834:	bf0c      	ite	eq
 8017836:	2301      	moveq	r3, #1
 8017838:	2300      	movne	r3, #0
 801783a:	b2db      	uxtb	r3, r3
 801783c:	461a      	mov	r2, r3
 801783e:	79fb      	ldrb	r3, [r7, #7]
 8017840:	429a      	cmp	r2, r3
 8017842:	d0b6      	beq.n	80177b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017844:	2300      	movs	r3, #0
}
 8017846:	4618      	mov	r0, r3
 8017848:	3710      	adds	r7, #16
 801784a:	46bd      	mov	sp, r7
 801784c:	bd80      	pop	{r7, pc}

0801784e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801784e:	b580      	push	{r7, lr}
 8017850:	b084      	sub	sp, #16
 8017852:	af00      	add	r7, sp, #0
 8017854:	60f8      	str	r0, [r7, #12]
 8017856:	60b9      	str	r1, [r7, #8]
 8017858:	607a      	str	r2, [r7, #4]
 801785a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801785c:	e051      	b.n	8017902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	695b      	ldr	r3, [r3, #20]
 8017864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801786c:	d123      	bne.n	80178b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	681a      	ldr	r2, [r3, #0]
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801787c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017886:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	2200      	movs	r2, #0
 801788c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	2220      	movs	r2, #32
 8017892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	2200      	movs	r2, #0
 801789a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178a2:	f043 0204 	orr.w	r2, r3, #4
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	2200      	movs	r2, #0
 80178ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80178b2:	2301      	movs	r3, #1
 80178b4:	e046      	b.n	8017944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178bc:	d021      	beq.n	8017902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80178be:	f7fd fc63 	bl	8015188 <HAL_GetTick>
 80178c2:	4602      	mov	r2, r0
 80178c4:	683b      	ldr	r3, [r7, #0]
 80178c6:	1ad3      	subs	r3, r2, r3
 80178c8:	687a      	ldr	r2, [r7, #4]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d302      	bcc.n	80178d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d116      	bne.n	8017902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	2200      	movs	r2, #0
 80178d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	2220      	movs	r2, #32
 80178de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	2200      	movs	r2, #0
 80178e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178ee:	f043 0220 	orr.w	r2, r3, #32
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	2200      	movs	r2, #0
 80178fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80178fe:	2301      	movs	r3, #1
 8017900:	e020      	b.n	8017944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8017902:	68bb      	ldr	r3, [r7, #8]
 8017904:	0c1b      	lsrs	r3, r3, #16
 8017906:	b2db      	uxtb	r3, r3
 8017908:	2b01      	cmp	r3, #1
 801790a:	d10c      	bne.n	8017926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	695b      	ldr	r3, [r3, #20]
 8017912:	43da      	mvns	r2, r3
 8017914:	68bb      	ldr	r3, [r7, #8]
 8017916:	4013      	ands	r3, r2
 8017918:	b29b      	uxth	r3, r3
 801791a:	2b00      	cmp	r3, #0
 801791c:	bf14      	ite	ne
 801791e:	2301      	movne	r3, #1
 8017920:	2300      	moveq	r3, #0
 8017922:	b2db      	uxtb	r3, r3
 8017924:	e00b      	b.n	801793e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	699b      	ldr	r3, [r3, #24]
 801792c:	43da      	mvns	r2, r3
 801792e:	68bb      	ldr	r3, [r7, #8]
 8017930:	4013      	ands	r3, r2
 8017932:	b29b      	uxth	r3, r3
 8017934:	2b00      	cmp	r3, #0
 8017936:	bf14      	ite	ne
 8017938:	2301      	movne	r3, #1
 801793a:	2300      	moveq	r3, #0
 801793c:	b2db      	uxtb	r3, r3
 801793e:	2b00      	cmp	r3, #0
 8017940:	d18d      	bne.n	801785e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8017942:	2300      	movs	r3, #0
}
 8017944:	4618      	mov	r0, r3
 8017946:	3710      	adds	r7, #16
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}

0801794c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b084      	sub	sp, #16
 8017950:	af00      	add	r7, sp, #0
 8017952:	60f8      	str	r0, [r7, #12]
 8017954:	60b9      	str	r1, [r7, #8]
 8017956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017958:	e02d      	b.n	80179b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801795a:	68f8      	ldr	r0, [r7, #12]
 801795c:	f000 f8ce 	bl	8017afc <I2C_IsAcknowledgeFailed>
 8017960:	4603      	mov	r3, r0
 8017962:	2b00      	cmp	r3, #0
 8017964:	d001      	beq.n	801796a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8017966:	2301      	movs	r3, #1
 8017968:	e02d      	b.n	80179c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801796a:	68bb      	ldr	r3, [r7, #8]
 801796c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017970:	d021      	beq.n	80179b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017972:	f7fd fc09 	bl	8015188 <HAL_GetTick>
 8017976:	4602      	mov	r2, r0
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	1ad3      	subs	r3, r2, r3
 801797c:	68ba      	ldr	r2, [r7, #8]
 801797e:	429a      	cmp	r2, r3
 8017980:	d302      	bcc.n	8017988 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8017982:	68bb      	ldr	r3, [r7, #8]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d116      	bne.n	80179b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	2200      	movs	r2, #0
 801798c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	2220      	movs	r2, #32
 8017992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	2200      	movs	r2, #0
 801799a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801799e:	68fb      	ldr	r3, [r7, #12]
 80179a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80179a2:	f043 0220 	orr.w	r2, r3, #32
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	2200      	movs	r2, #0
 80179ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80179b2:	2301      	movs	r3, #1
 80179b4:	e007      	b.n	80179c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	695b      	ldr	r3, [r3, #20]
 80179bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80179c0:	2b80      	cmp	r3, #128	; 0x80
 80179c2:	d1ca      	bne.n	801795a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80179c4:	2300      	movs	r3, #0
}
 80179c6:	4618      	mov	r0, r3
 80179c8:	3710      	adds	r7, #16
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd80      	pop	{r7, pc}

080179ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80179ce:	b580      	push	{r7, lr}
 80179d0:	b084      	sub	sp, #16
 80179d2:	af00      	add	r7, sp, #0
 80179d4:	60f8      	str	r0, [r7, #12]
 80179d6:	60b9      	str	r1, [r7, #8]
 80179d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80179da:	e02d      	b.n	8017a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80179dc:	68f8      	ldr	r0, [r7, #12]
 80179de:	f000 f88d 	bl	8017afc <I2C_IsAcknowledgeFailed>
 80179e2:	4603      	mov	r3, r0
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d001      	beq.n	80179ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80179e8:	2301      	movs	r3, #1
 80179ea:	e02d      	b.n	8017a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80179ec:	68bb      	ldr	r3, [r7, #8]
 80179ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179f2:	d021      	beq.n	8017a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80179f4:	f7fd fbc8 	bl	8015188 <HAL_GetTick>
 80179f8:	4602      	mov	r2, r0
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	1ad3      	subs	r3, r2, r3
 80179fe:	68ba      	ldr	r2, [r7, #8]
 8017a00:	429a      	cmp	r2, r3
 8017a02:	d302      	bcc.n	8017a0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8017a04:	68bb      	ldr	r3, [r7, #8]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d116      	bne.n	8017a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	2220      	movs	r2, #32
 8017a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a24:	f043 0220 	orr.w	r2, r3, #32
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	2200      	movs	r2, #0
 8017a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8017a34:	2301      	movs	r3, #1
 8017a36:	e007      	b.n	8017a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	695b      	ldr	r3, [r3, #20]
 8017a3e:	f003 0304 	and.w	r3, r3, #4
 8017a42:	2b04      	cmp	r3, #4
 8017a44:	d1ca      	bne.n	80179dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017a46:	2300      	movs	r3, #0
}
 8017a48:	4618      	mov	r0, r3
 8017a4a:	3710      	adds	r7, #16
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}

08017a50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b084      	sub	sp, #16
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	60f8      	str	r0, [r7, #12]
 8017a58:	60b9      	str	r1, [r7, #8]
 8017a5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017a5c:	e042      	b.n	8017ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	695b      	ldr	r3, [r3, #20]
 8017a64:	f003 0310 	and.w	r3, r3, #16
 8017a68:	2b10      	cmp	r3, #16
 8017a6a:	d119      	bne.n	8017aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	f06f 0210 	mvn.w	r2, #16
 8017a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	2200      	movs	r2, #0
 8017a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	2220      	movs	r2, #32
 8017a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	2200      	movs	r2, #0
 8017a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	2200      	movs	r2, #0
 8017a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8017a9c:	2301      	movs	r3, #1
 8017a9e:	e029      	b.n	8017af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017aa0:	f7fd fb72 	bl	8015188 <HAL_GetTick>
 8017aa4:	4602      	mov	r2, r0
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	1ad3      	subs	r3, r2, r3
 8017aaa:	68ba      	ldr	r2, [r7, #8]
 8017aac:	429a      	cmp	r2, r3
 8017aae:	d302      	bcc.n	8017ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8017ab0:	68bb      	ldr	r3, [r7, #8]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d116      	bne.n	8017ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	2200      	movs	r2, #0
 8017aba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	2220      	movs	r2, #32
 8017ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ad0:	f043 0220 	orr.w	r2, r3, #32
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2200      	movs	r2, #0
 8017adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8017ae0:	2301      	movs	r3, #1
 8017ae2:	e007      	b.n	8017af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	695b      	ldr	r3, [r3, #20]
 8017aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017aee:	2b40      	cmp	r3, #64	; 0x40
 8017af0:	d1b5      	bne.n	8017a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8017af2:	2300      	movs	r3, #0
}
 8017af4:	4618      	mov	r0, r3
 8017af6:	3710      	adds	r7, #16
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}

08017afc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8017afc:	b480      	push	{r7}
 8017afe:	b083      	sub	sp, #12
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	695b      	ldr	r3, [r3, #20]
 8017b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017b12:	d11b      	bne.n	8017b4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017b1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2200      	movs	r2, #0
 8017b22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	2220      	movs	r2, #32
 8017b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2200      	movs	r2, #0
 8017b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b38:	f043 0204 	orr.w	r2, r3, #4
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	2200      	movs	r2, #0
 8017b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8017b48:	2301      	movs	r3, #1
 8017b4a:	e000      	b.n	8017b4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8017b4c:	2300      	movs	r3, #0
}
 8017b4e:	4618      	mov	r0, r3
 8017b50:	370c      	adds	r7, #12
 8017b52:	46bd      	mov	sp, r7
 8017b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b58:	4770      	bx	lr
	...

08017b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b086      	sub	sp, #24
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d101      	bne.n	8017b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8017b6a:	2301      	movs	r3, #1
 8017b6c:	e264      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	f003 0301 	and.w	r3, r3, #1
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d075      	beq.n	8017c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8017b7a:	4ba3      	ldr	r3, [pc, #652]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017b7c:	689b      	ldr	r3, [r3, #8]
 8017b7e:	f003 030c 	and.w	r3, r3, #12
 8017b82:	2b04      	cmp	r3, #4
 8017b84:	d00c      	beq.n	8017ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8017b86:	4ba0      	ldr	r3, [pc, #640]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017b88:	689b      	ldr	r3, [r3, #8]
 8017b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8017b8e:	2b08      	cmp	r3, #8
 8017b90:	d112      	bne.n	8017bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8017b92:	4b9d      	ldr	r3, [pc, #628]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017b94:	685b      	ldr	r3, [r3, #4]
 8017b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8017b9e:	d10b      	bne.n	8017bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017ba0:	4b99      	ldr	r3, [pc, #612]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d05b      	beq.n	8017c64 <HAL_RCC_OscConfig+0x108>
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	685b      	ldr	r3, [r3, #4]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d157      	bne.n	8017c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8017bb4:	2301      	movs	r3, #1
 8017bb6:	e23f      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	685b      	ldr	r3, [r3, #4]
 8017bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017bc0:	d106      	bne.n	8017bd0 <HAL_RCC_OscConfig+0x74>
 8017bc2:	4b91      	ldr	r3, [pc, #580]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	4a90      	ldr	r2, [pc, #576]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017bcc:	6013      	str	r3, [r2, #0]
 8017bce:	e01d      	b.n	8017c0c <HAL_RCC_OscConfig+0xb0>
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	685b      	ldr	r3, [r3, #4]
 8017bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8017bd8:	d10c      	bne.n	8017bf4 <HAL_RCC_OscConfig+0x98>
 8017bda:	4b8b      	ldr	r3, [pc, #556]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	4a8a      	ldr	r2, [pc, #552]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017be4:	6013      	str	r3, [r2, #0]
 8017be6:	4b88      	ldr	r3, [pc, #544]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	4a87      	ldr	r2, [pc, #540]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017bf0:	6013      	str	r3, [r2, #0]
 8017bf2:	e00b      	b.n	8017c0c <HAL_RCC_OscConfig+0xb0>
 8017bf4:	4b84      	ldr	r3, [pc, #528]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	4a83      	ldr	r2, [pc, #524]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017bfe:	6013      	str	r3, [r2, #0]
 8017c00:	4b81      	ldr	r3, [pc, #516]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	4a80      	ldr	r2, [pc, #512]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	685b      	ldr	r3, [r3, #4]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d013      	beq.n	8017c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017c14:	f7fd fab8 	bl	8015188 <HAL_GetTick>
 8017c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017c1a:	e008      	b.n	8017c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017c1c:	f7fd fab4 	bl	8015188 <HAL_GetTick>
 8017c20:	4602      	mov	r2, r0
 8017c22:	693b      	ldr	r3, [r7, #16]
 8017c24:	1ad3      	subs	r3, r2, r3
 8017c26:	2b64      	cmp	r3, #100	; 0x64
 8017c28:	d901      	bls.n	8017c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8017c2a:	2303      	movs	r3, #3
 8017c2c:	e204      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8017c2e:	4b76      	ldr	r3, [pc, #472]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d0f0      	beq.n	8017c1c <HAL_RCC_OscConfig+0xc0>
 8017c3a:	e014      	b.n	8017c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017c3c:	f7fd faa4 	bl	8015188 <HAL_GetTick>
 8017c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017c42:	e008      	b.n	8017c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8017c44:	f7fd faa0 	bl	8015188 <HAL_GetTick>
 8017c48:	4602      	mov	r2, r0
 8017c4a:	693b      	ldr	r3, [r7, #16]
 8017c4c:	1ad3      	subs	r3, r2, r3
 8017c4e:	2b64      	cmp	r3, #100	; 0x64
 8017c50:	d901      	bls.n	8017c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8017c52:	2303      	movs	r3, #3
 8017c54:	e1f0      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8017c56:	4b6c      	ldr	r3, [pc, #432]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d1f0      	bne.n	8017c44 <HAL_RCC_OscConfig+0xe8>
 8017c62:	e000      	b.n	8017c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8017c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	f003 0302 	and.w	r3, r3, #2
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d063      	beq.n	8017d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8017c72:	4b65      	ldr	r3, [pc, #404]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017c74:	689b      	ldr	r3, [r3, #8]
 8017c76:	f003 030c 	and.w	r3, r3, #12
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d00b      	beq.n	8017c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8017c7e:	4b62      	ldr	r3, [pc, #392]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017c80:	689b      	ldr	r3, [r3, #8]
 8017c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8017c86:	2b08      	cmp	r3, #8
 8017c88:	d11c      	bne.n	8017cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8017c8a:	4b5f      	ldr	r3, [pc, #380]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017c8c:	685b      	ldr	r3, [r3, #4]
 8017c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d116      	bne.n	8017cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017c96:	4b5c      	ldr	r3, [pc, #368]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	f003 0302 	and.w	r3, r3, #2
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d005      	beq.n	8017cae <HAL_RCC_OscConfig+0x152>
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	68db      	ldr	r3, [r3, #12]
 8017ca6:	2b01      	cmp	r3, #1
 8017ca8:	d001      	beq.n	8017cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8017caa:	2301      	movs	r3, #1
 8017cac:	e1c4      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017cae:	4b56      	ldr	r3, [pc, #344]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	691b      	ldr	r3, [r3, #16]
 8017cba:	00db      	lsls	r3, r3, #3
 8017cbc:	4952      	ldr	r1, [pc, #328]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017cbe:	4313      	orrs	r3, r2
 8017cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8017cc2:	e03a      	b.n	8017d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	68db      	ldr	r3, [r3, #12]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d020      	beq.n	8017d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017ccc:	4b4f      	ldr	r3, [pc, #316]	; (8017e0c <HAL_RCC_OscConfig+0x2b0>)
 8017cce:	2201      	movs	r2, #1
 8017cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017cd2:	f7fd fa59 	bl	8015188 <HAL_GetTick>
 8017cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017cd8:	e008      	b.n	8017cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017cda:	f7fd fa55 	bl	8015188 <HAL_GetTick>
 8017cde:	4602      	mov	r2, r0
 8017ce0:	693b      	ldr	r3, [r7, #16]
 8017ce2:	1ad3      	subs	r3, r2, r3
 8017ce4:	2b02      	cmp	r3, #2
 8017ce6:	d901      	bls.n	8017cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8017ce8:	2303      	movs	r3, #3
 8017cea:	e1a5      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8017cec:	4b46      	ldr	r3, [pc, #280]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	f003 0302 	and.w	r3, r3, #2
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d0f0      	beq.n	8017cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017cf8:	4b43      	ldr	r3, [pc, #268]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	691b      	ldr	r3, [r3, #16]
 8017d04:	00db      	lsls	r3, r3, #3
 8017d06:	4940      	ldr	r1, [pc, #256]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017d08:	4313      	orrs	r3, r2
 8017d0a:	600b      	str	r3, [r1, #0]
 8017d0c:	e015      	b.n	8017d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017d0e:	4b3f      	ldr	r3, [pc, #252]	; (8017e0c <HAL_RCC_OscConfig+0x2b0>)
 8017d10:	2200      	movs	r2, #0
 8017d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017d14:	f7fd fa38 	bl	8015188 <HAL_GetTick>
 8017d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017d1a:	e008      	b.n	8017d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8017d1c:	f7fd fa34 	bl	8015188 <HAL_GetTick>
 8017d20:	4602      	mov	r2, r0
 8017d22:	693b      	ldr	r3, [r7, #16]
 8017d24:	1ad3      	subs	r3, r2, r3
 8017d26:	2b02      	cmp	r3, #2
 8017d28:	d901      	bls.n	8017d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8017d2a:	2303      	movs	r3, #3
 8017d2c:	e184      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8017d2e:	4b36      	ldr	r3, [pc, #216]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	f003 0302 	and.w	r3, r3, #2
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d1f0      	bne.n	8017d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	f003 0308 	and.w	r3, r3, #8
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d030      	beq.n	8017da8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	695b      	ldr	r3, [r3, #20]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d016      	beq.n	8017d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8017d4e:	4b30      	ldr	r3, [pc, #192]	; (8017e10 <HAL_RCC_OscConfig+0x2b4>)
 8017d50:	2201      	movs	r2, #1
 8017d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017d54:	f7fd fa18 	bl	8015188 <HAL_GetTick>
 8017d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017d5a:	e008      	b.n	8017d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017d5c:	f7fd fa14 	bl	8015188 <HAL_GetTick>
 8017d60:	4602      	mov	r2, r0
 8017d62:	693b      	ldr	r3, [r7, #16]
 8017d64:	1ad3      	subs	r3, r2, r3
 8017d66:	2b02      	cmp	r3, #2
 8017d68:	d901      	bls.n	8017d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8017d6a:	2303      	movs	r3, #3
 8017d6c:	e164      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8017d6e:	4b26      	ldr	r3, [pc, #152]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017d72:	f003 0302 	and.w	r3, r3, #2
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d0f0      	beq.n	8017d5c <HAL_RCC_OscConfig+0x200>
 8017d7a:	e015      	b.n	8017da8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8017d7c:	4b24      	ldr	r3, [pc, #144]	; (8017e10 <HAL_RCC_OscConfig+0x2b4>)
 8017d7e:	2200      	movs	r2, #0
 8017d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017d82:	f7fd fa01 	bl	8015188 <HAL_GetTick>
 8017d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8017d88:	e008      	b.n	8017d9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8017d8a:	f7fd f9fd 	bl	8015188 <HAL_GetTick>
 8017d8e:	4602      	mov	r2, r0
 8017d90:	693b      	ldr	r3, [r7, #16]
 8017d92:	1ad3      	subs	r3, r2, r3
 8017d94:	2b02      	cmp	r3, #2
 8017d96:	d901      	bls.n	8017d9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8017d98:	2303      	movs	r3, #3
 8017d9a:	e14d      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8017d9c:	4b1a      	ldr	r3, [pc, #104]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017da0:	f003 0302 	and.w	r3, r3, #2
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d1f0      	bne.n	8017d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	f003 0304 	and.w	r3, r3, #4
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	f000 80a0 	beq.w	8017ef6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8017db6:	2300      	movs	r3, #0
 8017db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017dba:	4b13      	ldr	r3, [pc, #76]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d10f      	bne.n	8017de6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	60bb      	str	r3, [r7, #8]
 8017dca:	4b0f      	ldr	r3, [pc, #60]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dce:	4a0e      	ldr	r2, [pc, #56]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8017dd6:	4b0c      	ldr	r3, [pc, #48]	; (8017e08 <HAL_RCC_OscConfig+0x2ac>)
 8017dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017dde:	60bb      	str	r3, [r7, #8]
 8017de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017de2:	2301      	movs	r3, #1
 8017de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017de6:	4b0b      	ldr	r3, [pc, #44]	; (8017e14 <HAL_RCC_OscConfig+0x2b8>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d121      	bne.n	8017e36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8017df2:	4b08      	ldr	r3, [pc, #32]	; (8017e14 <HAL_RCC_OscConfig+0x2b8>)
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	4a07      	ldr	r2, [pc, #28]	; (8017e14 <HAL_RCC_OscConfig+0x2b8>)
 8017df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017dfe:	f7fd f9c3 	bl	8015188 <HAL_GetTick>
 8017e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017e04:	e011      	b.n	8017e2a <HAL_RCC_OscConfig+0x2ce>
 8017e06:	bf00      	nop
 8017e08:	40023800 	.word	0x40023800
 8017e0c:	42470000 	.word	0x42470000
 8017e10:	42470e80 	.word	0x42470e80
 8017e14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017e18:	f7fd f9b6 	bl	8015188 <HAL_GetTick>
 8017e1c:	4602      	mov	r2, r0
 8017e1e:	693b      	ldr	r3, [r7, #16]
 8017e20:	1ad3      	subs	r3, r2, r3
 8017e22:	2b02      	cmp	r3, #2
 8017e24:	d901      	bls.n	8017e2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8017e26:	2303      	movs	r3, #3
 8017e28:	e106      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8017e2a:	4b85      	ldr	r3, [pc, #532]	; (8018040 <HAL_RCC_OscConfig+0x4e4>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d0f0      	beq.n	8017e18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	689b      	ldr	r3, [r3, #8]
 8017e3a:	2b01      	cmp	r3, #1
 8017e3c:	d106      	bne.n	8017e4c <HAL_RCC_OscConfig+0x2f0>
 8017e3e:	4b81      	ldr	r3, [pc, #516]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e42:	4a80      	ldr	r2, [pc, #512]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017e44:	f043 0301 	orr.w	r3, r3, #1
 8017e48:	6713      	str	r3, [r2, #112]	; 0x70
 8017e4a:	e01c      	b.n	8017e86 <HAL_RCC_OscConfig+0x32a>
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	689b      	ldr	r3, [r3, #8]
 8017e50:	2b05      	cmp	r3, #5
 8017e52:	d10c      	bne.n	8017e6e <HAL_RCC_OscConfig+0x312>
 8017e54:	4b7b      	ldr	r3, [pc, #492]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e58:	4a7a      	ldr	r2, [pc, #488]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017e5a:	f043 0304 	orr.w	r3, r3, #4
 8017e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8017e60:	4b78      	ldr	r3, [pc, #480]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e64:	4a77      	ldr	r2, [pc, #476]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017e66:	f043 0301 	orr.w	r3, r3, #1
 8017e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8017e6c:	e00b      	b.n	8017e86 <HAL_RCC_OscConfig+0x32a>
 8017e6e:	4b75      	ldr	r3, [pc, #468]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e72:	4a74      	ldr	r2, [pc, #464]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017e74:	f023 0301 	bic.w	r3, r3, #1
 8017e78:	6713      	str	r3, [r2, #112]	; 0x70
 8017e7a:	4b72      	ldr	r3, [pc, #456]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e7e:	4a71      	ldr	r2, [pc, #452]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017e80:	f023 0304 	bic.w	r3, r3, #4
 8017e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	689b      	ldr	r3, [r3, #8]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d015      	beq.n	8017eba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017e8e:	f7fd f97b 	bl	8015188 <HAL_GetTick>
 8017e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017e94:	e00a      	b.n	8017eac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017e96:	f7fd f977 	bl	8015188 <HAL_GetTick>
 8017e9a:	4602      	mov	r2, r0
 8017e9c:	693b      	ldr	r3, [r7, #16]
 8017e9e:	1ad3      	subs	r3, r2, r3
 8017ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8017ea4:	4293      	cmp	r3, r2
 8017ea6:	d901      	bls.n	8017eac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8017ea8:	2303      	movs	r3, #3
 8017eaa:	e0c5      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8017eac:	4b65      	ldr	r3, [pc, #404]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017eb0:	f003 0302 	and.w	r3, r3, #2
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d0ee      	beq.n	8017e96 <HAL_RCC_OscConfig+0x33a>
 8017eb8:	e014      	b.n	8017ee4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8017eba:	f7fd f965 	bl	8015188 <HAL_GetTick>
 8017ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8017ec0:	e00a      	b.n	8017ed8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8017ec2:	f7fd f961 	bl	8015188 <HAL_GetTick>
 8017ec6:	4602      	mov	r2, r0
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	1ad3      	subs	r3, r2, r3
 8017ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8017ed0:	4293      	cmp	r3, r2
 8017ed2:	d901      	bls.n	8017ed8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8017ed4:	2303      	movs	r3, #3
 8017ed6:	e0af      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8017ed8:	4b5a      	ldr	r3, [pc, #360]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017edc:	f003 0302 	and.w	r3, r3, #2
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d1ee      	bne.n	8017ec2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8017ee4:	7dfb      	ldrb	r3, [r7, #23]
 8017ee6:	2b01      	cmp	r3, #1
 8017ee8:	d105      	bne.n	8017ef6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017eea:	4b56      	ldr	r3, [pc, #344]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eee:	4a55      	ldr	r2, [pc, #340]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	699b      	ldr	r3, [r3, #24]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	f000 809b 	beq.w	8018036 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8017f00:	4b50      	ldr	r3, [pc, #320]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017f02:	689b      	ldr	r3, [r3, #8]
 8017f04:	f003 030c 	and.w	r3, r3, #12
 8017f08:	2b08      	cmp	r3, #8
 8017f0a:	d05c      	beq.n	8017fc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	699b      	ldr	r3, [r3, #24]
 8017f10:	2b02      	cmp	r3, #2
 8017f12:	d141      	bne.n	8017f98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017f14:	4b4c      	ldr	r3, [pc, #304]	; (8018048 <HAL_RCC_OscConfig+0x4ec>)
 8017f16:	2200      	movs	r2, #0
 8017f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017f1a:	f7fd f935 	bl	8015188 <HAL_GetTick>
 8017f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017f20:	e008      	b.n	8017f34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017f22:	f7fd f931 	bl	8015188 <HAL_GetTick>
 8017f26:	4602      	mov	r2, r0
 8017f28:	693b      	ldr	r3, [r7, #16]
 8017f2a:	1ad3      	subs	r3, r2, r3
 8017f2c:	2b02      	cmp	r3, #2
 8017f2e:	d901      	bls.n	8017f34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8017f30:	2303      	movs	r3, #3
 8017f32:	e081      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017f34:	4b43      	ldr	r3, [pc, #268]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d1f0      	bne.n	8017f22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	69da      	ldr	r2, [r3, #28]
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	6a1b      	ldr	r3, [r3, #32]
 8017f48:	431a      	orrs	r2, r3
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f4e:	019b      	lsls	r3, r3, #6
 8017f50:	431a      	orrs	r2, r3
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f56:	085b      	lsrs	r3, r3, #1
 8017f58:	3b01      	subs	r3, #1
 8017f5a:	041b      	lsls	r3, r3, #16
 8017f5c:	431a      	orrs	r2, r3
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f62:	061b      	lsls	r3, r3, #24
 8017f64:	4937      	ldr	r1, [pc, #220]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017f66:	4313      	orrs	r3, r2
 8017f68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8017f6a:	4b37      	ldr	r3, [pc, #220]	; (8018048 <HAL_RCC_OscConfig+0x4ec>)
 8017f6c:	2201      	movs	r2, #1
 8017f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017f70:	f7fd f90a 	bl	8015188 <HAL_GetTick>
 8017f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017f76:	e008      	b.n	8017f8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017f78:	f7fd f906 	bl	8015188 <HAL_GetTick>
 8017f7c:	4602      	mov	r2, r0
 8017f7e:	693b      	ldr	r3, [r7, #16]
 8017f80:	1ad3      	subs	r3, r2, r3
 8017f82:	2b02      	cmp	r3, #2
 8017f84:	d901      	bls.n	8017f8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8017f86:	2303      	movs	r3, #3
 8017f88:	e056      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8017f8a:	4b2e      	ldr	r3, [pc, #184]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d0f0      	beq.n	8017f78 <HAL_RCC_OscConfig+0x41c>
 8017f96:	e04e      	b.n	8018036 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017f98:	4b2b      	ldr	r3, [pc, #172]	; (8018048 <HAL_RCC_OscConfig+0x4ec>)
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8017f9e:	f7fd f8f3 	bl	8015188 <HAL_GetTick>
 8017fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017fa4:	e008      	b.n	8017fb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8017fa6:	f7fd f8ef 	bl	8015188 <HAL_GetTick>
 8017faa:	4602      	mov	r2, r0
 8017fac:	693b      	ldr	r3, [r7, #16]
 8017fae:	1ad3      	subs	r3, r2, r3
 8017fb0:	2b02      	cmp	r3, #2
 8017fb2:	d901      	bls.n	8017fb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8017fb4:	2303      	movs	r3, #3
 8017fb6:	e03f      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8017fb8:	4b22      	ldr	r3, [pc, #136]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d1f0      	bne.n	8017fa6 <HAL_RCC_OscConfig+0x44a>
 8017fc4:	e037      	b.n	8018036 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	699b      	ldr	r3, [r3, #24]
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d101      	bne.n	8017fd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8017fce:	2301      	movs	r3, #1
 8017fd0:	e032      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8017fd2:	4b1c      	ldr	r3, [pc, #112]	; (8018044 <HAL_RCC_OscConfig+0x4e8>)
 8017fd4:	685b      	ldr	r3, [r3, #4]
 8017fd6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	699b      	ldr	r3, [r3, #24]
 8017fdc:	2b01      	cmp	r3, #1
 8017fde:	d028      	beq.n	8018032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8017fea:	429a      	cmp	r2, r3
 8017fec:	d121      	bne.n	8018032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017ff8:	429a      	cmp	r2, r3
 8017ffa:	d11a      	bne.n	8018032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8017ffc:	68fa      	ldr	r2, [r7, #12]
 8017ffe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8018002:	4013      	ands	r3, r2
 8018004:	687a      	ldr	r2, [r7, #4]
 8018006:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018008:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801800a:	4293      	cmp	r3, r2
 801800c:	d111      	bne.n	8018032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018018:	085b      	lsrs	r3, r3, #1
 801801a:	3b01      	subs	r3, #1
 801801c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801801e:	429a      	cmp	r2, r3
 8018020:	d107      	bne.n	8018032 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801802c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801802e:	429a      	cmp	r2, r3
 8018030:	d001      	beq.n	8018036 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8018032:	2301      	movs	r3, #1
 8018034:	e000      	b.n	8018038 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8018036:	2300      	movs	r3, #0
}
 8018038:	4618      	mov	r0, r3
 801803a:	3718      	adds	r7, #24
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}
 8018040:	40007000 	.word	0x40007000
 8018044:	40023800 	.word	0x40023800
 8018048:	42470060 	.word	0x42470060

0801804c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b084      	sub	sp, #16
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
 8018054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d101      	bne.n	8018060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801805c:	2301      	movs	r3, #1
 801805e:	e0cc      	b.n	80181fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8018060:	4b68      	ldr	r3, [pc, #416]	; (8018204 <HAL_RCC_ClockConfig+0x1b8>)
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	f003 0307 	and.w	r3, r3, #7
 8018068:	683a      	ldr	r2, [r7, #0]
 801806a:	429a      	cmp	r2, r3
 801806c:	d90c      	bls.n	8018088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801806e:	4b65      	ldr	r3, [pc, #404]	; (8018204 <HAL_RCC_ClockConfig+0x1b8>)
 8018070:	683a      	ldr	r2, [r7, #0]
 8018072:	b2d2      	uxtb	r2, r2
 8018074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018076:	4b63      	ldr	r3, [pc, #396]	; (8018204 <HAL_RCC_ClockConfig+0x1b8>)
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	f003 0307 	and.w	r3, r3, #7
 801807e:	683a      	ldr	r2, [r7, #0]
 8018080:	429a      	cmp	r2, r3
 8018082:	d001      	beq.n	8018088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8018084:	2301      	movs	r3, #1
 8018086:	e0b8      	b.n	80181fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	f003 0302 	and.w	r3, r3, #2
 8018090:	2b00      	cmp	r3, #0
 8018092:	d020      	beq.n	80180d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	f003 0304 	and.w	r3, r3, #4
 801809c:	2b00      	cmp	r3, #0
 801809e:	d005      	beq.n	80180ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80180a0:	4b59      	ldr	r3, [pc, #356]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80180a2:	689b      	ldr	r3, [r3, #8]
 80180a4:	4a58      	ldr	r2, [pc, #352]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80180a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80180aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	f003 0308 	and.w	r3, r3, #8
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d005      	beq.n	80180c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80180b8:	4b53      	ldr	r3, [pc, #332]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80180ba:	689b      	ldr	r3, [r3, #8]
 80180bc:	4a52      	ldr	r2, [pc, #328]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80180be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80180c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80180c4:	4b50      	ldr	r3, [pc, #320]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80180c6:	689b      	ldr	r3, [r3, #8]
 80180c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	689b      	ldr	r3, [r3, #8]
 80180d0:	494d      	ldr	r1, [pc, #308]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80180d2:	4313      	orrs	r3, r2
 80180d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	f003 0301 	and.w	r3, r3, #1
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d044      	beq.n	801816c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	685b      	ldr	r3, [r3, #4]
 80180e6:	2b01      	cmp	r3, #1
 80180e8:	d107      	bne.n	80180fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80180ea:	4b47      	ldr	r3, [pc, #284]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d119      	bne.n	801812a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80180f6:	2301      	movs	r3, #1
 80180f8:	e07f      	b.n	80181fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	685b      	ldr	r3, [r3, #4]
 80180fe:	2b02      	cmp	r3, #2
 8018100:	d003      	beq.n	801810a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8018106:	2b03      	cmp	r3, #3
 8018108:	d107      	bne.n	801811a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801810a:	4b3f      	ldr	r3, [pc, #252]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018112:	2b00      	cmp	r3, #0
 8018114:	d109      	bne.n	801812a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018116:	2301      	movs	r3, #1
 8018118:	e06f      	b.n	80181fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801811a:	4b3b      	ldr	r3, [pc, #236]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	f003 0302 	and.w	r3, r3, #2
 8018122:	2b00      	cmp	r3, #0
 8018124:	d101      	bne.n	801812a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018126:	2301      	movs	r3, #1
 8018128:	e067      	b.n	80181fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801812a:	4b37      	ldr	r3, [pc, #220]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 801812c:	689b      	ldr	r3, [r3, #8]
 801812e:	f023 0203 	bic.w	r2, r3, #3
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	685b      	ldr	r3, [r3, #4]
 8018136:	4934      	ldr	r1, [pc, #208]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 8018138:	4313      	orrs	r3, r2
 801813a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801813c:	f7fd f824 	bl	8015188 <HAL_GetTick>
 8018140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018142:	e00a      	b.n	801815a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018144:	f7fd f820 	bl	8015188 <HAL_GetTick>
 8018148:	4602      	mov	r2, r0
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	1ad3      	subs	r3, r2, r3
 801814e:	f241 3288 	movw	r2, #5000	; 0x1388
 8018152:	4293      	cmp	r3, r2
 8018154:	d901      	bls.n	801815a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8018156:	2303      	movs	r3, #3
 8018158:	e04f      	b.n	80181fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801815a:	4b2b      	ldr	r3, [pc, #172]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 801815c:	689b      	ldr	r3, [r3, #8]
 801815e:	f003 020c 	and.w	r2, r3, #12
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	685b      	ldr	r3, [r3, #4]
 8018166:	009b      	lsls	r3, r3, #2
 8018168:	429a      	cmp	r2, r3
 801816a:	d1eb      	bne.n	8018144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801816c:	4b25      	ldr	r3, [pc, #148]	; (8018204 <HAL_RCC_ClockConfig+0x1b8>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	f003 0307 	and.w	r3, r3, #7
 8018174:	683a      	ldr	r2, [r7, #0]
 8018176:	429a      	cmp	r2, r3
 8018178:	d20c      	bcs.n	8018194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801817a:	4b22      	ldr	r3, [pc, #136]	; (8018204 <HAL_RCC_ClockConfig+0x1b8>)
 801817c:	683a      	ldr	r2, [r7, #0]
 801817e:	b2d2      	uxtb	r2, r2
 8018180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018182:	4b20      	ldr	r3, [pc, #128]	; (8018204 <HAL_RCC_ClockConfig+0x1b8>)
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	f003 0307 	and.w	r3, r3, #7
 801818a:	683a      	ldr	r2, [r7, #0]
 801818c:	429a      	cmp	r2, r3
 801818e:	d001      	beq.n	8018194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8018190:	2301      	movs	r3, #1
 8018192:	e032      	b.n	80181fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	f003 0304 	and.w	r3, r3, #4
 801819c:	2b00      	cmp	r3, #0
 801819e:	d008      	beq.n	80181b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80181a0:	4b19      	ldr	r3, [pc, #100]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80181a2:	689b      	ldr	r3, [r3, #8]
 80181a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	68db      	ldr	r3, [r3, #12]
 80181ac:	4916      	ldr	r1, [pc, #88]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80181ae:	4313      	orrs	r3, r2
 80181b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	f003 0308 	and.w	r3, r3, #8
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d009      	beq.n	80181d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80181be:	4b12      	ldr	r3, [pc, #72]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80181c0:	689b      	ldr	r3, [r3, #8]
 80181c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	691b      	ldr	r3, [r3, #16]
 80181ca:	00db      	lsls	r3, r3, #3
 80181cc:	490e      	ldr	r1, [pc, #56]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80181ce:	4313      	orrs	r3, r2
 80181d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80181d2:	f000 f821 	bl	8018218 <HAL_RCC_GetSysClockFreq>
 80181d6:	4602      	mov	r2, r0
 80181d8:	4b0b      	ldr	r3, [pc, #44]	; (8018208 <HAL_RCC_ClockConfig+0x1bc>)
 80181da:	689b      	ldr	r3, [r3, #8]
 80181dc:	091b      	lsrs	r3, r3, #4
 80181de:	f003 030f 	and.w	r3, r3, #15
 80181e2:	490a      	ldr	r1, [pc, #40]	; (801820c <HAL_RCC_ClockConfig+0x1c0>)
 80181e4:	5ccb      	ldrb	r3, [r1, r3]
 80181e6:	fa22 f303 	lsr.w	r3, r2, r3
 80181ea:	4a09      	ldr	r2, [pc, #36]	; (8018210 <HAL_RCC_ClockConfig+0x1c4>)
 80181ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80181ee:	4b09      	ldr	r3, [pc, #36]	; (8018214 <HAL_RCC_ClockConfig+0x1c8>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	4618      	mov	r0, r3
 80181f4:	f7fc feac 	bl	8014f50 <HAL_InitTick>

  return HAL_OK;
 80181f8:	2300      	movs	r3, #0
}
 80181fa:	4618      	mov	r0, r3
 80181fc:	3710      	adds	r7, #16
 80181fe:	46bd      	mov	sp, r7
 8018200:	bd80      	pop	{r7, pc}
 8018202:	bf00      	nop
 8018204:	40023c00 	.word	0x40023c00
 8018208:	40023800 	.word	0x40023800
 801820c:	0801d264 	.word	0x0801d264
 8018210:	20000060 	.word	0x20000060
 8018214:	20000064 	.word	0x20000064

08018218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801821c:	b084      	sub	sp, #16
 801821e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8018220:	2300      	movs	r3, #0
 8018222:	607b      	str	r3, [r7, #4]
 8018224:	2300      	movs	r3, #0
 8018226:	60fb      	str	r3, [r7, #12]
 8018228:	2300      	movs	r3, #0
 801822a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801822c:	2300      	movs	r3, #0
 801822e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8018230:	4b67      	ldr	r3, [pc, #412]	; (80183d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8018232:	689b      	ldr	r3, [r3, #8]
 8018234:	f003 030c 	and.w	r3, r3, #12
 8018238:	2b08      	cmp	r3, #8
 801823a:	d00d      	beq.n	8018258 <HAL_RCC_GetSysClockFreq+0x40>
 801823c:	2b08      	cmp	r3, #8
 801823e:	f200 80bd 	bhi.w	80183bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8018242:	2b00      	cmp	r3, #0
 8018244:	d002      	beq.n	801824c <HAL_RCC_GetSysClockFreq+0x34>
 8018246:	2b04      	cmp	r3, #4
 8018248:	d003      	beq.n	8018252 <HAL_RCC_GetSysClockFreq+0x3a>
 801824a:	e0b7      	b.n	80183bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801824c:	4b61      	ldr	r3, [pc, #388]	; (80183d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 801824e:	60bb      	str	r3, [r7, #8]
       break;
 8018250:	e0b7      	b.n	80183c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8018252:	4b60      	ldr	r3, [pc, #384]	; (80183d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8018254:	60bb      	str	r3, [r7, #8]
      break;
 8018256:	e0b4      	b.n	80183c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8018258:	4b5d      	ldr	r3, [pc, #372]	; (80183d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801825a:	685b      	ldr	r3, [r3, #4]
 801825c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018260:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8018262:	4b5b      	ldr	r3, [pc, #364]	; (80183d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8018264:	685b      	ldr	r3, [r3, #4]
 8018266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801826a:	2b00      	cmp	r3, #0
 801826c:	d04d      	beq.n	801830a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801826e:	4b58      	ldr	r3, [pc, #352]	; (80183d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8018270:	685b      	ldr	r3, [r3, #4]
 8018272:	099b      	lsrs	r3, r3, #6
 8018274:	461a      	mov	r2, r3
 8018276:	f04f 0300 	mov.w	r3, #0
 801827a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801827e:	f04f 0100 	mov.w	r1, #0
 8018282:	ea02 0800 	and.w	r8, r2, r0
 8018286:	ea03 0901 	and.w	r9, r3, r1
 801828a:	4640      	mov	r0, r8
 801828c:	4649      	mov	r1, r9
 801828e:	f04f 0200 	mov.w	r2, #0
 8018292:	f04f 0300 	mov.w	r3, #0
 8018296:	014b      	lsls	r3, r1, #5
 8018298:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 801829c:	0142      	lsls	r2, r0, #5
 801829e:	4610      	mov	r0, r2
 80182a0:	4619      	mov	r1, r3
 80182a2:	ebb0 0008 	subs.w	r0, r0, r8
 80182a6:	eb61 0109 	sbc.w	r1, r1, r9
 80182aa:	f04f 0200 	mov.w	r2, #0
 80182ae:	f04f 0300 	mov.w	r3, #0
 80182b2:	018b      	lsls	r3, r1, #6
 80182b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80182b8:	0182      	lsls	r2, r0, #6
 80182ba:	1a12      	subs	r2, r2, r0
 80182bc:	eb63 0301 	sbc.w	r3, r3, r1
 80182c0:	f04f 0000 	mov.w	r0, #0
 80182c4:	f04f 0100 	mov.w	r1, #0
 80182c8:	00d9      	lsls	r1, r3, #3
 80182ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80182ce:	00d0      	lsls	r0, r2, #3
 80182d0:	4602      	mov	r2, r0
 80182d2:	460b      	mov	r3, r1
 80182d4:	eb12 0208 	adds.w	r2, r2, r8
 80182d8:	eb43 0309 	adc.w	r3, r3, r9
 80182dc:	f04f 0000 	mov.w	r0, #0
 80182e0:	f04f 0100 	mov.w	r1, #0
 80182e4:	0299      	lsls	r1, r3, #10
 80182e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80182ea:	0290      	lsls	r0, r2, #10
 80182ec:	4602      	mov	r2, r0
 80182ee:	460b      	mov	r3, r1
 80182f0:	4610      	mov	r0, r2
 80182f2:	4619      	mov	r1, r3
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	461a      	mov	r2, r3
 80182f8:	f04f 0300 	mov.w	r3, #0
 80182fc:	f7e8 fc56 	bl	8000bac <__aeabi_uldivmod>
 8018300:	4602      	mov	r2, r0
 8018302:	460b      	mov	r3, r1
 8018304:	4613      	mov	r3, r2
 8018306:	60fb      	str	r3, [r7, #12]
 8018308:	e04a      	b.n	80183a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801830a:	4b31      	ldr	r3, [pc, #196]	; (80183d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 801830c:	685b      	ldr	r3, [r3, #4]
 801830e:	099b      	lsrs	r3, r3, #6
 8018310:	461a      	mov	r2, r3
 8018312:	f04f 0300 	mov.w	r3, #0
 8018316:	f240 10ff 	movw	r0, #511	; 0x1ff
 801831a:	f04f 0100 	mov.w	r1, #0
 801831e:	ea02 0400 	and.w	r4, r2, r0
 8018322:	ea03 0501 	and.w	r5, r3, r1
 8018326:	4620      	mov	r0, r4
 8018328:	4629      	mov	r1, r5
 801832a:	f04f 0200 	mov.w	r2, #0
 801832e:	f04f 0300 	mov.w	r3, #0
 8018332:	014b      	lsls	r3, r1, #5
 8018334:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8018338:	0142      	lsls	r2, r0, #5
 801833a:	4610      	mov	r0, r2
 801833c:	4619      	mov	r1, r3
 801833e:	1b00      	subs	r0, r0, r4
 8018340:	eb61 0105 	sbc.w	r1, r1, r5
 8018344:	f04f 0200 	mov.w	r2, #0
 8018348:	f04f 0300 	mov.w	r3, #0
 801834c:	018b      	lsls	r3, r1, #6
 801834e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8018352:	0182      	lsls	r2, r0, #6
 8018354:	1a12      	subs	r2, r2, r0
 8018356:	eb63 0301 	sbc.w	r3, r3, r1
 801835a:	f04f 0000 	mov.w	r0, #0
 801835e:	f04f 0100 	mov.w	r1, #0
 8018362:	00d9      	lsls	r1, r3, #3
 8018364:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018368:	00d0      	lsls	r0, r2, #3
 801836a:	4602      	mov	r2, r0
 801836c:	460b      	mov	r3, r1
 801836e:	1912      	adds	r2, r2, r4
 8018370:	eb45 0303 	adc.w	r3, r5, r3
 8018374:	f04f 0000 	mov.w	r0, #0
 8018378:	f04f 0100 	mov.w	r1, #0
 801837c:	0299      	lsls	r1, r3, #10
 801837e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8018382:	0290      	lsls	r0, r2, #10
 8018384:	4602      	mov	r2, r0
 8018386:	460b      	mov	r3, r1
 8018388:	4610      	mov	r0, r2
 801838a:	4619      	mov	r1, r3
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	461a      	mov	r2, r3
 8018390:	f04f 0300 	mov.w	r3, #0
 8018394:	f7e8 fc0a 	bl	8000bac <__aeabi_uldivmod>
 8018398:	4602      	mov	r2, r0
 801839a:	460b      	mov	r3, r1
 801839c:	4613      	mov	r3, r2
 801839e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80183a0:	4b0b      	ldr	r3, [pc, #44]	; (80183d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80183a2:	685b      	ldr	r3, [r3, #4]
 80183a4:	0c1b      	lsrs	r3, r3, #16
 80183a6:	f003 0303 	and.w	r3, r3, #3
 80183aa:	3301      	adds	r3, #1
 80183ac:	005b      	lsls	r3, r3, #1
 80183ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80183b0:	68fa      	ldr	r2, [r7, #12]
 80183b2:	683b      	ldr	r3, [r7, #0]
 80183b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80183b8:	60bb      	str	r3, [r7, #8]
      break;
 80183ba:	e002      	b.n	80183c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80183bc:	4b05      	ldr	r3, [pc, #20]	; (80183d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80183be:	60bb      	str	r3, [r7, #8]
      break;
 80183c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80183c2:	68bb      	ldr	r3, [r7, #8]
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	3710      	adds	r7, #16
 80183c8:	46bd      	mov	sp, r7
 80183ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80183ce:	bf00      	nop
 80183d0:	40023800 	.word	0x40023800
 80183d4:	00f42400 	.word	0x00f42400

080183d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80183d8:	b480      	push	{r7}
 80183da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80183dc:	4b03      	ldr	r3, [pc, #12]	; (80183ec <HAL_RCC_GetHCLKFreq+0x14>)
 80183de:	681b      	ldr	r3, [r3, #0]
}
 80183e0:	4618      	mov	r0, r3
 80183e2:	46bd      	mov	sp, r7
 80183e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e8:	4770      	bx	lr
 80183ea:	bf00      	nop
 80183ec:	20000060 	.word	0x20000060

080183f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80183f4:	f7ff fff0 	bl	80183d8 <HAL_RCC_GetHCLKFreq>
 80183f8:	4602      	mov	r2, r0
 80183fa:	4b05      	ldr	r3, [pc, #20]	; (8018410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80183fc:	689b      	ldr	r3, [r3, #8]
 80183fe:	0a9b      	lsrs	r3, r3, #10
 8018400:	f003 0307 	and.w	r3, r3, #7
 8018404:	4903      	ldr	r1, [pc, #12]	; (8018414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8018406:	5ccb      	ldrb	r3, [r1, r3]
 8018408:	fa22 f303 	lsr.w	r3, r2, r3
}
 801840c:	4618      	mov	r0, r3
 801840e:	bd80      	pop	{r7, pc}
 8018410:	40023800 	.word	0x40023800
 8018414:	0801d274 	.word	0x0801d274

08018418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018418:	b580      	push	{r7, lr}
 801841a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801841c:	f7ff ffdc 	bl	80183d8 <HAL_RCC_GetHCLKFreq>
 8018420:	4602      	mov	r2, r0
 8018422:	4b05      	ldr	r3, [pc, #20]	; (8018438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8018424:	689b      	ldr	r3, [r3, #8]
 8018426:	0b5b      	lsrs	r3, r3, #13
 8018428:	f003 0307 	and.w	r3, r3, #7
 801842c:	4903      	ldr	r1, [pc, #12]	; (801843c <HAL_RCC_GetPCLK2Freq+0x24>)
 801842e:	5ccb      	ldrb	r3, [r1, r3]
 8018430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8018434:	4618      	mov	r0, r3
 8018436:	bd80      	pop	{r7, pc}
 8018438:	40023800 	.word	0x40023800
 801843c:	0801d274 	.word	0x0801d274

08018440 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8018440:	b480      	push	{r7}
 8018442:	b083      	sub	sp, #12
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	220f      	movs	r2, #15
 801844e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8018450:	4b12      	ldr	r3, [pc, #72]	; (801849c <HAL_RCC_GetClockConfig+0x5c>)
 8018452:	689b      	ldr	r3, [r3, #8]
 8018454:	f003 0203 	and.w	r2, r3, #3
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801845c:	4b0f      	ldr	r3, [pc, #60]	; (801849c <HAL_RCC_GetClockConfig+0x5c>)
 801845e:	689b      	ldr	r3, [r3, #8]
 8018460:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8018468:	4b0c      	ldr	r3, [pc, #48]	; (801849c <HAL_RCC_GetClockConfig+0x5c>)
 801846a:	689b      	ldr	r3, [r3, #8]
 801846c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8018474:	4b09      	ldr	r3, [pc, #36]	; (801849c <HAL_RCC_GetClockConfig+0x5c>)
 8018476:	689b      	ldr	r3, [r3, #8]
 8018478:	08db      	lsrs	r3, r3, #3
 801847a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8018482:	4b07      	ldr	r3, [pc, #28]	; (80184a0 <HAL_RCC_GetClockConfig+0x60>)
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	f003 0207 	and.w	r2, r3, #7
 801848a:	683b      	ldr	r3, [r7, #0]
 801848c:	601a      	str	r2, [r3, #0]
}
 801848e:	bf00      	nop
 8018490:	370c      	adds	r7, #12
 8018492:	46bd      	mov	sp, r7
 8018494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018498:	4770      	bx	lr
 801849a:	bf00      	nop
 801849c:	40023800 	.word	0x40023800
 80184a0:	40023c00 	.word	0x40023c00

080184a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b082      	sub	sp, #8
 80184a8:	af00      	add	r7, sp, #0
 80184aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d101      	bne.n	80184b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80184b2:	2301      	movs	r3, #1
 80184b4:	e041      	b.n	801853a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80184bc:	b2db      	uxtb	r3, r3
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d106      	bne.n	80184d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	2200      	movs	r2, #0
 80184c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80184ca:	6878      	ldr	r0, [r7, #4]
 80184cc:	f000 f839 	bl	8018542 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	2202      	movs	r2, #2
 80184d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681a      	ldr	r2, [r3, #0]
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	3304      	adds	r3, #4
 80184e0:	4619      	mov	r1, r3
 80184e2:	4610      	mov	r0, r2
 80184e4:	f000 fbae 	bl	8018c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	2201      	movs	r2, #1
 80184ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	2201      	movs	r2, #1
 80184f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	2201      	movs	r2, #1
 80184fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2201      	movs	r2, #1
 8018504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	2201      	movs	r2, #1
 801850c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	2201      	movs	r2, #1
 8018514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	2201      	movs	r2, #1
 801851c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	2201      	movs	r2, #1
 8018524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	2201      	movs	r2, #1
 801852c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	2201      	movs	r2, #1
 8018534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8018538:	2300      	movs	r3, #0
}
 801853a:	4618      	mov	r0, r3
 801853c:	3708      	adds	r7, #8
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}

08018542 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8018542:	b480      	push	{r7}
 8018544:	b083      	sub	sp, #12
 8018546:	af00      	add	r7, sp, #0
 8018548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801854a:	bf00      	nop
 801854c:	370c      	adds	r7, #12
 801854e:	46bd      	mov	sp, r7
 8018550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018554:	4770      	bx	lr
	...

08018558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8018558:	b480      	push	{r7}
 801855a:	b085      	sub	sp, #20
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018566:	b2db      	uxtb	r3, r3
 8018568:	2b01      	cmp	r3, #1
 801856a:	d001      	beq.n	8018570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801856c:	2301      	movs	r3, #1
 801856e:	e04e      	b.n	801860e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	2202      	movs	r2, #2
 8018574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	68da      	ldr	r2, [r3, #12]
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	f042 0201 	orr.w	r2, r2, #1
 8018586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	4a23      	ldr	r2, [pc, #140]	; (801861c <HAL_TIM_Base_Start_IT+0xc4>)
 801858e:	4293      	cmp	r3, r2
 8018590:	d022      	beq.n	80185d8 <HAL_TIM_Base_Start_IT+0x80>
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801859a:	d01d      	beq.n	80185d8 <HAL_TIM_Base_Start_IT+0x80>
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	4a1f      	ldr	r2, [pc, #124]	; (8018620 <HAL_TIM_Base_Start_IT+0xc8>)
 80185a2:	4293      	cmp	r3, r2
 80185a4:	d018      	beq.n	80185d8 <HAL_TIM_Base_Start_IT+0x80>
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	4a1e      	ldr	r2, [pc, #120]	; (8018624 <HAL_TIM_Base_Start_IT+0xcc>)
 80185ac:	4293      	cmp	r3, r2
 80185ae:	d013      	beq.n	80185d8 <HAL_TIM_Base_Start_IT+0x80>
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	4a1c      	ldr	r2, [pc, #112]	; (8018628 <HAL_TIM_Base_Start_IT+0xd0>)
 80185b6:	4293      	cmp	r3, r2
 80185b8:	d00e      	beq.n	80185d8 <HAL_TIM_Base_Start_IT+0x80>
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	4a1b      	ldr	r2, [pc, #108]	; (801862c <HAL_TIM_Base_Start_IT+0xd4>)
 80185c0:	4293      	cmp	r3, r2
 80185c2:	d009      	beq.n	80185d8 <HAL_TIM_Base_Start_IT+0x80>
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	4a19      	ldr	r2, [pc, #100]	; (8018630 <HAL_TIM_Base_Start_IT+0xd8>)
 80185ca:	4293      	cmp	r3, r2
 80185cc:	d004      	beq.n	80185d8 <HAL_TIM_Base_Start_IT+0x80>
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	4a18      	ldr	r2, [pc, #96]	; (8018634 <HAL_TIM_Base_Start_IT+0xdc>)
 80185d4:	4293      	cmp	r3, r2
 80185d6:	d111      	bne.n	80185fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	689b      	ldr	r3, [r3, #8]
 80185de:	f003 0307 	and.w	r3, r3, #7
 80185e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	2b06      	cmp	r3, #6
 80185e8:	d010      	beq.n	801860c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	681a      	ldr	r2, [r3, #0]
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	f042 0201 	orr.w	r2, r2, #1
 80185f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80185fa:	e007      	b.n	801860c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	681a      	ldr	r2, [r3, #0]
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	f042 0201 	orr.w	r2, r2, #1
 801860a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801860c:	2300      	movs	r3, #0
}
 801860e:	4618      	mov	r0, r3
 8018610:	3714      	adds	r7, #20
 8018612:	46bd      	mov	sp, r7
 8018614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018618:	4770      	bx	lr
 801861a:	bf00      	nop
 801861c:	40010000 	.word	0x40010000
 8018620:	40000400 	.word	0x40000400
 8018624:	40000800 	.word	0x40000800
 8018628:	40000c00 	.word	0x40000c00
 801862c:	40010400 	.word	0x40010400
 8018630:	40014000 	.word	0x40014000
 8018634:	40001800 	.word	0x40001800

08018638 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b084      	sub	sp, #16
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018642:	2300      	movs	r3, #0
 8018644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8018646:	683b      	ldr	r3, [r7, #0]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d104      	bne.n	8018656 <HAL_TIM_IC_Start_IT+0x1e>
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018652:	b2db      	uxtb	r3, r3
 8018654:	e013      	b.n	801867e <HAL_TIM_IC_Start_IT+0x46>
 8018656:	683b      	ldr	r3, [r7, #0]
 8018658:	2b04      	cmp	r3, #4
 801865a:	d104      	bne.n	8018666 <HAL_TIM_IC_Start_IT+0x2e>
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8018662:	b2db      	uxtb	r3, r3
 8018664:	e00b      	b.n	801867e <HAL_TIM_IC_Start_IT+0x46>
 8018666:	683b      	ldr	r3, [r7, #0]
 8018668:	2b08      	cmp	r3, #8
 801866a:	d104      	bne.n	8018676 <HAL_TIM_IC_Start_IT+0x3e>
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018672:	b2db      	uxtb	r3, r3
 8018674:	e003      	b.n	801867e <HAL_TIM_IC_Start_IT+0x46>
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801867c:	b2db      	uxtb	r3, r3
 801867e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d104      	bne.n	8018690 <HAL_TIM_IC_Start_IT+0x58>
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801868c:	b2db      	uxtb	r3, r3
 801868e:	e013      	b.n	80186b8 <HAL_TIM_IC_Start_IT+0x80>
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	2b04      	cmp	r3, #4
 8018694:	d104      	bne.n	80186a0 <HAL_TIM_IC_Start_IT+0x68>
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801869c:	b2db      	uxtb	r3, r3
 801869e:	e00b      	b.n	80186b8 <HAL_TIM_IC_Start_IT+0x80>
 80186a0:	683b      	ldr	r3, [r7, #0]
 80186a2:	2b08      	cmp	r3, #8
 80186a4:	d104      	bne.n	80186b0 <HAL_TIM_IC_Start_IT+0x78>
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80186ac:	b2db      	uxtb	r3, r3
 80186ae:	e003      	b.n	80186b8 <HAL_TIM_IC_Start_IT+0x80>
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80186b6:	b2db      	uxtb	r3, r3
 80186b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80186ba:	7bbb      	ldrb	r3, [r7, #14]
 80186bc:	2b01      	cmp	r3, #1
 80186be:	d102      	bne.n	80186c6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80186c0:	7b7b      	ldrb	r3, [r7, #13]
 80186c2:	2b01      	cmp	r3, #1
 80186c4:	d001      	beq.n	80186ca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80186c6:	2301      	movs	r3, #1
 80186c8:	e0cc      	b.n	8018864 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d104      	bne.n	80186da <HAL_TIM_IC_Start_IT+0xa2>
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	2202      	movs	r2, #2
 80186d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80186d8:	e013      	b.n	8018702 <HAL_TIM_IC_Start_IT+0xca>
 80186da:	683b      	ldr	r3, [r7, #0]
 80186dc:	2b04      	cmp	r3, #4
 80186de:	d104      	bne.n	80186ea <HAL_TIM_IC_Start_IT+0xb2>
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	2202      	movs	r2, #2
 80186e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80186e8:	e00b      	b.n	8018702 <HAL_TIM_IC_Start_IT+0xca>
 80186ea:	683b      	ldr	r3, [r7, #0]
 80186ec:	2b08      	cmp	r3, #8
 80186ee:	d104      	bne.n	80186fa <HAL_TIM_IC_Start_IT+0xc2>
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	2202      	movs	r2, #2
 80186f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80186f8:	e003      	b.n	8018702 <HAL_TIM_IC_Start_IT+0xca>
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	2202      	movs	r2, #2
 80186fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8018702:	683b      	ldr	r3, [r7, #0]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d104      	bne.n	8018712 <HAL_TIM_IC_Start_IT+0xda>
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	2202      	movs	r2, #2
 801870c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8018710:	e013      	b.n	801873a <HAL_TIM_IC_Start_IT+0x102>
 8018712:	683b      	ldr	r3, [r7, #0]
 8018714:	2b04      	cmp	r3, #4
 8018716:	d104      	bne.n	8018722 <HAL_TIM_IC_Start_IT+0xea>
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	2202      	movs	r2, #2
 801871c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018720:	e00b      	b.n	801873a <HAL_TIM_IC_Start_IT+0x102>
 8018722:	683b      	ldr	r3, [r7, #0]
 8018724:	2b08      	cmp	r3, #8
 8018726:	d104      	bne.n	8018732 <HAL_TIM_IC_Start_IT+0xfa>
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2202      	movs	r2, #2
 801872c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018730:	e003      	b.n	801873a <HAL_TIM_IC_Start_IT+0x102>
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2202      	movs	r2, #2
 8018736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801873a:	683b      	ldr	r3, [r7, #0]
 801873c:	2b0c      	cmp	r3, #12
 801873e:	d841      	bhi.n	80187c4 <HAL_TIM_IC_Start_IT+0x18c>
 8018740:	a201      	add	r2, pc, #4	; (adr r2, 8018748 <HAL_TIM_IC_Start_IT+0x110>)
 8018742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018746:	bf00      	nop
 8018748:	0801877d 	.word	0x0801877d
 801874c:	080187c5 	.word	0x080187c5
 8018750:	080187c5 	.word	0x080187c5
 8018754:	080187c5 	.word	0x080187c5
 8018758:	0801878f 	.word	0x0801878f
 801875c:	080187c5 	.word	0x080187c5
 8018760:	080187c5 	.word	0x080187c5
 8018764:	080187c5 	.word	0x080187c5
 8018768:	080187a1 	.word	0x080187a1
 801876c:	080187c5 	.word	0x080187c5
 8018770:	080187c5 	.word	0x080187c5
 8018774:	080187c5 	.word	0x080187c5
 8018778:	080187b3 	.word	0x080187b3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	68da      	ldr	r2, [r3, #12]
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	f042 0202 	orr.w	r2, r2, #2
 801878a:	60da      	str	r2, [r3, #12]
      break;
 801878c:	e01d      	b.n	80187ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	68da      	ldr	r2, [r3, #12]
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	f042 0204 	orr.w	r2, r2, #4
 801879c:	60da      	str	r2, [r3, #12]
      break;
 801879e:	e014      	b.n	80187ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	68da      	ldr	r2, [r3, #12]
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	f042 0208 	orr.w	r2, r2, #8
 80187ae:	60da      	str	r2, [r3, #12]
      break;
 80187b0:	e00b      	b.n	80187ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	68da      	ldr	r2, [r3, #12]
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	f042 0210 	orr.w	r2, r2, #16
 80187c0:	60da      	str	r2, [r3, #12]
      break;
 80187c2:	e002      	b.n	80187ca <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80187c4:	2301      	movs	r3, #1
 80187c6:	73fb      	strb	r3, [r7, #15]
      break;
 80187c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80187ca:	7bfb      	ldrb	r3, [r7, #15]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d148      	bne.n	8018862 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	2201      	movs	r2, #1
 80187d6:	6839      	ldr	r1, [r7, #0]
 80187d8:	4618      	mov	r0, r3
 80187da:	f000 fad3 	bl	8018d84 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	4a22      	ldr	r2, [pc, #136]	; (801886c <HAL_TIM_IC_Start_IT+0x234>)
 80187e4:	4293      	cmp	r3, r2
 80187e6:	d022      	beq.n	801882e <HAL_TIM_IC_Start_IT+0x1f6>
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80187f0:	d01d      	beq.n	801882e <HAL_TIM_IC_Start_IT+0x1f6>
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	4a1e      	ldr	r2, [pc, #120]	; (8018870 <HAL_TIM_IC_Start_IT+0x238>)
 80187f8:	4293      	cmp	r3, r2
 80187fa:	d018      	beq.n	801882e <HAL_TIM_IC_Start_IT+0x1f6>
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	4a1c      	ldr	r2, [pc, #112]	; (8018874 <HAL_TIM_IC_Start_IT+0x23c>)
 8018802:	4293      	cmp	r3, r2
 8018804:	d013      	beq.n	801882e <HAL_TIM_IC_Start_IT+0x1f6>
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	4a1b      	ldr	r2, [pc, #108]	; (8018878 <HAL_TIM_IC_Start_IT+0x240>)
 801880c:	4293      	cmp	r3, r2
 801880e:	d00e      	beq.n	801882e <HAL_TIM_IC_Start_IT+0x1f6>
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	4a19      	ldr	r2, [pc, #100]	; (801887c <HAL_TIM_IC_Start_IT+0x244>)
 8018816:	4293      	cmp	r3, r2
 8018818:	d009      	beq.n	801882e <HAL_TIM_IC_Start_IT+0x1f6>
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	4a18      	ldr	r2, [pc, #96]	; (8018880 <HAL_TIM_IC_Start_IT+0x248>)
 8018820:	4293      	cmp	r3, r2
 8018822:	d004      	beq.n	801882e <HAL_TIM_IC_Start_IT+0x1f6>
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	4a16      	ldr	r2, [pc, #88]	; (8018884 <HAL_TIM_IC_Start_IT+0x24c>)
 801882a:	4293      	cmp	r3, r2
 801882c:	d111      	bne.n	8018852 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	689b      	ldr	r3, [r3, #8]
 8018834:	f003 0307 	and.w	r3, r3, #7
 8018838:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801883a:	68bb      	ldr	r3, [r7, #8]
 801883c:	2b06      	cmp	r3, #6
 801883e:	d010      	beq.n	8018862 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	681a      	ldr	r2, [r3, #0]
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	f042 0201 	orr.w	r2, r2, #1
 801884e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018850:	e007      	b.n	8018862 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	681a      	ldr	r2, [r3, #0]
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	f042 0201 	orr.w	r2, r2, #1
 8018860:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8018862:	7bfb      	ldrb	r3, [r7, #15]
}
 8018864:	4618      	mov	r0, r3
 8018866:	3710      	adds	r7, #16
 8018868:	46bd      	mov	sp, r7
 801886a:	bd80      	pop	{r7, pc}
 801886c:	40010000 	.word	0x40010000
 8018870:	40000400 	.word	0x40000400
 8018874:	40000800 	.word	0x40000800
 8018878:	40000c00 	.word	0x40000c00
 801887c:	40010400 	.word	0x40010400
 8018880:	40014000 	.word	0x40014000
 8018884:	40001800 	.word	0x40001800

08018888 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b084      	sub	sp, #16
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]
 8018890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8018892:	2300      	movs	r3, #0
 8018894:	73fb      	strb	r3, [r7, #15]
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	2b0c      	cmp	r3, #12
 801889a:	d841      	bhi.n	8018920 <HAL_TIM_IC_Stop_IT+0x98>
 801889c:	a201      	add	r2, pc, #4	; (adr r2, 80188a4 <HAL_TIM_IC_Stop_IT+0x1c>)
 801889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188a2:	bf00      	nop
 80188a4:	080188d9 	.word	0x080188d9
 80188a8:	08018921 	.word	0x08018921
 80188ac:	08018921 	.word	0x08018921
 80188b0:	08018921 	.word	0x08018921
 80188b4:	080188eb 	.word	0x080188eb
 80188b8:	08018921 	.word	0x08018921
 80188bc:	08018921 	.word	0x08018921
 80188c0:	08018921 	.word	0x08018921
 80188c4:	080188fd 	.word	0x080188fd
 80188c8:	08018921 	.word	0x08018921
 80188cc:	08018921 	.word	0x08018921
 80188d0:	08018921 	.word	0x08018921
 80188d4:	0801890f 	.word	0x0801890f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	68da      	ldr	r2, [r3, #12]
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	f022 0202 	bic.w	r2, r2, #2
 80188e6:	60da      	str	r2, [r3, #12]
      break;
 80188e8:	e01d      	b.n	8018926 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	68da      	ldr	r2, [r3, #12]
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	f022 0204 	bic.w	r2, r2, #4
 80188f8:	60da      	str	r2, [r3, #12]
      break;
 80188fa:	e014      	b.n	8018926 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	68da      	ldr	r2, [r3, #12]
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	f022 0208 	bic.w	r2, r2, #8
 801890a:	60da      	str	r2, [r3, #12]
      break;
 801890c:	e00b      	b.n	8018926 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	68da      	ldr	r2, [r3, #12]
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	f022 0210 	bic.w	r2, r2, #16
 801891c:	60da      	str	r2, [r3, #12]
      break;
 801891e:	e002      	b.n	8018926 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8018920:	2301      	movs	r3, #1
 8018922:	73fb      	strb	r3, [r7, #15]
      break;
 8018924:	bf00      	nop
  }

  if (status == HAL_OK)
 8018926:	7bfb      	ldrb	r3, [r7, #15]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d156      	bne.n	80189da <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	2200      	movs	r2, #0
 8018932:	6839      	ldr	r1, [r7, #0]
 8018934:	4618      	mov	r0, r3
 8018936:	f000 fa25 	bl	8018d84 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	6a1a      	ldr	r2, [r3, #32]
 8018940:	f241 1311 	movw	r3, #4369	; 0x1111
 8018944:	4013      	ands	r3, r2
 8018946:	2b00      	cmp	r3, #0
 8018948:	d10f      	bne.n	801896a <HAL_TIM_IC_Stop_IT+0xe2>
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	6a1a      	ldr	r2, [r3, #32]
 8018950:	f240 4344 	movw	r3, #1092	; 0x444
 8018954:	4013      	ands	r3, r2
 8018956:	2b00      	cmp	r3, #0
 8018958:	d107      	bne.n	801896a <HAL_TIM_IC_Stop_IT+0xe2>
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	681a      	ldr	r2, [r3, #0]
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	f022 0201 	bic.w	r2, r2, #1
 8018968:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801896a:	683b      	ldr	r3, [r7, #0]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d104      	bne.n	801897a <HAL_TIM_IC_Stop_IT+0xf2>
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	2201      	movs	r2, #1
 8018974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8018978:	e013      	b.n	80189a2 <HAL_TIM_IC_Stop_IT+0x11a>
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	2b04      	cmp	r3, #4
 801897e:	d104      	bne.n	801898a <HAL_TIM_IC_Stop_IT+0x102>
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	2201      	movs	r2, #1
 8018984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8018988:	e00b      	b.n	80189a2 <HAL_TIM_IC_Stop_IT+0x11a>
 801898a:	683b      	ldr	r3, [r7, #0]
 801898c:	2b08      	cmp	r3, #8
 801898e:	d104      	bne.n	801899a <HAL_TIM_IC_Stop_IT+0x112>
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	2201      	movs	r2, #1
 8018994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8018998:	e003      	b.n	80189a2 <HAL_TIM_IC_Stop_IT+0x11a>
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	2201      	movs	r2, #1
 801899e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80189a2:	683b      	ldr	r3, [r7, #0]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d104      	bne.n	80189b2 <HAL_TIM_IC_Stop_IT+0x12a>
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	2201      	movs	r2, #1
 80189ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80189b0:	e013      	b.n	80189da <HAL_TIM_IC_Stop_IT+0x152>
 80189b2:	683b      	ldr	r3, [r7, #0]
 80189b4:	2b04      	cmp	r3, #4
 80189b6:	d104      	bne.n	80189c2 <HAL_TIM_IC_Stop_IT+0x13a>
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	2201      	movs	r2, #1
 80189bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80189c0:	e00b      	b.n	80189da <HAL_TIM_IC_Stop_IT+0x152>
 80189c2:	683b      	ldr	r3, [r7, #0]
 80189c4:	2b08      	cmp	r3, #8
 80189c6:	d104      	bne.n	80189d2 <HAL_TIM_IC_Stop_IT+0x14a>
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	2201      	movs	r2, #1
 80189cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80189d0:	e003      	b.n	80189da <HAL_TIM_IC_Stop_IT+0x152>
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	2201      	movs	r2, #1
 80189d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80189da:	7bfb      	ldrb	r3, [r7, #15]
}
 80189dc:	4618      	mov	r0, r3
 80189de:	3710      	adds	r7, #16
 80189e0:	46bd      	mov	sp, r7
 80189e2:	bd80      	pop	{r7, pc}

080189e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b082      	sub	sp, #8
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	691b      	ldr	r3, [r3, #16]
 80189f2:	f003 0302 	and.w	r3, r3, #2
 80189f6:	2b02      	cmp	r3, #2
 80189f8:	d122      	bne.n	8018a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	68db      	ldr	r3, [r3, #12]
 8018a00:	f003 0302 	and.w	r3, r3, #2
 8018a04:	2b02      	cmp	r3, #2
 8018a06:	d11b      	bne.n	8018a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	f06f 0202 	mvn.w	r2, #2
 8018a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	2201      	movs	r2, #1
 8018a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	699b      	ldr	r3, [r3, #24]
 8018a1e:	f003 0303 	and.w	r3, r3, #3
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d003      	beq.n	8018a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8018a26:	6878      	ldr	r0, [r7, #4]
 8018a28:	f000 f8ee 	bl	8018c08 <HAL_TIM_IC_CaptureCallback>
 8018a2c:	e005      	b.n	8018a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018a2e:	6878      	ldr	r0, [r7, #4]
 8018a30:	f000 f8e0 	bl	8018bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018a34:	6878      	ldr	r0, [r7, #4]
 8018a36:	f000 f8f1 	bl	8018c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	691b      	ldr	r3, [r3, #16]
 8018a46:	f003 0304 	and.w	r3, r3, #4
 8018a4a:	2b04      	cmp	r3, #4
 8018a4c:	d122      	bne.n	8018a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	68db      	ldr	r3, [r3, #12]
 8018a54:	f003 0304 	and.w	r3, r3, #4
 8018a58:	2b04      	cmp	r3, #4
 8018a5a:	d11b      	bne.n	8018a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	f06f 0204 	mvn.w	r2, #4
 8018a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	2202      	movs	r2, #2
 8018a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	699b      	ldr	r3, [r3, #24]
 8018a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d003      	beq.n	8018a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018a7a:	6878      	ldr	r0, [r7, #4]
 8018a7c:	f000 f8c4 	bl	8018c08 <HAL_TIM_IC_CaptureCallback>
 8018a80:	e005      	b.n	8018a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	f000 f8b6 	bl	8018bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018a88:	6878      	ldr	r0, [r7, #4]
 8018a8a:	f000 f8c7 	bl	8018c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	2200      	movs	r2, #0
 8018a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	691b      	ldr	r3, [r3, #16]
 8018a9a:	f003 0308 	and.w	r3, r3, #8
 8018a9e:	2b08      	cmp	r3, #8
 8018aa0:	d122      	bne.n	8018ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	f003 0308 	and.w	r3, r3, #8
 8018aac:	2b08      	cmp	r3, #8
 8018aae:	d11b      	bne.n	8018ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	f06f 0208 	mvn.w	r2, #8
 8018ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	2204      	movs	r2, #4
 8018abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	69db      	ldr	r3, [r3, #28]
 8018ac6:	f003 0303 	and.w	r3, r3, #3
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d003      	beq.n	8018ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018ace:	6878      	ldr	r0, [r7, #4]
 8018ad0:	f000 f89a 	bl	8018c08 <HAL_TIM_IC_CaptureCallback>
 8018ad4:	e005      	b.n	8018ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018ad6:	6878      	ldr	r0, [r7, #4]
 8018ad8:	f000 f88c 	bl	8018bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018adc:	6878      	ldr	r0, [r7, #4]
 8018ade:	f000 f89d 	bl	8018c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	691b      	ldr	r3, [r3, #16]
 8018aee:	f003 0310 	and.w	r3, r3, #16
 8018af2:	2b10      	cmp	r3, #16
 8018af4:	d122      	bne.n	8018b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	68db      	ldr	r3, [r3, #12]
 8018afc:	f003 0310 	and.w	r3, r3, #16
 8018b00:	2b10      	cmp	r3, #16
 8018b02:	d11b      	bne.n	8018b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	f06f 0210 	mvn.w	r2, #16
 8018b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	2208      	movs	r2, #8
 8018b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	69db      	ldr	r3, [r3, #28]
 8018b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d003      	beq.n	8018b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018b22:	6878      	ldr	r0, [r7, #4]
 8018b24:	f000 f870 	bl	8018c08 <HAL_TIM_IC_CaptureCallback>
 8018b28:	e005      	b.n	8018b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018b2a:	6878      	ldr	r0, [r7, #4]
 8018b2c:	f000 f862 	bl	8018bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018b30:	6878      	ldr	r0, [r7, #4]
 8018b32:	f000 f873 	bl	8018c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	2200      	movs	r2, #0
 8018b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	691b      	ldr	r3, [r3, #16]
 8018b42:	f003 0301 	and.w	r3, r3, #1
 8018b46:	2b01      	cmp	r3, #1
 8018b48:	d10e      	bne.n	8018b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	68db      	ldr	r3, [r3, #12]
 8018b50:	f003 0301 	and.w	r3, r3, #1
 8018b54:	2b01      	cmp	r3, #1
 8018b56:	d107      	bne.n	8018b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	f06f 0201 	mvn.w	r2, #1
 8018b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8018b62:	6878      	ldr	r0, [r7, #4]
 8018b64:	f7fb ffac 	bl	8014ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	691b      	ldr	r3, [r3, #16]
 8018b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018b72:	2b80      	cmp	r3, #128	; 0x80
 8018b74:	d10e      	bne.n	8018b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	68db      	ldr	r3, [r3, #12]
 8018b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018b80:	2b80      	cmp	r3, #128	; 0x80
 8018b82:	d107      	bne.n	8018b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8018b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018b8e:	6878      	ldr	r0, [r7, #4]
 8018b90:	f000 f927 	bl	8018de2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	691b      	ldr	r3, [r3, #16]
 8018b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b9e:	2b40      	cmp	r3, #64	; 0x40
 8018ba0:	d10e      	bne.n	8018bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	68db      	ldr	r3, [r3, #12]
 8018ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018bac:	2b40      	cmp	r3, #64	; 0x40
 8018bae:	d107      	bne.n	8018bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8018bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8018bba:	6878      	ldr	r0, [r7, #4]
 8018bbc:	f000 f838 	bl	8018c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	691b      	ldr	r3, [r3, #16]
 8018bc6:	f003 0320 	and.w	r3, r3, #32
 8018bca:	2b20      	cmp	r3, #32
 8018bcc:	d10e      	bne.n	8018bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	68db      	ldr	r3, [r3, #12]
 8018bd4:	f003 0320 	and.w	r3, r3, #32
 8018bd8:	2b20      	cmp	r3, #32
 8018bda:	d107      	bne.n	8018bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	f06f 0220 	mvn.w	r2, #32
 8018be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8018be6:	6878      	ldr	r0, [r7, #4]
 8018be8:	f000 f8f1 	bl	8018dce <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8018bec:	bf00      	nop
 8018bee:	3708      	adds	r7, #8
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bd80      	pop	{r7, pc}

08018bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018bf4:	b480      	push	{r7}
 8018bf6:	b083      	sub	sp, #12
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8018bfc:	bf00      	nop
 8018bfe:	370c      	adds	r7, #12
 8018c00:	46bd      	mov	sp, r7
 8018c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c06:	4770      	bx	lr

08018c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018c08:	b480      	push	{r7}
 8018c0a:	b083      	sub	sp, #12
 8018c0c:	af00      	add	r7, sp, #0
 8018c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8018c10:	bf00      	nop
 8018c12:	370c      	adds	r7, #12
 8018c14:	46bd      	mov	sp, r7
 8018c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1a:	4770      	bx	lr

08018c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8018c1c:	b480      	push	{r7}
 8018c1e:	b083      	sub	sp, #12
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8018c24:	bf00      	nop
 8018c26:	370c      	adds	r7, #12
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2e:	4770      	bx	lr

08018c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8018c30:	b480      	push	{r7}
 8018c32:	b083      	sub	sp, #12
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8018c38:	bf00      	nop
 8018c3a:	370c      	adds	r7, #12
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c42:	4770      	bx	lr

08018c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8018c44:	b480      	push	{r7}
 8018c46:	b085      	sub	sp, #20
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
 8018c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	4a40      	ldr	r2, [pc, #256]	; (8018d58 <TIM_Base_SetConfig+0x114>)
 8018c58:	4293      	cmp	r3, r2
 8018c5a:	d013      	beq.n	8018c84 <TIM_Base_SetConfig+0x40>
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018c62:	d00f      	beq.n	8018c84 <TIM_Base_SetConfig+0x40>
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	4a3d      	ldr	r2, [pc, #244]	; (8018d5c <TIM_Base_SetConfig+0x118>)
 8018c68:	4293      	cmp	r3, r2
 8018c6a:	d00b      	beq.n	8018c84 <TIM_Base_SetConfig+0x40>
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	4a3c      	ldr	r2, [pc, #240]	; (8018d60 <TIM_Base_SetConfig+0x11c>)
 8018c70:	4293      	cmp	r3, r2
 8018c72:	d007      	beq.n	8018c84 <TIM_Base_SetConfig+0x40>
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	4a3b      	ldr	r2, [pc, #236]	; (8018d64 <TIM_Base_SetConfig+0x120>)
 8018c78:	4293      	cmp	r3, r2
 8018c7a:	d003      	beq.n	8018c84 <TIM_Base_SetConfig+0x40>
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	4a3a      	ldr	r2, [pc, #232]	; (8018d68 <TIM_Base_SetConfig+0x124>)
 8018c80:	4293      	cmp	r3, r2
 8018c82:	d108      	bne.n	8018c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018c8c:	683b      	ldr	r3, [r7, #0]
 8018c8e:	685b      	ldr	r3, [r3, #4]
 8018c90:	68fa      	ldr	r2, [r7, #12]
 8018c92:	4313      	orrs	r3, r2
 8018c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	4a2f      	ldr	r2, [pc, #188]	; (8018d58 <TIM_Base_SetConfig+0x114>)
 8018c9a:	4293      	cmp	r3, r2
 8018c9c:	d02b      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018ca4:	d027      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	4a2c      	ldr	r2, [pc, #176]	; (8018d5c <TIM_Base_SetConfig+0x118>)
 8018caa:	4293      	cmp	r3, r2
 8018cac:	d023      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	4a2b      	ldr	r2, [pc, #172]	; (8018d60 <TIM_Base_SetConfig+0x11c>)
 8018cb2:	4293      	cmp	r3, r2
 8018cb4:	d01f      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	4a2a      	ldr	r2, [pc, #168]	; (8018d64 <TIM_Base_SetConfig+0x120>)
 8018cba:	4293      	cmp	r3, r2
 8018cbc:	d01b      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	4a29      	ldr	r2, [pc, #164]	; (8018d68 <TIM_Base_SetConfig+0x124>)
 8018cc2:	4293      	cmp	r3, r2
 8018cc4:	d017      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	4a28      	ldr	r2, [pc, #160]	; (8018d6c <TIM_Base_SetConfig+0x128>)
 8018cca:	4293      	cmp	r3, r2
 8018ccc:	d013      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	4a27      	ldr	r2, [pc, #156]	; (8018d70 <TIM_Base_SetConfig+0x12c>)
 8018cd2:	4293      	cmp	r3, r2
 8018cd4:	d00f      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	4a26      	ldr	r2, [pc, #152]	; (8018d74 <TIM_Base_SetConfig+0x130>)
 8018cda:	4293      	cmp	r3, r2
 8018cdc:	d00b      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	4a25      	ldr	r2, [pc, #148]	; (8018d78 <TIM_Base_SetConfig+0x134>)
 8018ce2:	4293      	cmp	r3, r2
 8018ce4:	d007      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	4a24      	ldr	r2, [pc, #144]	; (8018d7c <TIM_Base_SetConfig+0x138>)
 8018cea:	4293      	cmp	r3, r2
 8018cec:	d003      	beq.n	8018cf6 <TIM_Base_SetConfig+0xb2>
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	4a23      	ldr	r2, [pc, #140]	; (8018d80 <TIM_Base_SetConfig+0x13c>)
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	d108      	bne.n	8018d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018cfe:	683b      	ldr	r3, [r7, #0]
 8018d00:	68db      	ldr	r3, [r3, #12]
 8018d02:	68fa      	ldr	r2, [r7, #12]
 8018d04:	4313      	orrs	r3, r2
 8018d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8018d0e:	683b      	ldr	r3, [r7, #0]
 8018d10:	695b      	ldr	r3, [r3, #20]
 8018d12:	4313      	orrs	r3, r2
 8018d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	68fa      	ldr	r2, [r7, #12]
 8018d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018d1c:	683b      	ldr	r3, [r7, #0]
 8018d1e:	689a      	ldr	r2, [r3, #8]
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018d24:	683b      	ldr	r3, [r7, #0]
 8018d26:	681a      	ldr	r2, [r3, #0]
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	4a0a      	ldr	r2, [pc, #40]	; (8018d58 <TIM_Base_SetConfig+0x114>)
 8018d30:	4293      	cmp	r3, r2
 8018d32:	d003      	beq.n	8018d3c <TIM_Base_SetConfig+0xf8>
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	4a0c      	ldr	r2, [pc, #48]	; (8018d68 <TIM_Base_SetConfig+0x124>)
 8018d38:	4293      	cmp	r3, r2
 8018d3a:	d103      	bne.n	8018d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018d3c:	683b      	ldr	r3, [r7, #0]
 8018d3e:	691a      	ldr	r2, [r3, #16]
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	2201      	movs	r2, #1
 8018d48:	615a      	str	r2, [r3, #20]
}
 8018d4a:	bf00      	nop
 8018d4c:	3714      	adds	r7, #20
 8018d4e:	46bd      	mov	sp, r7
 8018d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d54:	4770      	bx	lr
 8018d56:	bf00      	nop
 8018d58:	40010000 	.word	0x40010000
 8018d5c:	40000400 	.word	0x40000400
 8018d60:	40000800 	.word	0x40000800
 8018d64:	40000c00 	.word	0x40000c00
 8018d68:	40010400 	.word	0x40010400
 8018d6c:	40014000 	.word	0x40014000
 8018d70:	40014400 	.word	0x40014400
 8018d74:	40014800 	.word	0x40014800
 8018d78:	40001800 	.word	0x40001800
 8018d7c:	40001c00 	.word	0x40001c00
 8018d80:	40002000 	.word	0x40002000

08018d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8018d84:	b480      	push	{r7}
 8018d86:	b087      	sub	sp, #28
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	60f8      	str	r0, [r7, #12]
 8018d8c:	60b9      	str	r1, [r7, #8]
 8018d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8018d90:	68bb      	ldr	r3, [r7, #8]
 8018d92:	f003 031f 	and.w	r3, r3, #31
 8018d96:	2201      	movs	r2, #1
 8018d98:	fa02 f303 	lsl.w	r3, r2, r3
 8018d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	6a1a      	ldr	r2, [r3, #32]
 8018da2:	697b      	ldr	r3, [r7, #20]
 8018da4:	43db      	mvns	r3, r3
 8018da6:	401a      	ands	r2, r3
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	6a1a      	ldr	r2, [r3, #32]
 8018db0:	68bb      	ldr	r3, [r7, #8]
 8018db2:	f003 031f 	and.w	r3, r3, #31
 8018db6:	6879      	ldr	r1, [r7, #4]
 8018db8:	fa01 f303 	lsl.w	r3, r1, r3
 8018dbc:	431a      	orrs	r2, r3
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	621a      	str	r2, [r3, #32]
}
 8018dc2:	bf00      	nop
 8018dc4:	371c      	adds	r7, #28
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dcc:	4770      	bx	lr

08018dce <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018dce:	b480      	push	{r7}
 8018dd0:	b083      	sub	sp, #12
 8018dd2:	af00      	add	r7, sp, #0
 8018dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018dd6:	bf00      	nop
 8018dd8:	370c      	adds	r7, #12
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de0:	4770      	bx	lr

08018de2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018de2:	b480      	push	{r7}
 8018de4:	b083      	sub	sp, #12
 8018de6:	af00      	add	r7, sp, #0
 8018de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018dea:	bf00      	nop
 8018dec:	370c      	adds	r7, #12
 8018dee:	46bd      	mov	sp, r7
 8018df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df4:	4770      	bx	lr

08018df6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018df6:	b580      	push	{r7, lr}
 8018df8:	b082      	sub	sp, #8
 8018dfa:	af00      	add	r7, sp, #0
 8018dfc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d101      	bne.n	8018e08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018e04:	2301      	movs	r3, #1
 8018e06:	e03f      	b.n	8018e88 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018e0e:	b2db      	uxtb	r3, r3
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d106      	bne.n	8018e22 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	2200      	movs	r2, #0
 8018e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018e1c:	6878      	ldr	r0, [r7, #4]
 8018e1e:	f7fc f847 	bl	8014eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	2224      	movs	r2, #36	; 0x24
 8018e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	68da      	ldr	r2, [r3, #12]
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8018e38:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8018e3a:	6878      	ldr	r0, [r7, #4]
 8018e3c:	f000 fe20 	bl	8019a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	681b      	ldr	r3, [r3, #0]
 8018e44:	691a      	ldr	r2, [r3, #16]
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018e4e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	695a      	ldr	r2, [r3, #20]
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018e5e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	68da      	ldr	r2, [r3, #12]
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8018e6e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	2200      	movs	r2, #0
 8018e74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	2220      	movs	r2, #32
 8018e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	2220      	movs	r2, #32
 8018e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8018e86:	2300      	movs	r3, #0
}
 8018e88:	4618      	mov	r0, r3
 8018e8a:	3708      	adds	r7, #8
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bd80      	pop	{r7, pc}

08018e90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b08a      	sub	sp, #40	; 0x28
 8018e94:	af02      	add	r7, sp, #8
 8018e96:	60f8      	str	r0, [r7, #12]
 8018e98:	60b9      	str	r1, [r7, #8]
 8018e9a:	603b      	str	r3, [r7, #0]
 8018e9c:	4613      	mov	r3, r2
 8018e9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018eaa:	b2db      	uxtb	r3, r3
 8018eac:	2b20      	cmp	r3, #32
 8018eae:	d17c      	bne.n	8018faa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8018eb0:	68bb      	ldr	r3, [r7, #8]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d002      	beq.n	8018ebc <HAL_UART_Transmit+0x2c>
 8018eb6:	88fb      	ldrh	r3, [r7, #6]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d101      	bne.n	8018ec0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8018ebc:	2301      	movs	r3, #1
 8018ebe:	e075      	b.n	8018fac <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018ec6:	2b01      	cmp	r3, #1
 8018ec8:	d101      	bne.n	8018ece <HAL_UART_Transmit+0x3e>
 8018eca:	2302      	movs	r3, #2
 8018ecc:	e06e      	b.n	8018fac <HAL_UART_Transmit+0x11c>
 8018ece:	68fb      	ldr	r3, [r7, #12]
 8018ed0:	2201      	movs	r2, #1
 8018ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	2200      	movs	r2, #0
 8018eda:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	2221      	movs	r2, #33	; 0x21
 8018ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8018ee4:	f7fc f950 	bl	8015188 <HAL_GetTick>
 8018ee8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	88fa      	ldrh	r2, [r7, #6]
 8018eee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	88fa      	ldrh	r2, [r7, #6]
 8018ef4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	689b      	ldr	r3, [r3, #8]
 8018efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018efe:	d108      	bne.n	8018f12 <HAL_UART_Transmit+0x82>
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	691b      	ldr	r3, [r3, #16]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d104      	bne.n	8018f12 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8018f08:	2300      	movs	r3, #0
 8018f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	61bb      	str	r3, [r7, #24]
 8018f10:	e003      	b.n	8018f1a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8018f12:	68bb      	ldr	r3, [r7, #8]
 8018f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018f16:	2300      	movs	r3, #0
 8018f18:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8018f1a:	68fb      	ldr	r3, [r7, #12]
 8018f1c:	2200      	movs	r2, #0
 8018f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8018f22:	e02a      	b.n	8018f7a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	9300      	str	r3, [sp, #0]
 8018f28:	697b      	ldr	r3, [r7, #20]
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	2180      	movs	r1, #128	; 0x80
 8018f2e:	68f8      	ldr	r0, [r7, #12]
 8018f30:	f000 fb64 	bl	80195fc <UART_WaitOnFlagUntilTimeout>
 8018f34:	4603      	mov	r3, r0
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d001      	beq.n	8018f3e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8018f3a:	2303      	movs	r3, #3
 8018f3c:	e036      	b.n	8018fac <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8018f3e:	69fb      	ldr	r3, [r7, #28]
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d10b      	bne.n	8018f5c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8018f44:	69bb      	ldr	r3, [r7, #24]
 8018f46:	881b      	ldrh	r3, [r3, #0]
 8018f48:	461a      	mov	r2, r3
 8018f4a:	68fb      	ldr	r3, [r7, #12]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018f52:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8018f54:	69bb      	ldr	r3, [r7, #24]
 8018f56:	3302      	adds	r3, #2
 8018f58:	61bb      	str	r3, [r7, #24]
 8018f5a:	e007      	b.n	8018f6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8018f5c:	69fb      	ldr	r3, [r7, #28]
 8018f5e:	781a      	ldrb	r2, [r3, #0]
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8018f66:	69fb      	ldr	r3, [r7, #28]
 8018f68:	3301      	adds	r3, #1
 8018f6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018f70:	b29b      	uxth	r3, r3
 8018f72:	3b01      	subs	r3, #1
 8018f74:	b29a      	uxth	r2, r3
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018f7e:	b29b      	uxth	r3, r3
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d1cf      	bne.n	8018f24 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018f84:	683b      	ldr	r3, [r7, #0]
 8018f86:	9300      	str	r3, [sp, #0]
 8018f88:	697b      	ldr	r3, [r7, #20]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	2140      	movs	r1, #64	; 0x40
 8018f8e:	68f8      	ldr	r0, [r7, #12]
 8018f90:	f000 fb34 	bl	80195fc <UART_WaitOnFlagUntilTimeout>
 8018f94:	4603      	mov	r3, r0
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d001      	beq.n	8018f9e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8018f9a:	2303      	movs	r3, #3
 8018f9c:	e006      	b.n	8018fac <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	2220      	movs	r2, #32
 8018fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	e000      	b.n	8018fac <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8018faa:	2302      	movs	r3, #2
  }
}
 8018fac:	4618      	mov	r0, r3
 8018fae:	3720      	adds	r7, #32
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}

08018fb4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018fb4:	b480      	push	{r7}
 8018fb6:	b085      	sub	sp, #20
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	60f8      	str	r0, [r7, #12]
 8018fbc:	60b9      	str	r1, [r7, #8]
 8018fbe:	4613      	mov	r3, r2
 8018fc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018fc8:	b2db      	uxtb	r3, r3
 8018fca:	2b20      	cmp	r3, #32
 8018fcc:	d130      	bne.n	8019030 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8018fce:	68bb      	ldr	r3, [r7, #8]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d002      	beq.n	8018fda <HAL_UART_Transmit_IT+0x26>
 8018fd4:	88fb      	ldrh	r3, [r7, #6]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d101      	bne.n	8018fde <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8018fda:	2301      	movs	r3, #1
 8018fdc:	e029      	b.n	8019032 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018fe4:	2b01      	cmp	r3, #1
 8018fe6:	d101      	bne.n	8018fec <HAL_UART_Transmit_IT+0x38>
 8018fe8:	2302      	movs	r3, #2
 8018fea:	e022      	b.n	8019032 <HAL_UART_Transmit_IT+0x7e>
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	2201      	movs	r2, #1
 8018ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	68ba      	ldr	r2, [r7, #8]
 8018ff8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	88fa      	ldrh	r2, [r7, #6]
 8018ffe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	88fa      	ldrh	r2, [r7, #6]
 8019004:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	2200      	movs	r2, #0
 801900a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	2221      	movs	r2, #33	; 0x21
 8019010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	2200      	movs	r2, #0
 8019018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	68da      	ldr	r2, [r3, #12]
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801902a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801902c:	2300      	movs	r3, #0
 801902e:	e000      	b.n	8019032 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8019030:	2302      	movs	r3, #2
  }
}
 8019032:	4618      	mov	r0, r3
 8019034:	3714      	adds	r7, #20
 8019036:	46bd      	mov	sp, r7
 8019038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903c:	4770      	bx	lr

0801903e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801903e:	b580      	push	{r7, lr}
 8019040:	b084      	sub	sp, #16
 8019042:	af00      	add	r7, sp, #0
 8019044:	60f8      	str	r0, [r7, #12]
 8019046:	60b9      	str	r1, [r7, #8]
 8019048:	4613      	mov	r3, r2
 801904a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801904c:	68fb      	ldr	r3, [r7, #12]
 801904e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019052:	b2db      	uxtb	r3, r3
 8019054:	2b20      	cmp	r3, #32
 8019056:	d11d      	bne.n	8019094 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8019058:	68bb      	ldr	r3, [r7, #8]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d002      	beq.n	8019064 <HAL_UART_Receive_IT+0x26>
 801905e:	88fb      	ldrh	r3, [r7, #6]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d101      	bne.n	8019068 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8019064:	2301      	movs	r3, #1
 8019066:	e016      	b.n	8019096 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801906e:	2b01      	cmp	r3, #1
 8019070:	d101      	bne.n	8019076 <HAL_UART_Receive_IT+0x38>
 8019072:	2302      	movs	r3, #2
 8019074:	e00f      	b.n	8019096 <HAL_UART_Receive_IT+0x58>
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	2201      	movs	r2, #1
 801907a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	2200      	movs	r2, #0
 8019082:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8019084:	88fb      	ldrh	r3, [r7, #6]
 8019086:	461a      	mov	r2, r3
 8019088:	68b9      	ldr	r1, [r7, #8]
 801908a:	68f8      	ldr	r0, [r7, #12]
 801908c:	f000 fb24 	bl	80196d8 <UART_Start_Receive_IT>
 8019090:	4603      	mov	r3, r0
 8019092:	e000      	b.n	8019096 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8019094:	2302      	movs	r3, #2
  }
}
 8019096:	4618      	mov	r0, r3
 8019098:	3710      	adds	r7, #16
 801909a:	46bd      	mov	sp, r7
 801909c:	bd80      	pop	{r7, pc}
	...

080190a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80190a0:	b580      	push	{r7, lr}
 80190a2:	b0ba      	sub	sp, #232	; 0xe8
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	68db      	ldr	r3, [r3, #12]
 80190b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	695b      	ldr	r3, [r3, #20]
 80190c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80190c6:	2300      	movs	r3, #0
 80190c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80190cc:	2300      	movs	r3, #0
 80190ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80190d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80190d6:	f003 030f 	and.w	r3, r3, #15
 80190da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80190de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d10f      	bne.n	8019106 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80190e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80190ea:	f003 0320 	and.w	r3, r3, #32
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d009      	beq.n	8019106 <HAL_UART_IRQHandler+0x66>
 80190f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80190f6:	f003 0320 	and.w	r3, r3, #32
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d003      	beq.n	8019106 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80190fe:	6878      	ldr	r0, [r7, #4]
 8019100:	f000 fc03 	bl	801990a <UART_Receive_IT>
      return;
 8019104:	e256      	b.n	80195b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8019106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801910a:	2b00      	cmp	r3, #0
 801910c:	f000 80de 	beq.w	80192cc <HAL_UART_IRQHandler+0x22c>
 8019110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8019114:	f003 0301 	and.w	r3, r3, #1
 8019118:	2b00      	cmp	r3, #0
 801911a:	d106      	bne.n	801912a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801911c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8019120:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8019124:	2b00      	cmp	r3, #0
 8019126:	f000 80d1 	beq.w	80192cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801912a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801912e:	f003 0301 	and.w	r3, r3, #1
 8019132:	2b00      	cmp	r3, #0
 8019134:	d00b      	beq.n	801914e <HAL_UART_IRQHandler+0xae>
 8019136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801913a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801913e:	2b00      	cmp	r3, #0
 8019140:	d005      	beq.n	801914e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019146:	f043 0201 	orr.w	r2, r3, #1
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019152:	f003 0304 	and.w	r3, r3, #4
 8019156:	2b00      	cmp	r3, #0
 8019158:	d00b      	beq.n	8019172 <HAL_UART_IRQHandler+0xd2>
 801915a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801915e:	f003 0301 	and.w	r3, r3, #1
 8019162:	2b00      	cmp	r3, #0
 8019164:	d005      	beq.n	8019172 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801916a:	f043 0202 	orr.w	r2, r3, #2
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8019172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019176:	f003 0302 	and.w	r3, r3, #2
 801917a:	2b00      	cmp	r3, #0
 801917c:	d00b      	beq.n	8019196 <HAL_UART_IRQHandler+0xf6>
 801917e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8019182:	f003 0301 	and.w	r3, r3, #1
 8019186:	2b00      	cmp	r3, #0
 8019188:	d005      	beq.n	8019196 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801918e:	f043 0204 	orr.w	r2, r3, #4
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8019196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801919a:	f003 0308 	and.w	r3, r3, #8
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d011      	beq.n	80191c6 <HAL_UART_IRQHandler+0x126>
 80191a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80191a6:	f003 0320 	and.w	r3, r3, #32
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d105      	bne.n	80191ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80191ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80191b2:	f003 0301 	and.w	r3, r3, #1
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d005      	beq.n	80191c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191be:	f043 0208 	orr.w	r2, r3, #8
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	f000 81ed 	beq.w	80195aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80191d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80191d4:	f003 0320 	and.w	r3, r3, #32
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d008      	beq.n	80191ee <HAL_UART_IRQHandler+0x14e>
 80191dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80191e0:	f003 0320 	and.w	r3, r3, #32
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d002      	beq.n	80191ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80191e8:	6878      	ldr	r0, [r7, #4]
 80191ea:	f000 fb8e 	bl	801990a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	695b      	ldr	r3, [r3, #20]
 80191f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80191f8:	2b40      	cmp	r3, #64	; 0x40
 80191fa:	bf0c      	ite	eq
 80191fc:	2301      	moveq	r3, #1
 80191fe:	2300      	movne	r3, #0
 8019200:	b2db      	uxtb	r3, r3
 8019202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801920a:	f003 0308 	and.w	r3, r3, #8
 801920e:	2b00      	cmp	r3, #0
 8019210:	d103      	bne.n	801921a <HAL_UART_IRQHandler+0x17a>
 8019212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8019216:	2b00      	cmp	r3, #0
 8019218:	d04f      	beq.n	80192ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801921a:	6878      	ldr	r0, [r7, #4]
 801921c:	f000 fa96 	bl	801974c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	695b      	ldr	r3, [r3, #20]
 8019226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801922a:	2b40      	cmp	r3, #64	; 0x40
 801922c:	d141      	bne.n	80192b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	3314      	adds	r3, #20
 8019234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801923c:	e853 3f00 	ldrex	r3, [r3]
 8019240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8019244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801924c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	3314      	adds	r3, #20
 8019256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801925a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801925e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8019266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801926a:	e841 2300 	strex	r3, r2, [r1]
 801926e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8019272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019276:	2b00      	cmp	r3, #0
 8019278:	d1d9      	bne.n	801922e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801927e:	2b00      	cmp	r3, #0
 8019280:	d013      	beq.n	80192aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019286:	4a7d      	ldr	r2, [pc, #500]	; (801947c <HAL_UART_IRQHandler+0x3dc>)
 8019288:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801928e:	4618      	mov	r0, r3
 8019290:	f7fc ff22 	bl	80160d8 <HAL_DMA_Abort_IT>
 8019294:	4603      	mov	r3, r0
 8019296:	2b00      	cmp	r3, #0
 8019298:	d016      	beq.n	80192c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801929e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192a0:	687a      	ldr	r2, [r7, #4]
 80192a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80192a4:	4610      	mov	r0, r2
 80192a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80192a8:	e00e      	b.n	80192c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80192aa:	6878      	ldr	r0, [r7, #4]
 80192ac:	f000 f990 	bl	80195d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80192b0:	e00a      	b.n	80192c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80192b2:	6878      	ldr	r0, [r7, #4]
 80192b4:	f000 f98c 	bl	80195d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80192b8:	e006      	b.n	80192c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80192ba:	6878      	ldr	r0, [r7, #4]
 80192bc:	f000 f988 	bl	80195d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	2200      	movs	r2, #0
 80192c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80192c6:	e170      	b.n	80195aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80192c8:	bf00      	nop
    return;
 80192ca:	e16e      	b.n	80195aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192d0:	2b01      	cmp	r3, #1
 80192d2:	f040 814a 	bne.w	801956a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80192d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80192da:	f003 0310 	and.w	r3, r3, #16
 80192de:	2b00      	cmp	r3, #0
 80192e0:	f000 8143 	beq.w	801956a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80192e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80192e8:	f003 0310 	and.w	r3, r3, #16
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	f000 813c 	beq.w	801956a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80192f2:	2300      	movs	r3, #0
 80192f4:	60bb      	str	r3, [r7, #8]
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	60bb      	str	r3, [r7, #8]
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	685b      	ldr	r3, [r3, #4]
 8019304:	60bb      	str	r3, [r7, #8]
 8019306:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	695b      	ldr	r3, [r3, #20]
 801930e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019312:	2b40      	cmp	r3, #64	; 0x40
 8019314:	f040 80b4 	bne.w	8019480 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	685b      	ldr	r3, [r3, #4]
 8019320:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8019324:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8019328:	2b00      	cmp	r3, #0
 801932a:	f000 8140 	beq.w	80195ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8019332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8019336:	429a      	cmp	r2, r3
 8019338:	f080 8139 	bcs.w	80195ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8019342:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019348:	69db      	ldr	r3, [r3, #28]
 801934a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801934e:	f000 8088 	beq.w	8019462 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	330c      	adds	r3, #12
 8019358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801935c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019360:	e853 3f00 	ldrex	r3, [r3]
 8019364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8019368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801936c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	330c      	adds	r3, #12
 801937a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801937e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8019382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019386:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801938a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801938e:	e841 2300 	strex	r3, r2, [r1]
 8019392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8019396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801939a:	2b00      	cmp	r3, #0
 801939c:	d1d9      	bne.n	8019352 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	3314      	adds	r3, #20
 80193a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80193a8:	e853 3f00 	ldrex	r3, [r3]
 80193ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80193ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80193b0:	f023 0301 	bic.w	r3, r3, #1
 80193b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	3314      	adds	r3, #20
 80193be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80193c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80193c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80193ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80193ce:	e841 2300 	strex	r3, r2, [r1]
 80193d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80193d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d1e1      	bne.n	801939e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	3314      	adds	r3, #20
 80193e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80193e4:	e853 3f00 	ldrex	r3, [r3]
 80193e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80193ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80193ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80193f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	3314      	adds	r3, #20
 80193fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80193fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8019400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019402:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8019404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8019406:	e841 2300 	strex	r3, r2, [r1]
 801940a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801940c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801940e:	2b00      	cmp	r3, #0
 8019410:	d1e3      	bne.n	80193da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	2220      	movs	r2, #32
 8019416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	2200      	movs	r2, #0
 801941e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	330c      	adds	r3, #12
 8019426:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801942a:	e853 3f00 	ldrex	r3, [r3]
 801942e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8019430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019432:	f023 0310 	bic.w	r3, r3, #16
 8019436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	330c      	adds	r3, #12
 8019440:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8019444:	65ba      	str	r2, [r7, #88]	; 0x58
 8019446:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801944a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801944c:	e841 2300 	strex	r3, r2, [r1]
 8019450:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8019452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019454:	2b00      	cmp	r3, #0
 8019456:	d1e3      	bne.n	8019420 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801945c:	4618      	mov	r0, r3
 801945e:	f7fc fdcb 	bl	8015ff8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801946a:	b29b      	uxth	r3, r3
 801946c:	1ad3      	subs	r3, r2, r3
 801946e:	b29b      	uxth	r3, r3
 8019470:	4619      	mov	r1, r3
 8019472:	6878      	ldr	r0, [r7, #4]
 8019474:	f000 f8b6 	bl	80195e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8019478:	e099      	b.n	80195ae <HAL_UART_IRQHandler+0x50e>
 801947a:	bf00      	nop
 801947c:	08019813 	.word	0x08019813
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8019488:	b29b      	uxth	r3, r3
 801948a:	1ad3      	subs	r3, r2, r3
 801948c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8019494:	b29b      	uxth	r3, r3
 8019496:	2b00      	cmp	r3, #0
 8019498:	f000 808b 	beq.w	80195b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 801949c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	f000 8086 	beq.w	80195b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	330c      	adds	r3, #12
 80194ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194b0:	e853 3f00 	ldrex	r3, [r3]
 80194b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80194b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80194bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	330c      	adds	r3, #12
 80194c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80194ca:	647a      	str	r2, [r7, #68]	; 0x44
 80194cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80194ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80194d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80194d2:	e841 2300 	strex	r3, r2, [r1]
 80194d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80194d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d1e3      	bne.n	80194a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	3314      	adds	r3, #20
 80194e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80194e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e8:	e853 3f00 	ldrex	r3, [r3]
 80194ec:	623b      	str	r3, [r7, #32]
   return(result);
 80194ee:	6a3b      	ldr	r3, [r7, #32]
 80194f0:	f023 0301 	bic.w	r3, r3, #1
 80194f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	3314      	adds	r3, #20
 80194fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8019502:	633a      	str	r2, [r7, #48]	; 0x30
 8019504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801950a:	e841 2300 	strex	r3, r2, [r1]
 801950e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8019510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019512:	2b00      	cmp	r3, #0
 8019514:	d1e3      	bne.n	80194de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	2220      	movs	r2, #32
 801951a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	2200      	movs	r2, #0
 8019522:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	330c      	adds	r3, #12
 801952a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801952c:	693b      	ldr	r3, [r7, #16]
 801952e:	e853 3f00 	ldrex	r3, [r3]
 8019532:	60fb      	str	r3, [r7, #12]
   return(result);
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	f023 0310 	bic.w	r3, r3, #16
 801953a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	330c      	adds	r3, #12
 8019544:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8019548:	61fa      	str	r2, [r7, #28]
 801954a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801954c:	69b9      	ldr	r1, [r7, #24]
 801954e:	69fa      	ldr	r2, [r7, #28]
 8019550:	e841 2300 	strex	r3, r2, [r1]
 8019554:	617b      	str	r3, [r7, #20]
   return(result);
 8019556:	697b      	ldr	r3, [r7, #20]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d1e3      	bne.n	8019524 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801955c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8019560:	4619      	mov	r1, r3
 8019562:	6878      	ldr	r0, [r7, #4]
 8019564:	f000 f83e 	bl	80195e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8019568:	e023      	b.n	80195b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801956a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801956e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019572:	2b00      	cmp	r3, #0
 8019574:	d009      	beq.n	801958a <HAL_UART_IRQHandler+0x4ea>
 8019576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801957a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801957e:	2b00      	cmp	r3, #0
 8019580:	d003      	beq.n	801958a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8019582:	6878      	ldr	r0, [r7, #4]
 8019584:	f000 f959 	bl	801983a <UART_Transmit_IT>
    return;
 8019588:	e014      	b.n	80195b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801958a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801958e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019592:	2b00      	cmp	r3, #0
 8019594:	d00e      	beq.n	80195b4 <HAL_UART_IRQHandler+0x514>
 8019596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801959a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d008      	beq.n	80195b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80195a2:	6878      	ldr	r0, [r7, #4]
 80195a4:	f000 f999 	bl	80198da <UART_EndTransmit_IT>
    return;
 80195a8:	e004      	b.n	80195b4 <HAL_UART_IRQHandler+0x514>
    return;
 80195aa:	bf00      	nop
 80195ac:	e002      	b.n	80195b4 <HAL_UART_IRQHandler+0x514>
      return;
 80195ae:	bf00      	nop
 80195b0:	e000      	b.n	80195b4 <HAL_UART_IRQHandler+0x514>
      return;
 80195b2:	bf00      	nop
  }
}
 80195b4:	37e8      	adds	r7, #232	; 0xe8
 80195b6:	46bd      	mov	sp, r7
 80195b8:	bd80      	pop	{r7, pc}
 80195ba:	bf00      	nop

080195bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80195bc:	b480      	push	{r7}
 80195be:	b083      	sub	sp, #12
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80195c4:	bf00      	nop
 80195c6:	370c      	adds	r7, #12
 80195c8:	46bd      	mov	sp, r7
 80195ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ce:	4770      	bx	lr

080195d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80195d0:	b480      	push	{r7}
 80195d2:	b083      	sub	sp, #12
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80195d8:	bf00      	nop
 80195da:	370c      	adds	r7, #12
 80195dc:	46bd      	mov	sp, r7
 80195de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e2:	4770      	bx	lr

080195e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80195e4:	b480      	push	{r7}
 80195e6:	b083      	sub	sp, #12
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	6078      	str	r0, [r7, #4]
 80195ec:	460b      	mov	r3, r1
 80195ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80195f0:	bf00      	nop
 80195f2:	370c      	adds	r7, #12
 80195f4:	46bd      	mov	sp, r7
 80195f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195fa:	4770      	bx	lr

080195fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b090      	sub	sp, #64	; 0x40
 8019600:	af00      	add	r7, sp, #0
 8019602:	60f8      	str	r0, [r7, #12]
 8019604:	60b9      	str	r1, [r7, #8]
 8019606:	603b      	str	r3, [r7, #0]
 8019608:	4613      	mov	r3, r2
 801960a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801960c:	e050      	b.n	80196b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801960e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019614:	d04c      	beq.n	80196b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8019616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019618:	2b00      	cmp	r3, #0
 801961a:	d007      	beq.n	801962c <UART_WaitOnFlagUntilTimeout+0x30>
 801961c:	f7fb fdb4 	bl	8015188 <HAL_GetTick>
 8019620:	4602      	mov	r2, r0
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	1ad3      	subs	r3, r2, r3
 8019626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019628:	429a      	cmp	r2, r3
 801962a:	d241      	bcs.n	80196b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	330c      	adds	r3, #12
 8019632:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019636:	e853 3f00 	ldrex	r3, [r3]
 801963a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801963c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801963e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8019642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	330c      	adds	r3, #12
 801964a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801964c:	637a      	str	r2, [r7, #52]	; 0x34
 801964e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019650:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019654:	e841 2300 	strex	r3, r2, [r1]
 8019658:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801965a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965c:	2b00      	cmp	r3, #0
 801965e:	d1e5      	bne.n	801962c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	3314      	adds	r3, #20
 8019666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019668:	697b      	ldr	r3, [r7, #20]
 801966a:	e853 3f00 	ldrex	r3, [r3]
 801966e:	613b      	str	r3, [r7, #16]
   return(result);
 8019670:	693b      	ldr	r3, [r7, #16]
 8019672:	f023 0301 	bic.w	r3, r3, #1
 8019676:	63bb      	str	r3, [r7, #56]	; 0x38
 8019678:	68fb      	ldr	r3, [r7, #12]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	3314      	adds	r3, #20
 801967e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019680:	623a      	str	r2, [r7, #32]
 8019682:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019684:	69f9      	ldr	r1, [r7, #28]
 8019686:	6a3a      	ldr	r2, [r7, #32]
 8019688:	e841 2300 	strex	r3, r2, [r1]
 801968c:	61bb      	str	r3, [r7, #24]
   return(result);
 801968e:	69bb      	ldr	r3, [r7, #24]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d1e5      	bne.n	8019660 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	2220      	movs	r2, #32
 8019698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	2220      	movs	r2, #32
 80196a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	2200      	movs	r2, #0
 80196a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80196ac:	2303      	movs	r3, #3
 80196ae:	e00f      	b.n	80196d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80196b0:	68fb      	ldr	r3, [r7, #12]
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	681a      	ldr	r2, [r3, #0]
 80196b6:	68bb      	ldr	r3, [r7, #8]
 80196b8:	4013      	ands	r3, r2
 80196ba:	68ba      	ldr	r2, [r7, #8]
 80196bc:	429a      	cmp	r2, r3
 80196be:	bf0c      	ite	eq
 80196c0:	2301      	moveq	r3, #1
 80196c2:	2300      	movne	r3, #0
 80196c4:	b2db      	uxtb	r3, r3
 80196c6:	461a      	mov	r2, r3
 80196c8:	79fb      	ldrb	r3, [r7, #7]
 80196ca:	429a      	cmp	r2, r3
 80196cc:	d09f      	beq.n	801960e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80196ce:	2300      	movs	r3, #0
}
 80196d0:	4618      	mov	r0, r3
 80196d2:	3740      	adds	r7, #64	; 0x40
 80196d4:	46bd      	mov	sp, r7
 80196d6:	bd80      	pop	{r7, pc}

080196d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80196d8:	b480      	push	{r7}
 80196da:	b085      	sub	sp, #20
 80196dc:	af00      	add	r7, sp, #0
 80196de:	60f8      	str	r0, [r7, #12]
 80196e0:	60b9      	str	r1, [r7, #8]
 80196e2:	4613      	mov	r3, r2
 80196e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	68ba      	ldr	r2, [r7, #8]
 80196ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	88fa      	ldrh	r2, [r7, #6]
 80196f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	88fa      	ldrh	r2, [r7, #6]
 80196f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	2200      	movs	r2, #0
 80196fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	2222      	movs	r2, #34	; 0x22
 8019702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	2200      	movs	r2, #0
 801970a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801970e:	68fb      	ldr	r3, [r7, #12]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	68da      	ldr	r2, [r3, #12]
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801971c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	695a      	ldr	r2, [r3, #20]
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	f042 0201 	orr.w	r2, r2, #1
 801972c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	68da      	ldr	r2, [r3, #12]
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	f042 0220 	orr.w	r2, r2, #32
 801973c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801973e:	2300      	movs	r3, #0
}
 8019740:	4618      	mov	r0, r3
 8019742:	3714      	adds	r7, #20
 8019744:	46bd      	mov	sp, r7
 8019746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974a:	4770      	bx	lr

0801974c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801974c:	b480      	push	{r7}
 801974e:	b095      	sub	sp, #84	; 0x54
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	330c      	adds	r3, #12
 801975a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801975c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801975e:	e853 3f00 	ldrex	r3, [r3]
 8019762:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8019764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019766:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801976a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	330c      	adds	r3, #12
 8019772:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019774:	643a      	str	r2, [r7, #64]	; 0x40
 8019776:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019778:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801977a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801977c:	e841 2300 	strex	r3, r2, [r1]
 8019780:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8019782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019784:	2b00      	cmp	r3, #0
 8019786:	d1e5      	bne.n	8019754 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	3314      	adds	r3, #20
 801978e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019790:	6a3b      	ldr	r3, [r7, #32]
 8019792:	e853 3f00 	ldrex	r3, [r3]
 8019796:	61fb      	str	r3, [r7, #28]
   return(result);
 8019798:	69fb      	ldr	r3, [r7, #28]
 801979a:	f023 0301 	bic.w	r3, r3, #1
 801979e:	64bb      	str	r3, [r7, #72]	; 0x48
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	3314      	adds	r3, #20
 80197a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80197a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80197aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80197ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80197ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80197b0:	e841 2300 	strex	r3, r2, [r1]
 80197b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80197b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d1e5      	bne.n	8019788 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80197c0:	2b01      	cmp	r3, #1
 80197c2:	d119      	bne.n	80197f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	330c      	adds	r3, #12
 80197ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	e853 3f00 	ldrex	r3, [r3]
 80197d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80197d4:	68bb      	ldr	r3, [r7, #8]
 80197d6:	f023 0310 	bic.w	r3, r3, #16
 80197da:	647b      	str	r3, [r7, #68]	; 0x44
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	330c      	adds	r3, #12
 80197e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80197e4:	61ba      	str	r2, [r7, #24]
 80197e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80197e8:	6979      	ldr	r1, [r7, #20]
 80197ea:	69ba      	ldr	r2, [r7, #24]
 80197ec:	e841 2300 	strex	r3, r2, [r1]
 80197f0:	613b      	str	r3, [r7, #16]
   return(result);
 80197f2:	693b      	ldr	r3, [r7, #16]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d1e5      	bne.n	80197c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	2220      	movs	r2, #32
 80197fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	2200      	movs	r2, #0
 8019804:	631a      	str	r2, [r3, #48]	; 0x30
}
 8019806:	bf00      	nop
 8019808:	3754      	adds	r7, #84	; 0x54
 801980a:	46bd      	mov	sp, r7
 801980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019810:	4770      	bx	lr

08019812 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8019812:	b580      	push	{r7, lr}
 8019814:	b084      	sub	sp, #16
 8019816:	af00      	add	r7, sp, #0
 8019818:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801981e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	2200      	movs	r2, #0
 8019824:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	2200      	movs	r2, #0
 801982a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801982c:	68f8      	ldr	r0, [r7, #12]
 801982e:	f7ff fecf 	bl	80195d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019832:	bf00      	nop
 8019834:	3710      	adds	r7, #16
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}

0801983a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801983a:	b480      	push	{r7}
 801983c:	b085      	sub	sp, #20
 801983e:	af00      	add	r7, sp, #0
 8019840:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019848:	b2db      	uxtb	r3, r3
 801984a:	2b21      	cmp	r3, #33	; 0x21
 801984c:	d13e      	bne.n	80198cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	689b      	ldr	r3, [r3, #8]
 8019852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019856:	d114      	bne.n	8019882 <UART_Transmit_IT+0x48>
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	691b      	ldr	r3, [r3, #16]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d110      	bne.n	8019882 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	6a1b      	ldr	r3, [r3, #32]
 8019864:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	881b      	ldrh	r3, [r3, #0]
 801986a:	461a      	mov	r2, r3
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019874:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	6a1b      	ldr	r3, [r3, #32]
 801987a:	1c9a      	adds	r2, r3, #2
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	621a      	str	r2, [r3, #32]
 8019880:	e008      	b.n	8019894 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	6a1b      	ldr	r3, [r3, #32]
 8019886:	1c59      	adds	r1, r3, #1
 8019888:	687a      	ldr	r2, [r7, #4]
 801988a:	6211      	str	r1, [r2, #32]
 801988c:	781a      	ldrb	r2, [r3, #0]
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8019898:	b29b      	uxth	r3, r3
 801989a:	3b01      	subs	r3, #1
 801989c:	b29b      	uxth	r3, r3
 801989e:	687a      	ldr	r2, [r7, #4]
 80198a0:	4619      	mov	r1, r3
 80198a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d10f      	bne.n	80198c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	68da      	ldr	r2, [r3, #12]
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80198b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	68da      	ldr	r2, [r3, #12]
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80198c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80198c8:	2300      	movs	r3, #0
 80198ca:	e000      	b.n	80198ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80198cc:	2302      	movs	r3, #2
  }
}
 80198ce:	4618      	mov	r0, r3
 80198d0:	3714      	adds	r7, #20
 80198d2:	46bd      	mov	sp, r7
 80198d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d8:	4770      	bx	lr

080198da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80198da:	b580      	push	{r7, lr}
 80198dc:	b082      	sub	sp, #8
 80198de:	af00      	add	r7, sp, #0
 80198e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	68da      	ldr	r2, [r3, #12]
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80198f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	2220      	movs	r2, #32
 80198f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80198fa:	6878      	ldr	r0, [r7, #4]
 80198fc:	f7ff fe5e 	bl	80195bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8019900:	2300      	movs	r3, #0
}
 8019902:	4618      	mov	r0, r3
 8019904:	3708      	adds	r7, #8
 8019906:	46bd      	mov	sp, r7
 8019908:	bd80      	pop	{r7, pc}

0801990a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801990a:	b580      	push	{r7, lr}
 801990c:	b08c      	sub	sp, #48	; 0x30
 801990e:	af00      	add	r7, sp, #0
 8019910:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8019918:	b2db      	uxtb	r3, r3
 801991a:	2b22      	cmp	r3, #34	; 0x22
 801991c:	f040 80ab 	bne.w	8019a76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	689b      	ldr	r3, [r3, #8]
 8019924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019928:	d117      	bne.n	801995a <UART_Receive_IT+0x50>
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	691b      	ldr	r3, [r3, #16]
 801992e:	2b00      	cmp	r3, #0
 8019930:	d113      	bne.n	801995a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8019932:	2300      	movs	r3, #0
 8019934:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801993a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	685b      	ldr	r3, [r3, #4]
 8019942:	b29b      	uxth	r3, r3
 8019944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019948:	b29a      	uxth	r2, r3
 801994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801994c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019952:	1c9a      	adds	r2, r3, #2
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	629a      	str	r2, [r3, #40]	; 0x28
 8019958:	e026      	b.n	80199a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801995e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8019960:	2300      	movs	r3, #0
 8019962:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	689b      	ldr	r3, [r3, #8]
 8019968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801996c:	d007      	beq.n	801997e <UART_Receive_IT+0x74>
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	689b      	ldr	r3, [r3, #8]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d10a      	bne.n	801998c <UART_Receive_IT+0x82>
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	691b      	ldr	r3, [r3, #16]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d106      	bne.n	801998c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	685b      	ldr	r3, [r3, #4]
 8019984:	b2da      	uxtb	r2, r3
 8019986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019988:	701a      	strb	r2, [r3, #0]
 801998a:	e008      	b.n	801999e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	685b      	ldr	r3, [r3, #4]
 8019992:	b2db      	uxtb	r3, r3
 8019994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019998:	b2da      	uxtb	r2, r3
 801999a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801999c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199a2:	1c5a      	adds	r2, r3, #1
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80199ac:	b29b      	uxth	r3, r3
 80199ae:	3b01      	subs	r3, #1
 80199b0:	b29b      	uxth	r3, r3
 80199b2:	687a      	ldr	r2, [r7, #4]
 80199b4:	4619      	mov	r1, r3
 80199b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d15a      	bne.n	8019a72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	68da      	ldr	r2, [r3, #12]
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	f022 0220 	bic.w	r2, r2, #32
 80199ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	68da      	ldr	r2, [r3, #12]
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80199da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	695a      	ldr	r2, [r3, #20]
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	f022 0201 	bic.w	r2, r2, #1
 80199ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	2220      	movs	r2, #32
 80199f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199f8:	2b01      	cmp	r3, #1
 80199fa:	d135      	bne.n	8019a68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2200      	movs	r2, #0
 8019a00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	330c      	adds	r3, #12
 8019a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019a0a:	697b      	ldr	r3, [r7, #20]
 8019a0c:	e853 3f00 	ldrex	r3, [r3]
 8019a10:	613b      	str	r3, [r7, #16]
   return(result);
 8019a12:	693b      	ldr	r3, [r7, #16]
 8019a14:	f023 0310 	bic.w	r3, r3, #16
 8019a18:	627b      	str	r3, [r7, #36]	; 0x24
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	330c      	adds	r3, #12
 8019a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a22:	623a      	str	r2, [r7, #32]
 8019a24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019a26:	69f9      	ldr	r1, [r7, #28]
 8019a28:	6a3a      	ldr	r2, [r7, #32]
 8019a2a:	e841 2300 	strex	r3, r2, [r1]
 8019a2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8019a30:	69bb      	ldr	r3, [r7, #24]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d1e5      	bne.n	8019a02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	f003 0310 	and.w	r3, r3, #16
 8019a40:	2b10      	cmp	r3, #16
 8019a42:	d10a      	bne.n	8019a5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8019a44:	2300      	movs	r3, #0
 8019a46:	60fb      	str	r3, [r7, #12]
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	60fb      	str	r3, [r7, #12]
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	685b      	ldr	r3, [r3, #4]
 8019a56:	60fb      	str	r3, [r7, #12]
 8019a58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8019a5e:	4619      	mov	r1, r3
 8019a60:	6878      	ldr	r0, [r7, #4]
 8019a62:	f7ff fdbf 	bl	80195e4 <HAL_UARTEx_RxEventCallback>
 8019a66:	e002      	b.n	8019a6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8019a68:	6878      	ldr	r0, [r7, #4]
 8019a6a:	f7eb fe55 	bl	8005718 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8019a6e:	2300      	movs	r3, #0
 8019a70:	e002      	b.n	8019a78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8019a72:	2300      	movs	r3, #0
 8019a74:	e000      	b.n	8019a78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8019a76:	2302      	movs	r3, #2
  }
}
 8019a78:	4618      	mov	r0, r3
 8019a7a:	3730      	adds	r7, #48	; 0x30
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	bd80      	pop	{r7, pc}

08019a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8019a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a84:	b09f      	sub	sp, #124	; 0x7c
 8019a86:	af00      	add	r7, sp, #0
 8019a88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	691b      	ldr	r3, [r3, #16]
 8019a90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8019a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a96:	68d9      	ldr	r1, [r3, #12]
 8019a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019a9a:	681a      	ldr	r2, [r3, #0]
 8019a9c:	ea40 0301 	orr.w	r3, r0, r1
 8019aa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8019aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019aa4:	689a      	ldr	r2, [r3, #8]
 8019aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019aa8:	691b      	ldr	r3, [r3, #16]
 8019aaa:	431a      	orrs	r2, r3
 8019aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019aae:	695b      	ldr	r3, [r3, #20]
 8019ab0:	431a      	orrs	r2, r3
 8019ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ab4:	69db      	ldr	r3, [r3, #28]
 8019ab6:	4313      	orrs	r3, r2
 8019ab8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8019aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	68db      	ldr	r3, [r3, #12]
 8019ac0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8019ac4:	f021 010c 	bic.w	r1, r1, #12
 8019ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019aca:	681a      	ldr	r2, [r3, #0]
 8019acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019ace:	430b      	orrs	r3, r1
 8019ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8019ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	695b      	ldr	r3, [r3, #20]
 8019ad8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8019adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ade:	6999      	ldr	r1, [r3, #24]
 8019ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019ae2:	681a      	ldr	r2, [r3, #0]
 8019ae4:	ea40 0301 	orr.w	r3, r0, r1
 8019ae8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8019aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019aec:	681a      	ldr	r2, [r3, #0]
 8019aee:	4bc5      	ldr	r3, [pc, #788]	; (8019e04 <UART_SetConfig+0x384>)
 8019af0:	429a      	cmp	r2, r3
 8019af2:	d004      	beq.n	8019afe <UART_SetConfig+0x7e>
 8019af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019af6:	681a      	ldr	r2, [r3, #0]
 8019af8:	4bc3      	ldr	r3, [pc, #780]	; (8019e08 <UART_SetConfig+0x388>)
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d103      	bne.n	8019b06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8019afe:	f7fe fc8b 	bl	8018418 <HAL_RCC_GetPCLK2Freq>
 8019b02:	6778      	str	r0, [r7, #116]	; 0x74
 8019b04:	e002      	b.n	8019b0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8019b06:	f7fe fc73 	bl	80183f0 <HAL_RCC_GetPCLK1Freq>
 8019b0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019b0e:	69db      	ldr	r3, [r3, #28]
 8019b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019b14:	f040 80b6 	bne.w	8019c84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8019b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b1a:	461c      	mov	r4, r3
 8019b1c:	f04f 0500 	mov.w	r5, #0
 8019b20:	4622      	mov	r2, r4
 8019b22:	462b      	mov	r3, r5
 8019b24:	1891      	adds	r1, r2, r2
 8019b26:	6439      	str	r1, [r7, #64]	; 0x40
 8019b28:	415b      	adcs	r3, r3
 8019b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8019b2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8019b30:	1912      	adds	r2, r2, r4
 8019b32:	eb45 0303 	adc.w	r3, r5, r3
 8019b36:	f04f 0000 	mov.w	r0, #0
 8019b3a:	f04f 0100 	mov.w	r1, #0
 8019b3e:	00d9      	lsls	r1, r3, #3
 8019b40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8019b44:	00d0      	lsls	r0, r2, #3
 8019b46:	4602      	mov	r2, r0
 8019b48:	460b      	mov	r3, r1
 8019b4a:	1911      	adds	r1, r2, r4
 8019b4c:	6639      	str	r1, [r7, #96]	; 0x60
 8019b4e:	416b      	adcs	r3, r5
 8019b50:	667b      	str	r3, [r7, #100]	; 0x64
 8019b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019b54:	685b      	ldr	r3, [r3, #4]
 8019b56:	461a      	mov	r2, r3
 8019b58:	f04f 0300 	mov.w	r3, #0
 8019b5c:	1891      	adds	r1, r2, r2
 8019b5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8019b60:	415b      	adcs	r3, r3
 8019b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8019b68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8019b6c:	f7e7 f81e 	bl	8000bac <__aeabi_uldivmod>
 8019b70:	4602      	mov	r2, r0
 8019b72:	460b      	mov	r3, r1
 8019b74:	4ba5      	ldr	r3, [pc, #660]	; (8019e0c <UART_SetConfig+0x38c>)
 8019b76:	fba3 2302 	umull	r2, r3, r3, r2
 8019b7a:	095b      	lsrs	r3, r3, #5
 8019b7c:	011e      	lsls	r6, r3, #4
 8019b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b80:	461c      	mov	r4, r3
 8019b82:	f04f 0500 	mov.w	r5, #0
 8019b86:	4622      	mov	r2, r4
 8019b88:	462b      	mov	r3, r5
 8019b8a:	1891      	adds	r1, r2, r2
 8019b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8019b8e:	415b      	adcs	r3, r3
 8019b90:	637b      	str	r3, [r7, #52]	; 0x34
 8019b92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8019b96:	1912      	adds	r2, r2, r4
 8019b98:	eb45 0303 	adc.w	r3, r5, r3
 8019b9c:	f04f 0000 	mov.w	r0, #0
 8019ba0:	f04f 0100 	mov.w	r1, #0
 8019ba4:	00d9      	lsls	r1, r3, #3
 8019ba6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8019baa:	00d0      	lsls	r0, r2, #3
 8019bac:	4602      	mov	r2, r0
 8019bae:	460b      	mov	r3, r1
 8019bb0:	1911      	adds	r1, r2, r4
 8019bb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8019bb4:	416b      	adcs	r3, r5
 8019bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019bba:	685b      	ldr	r3, [r3, #4]
 8019bbc:	461a      	mov	r2, r3
 8019bbe:	f04f 0300 	mov.w	r3, #0
 8019bc2:	1891      	adds	r1, r2, r2
 8019bc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8019bc6:	415b      	adcs	r3, r3
 8019bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8019bce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8019bd2:	f7e6 ffeb 	bl	8000bac <__aeabi_uldivmod>
 8019bd6:	4602      	mov	r2, r0
 8019bd8:	460b      	mov	r3, r1
 8019bda:	4b8c      	ldr	r3, [pc, #560]	; (8019e0c <UART_SetConfig+0x38c>)
 8019bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8019be0:	095b      	lsrs	r3, r3, #5
 8019be2:	2164      	movs	r1, #100	; 0x64
 8019be4:	fb01 f303 	mul.w	r3, r1, r3
 8019be8:	1ad3      	subs	r3, r2, r3
 8019bea:	00db      	lsls	r3, r3, #3
 8019bec:	3332      	adds	r3, #50	; 0x32
 8019bee:	4a87      	ldr	r2, [pc, #540]	; (8019e0c <UART_SetConfig+0x38c>)
 8019bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8019bf4:	095b      	lsrs	r3, r3, #5
 8019bf6:	005b      	lsls	r3, r3, #1
 8019bf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8019bfc:	441e      	add	r6, r3
 8019bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c00:	4618      	mov	r0, r3
 8019c02:	f04f 0100 	mov.w	r1, #0
 8019c06:	4602      	mov	r2, r0
 8019c08:	460b      	mov	r3, r1
 8019c0a:	1894      	adds	r4, r2, r2
 8019c0c:	623c      	str	r4, [r7, #32]
 8019c0e:	415b      	adcs	r3, r3
 8019c10:	627b      	str	r3, [r7, #36]	; 0x24
 8019c12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8019c16:	1812      	adds	r2, r2, r0
 8019c18:	eb41 0303 	adc.w	r3, r1, r3
 8019c1c:	f04f 0400 	mov.w	r4, #0
 8019c20:	f04f 0500 	mov.w	r5, #0
 8019c24:	00dd      	lsls	r5, r3, #3
 8019c26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8019c2a:	00d4      	lsls	r4, r2, #3
 8019c2c:	4622      	mov	r2, r4
 8019c2e:	462b      	mov	r3, r5
 8019c30:	1814      	adds	r4, r2, r0
 8019c32:	653c      	str	r4, [r7, #80]	; 0x50
 8019c34:	414b      	adcs	r3, r1
 8019c36:	657b      	str	r3, [r7, #84]	; 0x54
 8019c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c3a:	685b      	ldr	r3, [r3, #4]
 8019c3c:	461a      	mov	r2, r3
 8019c3e:	f04f 0300 	mov.w	r3, #0
 8019c42:	1891      	adds	r1, r2, r2
 8019c44:	61b9      	str	r1, [r7, #24]
 8019c46:	415b      	adcs	r3, r3
 8019c48:	61fb      	str	r3, [r7, #28]
 8019c4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8019c4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8019c52:	f7e6 ffab 	bl	8000bac <__aeabi_uldivmod>
 8019c56:	4602      	mov	r2, r0
 8019c58:	460b      	mov	r3, r1
 8019c5a:	4b6c      	ldr	r3, [pc, #432]	; (8019e0c <UART_SetConfig+0x38c>)
 8019c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8019c60:	095b      	lsrs	r3, r3, #5
 8019c62:	2164      	movs	r1, #100	; 0x64
 8019c64:	fb01 f303 	mul.w	r3, r1, r3
 8019c68:	1ad3      	subs	r3, r2, r3
 8019c6a:	00db      	lsls	r3, r3, #3
 8019c6c:	3332      	adds	r3, #50	; 0x32
 8019c6e:	4a67      	ldr	r2, [pc, #412]	; (8019e0c <UART_SetConfig+0x38c>)
 8019c70:	fba2 2303 	umull	r2, r3, r2, r3
 8019c74:	095b      	lsrs	r3, r3, #5
 8019c76:	f003 0207 	and.w	r2, r3, #7
 8019c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	4432      	add	r2, r6
 8019c80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8019c82:	e0b9      	b.n	8019df8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8019c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c86:	461c      	mov	r4, r3
 8019c88:	f04f 0500 	mov.w	r5, #0
 8019c8c:	4622      	mov	r2, r4
 8019c8e:	462b      	mov	r3, r5
 8019c90:	1891      	adds	r1, r2, r2
 8019c92:	6139      	str	r1, [r7, #16]
 8019c94:	415b      	adcs	r3, r3
 8019c96:	617b      	str	r3, [r7, #20]
 8019c98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8019c9c:	1912      	adds	r2, r2, r4
 8019c9e:	eb45 0303 	adc.w	r3, r5, r3
 8019ca2:	f04f 0000 	mov.w	r0, #0
 8019ca6:	f04f 0100 	mov.w	r1, #0
 8019caa:	00d9      	lsls	r1, r3, #3
 8019cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8019cb0:	00d0      	lsls	r0, r2, #3
 8019cb2:	4602      	mov	r2, r0
 8019cb4:	460b      	mov	r3, r1
 8019cb6:	eb12 0804 	adds.w	r8, r2, r4
 8019cba:	eb43 0905 	adc.w	r9, r3, r5
 8019cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019cc0:	685b      	ldr	r3, [r3, #4]
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	f04f 0100 	mov.w	r1, #0
 8019cc8:	f04f 0200 	mov.w	r2, #0
 8019ccc:	f04f 0300 	mov.w	r3, #0
 8019cd0:	008b      	lsls	r3, r1, #2
 8019cd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8019cd6:	0082      	lsls	r2, r0, #2
 8019cd8:	4640      	mov	r0, r8
 8019cda:	4649      	mov	r1, r9
 8019cdc:	f7e6 ff66 	bl	8000bac <__aeabi_uldivmod>
 8019ce0:	4602      	mov	r2, r0
 8019ce2:	460b      	mov	r3, r1
 8019ce4:	4b49      	ldr	r3, [pc, #292]	; (8019e0c <UART_SetConfig+0x38c>)
 8019ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8019cea:	095b      	lsrs	r3, r3, #5
 8019cec:	011e      	lsls	r6, r3, #4
 8019cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	f04f 0100 	mov.w	r1, #0
 8019cf6:	4602      	mov	r2, r0
 8019cf8:	460b      	mov	r3, r1
 8019cfa:	1894      	adds	r4, r2, r2
 8019cfc:	60bc      	str	r4, [r7, #8]
 8019cfe:	415b      	adcs	r3, r3
 8019d00:	60fb      	str	r3, [r7, #12]
 8019d02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8019d06:	1812      	adds	r2, r2, r0
 8019d08:	eb41 0303 	adc.w	r3, r1, r3
 8019d0c:	f04f 0400 	mov.w	r4, #0
 8019d10:	f04f 0500 	mov.w	r5, #0
 8019d14:	00dd      	lsls	r5, r3, #3
 8019d16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8019d1a:	00d4      	lsls	r4, r2, #3
 8019d1c:	4622      	mov	r2, r4
 8019d1e:	462b      	mov	r3, r5
 8019d20:	1814      	adds	r4, r2, r0
 8019d22:	64bc      	str	r4, [r7, #72]	; 0x48
 8019d24:	414b      	adcs	r3, r1
 8019d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019d2a:	685b      	ldr	r3, [r3, #4]
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	f04f 0100 	mov.w	r1, #0
 8019d32:	f04f 0200 	mov.w	r2, #0
 8019d36:	f04f 0300 	mov.w	r3, #0
 8019d3a:	008b      	lsls	r3, r1, #2
 8019d3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8019d40:	0082      	lsls	r2, r0, #2
 8019d42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8019d46:	f7e6 ff31 	bl	8000bac <__aeabi_uldivmod>
 8019d4a:	4602      	mov	r2, r0
 8019d4c:	460b      	mov	r3, r1
 8019d4e:	4b2f      	ldr	r3, [pc, #188]	; (8019e0c <UART_SetConfig+0x38c>)
 8019d50:	fba3 1302 	umull	r1, r3, r3, r2
 8019d54:	095b      	lsrs	r3, r3, #5
 8019d56:	2164      	movs	r1, #100	; 0x64
 8019d58:	fb01 f303 	mul.w	r3, r1, r3
 8019d5c:	1ad3      	subs	r3, r2, r3
 8019d5e:	011b      	lsls	r3, r3, #4
 8019d60:	3332      	adds	r3, #50	; 0x32
 8019d62:	4a2a      	ldr	r2, [pc, #168]	; (8019e0c <UART_SetConfig+0x38c>)
 8019d64:	fba2 2303 	umull	r2, r3, r2, r3
 8019d68:	095b      	lsrs	r3, r3, #5
 8019d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019d6e:	441e      	add	r6, r3
 8019d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019d72:	4618      	mov	r0, r3
 8019d74:	f04f 0100 	mov.w	r1, #0
 8019d78:	4602      	mov	r2, r0
 8019d7a:	460b      	mov	r3, r1
 8019d7c:	1894      	adds	r4, r2, r2
 8019d7e:	603c      	str	r4, [r7, #0]
 8019d80:	415b      	adcs	r3, r3
 8019d82:	607b      	str	r3, [r7, #4]
 8019d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019d88:	1812      	adds	r2, r2, r0
 8019d8a:	eb41 0303 	adc.w	r3, r1, r3
 8019d8e:	f04f 0400 	mov.w	r4, #0
 8019d92:	f04f 0500 	mov.w	r5, #0
 8019d96:	00dd      	lsls	r5, r3, #3
 8019d98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8019d9c:	00d4      	lsls	r4, r2, #3
 8019d9e:	4622      	mov	r2, r4
 8019da0:	462b      	mov	r3, r5
 8019da2:	eb12 0a00 	adds.w	sl, r2, r0
 8019da6:	eb43 0b01 	adc.w	fp, r3, r1
 8019daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019dac:	685b      	ldr	r3, [r3, #4]
 8019dae:	4618      	mov	r0, r3
 8019db0:	f04f 0100 	mov.w	r1, #0
 8019db4:	f04f 0200 	mov.w	r2, #0
 8019db8:	f04f 0300 	mov.w	r3, #0
 8019dbc:	008b      	lsls	r3, r1, #2
 8019dbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8019dc2:	0082      	lsls	r2, r0, #2
 8019dc4:	4650      	mov	r0, sl
 8019dc6:	4659      	mov	r1, fp
 8019dc8:	f7e6 fef0 	bl	8000bac <__aeabi_uldivmod>
 8019dcc:	4602      	mov	r2, r0
 8019dce:	460b      	mov	r3, r1
 8019dd0:	4b0e      	ldr	r3, [pc, #56]	; (8019e0c <UART_SetConfig+0x38c>)
 8019dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8019dd6:	095b      	lsrs	r3, r3, #5
 8019dd8:	2164      	movs	r1, #100	; 0x64
 8019dda:	fb01 f303 	mul.w	r3, r1, r3
 8019dde:	1ad3      	subs	r3, r2, r3
 8019de0:	011b      	lsls	r3, r3, #4
 8019de2:	3332      	adds	r3, #50	; 0x32
 8019de4:	4a09      	ldr	r2, [pc, #36]	; (8019e0c <UART_SetConfig+0x38c>)
 8019de6:	fba2 2303 	umull	r2, r3, r2, r3
 8019dea:	095b      	lsrs	r3, r3, #5
 8019dec:	f003 020f 	and.w	r2, r3, #15
 8019df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	4432      	add	r2, r6
 8019df6:	609a      	str	r2, [r3, #8]
}
 8019df8:	bf00      	nop
 8019dfa:	377c      	adds	r7, #124	; 0x7c
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e02:	bf00      	nop
 8019e04:	40011000 	.word	0x40011000
 8019e08:	40011400 	.word	0x40011400
 8019e0c:	51eb851f 	.word	0x51eb851f

08019e10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8019e10:	b480      	push	{r7}
 8019e12:	b083      	sub	sp, #12
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	f103 0208 	add.w	r2, r3, #8
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	f04f 32ff 	mov.w	r2, #4294967295
 8019e28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	f103 0208 	add.w	r2, r3, #8
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	f103 0208 	add.w	r2, r3, #8
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	2200      	movs	r2, #0
 8019e42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019e44:	bf00      	nop
 8019e46:	370c      	adds	r7, #12
 8019e48:	46bd      	mov	sp, r7
 8019e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e4e:	4770      	bx	lr

08019e50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8019e50:	b480      	push	{r7}
 8019e52:	b083      	sub	sp, #12
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	2200      	movs	r2, #0
 8019e5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8019e5e:	bf00      	nop
 8019e60:	370c      	adds	r7, #12
 8019e62:	46bd      	mov	sp, r7
 8019e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e68:	4770      	bx	lr

08019e6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019e6a:	b480      	push	{r7}
 8019e6c:	b085      	sub	sp, #20
 8019e6e:	af00      	add	r7, sp, #0
 8019e70:	6078      	str	r0, [r7, #4]
 8019e72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	685b      	ldr	r3, [r3, #4]
 8019e78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	68fa      	ldr	r2, [r7, #12]
 8019e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	689a      	ldr	r2, [r3, #8]
 8019e84:	683b      	ldr	r3, [r7, #0]
 8019e86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	689b      	ldr	r3, [r3, #8]
 8019e8c:	683a      	ldr	r2, [r7, #0]
 8019e8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	683a      	ldr	r2, [r7, #0]
 8019e94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8019e96:	683b      	ldr	r3, [r7, #0]
 8019e98:	687a      	ldr	r2, [r7, #4]
 8019e9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	1c5a      	adds	r2, r3, #1
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	601a      	str	r2, [r3, #0]
}
 8019ea6:	bf00      	nop
 8019ea8:	3714      	adds	r7, #20
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb0:	4770      	bx	lr

08019eb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019eb2:	b480      	push	{r7}
 8019eb4:	b085      	sub	sp, #20
 8019eb6:	af00      	add	r7, sp, #0
 8019eb8:	6078      	str	r0, [r7, #4]
 8019eba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019ebc:	683b      	ldr	r3, [r7, #0]
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8019ec2:	68bb      	ldr	r3, [r7, #8]
 8019ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ec8:	d103      	bne.n	8019ed2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	691b      	ldr	r3, [r3, #16]
 8019ece:	60fb      	str	r3, [r7, #12]
 8019ed0:	e00c      	b.n	8019eec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	3308      	adds	r3, #8
 8019ed6:	60fb      	str	r3, [r7, #12]
 8019ed8:	e002      	b.n	8019ee0 <vListInsert+0x2e>
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	685b      	ldr	r3, [r3, #4]
 8019ede:	60fb      	str	r3, [r7, #12]
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	685b      	ldr	r3, [r3, #4]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	68ba      	ldr	r2, [r7, #8]
 8019ee8:	429a      	cmp	r2, r3
 8019eea:	d2f6      	bcs.n	8019eda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019eec:	68fb      	ldr	r3, [r7, #12]
 8019eee:	685a      	ldr	r2, [r3, #4]
 8019ef0:	683b      	ldr	r3, [r7, #0]
 8019ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019ef4:	683b      	ldr	r3, [r7, #0]
 8019ef6:	685b      	ldr	r3, [r3, #4]
 8019ef8:	683a      	ldr	r2, [r7, #0]
 8019efa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019efc:	683b      	ldr	r3, [r7, #0]
 8019efe:	68fa      	ldr	r2, [r7, #12]
 8019f00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	683a      	ldr	r2, [r7, #0]
 8019f06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019f08:	683b      	ldr	r3, [r7, #0]
 8019f0a:	687a      	ldr	r2, [r7, #4]
 8019f0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	1c5a      	adds	r2, r3, #1
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	601a      	str	r2, [r3, #0]
}
 8019f18:	bf00      	nop
 8019f1a:	3714      	adds	r7, #20
 8019f1c:	46bd      	mov	sp, r7
 8019f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f22:	4770      	bx	lr

08019f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019f24:	b480      	push	{r7}
 8019f26:	b085      	sub	sp, #20
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	691b      	ldr	r3, [r3, #16]
 8019f30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	685b      	ldr	r3, [r3, #4]
 8019f36:	687a      	ldr	r2, [r7, #4]
 8019f38:	6892      	ldr	r2, [r2, #8]
 8019f3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	689b      	ldr	r3, [r3, #8]
 8019f40:	687a      	ldr	r2, [r7, #4]
 8019f42:	6852      	ldr	r2, [r2, #4]
 8019f44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	685b      	ldr	r3, [r3, #4]
 8019f4a:	687a      	ldr	r2, [r7, #4]
 8019f4c:	429a      	cmp	r2, r3
 8019f4e:	d103      	bne.n	8019f58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	689a      	ldr	r2, [r3, #8]
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	1e5a      	subs	r2, r3, #1
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	681b      	ldr	r3, [r3, #0]
}
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	3714      	adds	r7, #20
 8019f70:	46bd      	mov	sp, r7
 8019f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f76:	4770      	bx	lr

08019f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b084      	sub	sp, #16
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
 8019f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d10a      	bne.n	8019fa2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f90:	f383 8811 	msr	BASEPRI, r3
 8019f94:	f3bf 8f6f 	isb	sy
 8019f98:	f3bf 8f4f 	dsb	sy
 8019f9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019f9e:	bf00      	nop
 8019fa0:	e7fe      	b.n	8019fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8019fa2:	f002 fc67 	bl	801c874 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	681a      	ldr	r2, [r3, #0]
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019fae:	68f9      	ldr	r1, [r7, #12]
 8019fb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019fb2:	fb01 f303 	mul.w	r3, r1, r3
 8019fb6:	441a      	add	r2, r3
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	2200      	movs	r2, #0
 8019fc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	681a      	ldr	r2, [r3, #0]
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	681a      	ldr	r2, [r3, #0]
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019fd2:	3b01      	subs	r3, #1
 8019fd4:	68f9      	ldr	r1, [r7, #12]
 8019fd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019fd8:	fb01 f303 	mul.w	r3, r1, r3
 8019fdc:	441a      	add	r2, r3
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	22ff      	movs	r2, #255	; 0xff
 8019fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	22ff      	movs	r2, #255	; 0xff
 8019fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8019ff2:	683b      	ldr	r3, [r7, #0]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	d114      	bne.n	801a022 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	691b      	ldr	r3, [r3, #16]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d01a      	beq.n	801a036 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	3310      	adds	r3, #16
 801a004:	4618      	mov	r0, r3
 801a006:	f001 fbfb 	bl	801b800 <xTaskRemoveFromEventList>
 801a00a:	4603      	mov	r3, r0
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d012      	beq.n	801a036 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801a010:	4b0c      	ldr	r3, [pc, #48]	; (801a044 <xQueueGenericReset+0xcc>)
 801a012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a016:	601a      	str	r2, [r3, #0]
 801a018:	f3bf 8f4f 	dsb	sy
 801a01c:	f3bf 8f6f 	isb	sy
 801a020:	e009      	b.n	801a036 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	3310      	adds	r3, #16
 801a026:	4618      	mov	r0, r3
 801a028:	f7ff fef2 	bl	8019e10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	3324      	adds	r3, #36	; 0x24
 801a030:	4618      	mov	r0, r3
 801a032:	f7ff feed 	bl	8019e10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801a036:	f002 fc4d 	bl	801c8d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801a03a:	2301      	movs	r3, #1
}
 801a03c:	4618      	mov	r0, r3
 801a03e:	3710      	adds	r7, #16
 801a040:	46bd      	mov	sp, r7
 801a042:	bd80      	pop	{r7, pc}
 801a044:	e000ed04 	.word	0xe000ed04

0801a048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b08e      	sub	sp, #56	; 0x38
 801a04c:	af02      	add	r7, sp, #8
 801a04e:	60f8      	str	r0, [r7, #12]
 801a050:	60b9      	str	r1, [r7, #8]
 801a052:	607a      	str	r2, [r7, #4]
 801a054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d10a      	bne.n	801a072 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a060:	f383 8811 	msr	BASEPRI, r3
 801a064:	f3bf 8f6f 	isb	sy
 801a068:	f3bf 8f4f 	dsb	sy
 801a06c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a06e:	bf00      	nop
 801a070:	e7fe      	b.n	801a070 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801a072:	683b      	ldr	r3, [r7, #0]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d10a      	bne.n	801a08e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a07c:	f383 8811 	msr	BASEPRI, r3
 801a080:	f3bf 8f6f 	isb	sy
 801a084:	f3bf 8f4f 	dsb	sy
 801a088:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a08a:	bf00      	nop
 801a08c:	e7fe      	b.n	801a08c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d002      	beq.n	801a09a <xQueueGenericCreateStatic+0x52>
 801a094:	68bb      	ldr	r3, [r7, #8]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d001      	beq.n	801a09e <xQueueGenericCreateStatic+0x56>
 801a09a:	2301      	movs	r3, #1
 801a09c:	e000      	b.n	801a0a0 <xQueueGenericCreateStatic+0x58>
 801a09e:	2300      	movs	r3, #0
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d10a      	bne.n	801a0ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0a8:	f383 8811 	msr	BASEPRI, r3
 801a0ac:	f3bf 8f6f 	isb	sy
 801a0b0:	f3bf 8f4f 	dsb	sy
 801a0b4:	623b      	str	r3, [r7, #32]
}
 801a0b6:	bf00      	nop
 801a0b8:	e7fe      	b.n	801a0b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d102      	bne.n	801a0c6 <xQueueGenericCreateStatic+0x7e>
 801a0c0:	68bb      	ldr	r3, [r7, #8]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d101      	bne.n	801a0ca <xQueueGenericCreateStatic+0x82>
 801a0c6:	2301      	movs	r3, #1
 801a0c8:	e000      	b.n	801a0cc <xQueueGenericCreateStatic+0x84>
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d10a      	bne.n	801a0e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801a0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0d4:	f383 8811 	msr	BASEPRI, r3
 801a0d8:	f3bf 8f6f 	isb	sy
 801a0dc:	f3bf 8f4f 	dsb	sy
 801a0e0:	61fb      	str	r3, [r7, #28]
}
 801a0e2:	bf00      	nop
 801a0e4:	e7fe      	b.n	801a0e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801a0e6:	2348      	movs	r3, #72	; 0x48
 801a0e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801a0ea:	697b      	ldr	r3, [r7, #20]
 801a0ec:	2b48      	cmp	r3, #72	; 0x48
 801a0ee:	d00a      	beq.n	801a106 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0f4:	f383 8811 	msr	BASEPRI, r3
 801a0f8:	f3bf 8f6f 	isb	sy
 801a0fc:	f3bf 8f4f 	dsb	sy
 801a100:	61bb      	str	r3, [r7, #24]
}
 801a102:	bf00      	nop
 801a104:	e7fe      	b.n	801a104 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801a106:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a108:	683b      	ldr	r3, [r7, #0]
 801a10a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d00d      	beq.n	801a12e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a114:	2201      	movs	r2, #1
 801a116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a11a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a120:	9300      	str	r3, [sp, #0]
 801a122:	4613      	mov	r3, r2
 801a124:	687a      	ldr	r2, [r7, #4]
 801a126:	68b9      	ldr	r1, [r7, #8]
 801a128:	68f8      	ldr	r0, [r7, #12]
 801a12a:	f000 f83f 	bl	801a1ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801a130:	4618      	mov	r0, r3
 801a132:	3730      	adds	r7, #48	; 0x30
 801a134:	46bd      	mov	sp, r7
 801a136:	bd80      	pop	{r7, pc}

0801a138 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801a138:	b580      	push	{r7, lr}
 801a13a:	b08a      	sub	sp, #40	; 0x28
 801a13c:	af02      	add	r7, sp, #8
 801a13e:	60f8      	str	r0, [r7, #12]
 801a140:	60b9      	str	r1, [r7, #8]
 801a142:	4613      	mov	r3, r2
 801a144:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d10a      	bne.n	801a162 <xQueueGenericCreate+0x2a>
	__asm volatile
 801a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a150:	f383 8811 	msr	BASEPRI, r3
 801a154:	f3bf 8f6f 	isb	sy
 801a158:	f3bf 8f4f 	dsb	sy
 801a15c:	613b      	str	r3, [r7, #16]
}
 801a15e:	bf00      	nop
 801a160:	e7fe      	b.n	801a160 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	68ba      	ldr	r2, [r7, #8]
 801a166:	fb02 f303 	mul.w	r3, r2, r3
 801a16a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801a16c:	69fb      	ldr	r3, [r7, #28]
 801a16e:	3348      	adds	r3, #72	; 0x48
 801a170:	4618      	mov	r0, r3
 801a172:	f002 fca1 	bl	801cab8 <pvPortMalloc>
 801a176:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801a178:	69bb      	ldr	r3, [r7, #24]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d011      	beq.n	801a1a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801a17e:	69bb      	ldr	r3, [r7, #24]
 801a180:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801a182:	697b      	ldr	r3, [r7, #20]
 801a184:	3348      	adds	r3, #72	; 0x48
 801a186:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801a188:	69bb      	ldr	r3, [r7, #24]
 801a18a:	2200      	movs	r2, #0
 801a18c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801a190:	79fa      	ldrb	r2, [r7, #7]
 801a192:	69bb      	ldr	r3, [r7, #24]
 801a194:	9300      	str	r3, [sp, #0]
 801a196:	4613      	mov	r3, r2
 801a198:	697a      	ldr	r2, [r7, #20]
 801a19a:	68b9      	ldr	r1, [r7, #8]
 801a19c:	68f8      	ldr	r0, [r7, #12]
 801a19e:	f000 f805 	bl	801a1ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801a1a2:	69bb      	ldr	r3, [r7, #24]
	}
 801a1a4:	4618      	mov	r0, r3
 801a1a6:	3720      	adds	r7, #32
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	bd80      	pop	{r7, pc}

0801a1ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b084      	sub	sp, #16
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	60f8      	str	r0, [r7, #12]
 801a1b4:	60b9      	str	r1, [r7, #8]
 801a1b6:	607a      	str	r2, [r7, #4]
 801a1b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801a1ba:	68bb      	ldr	r3, [r7, #8]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d103      	bne.n	801a1c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801a1c0:	69bb      	ldr	r3, [r7, #24]
 801a1c2:	69ba      	ldr	r2, [r7, #24]
 801a1c4:	601a      	str	r2, [r3, #0]
 801a1c6:	e002      	b.n	801a1ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801a1c8:	69bb      	ldr	r3, [r7, #24]
 801a1ca:	687a      	ldr	r2, [r7, #4]
 801a1cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801a1ce:	69bb      	ldr	r3, [r7, #24]
 801a1d0:	68fa      	ldr	r2, [r7, #12]
 801a1d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801a1d4:	69bb      	ldr	r3, [r7, #24]
 801a1d6:	68ba      	ldr	r2, [r7, #8]
 801a1d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801a1da:	2101      	movs	r1, #1
 801a1dc:	69b8      	ldr	r0, [r7, #24]
 801a1de:	f7ff fecb 	bl	8019f78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801a1e2:	bf00      	nop
 801a1e4:	3710      	adds	r7, #16
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	bd80      	pop	{r7, pc}
	...

0801a1ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801a1ec:	b580      	push	{r7, lr}
 801a1ee:	b08e      	sub	sp, #56	; 0x38
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	60f8      	str	r0, [r7, #12]
 801a1f4:	60b9      	str	r1, [r7, #8]
 801a1f6:	607a      	str	r2, [r7, #4]
 801a1f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a204:	2b00      	cmp	r3, #0
 801a206:	d10a      	bne.n	801a21e <xQueueGenericSend+0x32>
	__asm volatile
 801a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a20c:	f383 8811 	msr	BASEPRI, r3
 801a210:	f3bf 8f6f 	isb	sy
 801a214:	f3bf 8f4f 	dsb	sy
 801a218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a21a:	bf00      	nop
 801a21c:	e7fe      	b.n	801a21c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a21e:	68bb      	ldr	r3, [r7, #8]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d103      	bne.n	801a22c <xQueueGenericSend+0x40>
 801a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d101      	bne.n	801a230 <xQueueGenericSend+0x44>
 801a22c:	2301      	movs	r3, #1
 801a22e:	e000      	b.n	801a232 <xQueueGenericSend+0x46>
 801a230:	2300      	movs	r3, #0
 801a232:	2b00      	cmp	r3, #0
 801a234:	d10a      	bne.n	801a24c <xQueueGenericSend+0x60>
	__asm volatile
 801a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a23a:	f383 8811 	msr	BASEPRI, r3
 801a23e:	f3bf 8f6f 	isb	sy
 801a242:	f3bf 8f4f 	dsb	sy
 801a246:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a248:	bf00      	nop
 801a24a:	e7fe      	b.n	801a24a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a24c:	683b      	ldr	r3, [r7, #0]
 801a24e:	2b02      	cmp	r3, #2
 801a250:	d103      	bne.n	801a25a <xQueueGenericSend+0x6e>
 801a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a256:	2b01      	cmp	r3, #1
 801a258:	d101      	bne.n	801a25e <xQueueGenericSend+0x72>
 801a25a:	2301      	movs	r3, #1
 801a25c:	e000      	b.n	801a260 <xQueueGenericSend+0x74>
 801a25e:	2300      	movs	r3, #0
 801a260:	2b00      	cmp	r3, #0
 801a262:	d10a      	bne.n	801a27a <xQueueGenericSend+0x8e>
	__asm volatile
 801a264:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a268:	f383 8811 	msr	BASEPRI, r3
 801a26c:	f3bf 8f6f 	isb	sy
 801a270:	f3bf 8f4f 	dsb	sy
 801a274:	623b      	str	r3, [r7, #32]
}
 801a276:	bf00      	nop
 801a278:	e7fe      	b.n	801a278 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a27a:	f001 fc7d 	bl	801bb78 <xTaskGetSchedulerState>
 801a27e:	4603      	mov	r3, r0
 801a280:	2b00      	cmp	r3, #0
 801a282:	d102      	bne.n	801a28a <xQueueGenericSend+0x9e>
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	2b00      	cmp	r3, #0
 801a288:	d101      	bne.n	801a28e <xQueueGenericSend+0xa2>
 801a28a:	2301      	movs	r3, #1
 801a28c:	e000      	b.n	801a290 <xQueueGenericSend+0xa4>
 801a28e:	2300      	movs	r3, #0
 801a290:	2b00      	cmp	r3, #0
 801a292:	d10a      	bne.n	801a2aa <xQueueGenericSend+0xbe>
	__asm volatile
 801a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a298:	f383 8811 	msr	BASEPRI, r3
 801a29c:	f3bf 8f6f 	isb	sy
 801a2a0:	f3bf 8f4f 	dsb	sy
 801a2a4:	61fb      	str	r3, [r7, #28]
}
 801a2a6:	bf00      	nop
 801a2a8:	e7fe      	b.n	801a2a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a2aa:	f002 fae3 	bl	801c874 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a2b6:	429a      	cmp	r2, r3
 801a2b8:	d302      	bcc.n	801a2c0 <xQueueGenericSend+0xd4>
 801a2ba:	683b      	ldr	r3, [r7, #0]
 801a2bc:	2b02      	cmp	r3, #2
 801a2be:	d129      	bne.n	801a314 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a2c0:	683a      	ldr	r2, [r7, #0]
 801a2c2:	68b9      	ldr	r1, [r7, #8]
 801a2c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a2c6:	f000 fb2f 	bl	801a928 <prvCopyDataToQueue>
 801a2ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d010      	beq.n	801a2f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2d6:	3324      	adds	r3, #36	; 0x24
 801a2d8:	4618      	mov	r0, r3
 801a2da:	f001 fa91 	bl	801b800 <xTaskRemoveFromEventList>
 801a2de:	4603      	mov	r3, r0
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d013      	beq.n	801a30c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801a2e4:	4b3f      	ldr	r3, [pc, #252]	; (801a3e4 <xQueueGenericSend+0x1f8>)
 801a2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a2ea:	601a      	str	r2, [r3, #0]
 801a2ec:	f3bf 8f4f 	dsb	sy
 801a2f0:	f3bf 8f6f 	isb	sy
 801a2f4:	e00a      	b.n	801a30c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d007      	beq.n	801a30c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801a2fc:	4b39      	ldr	r3, [pc, #228]	; (801a3e4 <xQueueGenericSend+0x1f8>)
 801a2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a302:	601a      	str	r2, [r3, #0]
 801a304:	f3bf 8f4f 	dsb	sy
 801a308:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801a30c:	f002 fae2 	bl	801c8d4 <vPortExitCritical>
				return pdPASS;
 801a310:	2301      	movs	r3, #1
 801a312:	e063      	b.n	801a3dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d103      	bne.n	801a322 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a31a:	f002 fadb 	bl	801c8d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801a31e:	2300      	movs	r3, #0
 801a320:	e05c      	b.n	801a3dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a324:	2b00      	cmp	r3, #0
 801a326:	d106      	bne.n	801a336 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a328:	f107 0314 	add.w	r3, r7, #20
 801a32c:	4618      	mov	r0, r3
 801a32e:	f001 fac9 	bl	801b8c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a332:	2301      	movs	r3, #1
 801a334:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a336:	f002 facd 	bl	801c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a33a:	f001 f843 	bl	801b3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a33e:	f002 fa99 	bl	801c874 <vPortEnterCritical>
 801a342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a348:	b25b      	sxtb	r3, r3
 801a34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a34e:	d103      	bne.n	801a358 <xQueueGenericSend+0x16c>
 801a350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a352:	2200      	movs	r2, #0
 801a354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a35a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a35e:	b25b      	sxtb	r3, r3
 801a360:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a364:	d103      	bne.n	801a36e <xQueueGenericSend+0x182>
 801a366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a368:	2200      	movs	r2, #0
 801a36a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a36e:	f002 fab1 	bl	801c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a372:	1d3a      	adds	r2, r7, #4
 801a374:	f107 0314 	add.w	r3, r7, #20
 801a378:	4611      	mov	r1, r2
 801a37a:	4618      	mov	r0, r3
 801a37c:	f001 fab8 	bl	801b8f0 <xTaskCheckForTimeOut>
 801a380:	4603      	mov	r3, r0
 801a382:	2b00      	cmp	r3, #0
 801a384:	d124      	bne.n	801a3d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801a386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a388:	f000 fbc6 	bl	801ab18 <prvIsQueueFull>
 801a38c:	4603      	mov	r3, r0
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d018      	beq.n	801a3c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a394:	3310      	adds	r3, #16
 801a396:	687a      	ldr	r2, [r7, #4]
 801a398:	4611      	mov	r1, r2
 801a39a:	4618      	mov	r0, r3
 801a39c:	f001 f9e0 	bl	801b760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801a3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a3a2:	f000 fb51 	bl	801aa48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801a3a6:	f001 f81b 	bl	801b3e0 <xTaskResumeAll>
 801a3aa:	4603      	mov	r3, r0
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	f47f af7c 	bne.w	801a2aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801a3b2:	4b0c      	ldr	r3, [pc, #48]	; (801a3e4 <xQueueGenericSend+0x1f8>)
 801a3b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a3b8:	601a      	str	r2, [r3, #0]
 801a3ba:	f3bf 8f4f 	dsb	sy
 801a3be:	f3bf 8f6f 	isb	sy
 801a3c2:	e772      	b.n	801a2aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801a3c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a3c6:	f000 fb3f 	bl	801aa48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a3ca:	f001 f809 	bl	801b3e0 <xTaskResumeAll>
 801a3ce:	e76c      	b.n	801a2aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801a3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a3d2:	f000 fb39 	bl	801aa48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a3d6:	f001 f803 	bl	801b3e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801a3da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801a3dc:	4618      	mov	r0, r3
 801a3de:	3738      	adds	r7, #56	; 0x38
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	bd80      	pop	{r7, pc}
 801a3e4:	e000ed04 	.word	0xe000ed04

0801a3e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801a3e8:	b580      	push	{r7, lr}
 801a3ea:	b090      	sub	sp, #64	; 0x40
 801a3ec:	af00      	add	r7, sp, #0
 801a3ee:	60f8      	str	r0, [r7, #12]
 801a3f0:	60b9      	str	r1, [r7, #8]
 801a3f2:	607a      	str	r2, [r7, #4]
 801a3f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801a3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d10a      	bne.n	801a416 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a404:	f383 8811 	msr	BASEPRI, r3
 801a408:	f3bf 8f6f 	isb	sy
 801a40c:	f3bf 8f4f 	dsb	sy
 801a410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801a412:	bf00      	nop
 801a414:	e7fe      	b.n	801a414 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a416:	68bb      	ldr	r3, [r7, #8]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d103      	bne.n	801a424 <xQueueGenericSendFromISR+0x3c>
 801a41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a420:	2b00      	cmp	r3, #0
 801a422:	d101      	bne.n	801a428 <xQueueGenericSendFromISR+0x40>
 801a424:	2301      	movs	r3, #1
 801a426:	e000      	b.n	801a42a <xQueueGenericSendFromISR+0x42>
 801a428:	2300      	movs	r3, #0
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	d10a      	bne.n	801a444 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a432:	f383 8811 	msr	BASEPRI, r3
 801a436:	f3bf 8f6f 	isb	sy
 801a43a:	f3bf 8f4f 	dsb	sy
 801a43e:	627b      	str	r3, [r7, #36]	; 0x24
}
 801a440:	bf00      	nop
 801a442:	e7fe      	b.n	801a442 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801a444:	683b      	ldr	r3, [r7, #0]
 801a446:	2b02      	cmp	r3, #2
 801a448:	d103      	bne.n	801a452 <xQueueGenericSendFromISR+0x6a>
 801a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a44e:	2b01      	cmp	r3, #1
 801a450:	d101      	bne.n	801a456 <xQueueGenericSendFromISR+0x6e>
 801a452:	2301      	movs	r3, #1
 801a454:	e000      	b.n	801a458 <xQueueGenericSendFromISR+0x70>
 801a456:	2300      	movs	r3, #0
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d10a      	bne.n	801a472 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a460:	f383 8811 	msr	BASEPRI, r3
 801a464:	f3bf 8f6f 	isb	sy
 801a468:	f3bf 8f4f 	dsb	sy
 801a46c:	623b      	str	r3, [r7, #32]
}
 801a46e:	bf00      	nop
 801a470:	e7fe      	b.n	801a470 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a472:	f002 fae1 	bl	801ca38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801a476:	f3ef 8211 	mrs	r2, BASEPRI
 801a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a47e:	f383 8811 	msr	BASEPRI, r3
 801a482:	f3bf 8f6f 	isb	sy
 801a486:	f3bf 8f4f 	dsb	sy
 801a48a:	61fa      	str	r2, [r7, #28]
 801a48c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801a48e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a490:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a49a:	429a      	cmp	r2, r3
 801a49c:	d302      	bcc.n	801a4a4 <xQueueGenericSendFromISR+0xbc>
 801a49e:	683b      	ldr	r3, [r7, #0]
 801a4a0:	2b02      	cmp	r3, #2
 801a4a2:	d12f      	bne.n	801a504 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801a4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801a4b4:	683a      	ldr	r2, [r7, #0]
 801a4b6:	68b9      	ldr	r1, [r7, #8]
 801a4b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801a4ba:	f000 fa35 	bl	801a928 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801a4be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801a4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4c6:	d112      	bne.n	801a4ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d016      	beq.n	801a4fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4d2:	3324      	adds	r3, #36	; 0x24
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	f001 f993 	bl	801b800 <xTaskRemoveFromEventList>
 801a4da:	4603      	mov	r3, r0
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d00e      	beq.n	801a4fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d00b      	beq.n	801a4fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	2201      	movs	r2, #1
 801a4ea:	601a      	str	r2, [r3, #0]
 801a4ec:	e007      	b.n	801a4fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801a4ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801a4f2:	3301      	adds	r3, #1
 801a4f4:	b2db      	uxtb	r3, r3
 801a4f6:	b25a      	sxtb	r2, r3
 801a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801a4fe:	2301      	movs	r3, #1
 801a500:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801a502:	e001      	b.n	801a508 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801a504:	2300      	movs	r3, #0
 801a506:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a50a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801a50c:	697b      	ldr	r3, [r7, #20]
 801a50e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801a512:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801a516:	4618      	mov	r0, r3
 801a518:	3740      	adds	r7, #64	; 0x40
 801a51a:	46bd      	mov	sp, r7
 801a51c:	bd80      	pop	{r7, pc}
	...

0801a520 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801a520:	b580      	push	{r7, lr}
 801a522:	b08c      	sub	sp, #48	; 0x30
 801a524:	af00      	add	r7, sp, #0
 801a526:	60f8      	str	r0, [r7, #12]
 801a528:	60b9      	str	r1, [r7, #8]
 801a52a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801a52c:	2300      	movs	r3, #0
 801a52e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a536:	2b00      	cmp	r3, #0
 801a538:	d10a      	bne.n	801a550 <xQueueReceive+0x30>
	__asm volatile
 801a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a53e:	f383 8811 	msr	BASEPRI, r3
 801a542:	f3bf 8f6f 	isb	sy
 801a546:	f3bf 8f4f 	dsb	sy
 801a54a:	623b      	str	r3, [r7, #32]
}
 801a54c:	bf00      	nop
 801a54e:	e7fe      	b.n	801a54e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a550:	68bb      	ldr	r3, [r7, #8]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d103      	bne.n	801a55e <xQueueReceive+0x3e>
 801a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d101      	bne.n	801a562 <xQueueReceive+0x42>
 801a55e:	2301      	movs	r3, #1
 801a560:	e000      	b.n	801a564 <xQueueReceive+0x44>
 801a562:	2300      	movs	r3, #0
 801a564:	2b00      	cmp	r3, #0
 801a566:	d10a      	bne.n	801a57e <xQueueReceive+0x5e>
	__asm volatile
 801a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a56c:	f383 8811 	msr	BASEPRI, r3
 801a570:	f3bf 8f6f 	isb	sy
 801a574:	f3bf 8f4f 	dsb	sy
 801a578:	61fb      	str	r3, [r7, #28]
}
 801a57a:	bf00      	nop
 801a57c:	e7fe      	b.n	801a57c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a57e:	f001 fafb 	bl	801bb78 <xTaskGetSchedulerState>
 801a582:	4603      	mov	r3, r0
 801a584:	2b00      	cmp	r3, #0
 801a586:	d102      	bne.n	801a58e <xQueueReceive+0x6e>
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d101      	bne.n	801a592 <xQueueReceive+0x72>
 801a58e:	2301      	movs	r3, #1
 801a590:	e000      	b.n	801a594 <xQueueReceive+0x74>
 801a592:	2300      	movs	r3, #0
 801a594:	2b00      	cmp	r3, #0
 801a596:	d10a      	bne.n	801a5ae <xQueueReceive+0x8e>
	__asm volatile
 801a598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a59c:	f383 8811 	msr	BASEPRI, r3
 801a5a0:	f3bf 8f6f 	isb	sy
 801a5a4:	f3bf 8f4f 	dsb	sy
 801a5a8:	61bb      	str	r3, [r7, #24]
}
 801a5aa:	bf00      	nop
 801a5ac:	e7fe      	b.n	801a5ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a5ae:	f002 f961 	bl	801c874 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d01f      	beq.n	801a5fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a5be:	68b9      	ldr	r1, [r7, #8]
 801a5c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a5c2:	f000 fa1b 	bl	801a9fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5c8:	1e5a      	subs	r2, r3, #1
 801a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5d0:	691b      	ldr	r3, [r3, #16]
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d00f      	beq.n	801a5f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5d8:	3310      	adds	r3, #16
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f001 f910 	bl	801b800 <xTaskRemoveFromEventList>
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d007      	beq.n	801a5f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a5e6:	4b3d      	ldr	r3, [pc, #244]	; (801a6dc <xQueueReceive+0x1bc>)
 801a5e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a5ec:	601a      	str	r2, [r3, #0]
 801a5ee:	f3bf 8f4f 	dsb	sy
 801a5f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a5f6:	f002 f96d 	bl	801c8d4 <vPortExitCritical>
				return pdPASS;
 801a5fa:	2301      	movs	r3, #1
 801a5fc:	e069      	b.n	801a6d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	2b00      	cmp	r3, #0
 801a602:	d103      	bne.n	801a60c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a604:	f002 f966 	bl	801c8d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a608:	2300      	movs	r3, #0
 801a60a:	e062      	b.n	801a6d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d106      	bne.n	801a620 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a612:	f107 0310 	add.w	r3, r7, #16
 801a616:	4618      	mov	r0, r3
 801a618:	f001 f954 	bl	801b8c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a61c:	2301      	movs	r3, #1
 801a61e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a620:	f002 f958 	bl	801c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a624:	f000 fece 	bl	801b3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a628:	f002 f924 	bl	801c874 <vPortEnterCritical>
 801a62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a62e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a632:	b25b      	sxtb	r3, r3
 801a634:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a638:	d103      	bne.n	801a642 <xQueueReceive+0x122>
 801a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a63c:	2200      	movs	r2, #0
 801a63e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a648:	b25b      	sxtb	r3, r3
 801a64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a64e:	d103      	bne.n	801a658 <xQueueReceive+0x138>
 801a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a652:	2200      	movs	r2, #0
 801a654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a658:	f002 f93c 	bl	801c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a65c:	1d3a      	adds	r2, r7, #4
 801a65e:	f107 0310 	add.w	r3, r7, #16
 801a662:	4611      	mov	r1, r2
 801a664:	4618      	mov	r0, r3
 801a666:	f001 f943 	bl	801b8f0 <xTaskCheckForTimeOut>
 801a66a:	4603      	mov	r3, r0
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d123      	bne.n	801a6b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a672:	f000 fa3b 	bl	801aaec <prvIsQueueEmpty>
 801a676:	4603      	mov	r3, r0
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d017      	beq.n	801a6ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a67e:	3324      	adds	r3, #36	; 0x24
 801a680:	687a      	ldr	r2, [r7, #4]
 801a682:	4611      	mov	r1, r2
 801a684:	4618      	mov	r0, r3
 801a686:	f001 f86b 	bl	801b760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a68a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a68c:	f000 f9dc 	bl	801aa48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a690:	f000 fea6 	bl	801b3e0 <xTaskResumeAll>
 801a694:	4603      	mov	r3, r0
 801a696:	2b00      	cmp	r3, #0
 801a698:	d189      	bne.n	801a5ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801a69a:	4b10      	ldr	r3, [pc, #64]	; (801a6dc <xQueueReceive+0x1bc>)
 801a69c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a6a0:	601a      	str	r2, [r3, #0]
 801a6a2:	f3bf 8f4f 	dsb	sy
 801a6a6:	f3bf 8f6f 	isb	sy
 801a6aa:	e780      	b.n	801a5ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a6ae:	f000 f9cb 	bl	801aa48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a6b2:	f000 fe95 	bl	801b3e0 <xTaskResumeAll>
 801a6b6:	e77a      	b.n	801a5ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a6b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a6ba:	f000 f9c5 	bl	801aa48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a6be:	f000 fe8f 	bl	801b3e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a6c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a6c4:	f000 fa12 	bl	801aaec <prvIsQueueEmpty>
 801a6c8:	4603      	mov	r3, r0
 801a6ca:	2b00      	cmp	r3, #0
 801a6cc:	f43f af6f 	beq.w	801a5ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a6d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a6d2:	4618      	mov	r0, r3
 801a6d4:	3730      	adds	r7, #48	; 0x30
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	bd80      	pop	{r7, pc}
 801a6da:	bf00      	nop
 801a6dc:	e000ed04 	.word	0xe000ed04

0801a6e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b08e      	sub	sp, #56	; 0x38
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	6078      	str	r0, [r7, #4]
 801a6e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d10a      	bne.n	801a712 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801a6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a700:	f383 8811 	msr	BASEPRI, r3
 801a704:	f3bf 8f6f 	isb	sy
 801a708:	f3bf 8f4f 	dsb	sy
 801a70c:	623b      	str	r3, [r7, #32]
}
 801a70e:	bf00      	nop
 801a710:	e7fe      	b.n	801a710 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a716:	2b00      	cmp	r3, #0
 801a718:	d00a      	beq.n	801a730 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801a71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a71e:	f383 8811 	msr	BASEPRI, r3
 801a722:	f3bf 8f6f 	isb	sy
 801a726:	f3bf 8f4f 	dsb	sy
 801a72a:	61fb      	str	r3, [r7, #28]
}
 801a72c:	bf00      	nop
 801a72e:	e7fe      	b.n	801a72e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a730:	f001 fa22 	bl	801bb78 <xTaskGetSchedulerState>
 801a734:	4603      	mov	r3, r0
 801a736:	2b00      	cmp	r3, #0
 801a738:	d102      	bne.n	801a740 <xQueueSemaphoreTake+0x60>
 801a73a:	683b      	ldr	r3, [r7, #0]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d101      	bne.n	801a744 <xQueueSemaphoreTake+0x64>
 801a740:	2301      	movs	r3, #1
 801a742:	e000      	b.n	801a746 <xQueueSemaphoreTake+0x66>
 801a744:	2300      	movs	r3, #0
 801a746:	2b00      	cmp	r3, #0
 801a748:	d10a      	bne.n	801a760 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a74e:	f383 8811 	msr	BASEPRI, r3
 801a752:	f3bf 8f6f 	isb	sy
 801a756:	f3bf 8f4f 	dsb	sy
 801a75a:	61bb      	str	r3, [r7, #24]
}
 801a75c:	bf00      	nop
 801a75e:	e7fe      	b.n	801a75e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a760:	f002 f888 	bl	801c874 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a768:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d024      	beq.n	801a7ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a772:	1e5a      	subs	r2, r3, #1
 801a774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a776:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d104      	bne.n	801a78a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a780:	f001 fba2 	bl	801bec8 <pvTaskIncrementMutexHeldCount>
 801a784:	4602      	mov	r2, r0
 801a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a788:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a78c:	691b      	ldr	r3, [r3, #16]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d00f      	beq.n	801a7b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a794:	3310      	adds	r3, #16
 801a796:	4618      	mov	r0, r3
 801a798:	f001 f832 	bl	801b800 <xTaskRemoveFromEventList>
 801a79c:	4603      	mov	r3, r0
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d007      	beq.n	801a7b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a7a2:	4b54      	ldr	r3, [pc, #336]	; (801a8f4 <xQueueSemaphoreTake+0x214>)
 801a7a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a7a8:	601a      	str	r2, [r3, #0]
 801a7aa:	f3bf 8f4f 	dsb	sy
 801a7ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a7b2:	f002 f88f 	bl	801c8d4 <vPortExitCritical>
				return pdPASS;
 801a7b6:	2301      	movs	r3, #1
 801a7b8:	e097      	b.n	801a8ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a7ba:	683b      	ldr	r3, [r7, #0]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d111      	bne.n	801a7e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d00a      	beq.n	801a7dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801a7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7ca:	f383 8811 	msr	BASEPRI, r3
 801a7ce:	f3bf 8f6f 	isb	sy
 801a7d2:	f3bf 8f4f 	dsb	sy
 801a7d6:	617b      	str	r3, [r7, #20]
}
 801a7d8:	bf00      	nop
 801a7da:	e7fe      	b.n	801a7da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a7dc:	f002 f87a 	bl	801c8d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	e082      	b.n	801a8ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d106      	bne.n	801a7f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a7ea:	f107 030c 	add.w	r3, r7, #12
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	f001 f868 	bl	801b8c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a7f4:	2301      	movs	r3, #1
 801a7f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a7f8:	f002 f86c 	bl	801c8d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a7fc:	f000 fde2 	bl	801b3c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a800:	f002 f838 	bl	801c874 <vPortEnterCritical>
 801a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a806:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a80a:	b25b      	sxtb	r3, r3
 801a80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a810:	d103      	bne.n	801a81a <xQueueSemaphoreTake+0x13a>
 801a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a814:	2200      	movs	r2, #0
 801a816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a81c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a820:	b25b      	sxtb	r3, r3
 801a822:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a826:	d103      	bne.n	801a830 <xQueueSemaphoreTake+0x150>
 801a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a82a:	2200      	movs	r2, #0
 801a82c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a830:	f002 f850 	bl	801c8d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a834:	463a      	mov	r2, r7
 801a836:	f107 030c 	add.w	r3, r7, #12
 801a83a:	4611      	mov	r1, r2
 801a83c:	4618      	mov	r0, r3
 801a83e:	f001 f857 	bl	801b8f0 <xTaskCheckForTimeOut>
 801a842:	4603      	mov	r3, r0
 801a844:	2b00      	cmp	r3, #0
 801a846:	d132      	bne.n	801a8ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a848:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a84a:	f000 f94f 	bl	801aaec <prvIsQueueEmpty>
 801a84e:	4603      	mov	r3, r0
 801a850:	2b00      	cmp	r3, #0
 801a852:	d026      	beq.n	801a8a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d109      	bne.n	801a870 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801a85c:	f002 f80a 	bl	801c874 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a862:	689b      	ldr	r3, [r3, #8]
 801a864:	4618      	mov	r0, r3
 801a866:	f001 f9a5 	bl	801bbb4 <xTaskPriorityInherit>
 801a86a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801a86c:	f002 f832 	bl	801c8d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a872:	3324      	adds	r3, #36	; 0x24
 801a874:	683a      	ldr	r2, [r7, #0]
 801a876:	4611      	mov	r1, r2
 801a878:	4618      	mov	r0, r3
 801a87a:	f000 ff71 	bl	801b760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a87e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a880:	f000 f8e2 	bl	801aa48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a884:	f000 fdac 	bl	801b3e0 <xTaskResumeAll>
 801a888:	4603      	mov	r3, r0
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	f47f af68 	bne.w	801a760 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801a890:	4b18      	ldr	r3, [pc, #96]	; (801a8f4 <xQueueSemaphoreTake+0x214>)
 801a892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a896:	601a      	str	r2, [r3, #0]
 801a898:	f3bf 8f4f 	dsb	sy
 801a89c:	f3bf 8f6f 	isb	sy
 801a8a0:	e75e      	b.n	801a760 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a8a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8a4:	f000 f8d0 	bl	801aa48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a8a8:	f000 fd9a 	bl	801b3e0 <xTaskResumeAll>
 801a8ac:	e758      	b.n	801a760 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a8ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8b0:	f000 f8ca 	bl	801aa48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a8b4:	f000 fd94 	bl	801b3e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a8b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8ba:	f000 f917 	bl	801aaec <prvIsQueueEmpty>
 801a8be:	4603      	mov	r3, r0
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	f43f af4d 	beq.w	801a760 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d00d      	beq.n	801a8e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801a8cc:	f001 ffd2 	bl	801c874 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a8d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a8d2:	f000 f811 	bl	801a8f8 <prvGetDisinheritPriorityAfterTimeout>
 801a8d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8da:	689b      	ldr	r3, [r3, #8]
 801a8dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a8de:	4618      	mov	r0, r3
 801a8e0:	f001 fa64 	bl	801bdac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a8e4:	f001 fff6 	bl	801c8d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a8e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	3738      	adds	r7, #56	; 0x38
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	bd80      	pop	{r7, pc}
 801a8f2:	bf00      	nop
 801a8f4:	e000ed04 	.word	0xe000ed04

0801a8f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a8f8:	b480      	push	{r7}
 801a8fa:	b085      	sub	sp, #20
 801a8fc:	af00      	add	r7, sp, #0
 801a8fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a904:	2b00      	cmp	r3, #0
 801a906:	d006      	beq.n	801a916 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	f1c3 0307 	rsb	r3, r3, #7
 801a912:	60fb      	str	r3, [r7, #12]
 801a914:	e001      	b.n	801a91a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a916:	2300      	movs	r3, #0
 801a918:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a91a:	68fb      	ldr	r3, [r7, #12]
	}
 801a91c:	4618      	mov	r0, r3
 801a91e:	3714      	adds	r7, #20
 801a920:	46bd      	mov	sp, r7
 801a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a926:	4770      	bx	lr

0801a928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a928:	b580      	push	{r7, lr}
 801a92a:	b086      	sub	sp, #24
 801a92c:	af00      	add	r7, sp, #0
 801a92e:	60f8      	str	r0, [r7, #12]
 801a930:	60b9      	str	r1, [r7, #8]
 801a932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a934:	2300      	movs	r3, #0
 801a936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a93c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a93e:	68fb      	ldr	r3, [r7, #12]
 801a940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a942:	2b00      	cmp	r3, #0
 801a944:	d10d      	bne.n	801a962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d14d      	bne.n	801a9ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	689b      	ldr	r3, [r3, #8]
 801a952:	4618      	mov	r0, r3
 801a954:	f001 f9a4 	bl	801bca0 <xTaskPriorityDisinherit>
 801a958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a95a:	68fb      	ldr	r3, [r7, #12]
 801a95c:	2200      	movs	r2, #0
 801a95e:	609a      	str	r2, [r3, #8]
 801a960:	e043      	b.n	801a9ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d119      	bne.n	801a99c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	6858      	ldr	r0, [r3, #4]
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a970:	461a      	mov	r2, r3
 801a972:	68b9      	ldr	r1, [r7, #8]
 801a974:	f002 faba 	bl	801ceec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	685a      	ldr	r2, [r3, #4]
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a980:	441a      	add	r2, r3
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	685a      	ldr	r2, [r3, #4]
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	689b      	ldr	r3, [r3, #8]
 801a98e:	429a      	cmp	r2, r3
 801a990:	d32b      	bcc.n	801a9ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	681a      	ldr	r2, [r3, #0]
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	605a      	str	r2, [r3, #4]
 801a99a:	e026      	b.n	801a9ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a99c:	68fb      	ldr	r3, [r7, #12]
 801a99e:	68d8      	ldr	r0, [r3, #12]
 801a9a0:	68fb      	ldr	r3, [r7, #12]
 801a9a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9a4:	461a      	mov	r2, r3
 801a9a6:	68b9      	ldr	r1, [r7, #8]
 801a9a8:	f002 faa0 	bl	801ceec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a9ac:	68fb      	ldr	r3, [r7, #12]
 801a9ae:	68da      	ldr	r2, [r3, #12]
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9b4:	425b      	negs	r3, r3
 801a9b6:	441a      	add	r2, r3
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	68da      	ldr	r2, [r3, #12]
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	429a      	cmp	r2, r3
 801a9c6:	d207      	bcs.n	801a9d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	689a      	ldr	r2, [r3, #8]
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9d0:	425b      	negs	r3, r3
 801a9d2:	441a      	add	r2, r3
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	2b02      	cmp	r3, #2
 801a9dc:	d105      	bne.n	801a9ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a9de:	693b      	ldr	r3, [r7, #16]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d002      	beq.n	801a9ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a9e4:	693b      	ldr	r3, [r7, #16]
 801a9e6:	3b01      	subs	r3, #1
 801a9e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a9ea:	693b      	ldr	r3, [r7, #16]
 801a9ec:	1c5a      	adds	r2, r3, #1
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801a9f2:	697b      	ldr	r3, [r7, #20]
}
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	3718      	adds	r7, #24
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	bd80      	pop	{r7, pc}

0801a9fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b082      	sub	sp, #8
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]
 801aa04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d018      	beq.n	801aa40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	68da      	ldr	r2, [r3, #12]
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa16:	441a      	add	r2, r3
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	68da      	ldr	r2, [r3, #12]
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	689b      	ldr	r3, [r3, #8]
 801aa24:	429a      	cmp	r2, r3
 801aa26:	d303      	bcc.n	801aa30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681a      	ldr	r2, [r3, #0]
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	68d9      	ldr	r1, [r3, #12]
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa38:	461a      	mov	r2, r3
 801aa3a:	6838      	ldr	r0, [r7, #0]
 801aa3c:	f002 fa56 	bl	801ceec <memcpy>
	}
}
 801aa40:	bf00      	nop
 801aa42:	3708      	adds	r7, #8
 801aa44:	46bd      	mov	sp, r7
 801aa46:	bd80      	pop	{r7, pc}

0801aa48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801aa48:	b580      	push	{r7, lr}
 801aa4a:	b084      	sub	sp, #16
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801aa50:	f001 ff10 	bl	801c874 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801aa5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801aa5c:	e011      	b.n	801aa82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d012      	beq.n	801aa8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	3324      	adds	r3, #36	; 0x24
 801aa6a:	4618      	mov	r0, r3
 801aa6c:	f000 fec8 	bl	801b800 <xTaskRemoveFromEventList>
 801aa70:	4603      	mov	r3, r0
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d001      	beq.n	801aa7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801aa76:	f000 ff9d 	bl	801b9b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801aa7a:	7bfb      	ldrb	r3, [r7, #15]
 801aa7c:	3b01      	subs	r3, #1
 801aa7e:	b2db      	uxtb	r3, r3
 801aa80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801aa82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	dce9      	bgt.n	801aa5e <prvUnlockQueue+0x16>
 801aa8a:	e000      	b.n	801aa8e <prvUnlockQueue+0x46>
					break;
 801aa8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	22ff      	movs	r2, #255	; 0xff
 801aa92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801aa96:	f001 ff1d 	bl	801c8d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801aa9a:	f001 feeb 	bl	801c874 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801aaa4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801aaa6:	e011      	b.n	801aacc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	691b      	ldr	r3, [r3, #16]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d012      	beq.n	801aad6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	3310      	adds	r3, #16
 801aab4:	4618      	mov	r0, r3
 801aab6:	f000 fea3 	bl	801b800 <xTaskRemoveFromEventList>
 801aaba:	4603      	mov	r3, r0
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d001      	beq.n	801aac4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801aac0:	f000 ff78 	bl	801b9b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801aac4:	7bbb      	ldrb	r3, [r7, #14]
 801aac6:	3b01      	subs	r3, #1
 801aac8:	b2db      	uxtb	r3, r3
 801aaca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801aacc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	dce9      	bgt.n	801aaa8 <prvUnlockQueue+0x60>
 801aad4:	e000      	b.n	801aad8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801aad6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	22ff      	movs	r2, #255	; 0xff
 801aadc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801aae0:	f001 fef8 	bl	801c8d4 <vPortExitCritical>
}
 801aae4:	bf00      	nop
 801aae6:	3710      	adds	r7, #16
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bd80      	pop	{r7, pc}

0801aaec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b084      	sub	sp, #16
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801aaf4:	f001 febe 	bl	801c874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d102      	bne.n	801ab06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801ab00:	2301      	movs	r3, #1
 801ab02:	60fb      	str	r3, [r7, #12]
 801ab04:	e001      	b.n	801ab0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801ab06:	2300      	movs	r3, #0
 801ab08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ab0a:	f001 fee3 	bl	801c8d4 <vPortExitCritical>

	return xReturn;
 801ab0e:	68fb      	ldr	r3, [r7, #12]
}
 801ab10:	4618      	mov	r0, r3
 801ab12:	3710      	adds	r7, #16
 801ab14:	46bd      	mov	sp, r7
 801ab16:	bd80      	pop	{r7, pc}

0801ab18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	b084      	sub	sp, #16
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ab20:	f001 fea8 	bl	801c874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ab2c:	429a      	cmp	r2, r3
 801ab2e:	d102      	bne.n	801ab36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801ab30:	2301      	movs	r3, #1
 801ab32:	60fb      	str	r3, [r7, #12]
 801ab34:	e001      	b.n	801ab3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801ab36:	2300      	movs	r3, #0
 801ab38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801ab3a:	f001 fecb 	bl	801c8d4 <vPortExitCritical>

	return xReturn;
 801ab3e:	68fb      	ldr	r3, [r7, #12]
}
 801ab40:	4618      	mov	r0, r3
 801ab42:	3710      	adds	r7, #16
 801ab44:	46bd      	mov	sp, r7
 801ab46:	bd80      	pop	{r7, pc}

0801ab48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801ab48:	b480      	push	{r7}
 801ab4a:	b085      	sub	sp, #20
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
 801ab50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ab52:	2300      	movs	r3, #0
 801ab54:	60fb      	str	r3, [r7, #12]
 801ab56:	e014      	b.n	801ab82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801ab58:	4a0f      	ldr	r2, [pc, #60]	; (801ab98 <vQueueAddToRegistry+0x50>)
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d10b      	bne.n	801ab7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801ab64:	490c      	ldr	r1, [pc, #48]	; (801ab98 <vQueueAddToRegistry+0x50>)
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	683a      	ldr	r2, [r7, #0]
 801ab6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801ab6e:	4a0a      	ldr	r2, [pc, #40]	; (801ab98 <vQueueAddToRegistry+0x50>)
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	00db      	lsls	r3, r3, #3
 801ab74:	4413      	add	r3, r2
 801ab76:	687a      	ldr	r2, [r7, #4]
 801ab78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801ab7a:	e006      	b.n	801ab8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	3301      	adds	r3, #1
 801ab80:	60fb      	str	r3, [r7, #12]
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	2b07      	cmp	r3, #7
 801ab86:	d9e7      	bls.n	801ab58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801ab88:	bf00      	nop
 801ab8a:	bf00      	nop
 801ab8c:	3714      	adds	r7, #20
 801ab8e:	46bd      	mov	sp, r7
 801ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab94:	4770      	bx	lr
 801ab96:	bf00      	nop
 801ab98:	20012e44 	.word	0x20012e44

0801ab9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ab9c:	b580      	push	{r7, lr}
 801ab9e:	b086      	sub	sp, #24
 801aba0:	af00      	add	r7, sp, #0
 801aba2:	60f8      	str	r0, [r7, #12]
 801aba4:	60b9      	str	r1, [r7, #8]
 801aba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801abac:	f001 fe62 	bl	801c874 <vPortEnterCritical>
 801abb0:	697b      	ldr	r3, [r7, #20]
 801abb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801abb6:	b25b      	sxtb	r3, r3
 801abb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801abbc:	d103      	bne.n	801abc6 <vQueueWaitForMessageRestricted+0x2a>
 801abbe:	697b      	ldr	r3, [r7, #20]
 801abc0:	2200      	movs	r2, #0
 801abc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801abc6:	697b      	ldr	r3, [r7, #20]
 801abc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801abcc:	b25b      	sxtb	r3, r3
 801abce:	f1b3 3fff 	cmp.w	r3, #4294967295
 801abd2:	d103      	bne.n	801abdc <vQueueWaitForMessageRestricted+0x40>
 801abd4:	697b      	ldr	r3, [r7, #20]
 801abd6:	2200      	movs	r2, #0
 801abd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801abdc:	f001 fe7a 	bl	801c8d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801abe0:	697b      	ldr	r3, [r7, #20]
 801abe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abe4:	2b00      	cmp	r3, #0
 801abe6:	d106      	bne.n	801abf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801abe8:	697b      	ldr	r3, [r7, #20]
 801abea:	3324      	adds	r3, #36	; 0x24
 801abec:	687a      	ldr	r2, [r7, #4]
 801abee:	68b9      	ldr	r1, [r7, #8]
 801abf0:	4618      	mov	r0, r3
 801abf2:	f000 fdd9 	bl	801b7a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801abf6:	6978      	ldr	r0, [r7, #20]
 801abf8:	f7ff ff26 	bl	801aa48 <prvUnlockQueue>
	}
 801abfc:	bf00      	nop
 801abfe:	3718      	adds	r7, #24
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd80      	pop	{r7, pc}

0801ac04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801ac04:	b580      	push	{r7, lr}
 801ac06:	b08e      	sub	sp, #56	; 0x38
 801ac08:	af04      	add	r7, sp, #16
 801ac0a:	60f8      	str	r0, [r7, #12]
 801ac0c:	60b9      	str	r1, [r7, #8]
 801ac0e:	607a      	str	r2, [r7, #4]
 801ac10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801ac12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d10a      	bne.n	801ac2e <xTaskCreateStatic+0x2a>
	__asm volatile
 801ac18:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac1c:	f383 8811 	msr	BASEPRI, r3
 801ac20:	f3bf 8f6f 	isb	sy
 801ac24:	f3bf 8f4f 	dsb	sy
 801ac28:	623b      	str	r3, [r7, #32]
}
 801ac2a:	bf00      	nop
 801ac2c:	e7fe      	b.n	801ac2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801ac2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d10a      	bne.n	801ac4a <xTaskCreateStatic+0x46>
	__asm volatile
 801ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac38:	f383 8811 	msr	BASEPRI, r3
 801ac3c:	f3bf 8f6f 	isb	sy
 801ac40:	f3bf 8f4f 	dsb	sy
 801ac44:	61fb      	str	r3, [r7, #28]
}
 801ac46:	bf00      	nop
 801ac48:	e7fe      	b.n	801ac48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801ac4a:	2354      	movs	r3, #84	; 0x54
 801ac4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801ac4e:	693b      	ldr	r3, [r7, #16]
 801ac50:	2b54      	cmp	r3, #84	; 0x54
 801ac52:	d00a      	beq.n	801ac6a <xTaskCreateStatic+0x66>
	__asm volatile
 801ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac58:	f383 8811 	msr	BASEPRI, r3
 801ac5c:	f3bf 8f6f 	isb	sy
 801ac60:	f3bf 8f4f 	dsb	sy
 801ac64:	61bb      	str	r3, [r7, #24]
}
 801ac66:	bf00      	nop
 801ac68:	e7fe      	b.n	801ac68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801ac6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801ac6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	d01e      	beq.n	801acb0 <xTaskCreateStatic+0xac>
 801ac72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d01b      	beq.n	801acb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ac7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ac80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac84:	2202      	movs	r2, #2
 801ac86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	9303      	str	r3, [sp, #12]
 801ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac90:	9302      	str	r3, [sp, #8]
 801ac92:	f107 0314 	add.w	r3, r7, #20
 801ac96:	9301      	str	r3, [sp, #4]
 801ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac9a:	9300      	str	r3, [sp, #0]
 801ac9c:	683b      	ldr	r3, [r7, #0]
 801ac9e:	687a      	ldr	r2, [r7, #4]
 801aca0:	68b9      	ldr	r1, [r7, #8]
 801aca2:	68f8      	ldr	r0, [r7, #12]
 801aca4:	f000 f850 	bl	801ad48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801aca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801acaa:	f000 f8d5 	bl	801ae58 <prvAddNewTaskToReadyList>
 801acae:	e001      	b.n	801acb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801acb0:	2300      	movs	r3, #0
 801acb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801acb4:	697b      	ldr	r3, [r7, #20]
	}
 801acb6:	4618      	mov	r0, r3
 801acb8:	3728      	adds	r7, #40	; 0x28
 801acba:	46bd      	mov	sp, r7
 801acbc:	bd80      	pop	{r7, pc}

0801acbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801acbe:	b580      	push	{r7, lr}
 801acc0:	b08c      	sub	sp, #48	; 0x30
 801acc2:	af04      	add	r7, sp, #16
 801acc4:	60f8      	str	r0, [r7, #12]
 801acc6:	60b9      	str	r1, [r7, #8]
 801acc8:	603b      	str	r3, [r7, #0]
 801acca:	4613      	mov	r3, r2
 801accc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801acce:	88fb      	ldrh	r3, [r7, #6]
 801acd0:	009b      	lsls	r3, r3, #2
 801acd2:	4618      	mov	r0, r3
 801acd4:	f001 fef0 	bl	801cab8 <pvPortMalloc>
 801acd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801acda:	697b      	ldr	r3, [r7, #20]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d00e      	beq.n	801acfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801ace0:	2054      	movs	r0, #84	; 0x54
 801ace2:	f001 fee9 	bl	801cab8 <pvPortMalloc>
 801ace6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801ace8:	69fb      	ldr	r3, [r7, #28]
 801acea:	2b00      	cmp	r3, #0
 801acec:	d003      	beq.n	801acf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801acee:	69fb      	ldr	r3, [r7, #28]
 801acf0:	697a      	ldr	r2, [r7, #20]
 801acf2:	631a      	str	r2, [r3, #48]	; 0x30
 801acf4:	e005      	b.n	801ad02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801acf6:	6978      	ldr	r0, [r7, #20]
 801acf8:	f001 ffaa 	bl	801cc50 <vPortFree>
 801acfc:	e001      	b.n	801ad02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801acfe:	2300      	movs	r3, #0
 801ad00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801ad02:	69fb      	ldr	r3, [r7, #28]
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d017      	beq.n	801ad38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801ad08:	69fb      	ldr	r3, [r7, #28]
 801ad0a:	2200      	movs	r2, #0
 801ad0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801ad10:	88fa      	ldrh	r2, [r7, #6]
 801ad12:	2300      	movs	r3, #0
 801ad14:	9303      	str	r3, [sp, #12]
 801ad16:	69fb      	ldr	r3, [r7, #28]
 801ad18:	9302      	str	r3, [sp, #8]
 801ad1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad1c:	9301      	str	r3, [sp, #4]
 801ad1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad20:	9300      	str	r3, [sp, #0]
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	68b9      	ldr	r1, [r7, #8]
 801ad26:	68f8      	ldr	r0, [r7, #12]
 801ad28:	f000 f80e 	bl	801ad48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ad2c:	69f8      	ldr	r0, [r7, #28]
 801ad2e:	f000 f893 	bl	801ae58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801ad32:	2301      	movs	r3, #1
 801ad34:	61bb      	str	r3, [r7, #24]
 801ad36:	e002      	b.n	801ad3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801ad38:	f04f 33ff 	mov.w	r3, #4294967295
 801ad3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801ad3e:	69bb      	ldr	r3, [r7, #24]
	}
 801ad40:	4618      	mov	r0, r3
 801ad42:	3720      	adds	r7, #32
 801ad44:	46bd      	mov	sp, r7
 801ad46:	bd80      	pop	{r7, pc}

0801ad48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801ad48:	b580      	push	{r7, lr}
 801ad4a:	b088      	sub	sp, #32
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	60f8      	str	r0, [r7, #12]
 801ad50:	60b9      	str	r1, [r7, #8]
 801ad52:	607a      	str	r2, [r7, #4]
 801ad54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ad56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ad60:	3b01      	subs	r3, #1
 801ad62:	009b      	lsls	r3, r3, #2
 801ad64:	4413      	add	r3, r2
 801ad66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ad68:	69bb      	ldr	r3, [r7, #24]
 801ad6a:	f023 0307 	bic.w	r3, r3, #7
 801ad6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ad70:	69bb      	ldr	r3, [r7, #24]
 801ad72:	f003 0307 	and.w	r3, r3, #7
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d00a      	beq.n	801ad90 <prvInitialiseNewTask+0x48>
	__asm volatile
 801ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad7e:	f383 8811 	msr	BASEPRI, r3
 801ad82:	f3bf 8f6f 	isb	sy
 801ad86:	f3bf 8f4f 	dsb	sy
 801ad8a:	617b      	str	r3, [r7, #20]
}
 801ad8c:	bf00      	nop
 801ad8e:	e7fe      	b.n	801ad8e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801ad90:	68bb      	ldr	r3, [r7, #8]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d01f      	beq.n	801add6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801ad96:	2300      	movs	r3, #0
 801ad98:	61fb      	str	r3, [r7, #28]
 801ad9a:	e012      	b.n	801adc2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801ad9c:	68ba      	ldr	r2, [r7, #8]
 801ad9e:	69fb      	ldr	r3, [r7, #28]
 801ada0:	4413      	add	r3, r2
 801ada2:	7819      	ldrb	r1, [r3, #0]
 801ada4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ada6:	69fb      	ldr	r3, [r7, #28]
 801ada8:	4413      	add	r3, r2
 801adaa:	3334      	adds	r3, #52	; 0x34
 801adac:	460a      	mov	r2, r1
 801adae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801adb0:	68ba      	ldr	r2, [r7, #8]
 801adb2:	69fb      	ldr	r3, [r7, #28]
 801adb4:	4413      	add	r3, r2
 801adb6:	781b      	ldrb	r3, [r3, #0]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d006      	beq.n	801adca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801adbc:	69fb      	ldr	r3, [r7, #28]
 801adbe:	3301      	adds	r3, #1
 801adc0:	61fb      	str	r3, [r7, #28]
 801adc2:	69fb      	ldr	r3, [r7, #28]
 801adc4:	2b0f      	cmp	r3, #15
 801adc6:	d9e9      	bls.n	801ad9c <prvInitialiseNewTask+0x54>
 801adc8:	e000      	b.n	801adcc <prvInitialiseNewTask+0x84>
			{
				break;
 801adca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adce:	2200      	movs	r2, #0
 801add0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801add4:	e003      	b.n	801adde <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801add8:	2200      	movs	r2, #0
 801adda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ade0:	2b06      	cmp	r3, #6
 801ade2:	d901      	bls.n	801ade8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801ade4:	2306      	movs	r3, #6
 801ade6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801adec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801adee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801adf2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adf6:	2200      	movs	r2, #0
 801adf8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adfc:	3304      	adds	r3, #4
 801adfe:	4618      	mov	r0, r3
 801ae00:	f7ff f826 	bl	8019e50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801ae04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae06:	3318      	adds	r3, #24
 801ae08:	4618      	mov	r0, r3
 801ae0a:	f7ff f821 	bl	8019e50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae16:	f1c3 0207 	rsb	r2, r3, #7
 801ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae26:	2200      	movs	r2, #0
 801ae28:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae2c:	2200      	movs	r2, #0
 801ae2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801ae32:	683a      	ldr	r2, [r7, #0]
 801ae34:	68f9      	ldr	r1, [r7, #12]
 801ae36:	69b8      	ldr	r0, [r7, #24]
 801ae38:	f001 fbf2 	bl	801c620 <pxPortInitialiseStack>
 801ae3c:	4602      	mov	r2, r0
 801ae3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d002      	beq.n	801ae4e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801ae48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ae4e:	bf00      	nop
 801ae50:	3720      	adds	r7, #32
 801ae52:	46bd      	mov	sp, r7
 801ae54:	bd80      	pop	{r7, pc}
	...

0801ae58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801ae58:	b580      	push	{r7, lr}
 801ae5a:	b082      	sub	sp, #8
 801ae5c:	af00      	add	r7, sp, #0
 801ae5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801ae60:	f001 fd08 	bl	801c874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801ae64:	4b2a      	ldr	r3, [pc, #168]	; (801af10 <prvAddNewTaskToReadyList+0xb8>)
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	3301      	adds	r3, #1
 801ae6a:	4a29      	ldr	r2, [pc, #164]	; (801af10 <prvAddNewTaskToReadyList+0xb8>)
 801ae6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801ae6e:	4b29      	ldr	r3, [pc, #164]	; (801af14 <prvAddNewTaskToReadyList+0xbc>)
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d109      	bne.n	801ae8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801ae76:	4a27      	ldr	r2, [pc, #156]	; (801af14 <prvAddNewTaskToReadyList+0xbc>)
 801ae78:	687b      	ldr	r3, [r7, #4]
 801ae7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801ae7c:	4b24      	ldr	r3, [pc, #144]	; (801af10 <prvAddNewTaskToReadyList+0xb8>)
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	2b01      	cmp	r3, #1
 801ae82:	d110      	bne.n	801aea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801ae84:	f000 fdba 	bl	801b9fc <prvInitialiseTaskLists>
 801ae88:	e00d      	b.n	801aea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801ae8a:	4b23      	ldr	r3, [pc, #140]	; (801af18 <prvAddNewTaskToReadyList+0xc0>)
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d109      	bne.n	801aea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801ae92:	4b20      	ldr	r3, [pc, #128]	; (801af14 <prvAddNewTaskToReadyList+0xbc>)
 801ae94:	681b      	ldr	r3, [r3, #0]
 801ae96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae9c:	429a      	cmp	r2, r3
 801ae9e:	d802      	bhi.n	801aea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801aea0:	4a1c      	ldr	r2, [pc, #112]	; (801af14 <prvAddNewTaskToReadyList+0xbc>)
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801aea6:	4b1d      	ldr	r3, [pc, #116]	; (801af1c <prvAddNewTaskToReadyList+0xc4>)
 801aea8:	681b      	ldr	r3, [r3, #0]
 801aeaa:	3301      	adds	r3, #1
 801aeac:	4a1b      	ldr	r2, [pc, #108]	; (801af1c <prvAddNewTaskToReadyList+0xc4>)
 801aeae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aeb4:	2201      	movs	r2, #1
 801aeb6:	409a      	lsls	r2, r3
 801aeb8:	4b19      	ldr	r3, [pc, #100]	; (801af20 <prvAddNewTaskToReadyList+0xc8>)
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	4313      	orrs	r3, r2
 801aebe:	4a18      	ldr	r2, [pc, #96]	; (801af20 <prvAddNewTaskToReadyList+0xc8>)
 801aec0:	6013      	str	r3, [r2, #0]
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aec6:	4613      	mov	r3, r2
 801aec8:	009b      	lsls	r3, r3, #2
 801aeca:	4413      	add	r3, r2
 801aecc:	009b      	lsls	r3, r3, #2
 801aece:	4a15      	ldr	r2, [pc, #84]	; (801af24 <prvAddNewTaskToReadyList+0xcc>)
 801aed0:	441a      	add	r2, r3
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	3304      	adds	r3, #4
 801aed6:	4619      	mov	r1, r3
 801aed8:	4610      	mov	r0, r2
 801aeda:	f7fe ffc6 	bl	8019e6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801aede:	f001 fcf9 	bl	801c8d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801aee2:	4b0d      	ldr	r3, [pc, #52]	; (801af18 <prvAddNewTaskToReadyList+0xc0>)
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d00e      	beq.n	801af08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801aeea:	4b0a      	ldr	r3, [pc, #40]	; (801af14 <prvAddNewTaskToReadyList+0xbc>)
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aef4:	429a      	cmp	r2, r3
 801aef6:	d207      	bcs.n	801af08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801aef8:	4b0b      	ldr	r3, [pc, #44]	; (801af28 <prvAddNewTaskToReadyList+0xd0>)
 801aefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aefe:	601a      	str	r2, [r3, #0]
 801af00:	f3bf 8f4f 	dsb	sy
 801af04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801af08:	bf00      	nop
 801af0a:	3708      	adds	r7, #8
 801af0c:	46bd      	mov	sp, r7
 801af0e:	bd80      	pop	{r7, pc}
 801af10:	20000864 	.word	0x20000864
 801af14:	20000764 	.word	0x20000764
 801af18:	20000870 	.word	0x20000870
 801af1c:	20000880 	.word	0x20000880
 801af20:	2000086c 	.word	0x2000086c
 801af24:	20000768 	.word	0x20000768
 801af28:	e000ed04 	.word	0xe000ed04

0801af2c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801af2c:	b580      	push	{r7, lr}
 801af2e:	b084      	sub	sp, #16
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801af34:	f001 fc9e 	bl	801c874 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d102      	bne.n	801af44 <vTaskDelete+0x18>
 801af3e:	4b39      	ldr	r3, [pc, #228]	; (801b024 <vTaskDelete+0xf8>)
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	e000      	b.n	801af46 <vTaskDelete+0x1a>
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	3304      	adds	r3, #4
 801af4c:	4618      	mov	r0, r3
 801af4e:	f7fe ffe9 	bl	8019f24 <uxListRemove>
 801af52:	4603      	mov	r3, r0
 801af54:	2b00      	cmp	r3, #0
 801af56:	d115      	bne.n	801af84 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af5c:	4932      	ldr	r1, [pc, #200]	; (801b028 <vTaskDelete+0xfc>)
 801af5e:	4613      	mov	r3, r2
 801af60:	009b      	lsls	r3, r3, #2
 801af62:	4413      	add	r3, r2
 801af64:	009b      	lsls	r3, r3, #2
 801af66:	440b      	add	r3, r1
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d10a      	bne.n	801af84 <vTaskDelete+0x58>
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af72:	2201      	movs	r2, #1
 801af74:	fa02 f303 	lsl.w	r3, r2, r3
 801af78:	43da      	mvns	r2, r3
 801af7a:	4b2c      	ldr	r3, [pc, #176]	; (801b02c <vTaskDelete+0x100>)
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	4013      	ands	r3, r2
 801af80:	4a2a      	ldr	r2, [pc, #168]	; (801b02c <vTaskDelete+0x100>)
 801af82:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d004      	beq.n	801af96 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	3318      	adds	r3, #24
 801af90:	4618      	mov	r0, r3
 801af92:	f7fe ffc7 	bl	8019f24 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801af96:	4b26      	ldr	r3, [pc, #152]	; (801b030 <vTaskDelete+0x104>)
 801af98:	681b      	ldr	r3, [r3, #0]
 801af9a:	3301      	adds	r3, #1
 801af9c:	4a24      	ldr	r2, [pc, #144]	; (801b030 <vTaskDelete+0x104>)
 801af9e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801afa0:	4b20      	ldr	r3, [pc, #128]	; (801b024 <vTaskDelete+0xf8>)
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	68fa      	ldr	r2, [r7, #12]
 801afa6:	429a      	cmp	r2, r3
 801afa8:	d10b      	bne.n	801afc2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	3304      	adds	r3, #4
 801afae:	4619      	mov	r1, r3
 801afb0:	4820      	ldr	r0, [pc, #128]	; (801b034 <vTaskDelete+0x108>)
 801afb2:	f7fe ff5a 	bl	8019e6a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801afb6:	4b20      	ldr	r3, [pc, #128]	; (801b038 <vTaskDelete+0x10c>)
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	3301      	adds	r3, #1
 801afbc:	4a1e      	ldr	r2, [pc, #120]	; (801b038 <vTaskDelete+0x10c>)
 801afbe:	6013      	str	r3, [r2, #0]
 801afc0:	e009      	b.n	801afd6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801afc2:	4b1e      	ldr	r3, [pc, #120]	; (801b03c <vTaskDelete+0x110>)
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	3b01      	subs	r3, #1
 801afc8:	4a1c      	ldr	r2, [pc, #112]	; (801b03c <vTaskDelete+0x110>)
 801afca:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801afcc:	68f8      	ldr	r0, [r7, #12]
 801afce:	f000 fd83 	bl	801bad8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801afd2:	f000 fdb1 	bl	801bb38 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801afd6:	f001 fc7d 	bl	801c8d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801afda:	4b19      	ldr	r3, [pc, #100]	; (801b040 <vTaskDelete+0x114>)
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d01b      	beq.n	801b01a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 801afe2:	4b10      	ldr	r3, [pc, #64]	; (801b024 <vTaskDelete+0xf8>)
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	68fa      	ldr	r2, [r7, #12]
 801afe8:	429a      	cmp	r2, r3
 801afea:	d116      	bne.n	801b01a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801afec:	4b15      	ldr	r3, [pc, #84]	; (801b044 <vTaskDelete+0x118>)
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d00a      	beq.n	801b00a <vTaskDelete+0xde>
	__asm volatile
 801aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aff8:	f383 8811 	msr	BASEPRI, r3
 801affc:	f3bf 8f6f 	isb	sy
 801b000:	f3bf 8f4f 	dsb	sy
 801b004:	60bb      	str	r3, [r7, #8]
}
 801b006:	bf00      	nop
 801b008:	e7fe      	b.n	801b008 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 801b00a:	4b0f      	ldr	r3, [pc, #60]	; (801b048 <vTaskDelete+0x11c>)
 801b00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b010:	601a      	str	r2, [r3, #0]
 801b012:	f3bf 8f4f 	dsb	sy
 801b016:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801b01a:	bf00      	nop
 801b01c:	3710      	adds	r7, #16
 801b01e:	46bd      	mov	sp, r7
 801b020:	bd80      	pop	{r7, pc}
 801b022:	bf00      	nop
 801b024:	20000764 	.word	0x20000764
 801b028:	20000768 	.word	0x20000768
 801b02c:	2000086c 	.word	0x2000086c
 801b030:	20000880 	.word	0x20000880
 801b034:	20000838 	.word	0x20000838
 801b038:	2000084c 	.word	0x2000084c
 801b03c:	20000864 	.word	0x20000864
 801b040:	20000870 	.word	0x20000870
 801b044:	2000088c 	.word	0x2000088c
 801b048:	e000ed04 	.word	0xe000ed04

0801b04c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b084      	sub	sp, #16
 801b050:	af00      	add	r7, sp, #0
 801b052:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b054:	2300      	movs	r3, #0
 801b056:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d017      	beq.n	801b08e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b05e:	4b13      	ldr	r3, [pc, #76]	; (801b0ac <vTaskDelay+0x60>)
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	2b00      	cmp	r3, #0
 801b064:	d00a      	beq.n	801b07c <vTaskDelay+0x30>
	__asm volatile
 801b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b06a:	f383 8811 	msr	BASEPRI, r3
 801b06e:	f3bf 8f6f 	isb	sy
 801b072:	f3bf 8f4f 	dsb	sy
 801b076:	60bb      	str	r3, [r7, #8]
}
 801b078:	bf00      	nop
 801b07a:	e7fe      	b.n	801b07a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801b07c:	f000 f9a2 	bl	801b3c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b080:	2100      	movs	r1, #0
 801b082:	6878      	ldr	r0, [r7, #4]
 801b084:	f000 ff34 	bl	801bef0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b088:	f000 f9aa 	bl	801b3e0 <xTaskResumeAll>
 801b08c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b08e:	68fb      	ldr	r3, [r7, #12]
 801b090:	2b00      	cmp	r3, #0
 801b092:	d107      	bne.n	801b0a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801b094:	4b06      	ldr	r3, [pc, #24]	; (801b0b0 <vTaskDelay+0x64>)
 801b096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b09a:	601a      	str	r2, [r3, #0]
 801b09c:	f3bf 8f4f 	dsb	sy
 801b0a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b0a4:	bf00      	nop
 801b0a6:	3710      	adds	r7, #16
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	bd80      	pop	{r7, pc}
 801b0ac:	2000088c 	.word	0x2000088c
 801b0b0:	e000ed04 	.word	0xe000ed04

0801b0b4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b084      	sub	sp, #16
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801b0bc:	f001 fbda 	bl	801c874 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	d102      	bne.n	801b0cc <vTaskSuspend+0x18>
 801b0c6:	4b3c      	ldr	r3, [pc, #240]	; (801b1b8 <vTaskSuspend+0x104>)
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	e000      	b.n	801b0ce <vTaskSuspend+0x1a>
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	3304      	adds	r3, #4
 801b0d4:	4618      	mov	r0, r3
 801b0d6:	f7fe ff25 	bl	8019f24 <uxListRemove>
 801b0da:	4603      	mov	r3, r0
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d115      	bne.n	801b10c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b0e4:	4935      	ldr	r1, [pc, #212]	; (801b1bc <vTaskSuspend+0x108>)
 801b0e6:	4613      	mov	r3, r2
 801b0e8:	009b      	lsls	r3, r3, #2
 801b0ea:	4413      	add	r3, r2
 801b0ec:	009b      	lsls	r3, r3, #2
 801b0ee:	440b      	add	r3, r1
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d10a      	bne.n	801b10c <vTaskSuspend+0x58>
 801b0f6:	68fb      	ldr	r3, [r7, #12]
 801b0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0fa:	2201      	movs	r2, #1
 801b0fc:	fa02 f303 	lsl.w	r3, r2, r3
 801b100:	43da      	mvns	r2, r3
 801b102:	4b2f      	ldr	r3, [pc, #188]	; (801b1c0 <vTaskSuspend+0x10c>)
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	4013      	ands	r3, r2
 801b108:	4a2d      	ldr	r2, [pc, #180]	; (801b1c0 <vTaskSuspend+0x10c>)
 801b10a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b110:	2b00      	cmp	r3, #0
 801b112:	d004      	beq.n	801b11e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	3318      	adds	r3, #24
 801b118:	4618      	mov	r0, r3
 801b11a:	f7fe ff03 	bl	8019f24 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	3304      	adds	r3, #4
 801b122:	4619      	mov	r1, r3
 801b124:	4827      	ldr	r0, [pc, #156]	; (801b1c4 <vTaskSuspend+0x110>)
 801b126:	f7fe fea0 	bl	8019e6a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801b130:	b2db      	uxtb	r3, r3
 801b132:	2b01      	cmp	r3, #1
 801b134:	d103      	bne.n	801b13e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	2200      	movs	r2, #0
 801b13a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801b13e:	f001 fbc9 	bl	801c8d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801b142:	4b21      	ldr	r3, [pc, #132]	; (801b1c8 <vTaskSuspend+0x114>)
 801b144:	681b      	ldr	r3, [r3, #0]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d005      	beq.n	801b156 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801b14a:	f001 fb93 	bl	801c874 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801b14e:	f000 fcf3 	bl	801bb38 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801b152:	f001 fbbf 	bl	801c8d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801b156:	4b18      	ldr	r3, [pc, #96]	; (801b1b8 <vTaskSuspend+0x104>)
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	68fa      	ldr	r2, [r7, #12]
 801b15c:	429a      	cmp	r2, r3
 801b15e:	d127      	bne.n	801b1b0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 801b160:	4b19      	ldr	r3, [pc, #100]	; (801b1c8 <vTaskSuspend+0x114>)
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	2b00      	cmp	r3, #0
 801b166:	d017      	beq.n	801b198 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801b168:	4b18      	ldr	r3, [pc, #96]	; (801b1cc <vTaskSuspend+0x118>)
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d00a      	beq.n	801b186 <vTaskSuspend+0xd2>
	__asm volatile
 801b170:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b174:	f383 8811 	msr	BASEPRI, r3
 801b178:	f3bf 8f6f 	isb	sy
 801b17c:	f3bf 8f4f 	dsb	sy
 801b180:	60bb      	str	r3, [r7, #8]
}
 801b182:	bf00      	nop
 801b184:	e7fe      	b.n	801b184 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801b186:	4b12      	ldr	r3, [pc, #72]	; (801b1d0 <vTaskSuspend+0x11c>)
 801b188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b18c:	601a      	str	r2, [r3, #0]
 801b18e:	f3bf 8f4f 	dsb	sy
 801b192:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b196:	e00b      	b.n	801b1b0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801b198:	4b0a      	ldr	r3, [pc, #40]	; (801b1c4 <vTaskSuspend+0x110>)
 801b19a:	681a      	ldr	r2, [r3, #0]
 801b19c:	4b0d      	ldr	r3, [pc, #52]	; (801b1d4 <vTaskSuspend+0x120>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	429a      	cmp	r2, r3
 801b1a2:	d103      	bne.n	801b1ac <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 801b1a4:	4b04      	ldr	r3, [pc, #16]	; (801b1b8 <vTaskSuspend+0x104>)
 801b1a6:	2200      	movs	r2, #0
 801b1a8:	601a      	str	r2, [r3, #0]
	}
 801b1aa:	e001      	b.n	801b1b0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 801b1ac:	f000 fa7c 	bl	801b6a8 <vTaskSwitchContext>
	}
 801b1b0:	bf00      	nop
 801b1b2:	3710      	adds	r7, #16
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}
 801b1b8:	20000764 	.word	0x20000764
 801b1bc:	20000768 	.word	0x20000768
 801b1c0:	2000086c 	.word	0x2000086c
 801b1c4:	20000850 	.word	0x20000850
 801b1c8:	20000870 	.word	0x20000870
 801b1cc:	2000088c 	.word	0x2000088c
 801b1d0:	e000ed04 	.word	0xe000ed04
 801b1d4:	20000864 	.word	0x20000864

0801b1d8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801b1d8:	b480      	push	{r7}
 801b1da:	b087      	sub	sp, #28
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d10a      	bne.n	801b204 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1f2:	f383 8811 	msr	BASEPRI, r3
 801b1f6:	f3bf 8f6f 	isb	sy
 801b1fa:	f3bf 8f4f 	dsb	sy
 801b1fe:	60fb      	str	r3, [r7, #12]
}
 801b200:	bf00      	nop
 801b202:	e7fe      	b.n	801b202 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b204:	693b      	ldr	r3, [r7, #16]
 801b206:	695b      	ldr	r3, [r3, #20]
 801b208:	4a0a      	ldr	r2, [pc, #40]	; (801b234 <prvTaskIsTaskSuspended+0x5c>)
 801b20a:	4293      	cmp	r3, r2
 801b20c:	d10a      	bne.n	801b224 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801b20e:	693b      	ldr	r3, [r7, #16]
 801b210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b212:	4a09      	ldr	r2, [pc, #36]	; (801b238 <prvTaskIsTaskSuspended+0x60>)
 801b214:	4293      	cmp	r3, r2
 801b216:	d005      	beq.n	801b224 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801b218:	693b      	ldr	r3, [r7, #16]
 801b21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d101      	bne.n	801b224 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801b220:	2301      	movs	r3, #1
 801b222:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b224:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801b226:	4618      	mov	r0, r3
 801b228:	371c      	adds	r7, #28
 801b22a:	46bd      	mov	sp, r7
 801b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b230:	4770      	bx	lr
 801b232:	bf00      	nop
 801b234:	20000850 	.word	0x20000850
 801b238:	20000824 	.word	0x20000824

0801b23c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801b23c:	b580      	push	{r7, lr}
 801b23e:	b084      	sub	sp, #16
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d10a      	bne.n	801b264 <vTaskResume+0x28>
	__asm volatile
 801b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b252:	f383 8811 	msr	BASEPRI, r3
 801b256:	f3bf 8f6f 	isb	sy
 801b25a:	f3bf 8f4f 	dsb	sy
 801b25e:	60bb      	str	r3, [r7, #8]
}
 801b260:	bf00      	nop
 801b262:	e7fe      	b.n	801b262 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801b264:	4b20      	ldr	r3, [pc, #128]	; (801b2e8 <vTaskResume+0xac>)
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	68fa      	ldr	r2, [r7, #12]
 801b26a:	429a      	cmp	r2, r3
 801b26c:	d037      	beq.n	801b2de <vTaskResume+0xa2>
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	2b00      	cmp	r3, #0
 801b272:	d034      	beq.n	801b2de <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 801b274:	f001 fafe 	bl	801c874 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801b278:	68f8      	ldr	r0, [r7, #12]
 801b27a:	f7ff ffad 	bl	801b1d8 <prvTaskIsTaskSuspended>
 801b27e:	4603      	mov	r3, r0
 801b280:	2b00      	cmp	r3, #0
 801b282:	d02a      	beq.n	801b2da <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801b284:	68fb      	ldr	r3, [r7, #12]
 801b286:	3304      	adds	r3, #4
 801b288:	4618      	mov	r0, r3
 801b28a:	f7fe fe4b 	bl	8019f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b28e:	68fb      	ldr	r3, [r7, #12]
 801b290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b292:	2201      	movs	r2, #1
 801b294:	409a      	lsls	r2, r3
 801b296:	4b15      	ldr	r3, [pc, #84]	; (801b2ec <vTaskResume+0xb0>)
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	4313      	orrs	r3, r2
 801b29c:	4a13      	ldr	r2, [pc, #76]	; (801b2ec <vTaskResume+0xb0>)
 801b29e:	6013      	str	r3, [r2, #0]
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2a4:	4613      	mov	r3, r2
 801b2a6:	009b      	lsls	r3, r3, #2
 801b2a8:	4413      	add	r3, r2
 801b2aa:	009b      	lsls	r3, r3, #2
 801b2ac:	4a10      	ldr	r2, [pc, #64]	; (801b2f0 <vTaskResume+0xb4>)
 801b2ae:	441a      	add	r2, r3
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	3304      	adds	r3, #4
 801b2b4:	4619      	mov	r1, r3
 801b2b6:	4610      	mov	r0, r2
 801b2b8:	f7fe fdd7 	bl	8019e6a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2c0:	4b09      	ldr	r3, [pc, #36]	; (801b2e8 <vTaskResume+0xac>)
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2c6:	429a      	cmp	r2, r3
 801b2c8:	d307      	bcc.n	801b2da <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801b2ca:	4b0a      	ldr	r3, [pc, #40]	; (801b2f4 <vTaskResume+0xb8>)
 801b2cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b2d0:	601a      	str	r2, [r3, #0]
 801b2d2:	f3bf 8f4f 	dsb	sy
 801b2d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801b2da:	f001 fafb 	bl	801c8d4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b2de:	bf00      	nop
 801b2e0:	3710      	adds	r7, #16
 801b2e2:	46bd      	mov	sp, r7
 801b2e4:	bd80      	pop	{r7, pc}
 801b2e6:	bf00      	nop
 801b2e8:	20000764 	.word	0x20000764
 801b2ec:	2000086c 	.word	0x2000086c
 801b2f0:	20000768 	.word	0x20000768
 801b2f4:	e000ed04 	.word	0xe000ed04

0801b2f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b08a      	sub	sp, #40	; 0x28
 801b2fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801b2fe:	2300      	movs	r3, #0
 801b300:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801b302:	2300      	movs	r3, #0
 801b304:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801b306:	463a      	mov	r2, r7
 801b308:	1d39      	adds	r1, r7, #4
 801b30a:	f107 0308 	add.w	r3, r7, #8
 801b30e:	4618      	mov	r0, r3
 801b310:	f7f9 f8f2 	bl	80144f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801b314:	6839      	ldr	r1, [r7, #0]
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	68ba      	ldr	r2, [r7, #8]
 801b31a:	9202      	str	r2, [sp, #8]
 801b31c:	9301      	str	r3, [sp, #4]
 801b31e:	2300      	movs	r3, #0
 801b320:	9300      	str	r3, [sp, #0]
 801b322:	2300      	movs	r3, #0
 801b324:	460a      	mov	r2, r1
 801b326:	4921      	ldr	r1, [pc, #132]	; (801b3ac <vTaskStartScheduler+0xb4>)
 801b328:	4821      	ldr	r0, [pc, #132]	; (801b3b0 <vTaskStartScheduler+0xb8>)
 801b32a:	f7ff fc6b 	bl	801ac04 <xTaskCreateStatic>
 801b32e:	4603      	mov	r3, r0
 801b330:	4a20      	ldr	r2, [pc, #128]	; (801b3b4 <vTaskStartScheduler+0xbc>)
 801b332:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801b334:	4b1f      	ldr	r3, [pc, #124]	; (801b3b4 <vTaskStartScheduler+0xbc>)
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d002      	beq.n	801b342 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801b33c:	2301      	movs	r3, #1
 801b33e:	617b      	str	r3, [r7, #20]
 801b340:	e001      	b.n	801b346 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801b342:	2300      	movs	r3, #0
 801b344:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801b346:	697b      	ldr	r3, [r7, #20]
 801b348:	2b01      	cmp	r3, #1
 801b34a:	d102      	bne.n	801b352 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801b34c:	f000 fe36 	bl	801bfbc <xTimerCreateTimerTask>
 801b350:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b352:	697b      	ldr	r3, [r7, #20]
 801b354:	2b01      	cmp	r3, #1
 801b356:	d116      	bne.n	801b386 <vTaskStartScheduler+0x8e>
	__asm volatile
 801b358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b35c:	f383 8811 	msr	BASEPRI, r3
 801b360:	f3bf 8f6f 	isb	sy
 801b364:	f3bf 8f4f 	dsb	sy
 801b368:	613b      	str	r3, [r7, #16]
}
 801b36a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b36c:	4b12      	ldr	r3, [pc, #72]	; (801b3b8 <vTaskStartScheduler+0xc0>)
 801b36e:	f04f 32ff 	mov.w	r2, #4294967295
 801b372:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b374:	4b11      	ldr	r3, [pc, #68]	; (801b3bc <vTaskStartScheduler+0xc4>)
 801b376:	2201      	movs	r2, #1
 801b378:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b37a:	4b11      	ldr	r3, [pc, #68]	; (801b3c0 <vTaskStartScheduler+0xc8>)
 801b37c:	2200      	movs	r2, #0
 801b37e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b380:	f001 f9d6 	bl	801c730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b384:	e00e      	b.n	801b3a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b386:	697b      	ldr	r3, [r7, #20]
 801b388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b38c:	d10a      	bne.n	801b3a4 <vTaskStartScheduler+0xac>
	__asm volatile
 801b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b392:	f383 8811 	msr	BASEPRI, r3
 801b396:	f3bf 8f6f 	isb	sy
 801b39a:	f3bf 8f4f 	dsb	sy
 801b39e:	60fb      	str	r3, [r7, #12]
}
 801b3a0:	bf00      	nop
 801b3a2:	e7fe      	b.n	801b3a2 <vTaskStartScheduler+0xaa>
}
 801b3a4:	bf00      	nop
 801b3a6:	3718      	adds	r7, #24
 801b3a8:	46bd      	mov	sp, r7
 801b3aa:	bd80      	pop	{r7, pc}
 801b3ac:	0801d24c 	.word	0x0801d24c
 801b3b0:	0801b9cd 	.word	0x0801b9cd
 801b3b4:	20000888 	.word	0x20000888
 801b3b8:	20000884 	.word	0x20000884
 801b3bc:	20000870 	.word	0x20000870
 801b3c0:	20000868 	.word	0x20000868

0801b3c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b3c4:	b480      	push	{r7}
 801b3c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b3c8:	4b04      	ldr	r3, [pc, #16]	; (801b3dc <vTaskSuspendAll+0x18>)
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	3301      	adds	r3, #1
 801b3ce:	4a03      	ldr	r2, [pc, #12]	; (801b3dc <vTaskSuspendAll+0x18>)
 801b3d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b3d2:	bf00      	nop
 801b3d4:	46bd      	mov	sp, r7
 801b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3da:	4770      	bx	lr
 801b3dc:	2000088c 	.word	0x2000088c

0801b3e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b3e0:	b580      	push	{r7, lr}
 801b3e2:	b084      	sub	sp, #16
 801b3e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b3e6:	2300      	movs	r3, #0
 801b3e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b3ea:	2300      	movs	r3, #0
 801b3ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b3ee:	4b41      	ldr	r3, [pc, #260]	; (801b4f4 <xTaskResumeAll+0x114>)
 801b3f0:	681b      	ldr	r3, [r3, #0]
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d10a      	bne.n	801b40c <xTaskResumeAll+0x2c>
	__asm volatile
 801b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3fa:	f383 8811 	msr	BASEPRI, r3
 801b3fe:	f3bf 8f6f 	isb	sy
 801b402:	f3bf 8f4f 	dsb	sy
 801b406:	603b      	str	r3, [r7, #0]
}
 801b408:	bf00      	nop
 801b40a:	e7fe      	b.n	801b40a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b40c:	f001 fa32 	bl	801c874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b410:	4b38      	ldr	r3, [pc, #224]	; (801b4f4 <xTaskResumeAll+0x114>)
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	3b01      	subs	r3, #1
 801b416:	4a37      	ldr	r2, [pc, #220]	; (801b4f4 <xTaskResumeAll+0x114>)
 801b418:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b41a:	4b36      	ldr	r3, [pc, #216]	; (801b4f4 <xTaskResumeAll+0x114>)
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d161      	bne.n	801b4e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b422:	4b35      	ldr	r3, [pc, #212]	; (801b4f8 <xTaskResumeAll+0x118>)
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	2b00      	cmp	r3, #0
 801b428:	d05d      	beq.n	801b4e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b42a:	e02e      	b.n	801b48a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b42c:	4b33      	ldr	r3, [pc, #204]	; (801b4fc <xTaskResumeAll+0x11c>)
 801b42e:	68db      	ldr	r3, [r3, #12]
 801b430:	68db      	ldr	r3, [r3, #12]
 801b432:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	3318      	adds	r3, #24
 801b438:	4618      	mov	r0, r3
 801b43a:	f7fe fd73 	bl	8019f24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	3304      	adds	r3, #4
 801b442:	4618      	mov	r0, r3
 801b444:	f7fe fd6e 	bl	8019f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b44c:	2201      	movs	r2, #1
 801b44e:	409a      	lsls	r2, r3
 801b450:	4b2b      	ldr	r3, [pc, #172]	; (801b500 <xTaskResumeAll+0x120>)
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	4313      	orrs	r3, r2
 801b456:	4a2a      	ldr	r2, [pc, #168]	; (801b500 <xTaskResumeAll+0x120>)
 801b458:	6013      	str	r3, [r2, #0]
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b45e:	4613      	mov	r3, r2
 801b460:	009b      	lsls	r3, r3, #2
 801b462:	4413      	add	r3, r2
 801b464:	009b      	lsls	r3, r3, #2
 801b466:	4a27      	ldr	r2, [pc, #156]	; (801b504 <xTaskResumeAll+0x124>)
 801b468:	441a      	add	r2, r3
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	3304      	adds	r3, #4
 801b46e:	4619      	mov	r1, r3
 801b470:	4610      	mov	r0, r2
 801b472:	f7fe fcfa 	bl	8019e6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b47a:	4b23      	ldr	r3, [pc, #140]	; (801b508 <xTaskResumeAll+0x128>)
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b480:	429a      	cmp	r2, r3
 801b482:	d302      	bcc.n	801b48a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801b484:	4b21      	ldr	r3, [pc, #132]	; (801b50c <xTaskResumeAll+0x12c>)
 801b486:	2201      	movs	r2, #1
 801b488:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b48a:	4b1c      	ldr	r3, [pc, #112]	; (801b4fc <xTaskResumeAll+0x11c>)
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d1cc      	bne.n	801b42c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d001      	beq.n	801b49c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b498:	f000 fb4e 	bl	801bb38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b49c:	4b1c      	ldr	r3, [pc, #112]	; (801b510 <xTaskResumeAll+0x130>)
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d010      	beq.n	801b4ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b4a8:	f000 f846 	bl	801b538 <xTaskIncrementTick>
 801b4ac:	4603      	mov	r3, r0
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d002      	beq.n	801b4b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801b4b2:	4b16      	ldr	r3, [pc, #88]	; (801b50c <xTaskResumeAll+0x12c>)
 801b4b4:	2201      	movs	r2, #1
 801b4b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	3b01      	subs	r3, #1
 801b4bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d1f1      	bne.n	801b4a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801b4c4:	4b12      	ldr	r3, [pc, #72]	; (801b510 <xTaskResumeAll+0x130>)
 801b4c6:	2200      	movs	r2, #0
 801b4c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b4ca:	4b10      	ldr	r3, [pc, #64]	; (801b50c <xTaskResumeAll+0x12c>)
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d009      	beq.n	801b4e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b4d2:	2301      	movs	r3, #1
 801b4d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b4d6:	4b0f      	ldr	r3, [pc, #60]	; (801b514 <xTaskResumeAll+0x134>)
 801b4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b4dc:	601a      	str	r2, [r3, #0]
 801b4de:	f3bf 8f4f 	dsb	sy
 801b4e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b4e6:	f001 f9f5 	bl	801c8d4 <vPortExitCritical>

	return xAlreadyYielded;
 801b4ea:	68bb      	ldr	r3, [r7, #8]
}
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	3710      	adds	r7, #16
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	bd80      	pop	{r7, pc}
 801b4f4:	2000088c 	.word	0x2000088c
 801b4f8:	20000864 	.word	0x20000864
 801b4fc:	20000824 	.word	0x20000824
 801b500:	2000086c 	.word	0x2000086c
 801b504:	20000768 	.word	0x20000768
 801b508:	20000764 	.word	0x20000764
 801b50c:	20000878 	.word	0x20000878
 801b510:	20000874 	.word	0x20000874
 801b514:	e000ed04 	.word	0xe000ed04

0801b518 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801b518:	b480      	push	{r7}
 801b51a:	b083      	sub	sp, #12
 801b51c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801b51e:	4b05      	ldr	r3, [pc, #20]	; (801b534 <xTaskGetTickCount+0x1c>)
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801b524:	687b      	ldr	r3, [r7, #4]
}
 801b526:	4618      	mov	r0, r3
 801b528:	370c      	adds	r7, #12
 801b52a:	46bd      	mov	sp, r7
 801b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b530:	4770      	bx	lr
 801b532:	bf00      	nop
 801b534:	20000868 	.word	0x20000868

0801b538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b538:	b580      	push	{r7, lr}
 801b53a:	b086      	sub	sp, #24
 801b53c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b53e:	2300      	movs	r3, #0
 801b540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b542:	4b4e      	ldr	r3, [pc, #312]	; (801b67c <xTaskIncrementTick+0x144>)
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	2b00      	cmp	r3, #0
 801b548:	f040 808e 	bne.w	801b668 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b54c:	4b4c      	ldr	r3, [pc, #304]	; (801b680 <xTaskIncrementTick+0x148>)
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	3301      	adds	r3, #1
 801b552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b554:	4a4a      	ldr	r2, [pc, #296]	; (801b680 <xTaskIncrementTick+0x148>)
 801b556:	693b      	ldr	r3, [r7, #16]
 801b558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b55a:	693b      	ldr	r3, [r7, #16]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d120      	bne.n	801b5a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801b560:	4b48      	ldr	r3, [pc, #288]	; (801b684 <xTaskIncrementTick+0x14c>)
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	2b00      	cmp	r3, #0
 801b568:	d00a      	beq.n	801b580 <xTaskIncrementTick+0x48>
	__asm volatile
 801b56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b56e:	f383 8811 	msr	BASEPRI, r3
 801b572:	f3bf 8f6f 	isb	sy
 801b576:	f3bf 8f4f 	dsb	sy
 801b57a:	603b      	str	r3, [r7, #0]
}
 801b57c:	bf00      	nop
 801b57e:	e7fe      	b.n	801b57e <xTaskIncrementTick+0x46>
 801b580:	4b40      	ldr	r3, [pc, #256]	; (801b684 <xTaskIncrementTick+0x14c>)
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	60fb      	str	r3, [r7, #12]
 801b586:	4b40      	ldr	r3, [pc, #256]	; (801b688 <xTaskIncrementTick+0x150>)
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	4a3e      	ldr	r2, [pc, #248]	; (801b684 <xTaskIncrementTick+0x14c>)
 801b58c:	6013      	str	r3, [r2, #0]
 801b58e:	4a3e      	ldr	r2, [pc, #248]	; (801b688 <xTaskIncrementTick+0x150>)
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	6013      	str	r3, [r2, #0]
 801b594:	4b3d      	ldr	r3, [pc, #244]	; (801b68c <xTaskIncrementTick+0x154>)
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	3301      	adds	r3, #1
 801b59a:	4a3c      	ldr	r2, [pc, #240]	; (801b68c <xTaskIncrementTick+0x154>)
 801b59c:	6013      	str	r3, [r2, #0]
 801b59e:	f000 facb 	bl	801bb38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b5a2:	4b3b      	ldr	r3, [pc, #236]	; (801b690 <xTaskIncrementTick+0x158>)
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	693a      	ldr	r2, [r7, #16]
 801b5a8:	429a      	cmp	r2, r3
 801b5aa:	d348      	bcc.n	801b63e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b5ac:	4b35      	ldr	r3, [pc, #212]	; (801b684 <xTaskIncrementTick+0x14c>)
 801b5ae:	681b      	ldr	r3, [r3, #0]
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d104      	bne.n	801b5c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b5b6:	4b36      	ldr	r3, [pc, #216]	; (801b690 <xTaskIncrementTick+0x158>)
 801b5b8:	f04f 32ff 	mov.w	r2, #4294967295
 801b5bc:	601a      	str	r2, [r3, #0]
					break;
 801b5be:	e03e      	b.n	801b63e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b5c0:	4b30      	ldr	r3, [pc, #192]	; (801b684 <xTaskIncrementTick+0x14c>)
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	68db      	ldr	r3, [r3, #12]
 801b5c6:	68db      	ldr	r3, [r3, #12]
 801b5c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b5ca:	68bb      	ldr	r3, [r7, #8]
 801b5cc:	685b      	ldr	r3, [r3, #4]
 801b5ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b5d0:	693a      	ldr	r2, [r7, #16]
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	429a      	cmp	r2, r3
 801b5d6:	d203      	bcs.n	801b5e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b5d8:	4a2d      	ldr	r2, [pc, #180]	; (801b690 <xTaskIncrementTick+0x158>)
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b5de:	e02e      	b.n	801b63e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b5e0:	68bb      	ldr	r3, [r7, #8]
 801b5e2:	3304      	adds	r3, #4
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7fe fc9d 	bl	8019f24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b5ea:	68bb      	ldr	r3, [r7, #8]
 801b5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d004      	beq.n	801b5fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b5f2:	68bb      	ldr	r3, [r7, #8]
 801b5f4:	3318      	adds	r3, #24
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	f7fe fc94 	bl	8019f24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b5fc:	68bb      	ldr	r3, [r7, #8]
 801b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b600:	2201      	movs	r2, #1
 801b602:	409a      	lsls	r2, r3
 801b604:	4b23      	ldr	r3, [pc, #140]	; (801b694 <xTaskIncrementTick+0x15c>)
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	4313      	orrs	r3, r2
 801b60a:	4a22      	ldr	r2, [pc, #136]	; (801b694 <xTaskIncrementTick+0x15c>)
 801b60c:	6013      	str	r3, [r2, #0]
 801b60e:	68bb      	ldr	r3, [r7, #8]
 801b610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b612:	4613      	mov	r3, r2
 801b614:	009b      	lsls	r3, r3, #2
 801b616:	4413      	add	r3, r2
 801b618:	009b      	lsls	r3, r3, #2
 801b61a:	4a1f      	ldr	r2, [pc, #124]	; (801b698 <xTaskIncrementTick+0x160>)
 801b61c:	441a      	add	r2, r3
 801b61e:	68bb      	ldr	r3, [r7, #8]
 801b620:	3304      	adds	r3, #4
 801b622:	4619      	mov	r1, r3
 801b624:	4610      	mov	r0, r2
 801b626:	f7fe fc20 	bl	8019e6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b62a:	68bb      	ldr	r3, [r7, #8]
 801b62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b62e:	4b1b      	ldr	r3, [pc, #108]	; (801b69c <xTaskIncrementTick+0x164>)
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b634:	429a      	cmp	r2, r3
 801b636:	d3b9      	bcc.n	801b5ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801b638:	2301      	movs	r3, #1
 801b63a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b63c:	e7b6      	b.n	801b5ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b63e:	4b17      	ldr	r3, [pc, #92]	; (801b69c <xTaskIncrementTick+0x164>)
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b644:	4914      	ldr	r1, [pc, #80]	; (801b698 <xTaskIncrementTick+0x160>)
 801b646:	4613      	mov	r3, r2
 801b648:	009b      	lsls	r3, r3, #2
 801b64a:	4413      	add	r3, r2
 801b64c:	009b      	lsls	r3, r3, #2
 801b64e:	440b      	add	r3, r1
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	2b01      	cmp	r3, #1
 801b654:	d901      	bls.n	801b65a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801b656:	2301      	movs	r3, #1
 801b658:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b65a:	4b11      	ldr	r3, [pc, #68]	; (801b6a0 <xTaskIncrementTick+0x168>)
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d007      	beq.n	801b672 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801b662:	2301      	movs	r3, #1
 801b664:	617b      	str	r3, [r7, #20]
 801b666:	e004      	b.n	801b672 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b668:	4b0e      	ldr	r3, [pc, #56]	; (801b6a4 <xTaskIncrementTick+0x16c>)
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	3301      	adds	r3, #1
 801b66e:	4a0d      	ldr	r2, [pc, #52]	; (801b6a4 <xTaskIncrementTick+0x16c>)
 801b670:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b672:	697b      	ldr	r3, [r7, #20]
}
 801b674:	4618      	mov	r0, r3
 801b676:	3718      	adds	r7, #24
 801b678:	46bd      	mov	sp, r7
 801b67a:	bd80      	pop	{r7, pc}
 801b67c:	2000088c 	.word	0x2000088c
 801b680:	20000868 	.word	0x20000868
 801b684:	2000081c 	.word	0x2000081c
 801b688:	20000820 	.word	0x20000820
 801b68c:	2000087c 	.word	0x2000087c
 801b690:	20000884 	.word	0x20000884
 801b694:	2000086c 	.word	0x2000086c
 801b698:	20000768 	.word	0x20000768
 801b69c:	20000764 	.word	0x20000764
 801b6a0:	20000878 	.word	0x20000878
 801b6a4:	20000874 	.word	0x20000874

0801b6a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b6a8:	b480      	push	{r7}
 801b6aa:	b087      	sub	sp, #28
 801b6ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b6ae:	4b27      	ldr	r3, [pc, #156]	; (801b74c <vTaskSwitchContext+0xa4>)
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	d003      	beq.n	801b6be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b6b6:	4b26      	ldr	r3, [pc, #152]	; (801b750 <vTaskSwitchContext+0xa8>)
 801b6b8:	2201      	movs	r2, #1
 801b6ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b6bc:	e03f      	b.n	801b73e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 801b6be:	4b24      	ldr	r3, [pc, #144]	; (801b750 <vTaskSwitchContext+0xa8>)
 801b6c0:	2200      	movs	r2, #0
 801b6c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b6c4:	4b23      	ldr	r3, [pc, #140]	; (801b754 <vTaskSwitchContext+0xac>)
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	fab3 f383 	clz	r3, r3
 801b6d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801b6d2:	7afb      	ldrb	r3, [r7, #11]
 801b6d4:	f1c3 031f 	rsb	r3, r3, #31
 801b6d8:	617b      	str	r3, [r7, #20]
 801b6da:	491f      	ldr	r1, [pc, #124]	; (801b758 <vTaskSwitchContext+0xb0>)
 801b6dc:	697a      	ldr	r2, [r7, #20]
 801b6de:	4613      	mov	r3, r2
 801b6e0:	009b      	lsls	r3, r3, #2
 801b6e2:	4413      	add	r3, r2
 801b6e4:	009b      	lsls	r3, r3, #2
 801b6e6:	440b      	add	r3, r1
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d10a      	bne.n	801b704 <vTaskSwitchContext+0x5c>
	__asm volatile
 801b6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b6f2:	f383 8811 	msr	BASEPRI, r3
 801b6f6:	f3bf 8f6f 	isb	sy
 801b6fa:	f3bf 8f4f 	dsb	sy
 801b6fe:	607b      	str	r3, [r7, #4]
}
 801b700:	bf00      	nop
 801b702:	e7fe      	b.n	801b702 <vTaskSwitchContext+0x5a>
 801b704:	697a      	ldr	r2, [r7, #20]
 801b706:	4613      	mov	r3, r2
 801b708:	009b      	lsls	r3, r3, #2
 801b70a:	4413      	add	r3, r2
 801b70c:	009b      	lsls	r3, r3, #2
 801b70e:	4a12      	ldr	r2, [pc, #72]	; (801b758 <vTaskSwitchContext+0xb0>)
 801b710:	4413      	add	r3, r2
 801b712:	613b      	str	r3, [r7, #16]
 801b714:	693b      	ldr	r3, [r7, #16]
 801b716:	685b      	ldr	r3, [r3, #4]
 801b718:	685a      	ldr	r2, [r3, #4]
 801b71a:	693b      	ldr	r3, [r7, #16]
 801b71c:	605a      	str	r2, [r3, #4]
 801b71e:	693b      	ldr	r3, [r7, #16]
 801b720:	685a      	ldr	r2, [r3, #4]
 801b722:	693b      	ldr	r3, [r7, #16]
 801b724:	3308      	adds	r3, #8
 801b726:	429a      	cmp	r2, r3
 801b728:	d104      	bne.n	801b734 <vTaskSwitchContext+0x8c>
 801b72a:	693b      	ldr	r3, [r7, #16]
 801b72c:	685b      	ldr	r3, [r3, #4]
 801b72e:	685a      	ldr	r2, [r3, #4]
 801b730:	693b      	ldr	r3, [r7, #16]
 801b732:	605a      	str	r2, [r3, #4]
 801b734:	693b      	ldr	r3, [r7, #16]
 801b736:	685b      	ldr	r3, [r3, #4]
 801b738:	68db      	ldr	r3, [r3, #12]
 801b73a:	4a08      	ldr	r2, [pc, #32]	; (801b75c <vTaskSwitchContext+0xb4>)
 801b73c:	6013      	str	r3, [r2, #0]
}
 801b73e:	bf00      	nop
 801b740:	371c      	adds	r7, #28
 801b742:	46bd      	mov	sp, r7
 801b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b748:	4770      	bx	lr
 801b74a:	bf00      	nop
 801b74c:	2000088c 	.word	0x2000088c
 801b750:	20000878 	.word	0x20000878
 801b754:	2000086c 	.word	0x2000086c
 801b758:	20000768 	.word	0x20000768
 801b75c:	20000764 	.word	0x20000764

0801b760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b084      	sub	sp, #16
 801b764:	af00      	add	r7, sp, #0
 801b766:	6078      	str	r0, [r7, #4]
 801b768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d10a      	bne.n	801b786 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801b770:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b774:	f383 8811 	msr	BASEPRI, r3
 801b778:	f3bf 8f6f 	isb	sy
 801b77c:	f3bf 8f4f 	dsb	sy
 801b780:	60fb      	str	r3, [r7, #12]
}
 801b782:	bf00      	nop
 801b784:	e7fe      	b.n	801b784 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b786:	4b07      	ldr	r3, [pc, #28]	; (801b7a4 <vTaskPlaceOnEventList+0x44>)
 801b788:	681b      	ldr	r3, [r3, #0]
 801b78a:	3318      	adds	r3, #24
 801b78c:	4619      	mov	r1, r3
 801b78e:	6878      	ldr	r0, [r7, #4]
 801b790:	f7fe fb8f 	bl	8019eb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b794:	2101      	movs	r1, #1
 801b796:	6838      	ldr	r0, [r7, #0]
 801b798:	f000 fbaa 	bl	801bef0 <prvAddCurrentTaskToDelayedList>
}
 801b79c:	bf00      	nop
 801b79e:	3710      	adds	r7, #16
 801b7a0:	46bd      	mov	sp, r7
 801b7a2:	bd80      	pop	{r7, pc}
 801b7a4:	20000764 	.word	0x20000764

0801b7a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b086      	sub	sp, #24
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	60f8      	str	r0, [r7, #12]
 801b7b0:	60b9      	str	r1, [r7, #8]
 801b7b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b7b4:	68fb      	ldr	r3, [r7, #12]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d10a      	bne.n	801b7d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801b7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b7be:	f383 8811 	msr	BASEPRI, r3
 801b7c2:	f3bf 8f6f 	isb	sy
 801b7c6:	f3bf 8f4f 	dsb	sy
 801b7ca:	617b      	str	r3, [r7, #20]
}
 801b7cc:	bf00      	nop
 801b7ce:	e7fe      	b.n	801b7ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b7d0:	4b0a      	ldr	r3, [pc, #40]	; (801b7fc <vTaskPlaceOnEventListRestricted+0x54>)
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	3318      	adds	r3, #24
 801b7d6:	4619      	mov	r1, r3
 801b7d8:	68f8      	ldr	r0, [r7, #12]
 801b7da:	f7fe fb46 	bl	8019e6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d002      	beq.n	801b7ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801b7e4:	f04f 33ff 	mov.w	r3, #4294967295
 801b7e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b7ea:	6879      	ldr	r1, [r7, #4]
 801b7ec:	68b8      	ldr	r0, [r7, #8]
 801b7ee:	f000 fb7f 	bl	801bef0 <prvAddCurrentTaskToDelayedList>
	}
 801b7f2:	bf00      	nop
 801b7f4:	3718      	adds	r7, #24
 801b7f6:	46bd      	mov	sp, r7
 801b7f8:	bd80      	pop	{r7, pc}
 801b7fa:	bf00      	nop
 801b7fc:	20000764 	.word	0x20000764

0801b800 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b800:	b580      	push	{r7, lr}
 801b802:	b086      	sub	sp, #24
 801b804:	af00      	add	r7, sp, #0
 801b806:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	68db      	ldr	r3, [r3, #12]
 801b80c:	68db      	ldr	r3, [r3, #12]
 801b80e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b810:	693b      	ldr	r3, [r7, #16]
 801b812:	2b00      	cmp	r3, #0
 801b814:	d10a      	bne.n	801b82c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801b816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b81a:	f383 8811 	msr	BASEPRI, r3
 801b81e:	f3bf 8f6f 	isb	sy
 801b822:	f3bf 8f4f 	dsb	sy
 801b826:	60fb      	str	r3, [r7, #12]
}
 801b828:	bf00      	nop
 801b82a:	e7fe      	b.n	801b82a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b82c:	693b      	ldr	r3, [r7, #16]
 801b82e:	3318      	adds	r3, #24
 801b830:	4618      	mov	r0, r3
 801b832:	f7fe fb77 	bl	8019f24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b836:	4b1d      	ldr	r3, [pc, #116]	; (801b8ac <xTaskRemoveFromEventList+0xac>)
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d11c      	bne.n	801b878 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b83e:	693b      	ldr	r3, [r7, #16]
 801b840:	3304      	adds	r3, #4
 801b842:	4618      	mov	r0, r3
 801b844:	f7fe fb6e 	bl	8019f24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b848:	693b      	ldr	r3, [r7, #16]
 801b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b84c:	2201      	movs	r2, #1
 801b84e:	409a      	lsls	r2, r3
 801b850:	4b17      	ldr	r3, [pc, #92]	; (801b8b0 <xTaskRemoveFromEventList+0xb0>)
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	4313      	orrs	r3, r2
 801b856:	4a16      	ldr	r2, [pc, #88]	; (801b8b0 <xTaskRemoveFromEventList+0xb0>)
 801b858:	6013      	str	r3, [r2, #0]
 801b85a:	693b      	ldr	r3, [r7, #16]
 801b85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b85e:	4613      	mov	r3, r2
 801b860:	009b      	lsls	r3, r3, #2
 801b862:	4413      	add	r3, r2
 801b864:	009b      	lsls	r3, r3, #2
 801b866:	4a13      	ldr	r2, [pc, #76]	; (801b8b4 <xTaskRemoveFromEventList+0xb4>)
 801b868:	441a      	add	r2, r3
 801b86a:	693b      	ldr	r3, [r7, #16]
 801b86c:	3304      	adds	r3, #4
 801b86e:	4619      	mov	r1, r3
 801b870:	4610      	mov	r0, r2
 801b872:	f7fe fafa 	bl	8019e6a <vListInsertEnd>
 801b876:	e005      	b.n	801b884 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b878:	693b      	ldr	r3, [r7, #16]
 801b87a:	3318      	adds	r3, #24
 801b87c:	4619      	mov	r1, r3
 801b87e:	480e      	ldr	r0, [pc, #56]	; (801b8b8 <xTaskRemoveFromEventList+0xb8>)
 801b880:	f7fe faf3 	bl	8019e6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b884:	693b      	ldr	r3, [r7, #16]
 801b886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b888:	4b0c      	ldr	r3, [pc, #48]	; (801b8bc <xTaskRemoveFromEventList+0xbc>)
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b88e:	429a      	cmp	r2, r3
 801b890:	d905      	bls.n	801b89e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b892:	2301      	movs	r3, #1
 801b894:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b896:	4b0a      	ldr	r3, [pc, #40]	; (801b8c0 <xTaskRemoveFromEventList+0xc0>)
 801b898:	2201      	movs	r2, #1
 801b89a:	601a      	str	r2, [r3, #0]
 801b89c:	e001      	b.n	801b8a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801b89e:	2300      	movs	r3, #0
 801b8a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b8a2:	697b      	ldr	r3, [r7, #20]
}
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	3718      	adds	r7, #24
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	bd80      	pop	{r7, pc}
 801b8ac:	2000088c 	.word	0x2000088c
 801b8b0:	2000086c 	.word	0x2000086c
 801b8b4:	20000768 	.word	0x20000768
 801b8b8:	20000824 	.word	0x20000824
 801b8bc:	20000764 	.word	0x20000764
 801b8c0:	20000878 	.word	0x20000878

0801b8c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b8c4:	b480      	push	{r7}
 801b8c6:	b083      	sub	sp, #12
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b8cc:	4b06      	ldr	r3, [pc, #24]	; (801b8e8 <vTaskInternalSetTimeOutState+0x24>)
 801b8ce:	681a      	ldr	r2, [r3, #0]
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b8d4:	4b05      	ldr	r3, [pc, #20]	; (801b8ec <vTaskInternalSetTimeOutState+0x28>)
 801b8d6:	681a      	ldr	r2, [r3, #0]
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	605a      	str	r2, [r3, #4]
}
 801b8dc:	bf00      	nop
 801b8de:	370c      	adds	r7, #12
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8e6:	4770      	bx	lr
 801b8e8:	2000087c 	.word	0x2000087c
 801b8ec:	20000868 	.word	0x20000868

0801b8f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b8f0:	b580      	push	{r7, lr}
 801b8f2:	b088      	sub	sp, #32
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	6078      	str	r0, [r7, #4]
 801b8f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	2b00      	cmp	r3, #0
 801b8fe:	d10a      	bne.n	801b916 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801b900:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b904:	f383 8811 	msr	BASEPRI, r3
 801b908:	f3bf 8f6f 	isb	sy
 801b90c:	f3bf 8f4f 	dsb	sy
 801b910:	613b      	str	r3, [r7, #16]
}
 801b912:	bf00      	nop
 801b914:	e7fe      	b.n	801b914 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b916:	683b      	ldr	r3, [r7, #0]
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d10a      	bne.n	801b932 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b920:	f383 8811 	msr	BASEPRI, r3
 801b924:	f3bf 8f6f 	isb	sy
 801b928:	f3bf 8f4f 	dsb	sy
 801b92c:	60fb      	str	r3, [r7, #12]
}
 801b92e:	bf00      	nop
 801b930:	e7fe      	b.n	801b930 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801b932:	f000 ff9f 	bl	801c874 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b936:	4b1d      	ldr	r3, [pc, #116]	; (801b9ac <xTaskCheckForTimeOut+0xbc>)
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	685b      	ldr	r3, [r3, #4]
 801b940:	69ba      	ldr	r2, [r7, #24]
 801b942:	1ad3      	subs	r3, r2, r3
 801b944:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b946:	683b      	ldr	r3, [r7, #0]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b94e:	d102      	bne.n	801b956 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b950:	2300      	movs	r3, #0
 801b952:	61fb      	str	r3, [r7, #28]
 801b954:	e023      	b.n	801b99e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	681a      	ldr	r2, [r3, #0]
 801b95a:	4b15      	ldr	r3, [pc, #84]	; (801b9b0 <xTaskCheckForTimeOut+0xc0>)
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	429a      	cmp	r2, r3
 801b960:	d007      	beq.n	801b972 <xTaskCheckForTimeOut+0x82>
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	685b      	ldr	r3, [r3, #4]
 801b966:	69ba      	ldr	r2, [r7, #24]
 801b968:	429a      	cmp	r2, r3
 801b96a:	d302      	bcc.n	801b972 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b96c:	2301      	movs	r3, #1
 801b96e:	61fb      	str	r3, [r7, #28]
 801b970:	e015      	b.n	801b99e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b972:	683b      	ldr	r3, [r7, #0]
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	697a      	ldr	r2, [r7, #20]
 801b978:	429a      	cmp	r2, r3
 801b97a:	d20b      	bcs.n	801b994 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b97c:	683b      	ldr	r3, [r7, #0]
 801b97e:	681a      	ldr	r2, [r3, #0]
 801b980:	697b      	ldr	r3, [r7, #20]
 801b982:	1ad2      	subs	r2, r2, r3
 801b984:	683b      	ldr	r3, [r7, #0]
 801b986:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b988:	6878      	ldr	r0, [r7, #4]
 801b98a:	f7ff ff9b 	bl	801b8c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b98e:	2300      	movs	r3, #0
 801b990:	61fb      	str	r3, [r7, #28]
 801b992:	e004      	b.n	801b99e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801b994:	683b      	ldr	r3, [r7, #0]
 801b996:	2200      	movs	r2, #0
 801b998:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b99a:	2301      	movs	r3, #1
 801b99c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b99e:	f000 ff99 	bl	801c8d4 <vPortExitCritical>

	return xReturn;
 801b9a2:	69fb      	ldr	r3, [r7, #28]
}
 801b9a4:	4618      	mov	r0, r3
 801b9a6:	3720      	adds	r7, #32
 801b9a8:	46bd      	mov	sp, r7
 801b9aa:	bd80      	pop	{r7, pc}
 801b9ac:	20000868 	.word	0x20000868
 801b9b0:	2000087c 	.word	0x2000087c

0801b9b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b9b4:	b480      	push	{r7}
 801b9b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b9b8:	4b03      	ldr	r3, [pc, #12]	; (801b9c8 <vTaskMissedYield+0x14>)
 801b9ba:	2201      	movs	r2, #1
 801b9bc:	601a      	str	r2, [r3, #0]
}
 801b9be:	bf00      	nop
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9c6:	4770      	bx	lr
 801b9c8:	20000878 	.word	0x20000878

0801b9cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b9cc:	b580      	push	{r7, lr}
 801b9ce:	b082      	sub	sp, #8
 801b9d0:	af00      	add	r7, sp, #0
 801b9d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b9d4:	f000 f852 	bl	801ba7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b9d8:	4b06      	ldr	r3, [pc, #24]	; (801b9f4 <prvIdleTask+0x28>)
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	2b01      	cmp	r3, #1
 801b9de:	d9f9      	bls.n	801b9d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 801b9e0:	4b05      	ldr	r3, [pc, #20]	; (801b9f8 <prvIdleTask+0x2c>)
 801b9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b9e6:	601a      	str	r2, [r3, #0]
 801b9e8:	f3bf 8f4f 	dsb	sy
 801b9ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b9f0:	e7f0      	b.n	801b9d4 <prvIdleTask+0x8>
 801b9f2:	bf00      	nop
 801b9f4:	20000768 	.word	0x20000768
 801b9f8:	e000ed04 	.word	0xe000ed04

0801b9fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b082      	sub	sp, #8
 801ba00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801ba02:	2300      	movs	r3, #0
 801ba04:	607b      	str	r3, [r7, #4]
 801ba06:	e00c      	b.n	801ba22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801ba08:	687a      	ldr	r2, [r7, #4]
 801ba0a:	4613      	mov	r3, r2
 801ba0c:	009b      	lsls	r3, r3, #2
 801ba0e:	4413      	add	r3, r2
 801ba10:	009b      	lsls	r3, r3, #2
 801ba12:	4a12      	ldr	r2, [pc, #72]	; (801ba5c <prvInitialiseTaskLists+0x60>)
 801ba14:	4413      	add	r3, r2
 801ba16:	4618      	mov	r0, r3
 801ba18:	f7fe f9fa 	bl	8019e10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	3301      	adds	r3, #1
 801ba20:	607b      	str	r3, [r7, #4]
 801ba22:	687b      	ldr	r3, [r7, #4]
 801ba24:	2b06      	cmp	r3, #6
 801ba26:	d9ef      	bls.n	801ba08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801ba28:	480d      	ldr	r0, [pc, #52]	; (801ba60 <prvInitialiseTaskLists+0x64>)
 801ba2a:	f7fe f9f1 	bl	8019e10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801ba2e:	480d      	ldr	r0, [pc, #52]	; (801ba64 <prvInitialiseTaskLists+0x68>)
 801ba30:	f7fe f9ee 	bl	8019e10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801ba34:	480c      	ldr	r0, [pc, #48]	; (801ba68 <prvInitialiseTaskLists+0x6c>)
 801ba36:	f7fe f9eb 	bl	8019e10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801ba3a:	480c      	ldr	r0, [pc, #48]	; (801ba6c <prvInitialiseTaskLists+0x70>)
 801ba3c:	f7fe f9e8 	bl	8019e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801ba40:	480b      	ldr	r0, [pc, #44]	; (801ba70 <prvInitialiseTaskLists+0x74>)
 801ba42:	f7fe f9e5 	bl	8019e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801ba46:	4b0b      	ldr	r3, [pc, #44]	; (801ba74 <prvInitialiseTaskLists+0x78>)
 801ba48:	4a05      	ldr	r2, [pc, #20]	; (801ba60 <prvInitialiseTaskLists+0x64>)
 801ba4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801ba4c:	4b0a      	ldr	r3, [pc, #40]	; (801ba78 <prvInitialiseTaskLists+0x7c>)
 801ba4e:	4a05      	ldr	r2, [pc, #20]	; (801ba64 <prvInitialiseTaskLists+0x68>)
 801ba50:	601a      	str	r2, [r3, #0]
}
 801ba52:	bf00      	nop
 801ba54:	3708      	adds	r7, #8
 801ba56:	46bd      	mov	sp, r7
 801ba58:	bd80      	pop	{r7, pc}
 801ba5a:	bf00      	nop
 801ba5c:	20000768 	.word	0x20000768
 801ba60:	200007f4 	.word	0x200007f4
 801ba64:	20000808 	.word	0x20000808
 801ba68:	20000824 	.word	0x20000824
 801ba6c:	20000838 	.word	0x20000838
 801ba70:	20000850 	.word	0x20000850
 801ba74:	2000081c 	.word	0x2000081c
 801ba78:	20000820 	.word	0x20000820

0801ba7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b082      	sub	sp, #8
 801ba80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801ba82:	e019      	b.n	801bab8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801ba84:	f000 fef6 	bl	801c874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ba88:	4b10      	ldr	r3, [pc, #64]	; (801bacc <prvCheckTasksWaitingTermination+0x50>)
 801ba8a:	68db      	ldr	r3, [r3, #12]
 801ba8c:	68db      	ldr	r3, [r3, #12]
 801ba8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	3304      	adds	r3, #4
 801ba94:	4618      	mov	r0, r3
 801ba96:	f7fe fa45 	bl	8019f24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801ba9a:	4b0d      	ldr	r3, [pc, #52]	; (801bad0 <prvCheckTasksWaitingTermination+0x54>)
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	3b01      	subs	r3, #1
 801baa0:	4a0b      	ldr	r2, [pc, #44]	; (801bad0 <prvCheckTasksWaitingTermination+0x54>)
 801baa2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801baa4:	4b0b      	ldr	r3, [pc, #44]	; (801bad4 <prvCheckTasksWaitingTermination+0x58>)
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	3b01      	subs	r3, #1
 801baaa:	4a0a      	ldr	r2, [pc, #40]	; (801bad4 <prvCheckTasksWaitingTermination+0x58>)
 801baac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801baae:	f000 ff11 	bl	801c8d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801bab2:	6878      	ldr	r0, [r7, #4]
 801bab4:	f000 f810 	bl	801bad8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bab8:	4b06      	ldr	r3, [pc, #24]	; (801bad4 <prvCheckTasksWaitingTermination+0x58>)
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	2b00      	cmp	r3, #0
 801babe:	d1e1      	bne.n	801ba84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801bac0:	bf00      	nop
 801bac2:	bf00      	nop
 801bac4:	3708      	adds	r7, #8
 801bac6:	46bd      	mov	sp, r7
 801bac8:	bd80      	pop	{r7, pc}
 801baca:	bf00      	nop
 801bacc:	20000838 	.word	0x20000838
 801bad0:	20000864 	.word	0x20000864
 801bad4:	2000084c 	.word	0x2000084c

0801bad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801bad8:	b580      	push	{r7, lr}
 801bada:	b084      	sub	sp, #16
 801badc:	af00      	add	r7, sp, #0
 801bade:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	d108      	bne.n	801bafc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801baee:	4618      	mov	r0, r3
 801baf0:	f001 f8ae 	bl	801cc50 <vPortFree>
				vPortFree( pxTCB );
 801baf4:	6878      	ldr	r0, [r7, #4]
 801baf6:	f001 f8ab 	bl	801cc50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801bafa:	e018      	b.n	801bb2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801bb02:	2b01      	cmp	r3, #1
 801bb04:	d103      	bne.n	801bb0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801bb06:	6878      	ldr	r0, [r7, #4]
 801bb08:	f001 f8a2 	bl	801cc50 <vPortFree>
	}
 801bb0c:	e00f      	b.n	801bb2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801bb14:	2b02      	cmp	r3, #2
 801bb16:	d00a      	beq.n	801bb2e <prvDeleteTCB+0x56>
	__asm volatile
 801bb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb1c:	f383 8811 	msr	BASEPRI, r3
 801bb20:	f3bf 8f6f 	isb	sy
 801bb24:	f3bf 8f4f 	dsb	sy
 801bb28:	60fb      	str	r3, [r7, #12]
}
 801bb2a:	bf00      	nop
 801bb2c:	e7fe      	b.n	801bb2c <prvDeleteTCB+0x54>
	}
 801bb2e:	bf00      	nop
 801bb30:	3710      	adds	r7, #16
 801bb32:	46bd      	mov	sp, r7
 801bb34:	bd80      	pop	{r7, pc}
	...

0801bb38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801bb38:	b480      	push	{r7}
 801bb3a:	b083      	sub	sp, #12
 801bb3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801bb3e:	4b0c      	ldr	r3, [pc, #48]	; (801bb70 <prvResetNextTaskUnblockTime+0x38>)
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	2b00      	cmp	r3, #0
 801bb46:	d104      	bne.n	801bb52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801bb48:	4b0a      	ldr	r3, [pc, #40]	; (801bb74 <prvResetNextTaskUnblockTime+0x3c>)
 801bb4a:	f04f 32ff 	mov.w	r2, #4294967295
 801bb4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801bb50:	e008      	b.n	801bb64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bb52:	4b07      	ldr	r3, [pc, #28]	; (801bb70 <prvResetNextTaskUnblockTime+0x38>)
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	68db      	ldr	r3, [r3, #12]
 801bb58:	68db      	ldr	r3, [r3, #12]
 801bb5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	685b      	ldr	r3, [r3, #4]
 801bb60:	4a04      	ldr	r2, [pc, #16]	; (801bb74 <prvResetNextTaskUnblockTime+0x3c>)
 801bb62:	6013      	str	r3, [r2, #0]
}
 801bb64:	bf00      	nop
 801bb66:	370c      	adds	r7, #12
 801bb68:	46bd      	mov	sp, r7
 801bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb6e:	4770      	bx	lr
 801bb70:	2000081c 	.word	0x2000081c
 801bb74:	20000884 	.word	0x20000884

0801bb78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801bb78:	b480      	push	{r7}
 801bb7a:	b083      	sub	sp, #12
 801bb7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801bb7e:	4b0b      	ldr	r3, [pc, #44]	; (801bbac <xTaskGetSchedulerState+0x34>)
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d102      	bne.n	801bb8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801bb86:	2301      	movs	r3, #1
 801bb88:	607b      	str	r3, [r7, #4]
 801bb8a:	e008      	b.n	801bb9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801bb8c:	4b08      	ldr	r3, [pc, #32]	; (801bbb0 <xTaskGetSchedulerState+0x38>)
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d102      	bne.n	801bb9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801bb94:	2302      	movs	r3, #2
 801bb96:	607b      	str	r3, [r7, #4]
 801bb98:	e001      	b.n	801bb9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801bb9a:	2300      	movs	r3, #0
 801bb9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801bb9e:	687b      	ldr	r3, [r7, #4]
	}
 801bba0:	4618      	mov	r0, r3
 801bba2:	370c      	adds	r7, #12
 801bba4:	46bd      	mov	sp, r7
 801bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbaa:	4770      	bx	lr
 801bbac:	20000870 	.word	0x20000870
 801bbb0:	2000088c 	.word	0x2000088c

0801bbb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801bbb4:	b580      	push	{r7, lr}
 801bbb6:	b084      	sub	sp, #16
 801bbb8:	af00      	add	r7, sp, #0
 801bbba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d05e      	beq.n	801bc88 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801bbca:	68bb      	ldr	r3, [r7, #8]
 801bbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bbce:	4b31      	ldr	r3, [pc, #196]	; (801bc94 <xTaskPriorityInherit+0xe0>)
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bbd4:	429a      	cmp	r2, r3
 801bbd6:	d24e      	bcs.n	801bc76 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801bbd8:	68bb      	ldr	r3, [r7, #8]
 801bbda:	699b      	ldr	r3, [r3, #24]
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	db06      	blt.n	801bbee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bbe0:	4b2c      	ldr	r3, [pc, #176]	; (801bc94 <xTaskPriorityInherit+0xe0>)
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bbe6:	f1c3 0207 	rsb	r2, r3, #7
 801bbea:	68bb      	ldr	r3, [r7, #8]
 801bbec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801bbee:	68bb      	ldr	r3, [r7, #8]
 801bbf0:	6959      	ldr	r1, [r3, #20]
 801bbf2:	68bb      	ldr	r3, [r7, #8]
 801bbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bbf6:	4613      	mov	r3, r2
 801bbf8:	009b      	lsls	r3, r3, #2
 801bbfa:	4413      	add	r3, r2
 801bbfc:	009b      	lsls	r3, r3, #2
 801bbfe:	4a26      	ldr	r2, [pc, #152]	; (801bc98 <xTaskPriorityInherit+0xe4>)
 801bc00:	4413      	add	r3, r2
 801bc02:	4299      	cmp	r1, r3
 801bc04:	d12f      	bne.n	801bc66 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bc06:	68bb      	ldr	r3, [r7, #8]
 801bc08:	3304      	adds	r3, #4
 801bc0a:	4618      	mov	r0, r3
 801bc0c:	f7fe f98a 	bl	8019f24 <uxListRemove>
 801bc10:	4603      	mov	r3, r0
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d10a      	bne.n	801bc2c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801bc16:	68bb      	ldr	r3, [r7, #8]
 801bc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc1a:	2201      	movs	r2, #1
 801bc1c:	fa02 f303 	lsl.w	r3, r2, r3
 801bc20:	43da      	mvns	r2, r3
 801bc22:	4b1e      	ldr	r3, [pc, #120]	; (801bc9c <xTaskPriorityInherit+0xe8>)
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	4013      	ands	r3, r2
 801bc28:	4a1c      	ldr	r2, [pc, #112]	; (801bc9c <xTaskPriorityInherit+0xe8>)
 801bc2a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801bc2c:	4b19      	ldr	r3, [pc, #100]	; (801bc94 <xTaskPriorityInherit+0xe0>)
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc32:	68bb      	ldr	r3, [r7, #8]
 801bc34:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801bc36:	68bb      	ldr	r3, [r7, #8]
 801bc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc3a:	2201      	movs	r2, #1
 801bc3c:	409a      	lsls	r2, r3
 801bc3e:	4b17      	ldr	r3, [pc, #92]	; (801bc9c <xTaskPriorityInherit+0xe8>)
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	4313      	orrs	r3, r2
 801bc44:	4a15      	ldr	r2, [pc, #84]	; (801bc9c <xTaskPriorityInherit+0xe8>)
 801bc46:	6013      	str	r3, [r2, #0]
 801bc48:	68bb      	ldr	r3, [r7, #8]
 801bc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc4c:	4613      	mov	r3, r2
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	4413      	add	r3, r2
 801bc52:	009b      	lsls	r3, r3, #2
 801bc54:	4a10      	ldr	r2, [pc, #64]	; (801bc98 <xTaskPriorityInherit+0xe4>)
 801bc56:	441a      	add	r2, r3
 801bc58:	68bb      	ldr	r3, [r7, #8]
 801bc5a:	3304      	adds	r3, #4
 801bc5c:	4619      	mov	r1, r3
 801bc5e:	4610      	mov	r0, r2
 801bc60:	f7fe f903 	bl	8019e6a <vListInsertEnd>
 801bc64:	e004      	b.n	801bc70 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801bc66:	4b0b      	ldr	r3, [pc, #44]	; (801bc94 <xTaskPriorityInherit+0xe0>)
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bc6c:	68bb      	ldr	r3, [r7, #8]
 801bc6e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801bc70:	2301      	movs	r3, #1
 801bc72:	60fb      	str	r3, [r7, #12]
 801bc74:	e008      	b.n	801bc88 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801bc76:	68bb      	ldr	r3, [r7, #8]
 801bc78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bc7a:	4b06      	ldr	r3, [pc, #24]	; (801bc94 <xTaskPriorityInherit+0xe0>)
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc80:	429a      	cmp	r2, r3
 801bc82:	d201      	bcs.n	801bc88 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801bc84:	2301      	movs	r3, #1
 801bc86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bc88:	68fb      	ldr	r3, [r7, #12]
	}
 801bc8a:	4618      	mov	r0, r3
 801bc8c:	3710      	adds	r7, #16
 801bc8e:	46bd      	mov	sp, r7
 801bc90:	bd80      	pop	{r7, pc}
 801bc92:	bf00      	nop
 801bc94:	20000764 	.word	0x20000764
 801bc98:	20000768 	.word	0x20000768
 801bc9c:	2000086c 	.word	0x2000086c

0801bca0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b086      	sub	sp, #24
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801bcac:	2300      	movs	r3, #0
 801bcae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d06e      	beq.n	801bd94 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801bcb6:	4b3a      	ldr	r3, [pc, #232]	; (801bda0 <xTaskPriorityDisinherit+0x100>)
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	693a      	ldr	r2, [r7, #16]
 801bcbc:	429a      	cmp	r2, r3
 801bcbe:	d00a      	beq.n	801bcd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcc4:	f383 8811 	msr	BASEPRI, r3
 801bcc8:	f3bf 8f6f 	isb	sy
 801bccc:	f3bf 8f4f 	dsb	sy
 801bcd0:	60fb      	str	r3, [r7, #12]
}
 801bcd2:	bf00      	nop
 801bcd4:	e7fe      	b.n	801bcd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801bcd6:	693b      	ldr	r3, [r7, #16]
 801bcd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d10a      	bne.n	801bcf4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801bcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bce2:	f383 8811 	msr	BASEPRI, r3
 801bce6:	f3bf 8f6f 	isb	sy
 801bcea:	f3bf 8f4f 	dsb	sy
 801bcee:	60bb      	str	r3, [r7, #8]
}
 801bcf0:	bf00      	nop
 801bcf2:	e7fe      	b.n	801bcf2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801bcf4:	693b      	ldr	r3, [r7, #16]
 801bcf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bcf8:	1e5a      	subs	r2, r3, #1
 801bcfa:	693b      	ldr	r3, [r7, #16]
 801bcfc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801bcfe:	693b      	ldr	r3, [r7, #16]
 801bd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd02:	693b      	ldr	r3, [r7, #16]
 801bd04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bd06:	429a      	cmp	r2, r3
 801bd08:	d044      	beq.n	801bd94 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801bd0a:	693b      	ldr	r3, [r7, #16]
 801bd0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d140      	bne.n	801bd94 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bd12:	693b      	ldr	r3, [r7, #16]
 801bd14:	3304      	adds	r3, #4
 801bd16:	4618      	mov	r0, r3
 801bd18:	f7fe f904 	bl	8019f24 <uxListRemove>
 801bd1c:	4603      	mov	r3, r0
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d115      	bne.n	801bd4e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801bd22:	693b      	ldr	r3, [r7, #16]
 801bd24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd26:	491f      	ldr	r1, [pc, #124]	; (801bda4 <xTaskPriorityDisinherit+0x104>)
 801bd28:	4613      	mov	r3, r2
 801bd2a:	009b      	lsls	r3, r3, #2
 801bd2c:	4413      	add	r3, r2
 801bd2e:	009b      	lsls	r3, r3, #2
 801bd30:	440b      	add	r3, r1
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d10a      	bne.n	801bd4e <xTaskPriorityDisinherit+0xae>
 801bd38:	693b      	ldr	r3, [r7, #16]
 801bd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd3c:	2201      	movs	r2, #1
 801bd3e:	fa02 f303 	lsl.w	r3, r2, r3
 801bd42:	43da      	mvns	r2, r3
 801bd44:	4b18      	ldr	r3, [pc, #96]	; (801bda8 <xTaskPriorityDisinherit+0x108>)
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	4013      	ands	r3, r2
 801bd4a:	4a17      	ldr	r2, [pc, #92]	; (801bda8 <xTaskPriorityDisinherit+0x108>)
 801bd4c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801bd4e:	693b      	ldr	r3, [r7, #16]
 801bd50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bd52:	693b      	ldr	r3, [r7, #16]
 801bd54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bd56:	693b      	ldr	r3, [r7, #16]
 801bd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd5a:	f1c3 0207 	rsb	r2, r3, #7
 801bd5e:	693b      	ldr	r3, [r7, #16]
 801bd60:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801bd62:	693b      	ldr	r3, [r7, #16]
 801bd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd66:	2201      	movs	r2, #1
 801bd68:	409a      	lsls	r2, r3
 801bd6a:	4b0f      	ldr	r3, [pc, #60]	; (801bda8 <xTaskPriorityDisinherit+0x108>)
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	4313      	orrs	r3, r2
 801bd70:	4a0d      	ldr	r2, [pc, #52]	; (801bda8 <xTaskPriorityDisinherit+0x108>)
 801bd72:	6013      	str	r3, [r2, #0]
 801bd74:	693b      	ldr	r3, [r7, #16]
 801bd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bd78:	4613      	mov	r3, r2
 801bd7a:	009b      	lsls	r3, r3, #2
 801bd7c:	4413      	add	r3, r2
 801bd7e:	009b      	lsls	r3, r3, #2
 801bd80:	4a08      	ldr	r2, [pc, #32]	; (801bda4 <xTaskPriorityDisinherit+0x104>)
 801bd82:	441a      	add	r2, r3
 801bd84:	693b      	ldr	r3, [r7, #16]
 801bd86:	3304      	adds	r3, #4
 801bd88:	4619      	mov	r1, r3
 801bd8a:	4610      	mov	r0, r2
 801bd8c:	f7fe f86d 	bl	8019e6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801bd90:	2301      	movs	r3, #1
 801bd92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801bd94:	697b      	ldr	r3, [r7, #20]
	}
 801bd96:	4618      	mov	r0, r3
 801bd98:	3718      	adds	r7, #24
 801bd9a:	46bd      	mov	sp, r7
 801bd9c:	bd80      	pop	{r7, pc}
 801bd9e:	bf00      	nop
 801bda0:	20000764 	.word	0x20000764
 801bda4:	20000768 	.word	0x20000768
 801bda8:	2000086c 	.word	0x2000086c

0801bdac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801bdac:	b580      	push	{r7, lr}
 801bdae:	b088      	sub	sp, #32
 801bdb0:	af00      	add	r7, sp, #0
 801bdb2:	6078      	str	r0, [r7, #4]
 801bdb4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801bdba:	2301      	movs	r3, #1
 801bdbc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d077      	beq.n	801beb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801bdc4:	69bb      	ldr	r3, [r7, #24]
 801bdc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d10a      	bne.n	801bde2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801bdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bdd0:	f383 8811 	msr	BASEPRI, r3
 801bdd4:	f3bf 8f6f 	isb	sy
 801bdd8:	f3bf 8f4f 	dsb	sy
 801bddc:	60fb      	str	r3, [r7, #12]
}
 801bdde:	bf00      	nop
 801bde0:	e7fe      	b.n	801bde0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801bde2:	69bb      	ldr	r3, [r7, #24]
 801bde4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bde6:	683a      	ldr	r2, [r7, #0]
 801bde8:	429a      	cmp	r2, r3
 801bdea:	d902      	bls.n	801bdf2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801bdec:	683b      	ldr	r3, [r7, #0]
 801bdee:	61fb      	str	r3, [r7, #28]
 801bdf0:	e002      	b.n	801bdf8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801bdf2:	69bb      	ldr	r3, [r7, #24]
 801bdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bdf6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801bdf8:	69bb      	ldr	r3, [r7, #24]
 801bdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bdfc:	69fa      	ldr	r2, [r7, #28]
 801bdfe:	429a      	cmp	r2, r3
 801be00:	d058      	beq.n	801beb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801be02:	69bb      	ldr	r3, [r7, #24]
 801be04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be06:	697a      	ldr	r2, [r7, #20]
 801be08:	429a      	cmp	r2, r3
 801be0a:	d153      	bne.n	801beb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801be0c:	4b2b      	ldr	r3, [pc, #172]	; (801bebc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801be0e:	681b      	ldr	r3, [r3, #0]
 801be10:	69ba      	ldr	r2, [r7, #24]
 801be12:	429a      	cmp	r2, r3
 801be14:	d10a      	bne.n	801be2c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801be16:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be1a:	f383 8811 	msr	BASEPRI, r3
 801be1e:	f3bf 8f6f 	isb	sy
 801be22:	f3bf 8f4f 	dsb	sy
 801be26:	60bb      	str	r3, [r7, #8]
}
 801be28:	bf00      	nop
 801be2a:	e7fe      	b.n	801be2a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801be2c:	69bb      	ldr	r3, [r7, #24]
 801be2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801be32:	69bb      	ldr	r3, [r7, #24]
 801be34:	69fa      	ldr	r2, [r7, #28]
 801be36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801be38:	69bb      	ldr	r3, [r7, #24]
 801be3a:	699b      	ldr	r3, [r3, #24]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	db04      	blt.n	801be4a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801be40:	69fb      	ldr	r3, [r7, #28]
 801be42:	f1c3 0207 	rsb	r2, r3, #7
 801be46:	69bb      	ldr	r3, [r7, #24]
 801be48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801be4a:	69bb      	ldr	r3, [r7, #24]
 801be4c:	6959      	ldr	r1, [r3, #20]
 801be4e:	693a      	ldr	r2, [r7, #16]
 801be50:	4613      	mov	r3, r2
 801be52:	009b      	lsls	r3, r3, #2
 801be54:	4413      	add	r3, r2
 801be56:	009b      	lsls	r3, r3, #2
 801be58:	4a19      	ldr	r2, [pc, #100]	; (801bec0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801be5a:	4413      	add	r3, r2
 801be5c:	4299      	cmp	r1, r3
 801be5e:	d129      	bne.n	801beb4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801be60:	69bb      	ldr	r3, [r7, #24]
 801be62:	3304      	adds	r3, #4
 801be64:	4618      	mov	r0, r3
 801be66:	f7fe f85d 	bl	8019f24 <uxListRemove>
 801be6a:	4603      	mov	r3, r0
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d10a      	bne.n	801be86 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801be70:	69bb      	ldr	r3, [r7, #24]
 801be72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be74:	2201      	movs	r2, #1
 801be76:	fa02 f303 	lsl.w	r3, r2, r3
 801be7a:	43da      	mvns	r2, r3
 801be7c:	4b11      	ldr	r3, [pc, #68]	; (801bec4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	4013      	ands	r3, r2
 801be82:	4a10      	ldr	r2, [pc, #64]	; (801bec4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801be84:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801be86:	69bb      	ldr	r3, [r7, #24]
 801be88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be8a:	2201      	movs	r2, #1
 801be8c:	409a      	lsls	r2, r3
 801be8e:	4b0d      	ldr	r3, [pc, #52]	; (801bec4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	4313      	orrs	r3, r2
 801be94:	4a0b      	ldr	r2, [pc, #44]	; (801bec4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801be96:	6013      	str	r3, [r2, #0]
 801be98:	69bb      	ldr	r3, [r7, #24]
 801be9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be9c:	4613      	mov	r3, r2
 801be9e:	009b      	lsls	r3, r3, #2
 801bea0:	4413      	add	r3, r2
 801bea2:	009b      	lsls	r3, r3, #2
 801bea4:	4a06      	ldr	r2, [pc, #24]	; (801bec0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801bea6:	441a      	add	r2, r3
 801bea8:	69bb      	ldr	r3, [r7, #24]
 801beaa:	3304      	adds	r3, #4
 801beac:	4619      	mov	r1, r3
 801beae:	4610      	mov	r0, r2
 801beb0:	f7fd ffdb 	bl	8019e6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801beb4:	bf00      	nop
 801beb6:	3720      	adds	r7, #32
 801beb8:	46bd      	mov	sp, r7
 801beba:	bd80      	pop	{r7, pc}
 801bebc:	20000764 	.word	0x20000764
 801bec0:	20000768 	.word	0x20000768
 801bec4:	2000086c 	.word	0x2000086c

0801bec8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801bec8:	b480      	push	{r7}
 801beca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801becc:	4b07      	ldr	r3, [pc, #28]	; (801beec <pvTaskIncrementMutexHeldCount+0x24>)
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d004      	beq.n	801bede <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801bed4:	4b05      	ldr	r3, [pc, #20]	; (801beec <pvTaskIncrementMutexHeldCount+0x24>)
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801beda:	3201      	adds	r2, #1
 801bedc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801bede:	4b03      	ldr	r3, [pc, #12]	; (801beec <pvTaskIncrementMutexHeldCount+0x24>)
 801bee0:	681b      	ldr	r3, [r3, #0]
	}
 801bee2:	4618      	mov	r0, r3
 801bee4:	46bd      	mov	sp, r7
 801bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beea:	4770      	bx	lr
 801beec:	20000764 	.word	0x20000764

0801bef0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801bef0:	b580      	push	{r7, lr}
 801bef2:	b084      	sub	sp, #16
 801bef4:	af00      	add	r7, sp, #0
 801bef6:	6078      	str	r0, [r7, #4]
 801bef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801befa:	4b29      	ldr	r3, [pc, #164]	; (801bfa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bf00:	4b28      	ldr	r3, [pc, #160]	; (801bfa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	3304      	adds	r3, #4
 801bf06:	4618      	mov	r0, r3
 801bf08:	f7fe f80c 	bl	8019f24 <uxListRemove>
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d10b      	bne.n	801bf2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801bf12:	4b24      	ldr	r3, [pc, #144]	; (801bfa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf18:	2201      	movs	r2, #1
 801bf1a:	fa02 f303 	lsl.w	r3, r2, r3
 801bf1e:	43da      	mvns	r2, r3
 801bf20:	4b21      	ldr	r3, [pc, #132]	; (801bfa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	4013      	ands	r3, r2
 801bf26:	4a20      	ldr	r2, [pc, #128]	; (801bfa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 801bf28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf30:	d10a      	bne.n	801bf48 <prvAddCurrentTaskToDelayedList+0x58>
 801bf32:	683b      	ldr	r3, [r7, #0]
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d007      	beq.n	801bf48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bf38:	4b1a      	ldr	r3, [pc, #104]	; (801bfa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	3304      	adds	r3, #4
 801bf3e:	4619      	mov	r1, r3
 801bf40:	481a      	ldr	r0, [pc, #104]	; (801bfac <prvAddCurrentTaskToDelayedList+0xbc>)
 801bf42:	f7fd ff92 	bl	8019e6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801bf46:	e026      	b.n	801bf96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801bf48:	68fa      	ldr	r2, [r7, #12]
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	4413      	add	r3, r2
 801bf4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801bf50:	4b14      	ldr	r3, [pc, #80]	; (801bfa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	68ba      	ldr	r2, [r7, #8]
 801bf56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801bf58:	68ba      	ldr	r2, [r7, #8]
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	429a      	cmp	r2, r3
 801bf5e:	d209      	bcs.n	801bf74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bf60:	4b13      	ldr	r3, [pc, #76]	; (801bfb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 801bf62:	681a      	ldr	r2, [r3, #0]
 801bf64:	4b0f      	ldr	r3, [pc, #60]	; (801bfa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	3304      	adds	r3, #4
 801bf6a:	4619      	mov	r1, r3
 801bf6c:	4610      	mov	r0, r2
 801bf6e:	f7fd ffa0 	bl	8019eb2 <vListInsert>
}
 801bf72:	e010      	b.n	801bf96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bf74:	4b0f      	ldr	r3, [pc, #60]	; (801bfb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 801bf76:	681a      	ldr	r2, [r3, #0]
 801bf78:	4b0a      	ldr	r3, [pc, #40]	; (801bfa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801bf7a:	681b      	ldr	r3, [r3, #0]
 801bf7c:	3304      	adds	r3, #4
 801bf7e:	4619      	mov	r1, r3
 801bf80:	4610      	mov	r0, r2
 801bf82:	f7fd ff96 	bl	8019eb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801bf86:	4b0c      	ldr	r3, [pc, #48]	; (801bfb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	68ba      	ldr	r2, [r7, #8]
 801bf8c:	429a      	cmp	r2, r3
 801bf8e:	d202      	bcs.n	801bf96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801bf90:	4a09      	ldr	r2, [pc, #36]	; (801bfb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 801bf92:	68bb      	ldr	r3, [r7, #8]
 801bf94:	6013      	str	r3, [r2, #0]
}
 801bf96:	bf00      	nop
 801bf98:	3710      	adds	r7, #16
 801bf9a:	46bd      	mov	sp, r7
 801bf9c:	bd80      	pop	{r7, pc}
 801bf9e:	bf00      	nop
 801bfa0:	20000868 	.word	0x20000868
 801bfa4:	20000764 	.word	0x20000764
 801bfa8:	2000086c 	.word	0x2000086c
 801bfac:	20000850 	.word	0x20000850
 801bfb0:	20000820 	.word	0x20000820
 801bfb4:	2000081c 	.word	0x2000081c
 801bfb8:	20000884 	.word	0x20000884

0801bfbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801bfbc:	b580      	push	{r7, lr}
 801bfbe:	b08a      	sub	sp, #40	; 0x28
 801bfc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801bfc2:	2300      	movs	r3, #0
 801bfc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801bfc6:	f000 faeb 	bl	801c5a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801bfca:	4b1c      	ldr	r3, [pc, #112]	; (801c03c <xTimerCreateTimerTask+0x80>)
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d021      	beq.n	801c016 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801bfda:	1d3a      	adds	r2, r7, #4
 801bfdc:	f107 0108 	add.w	r1, r7, #8
 801bfe0:	f107 030c 	add.w	r3, r7, #12
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	f7f8 faa1 	bl	801452c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801bfea:	6879      	ldr	r1, [r7, #4]
 801bfec:	68bb      	ldr	r3, [r7, #8]
 801bfee:	68fa      	ldr	r2, [r7, #12]
 801bff0:	9202      	str	r2, [sp, #8]
 801bff2:	9301      	str	r3, [sp, #4]
 801bff4:	2302      	movs	r3, #2
 801bff6:	9300      	str	r3, [sp, #0]
 801bff8:	2300      	movs	r3, #0
 801bffa:	460a      	mov	r2, r1
 801bffc:	4910      	ldr	r1, [pc, #64]	; (801c040 <xTimerCreateTimerTask+0x84>)
 801bffe:	4811      	ldr	r0, [pc, #68]	; (801c044 <xTimerCreateTimerTask+0x88>)
 801c000:	f7fe fe00 	bl	801ac04 <xTaskCreateStatic>
 801c004:	4603      	mov	r3, r0
 801c006:	4a10      	ldr	r2, [pc, #64]	; (801c048 <xTimerCreateTimerTask+0x8c>)
 801c008:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801c00a:	4b0f      	ldr	r3, [pc, #60]	; (801c048 <xTimerCreateTimerTask+0x8c>)
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d001      	beq.n	801c016 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801c012:	2301      	movs	r3, #1
 801c014:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801c016:	697b      	ldr	r3, [r7, #20]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d10a      	bne.n	801c032 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c020:	f383 8811 	msr	BASEPRI, r3
 801c024:	f3bf 8f6f 	isb	sy
 801c028:	f3bf 8f4f 	dsb	sy
 801c02c:	613b      	str	r3, [r7, #16]
}
 801c02e:	bf00      	nop
 801c030:	e7fe      	b.n	801c030 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801c032:	697b      	ldr	r3, [r7, #20]
}
 801c034:	4618      	mov	r0, r3
 801c036:	3718      	adds	r7, #24
 801c038:	46bd      	mov	sp, r7
 801c03a:	bd80      	pop	{r7, pc}
 801c03c:	200008c0 	.word	0x200008c0
 801c040:	0801d254 	.word	0x0801d254
 801c044:	0801c181 	.word	0x0801c181
 801c048:	200008c4 	.word	0x200008c4

0801c04c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b08a      	sub	sp, #40	; 0x28
 801c050:	af00      	add	r7, sp, #0
 801c052:	60f8      	str	r0, [r7, #12]
 801c054:	60b9      	str	r1, [r7, #8]
 801c056:	607a      	str	r2, [r7, #4]
 801c058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801c05a:	2300      	movs	r3, #0
 801c05c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	2b00      	cmp	r3, #0
 801c062:	d10a      	bne.n	801c07a <xTimerGenericCommand+0x2e>
	__asm volatile
 801c064:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c068:	f383 8811 	msr	BASEPRI, r3
 801c06c:	f3bf 8f6f 	isb	sy
 801c070:	f3bf 8f4f 	dsb	sy
 801c074:	623b      	str	r3, [r7, #32]
}
 801c076:	bf00      	nop
 801c078:	e7fe      	b.n	801c078 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801c07a:	4b1a      	ldr	r3, [pc, #104]	; (801c0e4 <xTimerGenericCommand+0x98>)
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d02a      	beq.n	801c0d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801c082:	68bb      	ldr	r3, [r7, #8]
 801c084:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801c08e:	68bb      	ldr	r3, [r7, #8]
 801c090:	2b05      	cmp	r3, #5
 801c092:	dc18      	bgt.n	801c0c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801c094:	f7ff fd70 	bl	801bb78 <xTaskGetSchedulerState>
 801c098:	4603      	mov	r3, r0
 801c09a:	2b02      	cmp	r3, #2
 801c09c:	d109      	bne.n	801c0b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801c09e:	4b11      	ldr	r3, [pc, #68]	; (801c0e4 <xTimerGenericCommand+0x98>)
 801c0a0:	6818      	ldr	r0, [r3, #0]
 801c0a2:	f107 0114 	add.w	r1, r7, #20
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0aa:	f7fe f89f 	bl	801a1ec <xQueueGenericSend>
 801c0ae:	6278      	str	r0, [r7, #36]	; 0x24
 801c0b0:	e012      	b.n	801c0d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801c0b2:	4b0c      	ldr	r3, [pc, #48]	; (801c0e4 <xTimerGenericCommand+0x98>)
 801c0b4:	6818      	ldr	r0, [r3, #0]
 801c0b6:	f107 0114 	add.w	r1, r7, #20
 801c0ba:	2300      	movs	r3, #0
 801c0bc:	2200      	movs	r2, #0
 801c0be:	f7fe f895 	bl	801a1ec <xQueueGenericSend>
 801c0c2:	6278      	str	r0, [r7, #36]	; 0x24
 801c0c4:	e008      	b.n	801c0d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801c0c6:	4b07      	ldr	r3, [pc, #28]	; (801c0e4 <xTimerGenericCommand+0x98>)
 801c0c8:	6818      	ldr	r0, [r3, #0]
 801c0ca:	f107 0114 	add.w	r1, r7, #20
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	683a      	ldr	r2, [r7, #0]
 801c0d2:	f7fe f989 	bl	801a3e8 <xQueueGenericSendFromISR>
 801c0d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801c0da:	4618      	mov	r0, r3
 801c0dc:	3728      	adds	r7, #40	; 0x28
 801c0de:	46bd      	mov	sp, r7
 801c0e0:	bd80      	pop	{r7, pc}
 801c0e2:	bf00      	nop
 801c0e4:	200008c0 	.word	0x200008c0

0801c0e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801c0e8:	b580      	push	{r7, lr}
 801c0ea:	b088      	sub	sp, #32
 801c0ec:	af02      	add	r7, sp, #8
 801c0ee:	6078      	str	r0, [r7, #4]
 801c0f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c0f2:	4b22      	ldr	r3, [pc, #136]	; (801c17c <prvProcessExpiredTimer+0x94>)
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	68db      	ldr	r3, [r3, #12]
 801c0f8:	68db      	ldr	r3, [r3, #12]
 801c0fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c0fc:	697b      	ldr	r3, [r7, #20]
 801c0fe:	3304      	adds	r3, #4
 801c100:	4618      	mov	r0, r3
 801c102:	f7fd ff0f 	bl	8019f24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c106:	697b      	ldr	r3, [r7, #20]
 801c108:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c10c:	f003 0304 	and.w	r3, r3, #4
 801c110:	2b00      	cmp	r3, #0
 801c112:	d022      	beq.n	801c15a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801c114:	697b      	ldr	r3, [r7, #20]
 801c116:	699a      	ldr	r2, [r3, #24]
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	18d1      	adds	r1, r2, r3
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	683a      	ldr	r2, [r7, #0]
 801c120:	6978      	ldr	r0, [r7, #20]
 801c122:	f000 f8d1 	bl	801c2c8 <prvInsertTimerInActiveList>
 801c126:	4603      	mov	r3, r0
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d01f      	beq.n	801c16c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c12c:	2300      	movs	r3, #0
 801c12e:	9300      	str	r3, [sp, #0]
 801c130:	2300      	movs	r3, #0
 801c132:	687a      	ldr	r2, [r7, #4]
 801c134:	2100      	movs	r1, #0
 801c136:	6978      	ldr	r0, [r7, #20]
 801c138:	f7ff ff88 	bl	801c04c <xTimerGenericCommand>
 801c13c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801c13e:	693b      	ldr	r3, [r7, #16]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d113      	bne.n	801c16c <prvProcessExpiredTimer+0x84>
	__asm volatile
 801c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c148:	f383 8811 	msr	BASEPRI, r3
 801c14c:	f3bf 8f6f 	isb	sy
 801c150:	f3bf 8f4f 	dsb	sy
 801c154:	60fb      	str	r3, [r7, #12]
}
 801c156:	bf00      	nop
 801c158:	e7fe      	b.n	801c158 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c15a:	697b      	ldr	r3, [r7, #20]
 801c15c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c160:	f023 0301 	bic.w	r3, r3, #1
 801c164:	b2da      	uxtb	r2, r3
 801c166:	697b      	ldr	r3, [r7, #20]
 801c168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c16c:	697b      	ldr	r3, [r7, #20]
 801c16e:	6a1b      	ldr	r3, [r3, #32]
 801c170:	6978      	ldr	r0, [r7, #20]
 801c172:	4798      	blx	r3
}
 801c174:	bf00      	nop
 801c176:	3718      	adds	r7, #24
 801c178:	46bd      	mov	sp, r7
 801c17a:	bd80      	pop	{r7, pc}
 801c17c:	200008b8 	.word	0x200008b8

0801c180 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801c180:	b580      	push	{r7, lr}
 801c182:	b084      	sub	sp, #16
 801c184:	af00      	add	r7, sp, #0
 801c186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c188:	f107 0308 	add.w	r3, r7, #8
 801c18c:	4618      	mov	r0, r3
 801c18e:	f000 f857 	bl	801c240 <prvGetNextExpireTime>
 801c192:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801c194:	68bb      	ldr	r3, [r7, #8]
 801c196:	4619      	mov	r1, r3
 801c198:	68f8      	ldr	r0, [r7, #12]
 801c19a:	f000 f803 	bl	801c1a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801c19e:	f000 f8d5 	bl	801c34c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801c1a2:	e7f1      	b.n	801c188 <prvTimerTask+0x8>

0801c1a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801c1a4:	b580      	push	{r7, lr}
 801c1a6:	b084      	sub	sp, #16
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	6078      	str	r0, [r7, #4]
 801c1ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801c1ae:	f7ff f909 	bl	801b3c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c1b2:	f107 0308 	add.w	r3, r7, #8
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	f000 f866 	bl	801c288 <prvSampleTimeNow>
 801c1bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801c1be:	68bb      	ldr	r3, [r7, #8]
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d130      	bne.n	801c226 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801c1c4:	683b      	ldr	r3, [r7, #0]
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d10a      	bne.n	801c1e0 <prvProcessTimerOrBlockTask+0x3c>
 801c1ca:	687a      	ldr	r2, [r7, #4]
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	429a      	cmp	r2, r3
 801c1d0:	d806      	bhi.n	801c1e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801c1d2:	f7ff f905 	bl	801b3e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801c1d6:	68f9      	ldr	r1, [r7, #12]
 801c1d8:	6878      	ldr	r0, [r7, #4]
 801c1da:	f7ff ff85 	bl	801c0e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801c1de:	e024      	b.n	801c22a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801c1e0:	683b      	ldr	r3, [r7, #0]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d008      	beq.n	801c1f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801c1e6:	4b13      	ldr	r3, [pc, #76]	; (801c234 <prvProcessTimerOrBlockTask+0x90>)
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d101      	bne.n	801c1f4 <prvProcessTimerOrBlockTask+0x50>
 801c1f0:	2301      	movs	r3, #1
 801c1f2:	e000      	b.n	801c1f6 <prvProcessTimerOrBlockTask+0x52>
 801c1f4:	2300      	movs	r3, #0
 801c1f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801c1f8:	4b0f      	ldr	r3, [pc, #60]	; (801c238 <prvProcessTimerOrBlockTask+0x94>)
 801c1fa:	6818      	ldr	r0, [r3, #0]
 801c1fc:	687a      	ldr	r2, [r7, #4]
 801c1fe:	68fb      	ldr	r3, [r7, #12]
 801c200:	1ad3      	subs	r3, r2, r3
 801c202:	683a      	ldr	r2, [r7, #0]
 801c204:	4619      	mov	r1, r3
 801c206:	f7fe fcc9 	bl	801ab9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801c20a:	f7ff f8e9 	bl	801b3e0 <xTaskResumeAll>
 801c20e:	4603      	mov	r3, r0
 801c210:	2b00      	cmp	r3, #0
 801c212:	d10a      	bne.n	801c22a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801c214:	4b09      	ldr	r3, [pc, #36]	; (801c23c <prvProcessTimerOrBlockTask+0x98>)
 801c216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c21a:	601a      	str	r2, [r3, #0]
 801c21c:	f3bf 8f4f 	dsb	sy
 801c220:	f3bf 8f6f 	isb	sy
}
 801c224:	e001      	b.n	801c22a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801c226:	f7ff f8db 	bl	801b3e0 <xTaskResumeAll>
}
 801c22a:	bf00      	nop
 801c22c:	3710      	adds	r7, #16
 801c22e:	46bd      	mov	sp, r7
 801c230:	bd80      	pop	{r7, pc}
 801c232:	bf00      	nop
 801c234:	200008bc 	.word	0x200008bc
 801c238:	200008c0 	.word	0x200008c0
 801c23c:	e000ed04 	.word	0xe000ed04

0801c240 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801c240:	b480      	push	{r7}
 801c242:	b085      	sub	sp, #20
 801c244:	af00      	add	r7, sp, #0
 801c246:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801c248:	4b0e      	ldr	r3, [pc, #56]	; (801c284 <prvGetNextExpireTime+0x44>)
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d101      	bne.n	801c256 <prvGetNextExpireTime+0x16>
 801c252:	2201      	movs	r2, #1
 801c254:	e000      	b.n	801c258 <prvGetNextExpireTime+0x18>
 801c256:	2200      	movs	r2, #0
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	2b00      	cmp	r3, #0
 801c262:	d105      	bne.n	801c270 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c264:	4b07      	ldr	r3, [pc, #28]	; (801c284 <prvGetNextExpireTime+0x44>)
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	68db      	ldr	r3, [r3, #12]
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	60fb      	str	r3, [r7, #12]
 801c26e:	e001      	b.n	801c274 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801c270:	2300      	movs	r3, #0
 801c272:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801c274:	68fb      	ldr	r3, [r7, #12]
}
 801c276:	4618      	mov	r0, r3
 801c278:	3714      	adds	r7, #20
 801c27a:	46bd      	mov	sp, r7
 801c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c280:	4770      	bx	lr
 801c282:	bf00      	nop
 801c284:	200008b8 	.word	0x200008b8

0801c288 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801c288:	b580      	push	{r7, lr}
 801c28a:	b084      	sub	sp, #16
 801c28c:	af00      	add	r7, sp, #0
 801c28e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801c290:	f7ff f942 	bl	801b518 <xTaskGetTickCount>
 801c294:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801c296:	4b0b      	ldr	r3, [pc, #44]	; (801c2c4 <prvSampleTimeNow+0x3c>)
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	68fa      	ldr	r2, [r7, #12]
 801c29c:	429a      	cmp	r2, r3
 801c29e:	d205      	bcs.n	801c2ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801c2a0:	f000 f91a 	bl	801c4d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	2201      	movs	r2, #1
 801c2a8:	601a      	str	r2, [r3, #0]
 801c2aa:	e002      	b.n	801c2b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	2200      	movs	r2, #0
 801c2b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801c2b2:	4a04      	ldr	r2, [pc, #16]	; (801c2c4 <prvSampleTimeNow+0x3c>)
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801c2b8:	68fb      	ldr	r3, [r7, #12]
}
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	3710      	adds	r7, #16
 801c2be:	46bd      	mov	sp, r7
 801c2c0:	bd80      	pop	{r7, pc}
 801c2c2:	bf00      	nop
 801c2c4:	200008c8 	.word	0x200008c8

0801c2c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801c2c8:	b580      	push	{r7, lr}
 801c2ca:	b086      	sub	sp, #24
 801c2cc:	af00      	add	r7, sp, #0
 801c2ce:	60f8      	str	r0, [r7, #12]
 801c2d0:	60b9      	str	r1, [r7, #8]
 801c2d2:	607a      	str	r2, [r7, #4]
 801c2d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801c2da:	68fb      	ldr	r3, [r7, #12]
 801c2dc:	68ba      	ldr	r2, [r7, #8]
 801c2de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	68fa      	ldr	r2, [r7, #12]
 801c2e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801c2e6:	68ba      	ldr	r2, [r7, #8]
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	429a      	cmp	r2, r3
 801c2ec:	d812      	bhi.n	801c314 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c2ee:	687a      	ldr	r2, [r7, #4]
 801c2f0:	683b      	ldr	r3, [r7, #0]
 801c2f2:	1ad2      	subs	r2, r2, r3
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	699b      	ldr	r3, [r3, #24]
 801c2f8:	429a      	cmp	r2, r3
 801c2fa:	d302      	bcc.n	801c302 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801c2fc:	2301      	movs	r3, #1
 801c2fe:	617b      	str	r3, [r7, #20]
 801c300:	e01b      	b.n	801c33a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801c302:	4b10      	ldr	r3, [pc, #64]	; (801c344 <prvInsertTimerInActiveList+0x7c>)
 801c304:	681a      	ldr	r2, [r3, #0]
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	3304      	adds	r3, #4
 801c30a:	4619      	mov	r1, r3
 801c30c:	4610      	mov	r0, r2
 801c30e:	f7fd fdd0 	bl	8019eb2 <vListInsert>
 801c312:	e012      	b.n	801c33a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801c314:	687a      	ldr	r2, [r7, #4]
 801c316:	683b      	ldr	r3, [r7, #0]
 801c318:	429a      	cmp	r2, r3
 801c31a:	d206      	bcs.n	801c32a <prvInsertTimerInActiveList+0x62>
 801c31c:	68ba      	ldr	r2, [r7, #8]
 801c31e:	683b      	ldr	r3, [r7, #0]
 801c320:	429a      	cmp	r2, r3
 801c322:	d302      	bcc.n	801c32a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801c324:	2301      	movs	r3, #1
 801c326:	617b      	str	r3, [r7, #20]
 801c328:	e007      	b.n	801c33a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c32a:	4b07      	ldr	r3, [pc, #28]	; (801c348 <prvInsertTimerInActiveList+0x80>)
 801c32c:	681a      	ldr	r2, [r3, #0]
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	3304      	adds	r3, #4
 801c332:	4619      	mov	r1, r3
 801c334:	4610      	mov	r0, r2
 801c336:	f7fd fdbc 	bl	8019eb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801c33a:	697b      	ldr	r3, [r7, #20]
}
 801c33c:	4618      	mov	r0, r3
 801c33e:	3718      	adds	r7, #24
 801c340:	46bd      	mov	sp, r7
 801c342:	bd80      	pop	{r7, pc}
 801c344:	200008bc 	.word	0x200008bc
 801c348:	200008b8 	.word	0x200008b8

0801c34c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b08c      	sub	sp, #48	; 0x30
 801c350:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c352:	e0ae      	b.n	801c4b2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801c354:	68bb      	ldr	r3, [r7, #8]
 801c356:	2b00      	cmp	r3, #0
 801c358:	f2c0 80aa 	blt.w	801c4b0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801c35c:	693b      	ldr	r3, [r7, #16]
 801c35e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c362:	695b      	ldr	r3, [r3, #20]
 801c364:	2b00      	cmp	r3, #0
 801c366:	d004      	beq.n	801c372 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c36a:	3304      	adds	r3, #4
 801c36c:	4618      	mov	r0, r3
 801c36e:	f7fd fdd9 	bl	8019f24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801c372:	1d3b      	adds	r3, r7, #4
 801c374:	4618      	mov	r0, r3
 801c376:	f7ff ff87 	bl	801c288 <prvSampleTimeNow>
 801c37a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 801c37c:	68bb      	ldr	r3, [r7, #8]
 801c37e:	2b09      	cmp	r3, #9
 801c380:	f200 8097 	bhi.w	801c4b2 <prvProcessReceivedCommands+0x166>
 801c384:	a201      	add	r2, pc, #4	; (adr r2, 801c38c <prvProcessReceivedCommands+0x40>)
 801c386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c38a:	bf00      	nop
 801c38c:	0801c3b5 	.word	0x0801c3b5
 801c390:	0801c3b5 	.word	0x0801c3b5
 801c394:	0801c3b5 	.word	0x0801c3b5
 801c398:	0801c429 	.word	0x0801c429
 801c39c:	0801c43d 	.word	0x0801c43d
 801c3a0:	0801c487 	.word	0x0801c487
 801c3a4:	0801c3b5 	.word	0x0801c3b5
 801c3a8:	0801c3b5 	.word	0x0801c3b5
 801c3ac:	0801c429 	.word	0x0801c429
 801c3b0:	0801c43d 	.word	0x0801c43d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c3ba:	f043 0301 	orr.w	r3, r3, #1
 801c3be:	b2da      	uxtb	r2, r3
 801c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801c3c6:	68fa      	ldr	r2, [r7, #12]
 801c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3ca:	699b      	ldr	r3, [r3, #24]
 801c3cc:	18d1      	adds	r1, r2, r3
 801c3ce:	68fb      	ldr	r3, [r7, #12]
 801c3d0:	6a3a      	ldr	r2, [r7, #32]
 801c3d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c3d4:	f7ff ff78 	bl	801c2c8 <prvInsertTimerInActiveList>
 801c3d8:	4603      	mov	r3, r0
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d069      	beq.n	801c4b2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3e0:	6a1b      	ldr	r3, [r3, #32]
 801c3e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c3e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c3ec:	f003 0304 	and.w	r3, r3, #4
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d05e      	beq.n	801c4b2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801c3f4:	68fa      	ldr	r2, [r7, #12]
 801c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3f8:	699b      	ldr	r3, [r3, #24]
 801c3fa:	441a      	add	r2, r3
 801c3fc:	2300      	movs	r3, #0
 801c3fe:	9300      	str	r3, [sp, #0]
 801c400:	2300      	movs	r3, #0
 801c402:	2100      	movs	r1, #0
 801c404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c406:	f7ff fe21 	bl	801c04c <xTimerGenericCommand>
 801c40a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 801c40c:	69fb      	ldr	r3, [r7, #28]
 801c40e:	2b00      	cmp	r3, #0
 801c410:	d14f      	bne.n	801c4b2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 801c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c416:	f383 8811 	msr	BASEPRI, r3
 801c41a:	f3bf 8f6f 	isb	sy
 801c41e:	f3bf 8f4f 	dsb	sy
 801c422:	61bb      	str	r3, [r7, #24]
}
 801c424:	bf00      	nop
 801c426:	e7fe      	b.n	801c426 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c42a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c42e:	f023 0301 	bic.w	r3, r3, #1
 801c432:	b2da      	uxtb	r2, r3
 801c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 801c43a:	e03a      	b.n	801c4b2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801c43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c43e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c442:	f043 0301 	orr.w	r3, r3, #1
 801c446:	b2da      	uxtb	r2, r3
 801c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c44a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801c44e:	68fa      	ldr	r2, [r7, #12]
 801c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c452:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c456:	699b      	ldr	r3, [r3, #24]
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d10a      	bne.n	801c472 <prvProcessReceivedCommands+0x126>
	__asm volatile
 801c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c460:	f383 8811 	msr	BASEPRI, r3
 801c464:	f3bf 8f6f 	isb	sy
 801c468:	f3bf 8f4f 	dsb	sy
 801c46c:	617b      	str	r3, [r7, #20]
}
 801c46e:	bf00      	nop
 801c470:	e7fe      	b.n	801c470 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c474:	699a      	ldr	r2, [r3, #24]
 801c476:	6a3b      	ldr	r3, [r7, #32]
 801c478:	18d1      	adds	r1, r2, r3
 801c47a:	6a3b      	ldr	r3, [r7, #32]
 801c47c:	6a3a      	ldr	r2, [r7, #32]
 801c47e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c480:	f7ff ff22 	bl	801c2c8 <prvInsertTimerInActiveList>
					break;
 801c484:	e015      	b.n	801c4b2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801c486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c48c:	f003 0302 	and.w	r3, r3, #2
 801c490:	2b00      	cmp	r3, #0
 801c492:	d103      	bne.n	801c49c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 801c494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c496:	f000 fbdb 	bl	801cc50 <vPortFree>
 801c49a:	e00a      	b.n	801c4b2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c49e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c4a2:	f023 0301 	bic.w	r3, r3, #1
 801c4a6:	b2da      	uxtb	r2, r3
 801c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801c4ae:	e000      	b.n	801c4b2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801c4b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801c4b2:	4b08      	ldr	r3, [pc, #32]	; (801c4d4 <prvProcessReceivedCommands+0x188>)
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	f107 0108 	add.w	r1, r7, #8
 801c4ba:	2200      	movs	r2, #0
 801c4bc:	4618      	mov	r0, r3
 801c4be:	f7fe f82f 	bl	801a520 <xQueueReceive>
 801c4c2:	4603      	mov	r3, r0
 801c4c4:	2b00      	cmp	r3, #0
 801c4c6:	f47f af45 	bne.w	801c354 <prvProcessReceivedCommands+0x8>
	}
}
 801c4ca:	bf00      	nop
 801c4cc:	bf00      	nop
 801c4ce:	3728      	adds	r7, #40	; 0x28
 801c4d0:	46bd      	mov	sp, r7
 801c4d2:	bd80      	pop	{r7, pc}
 801c4d4:	200008c0 	.word	0x200008c0

0801c4d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801c4d8:	b580      	push	{r7, lr}
 801c4da:	b088      	sub	sp, #32
 801c4dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c4de:	e048      	b.n	801c572 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801c4e0:	4b2d      	ldr	r3, [pc, #180]	; (801c598 <prvSwitchTimerLists+0xc0>)
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	68db      	ldr	r3, [r3, #12]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c4ea:	4b2b      	ldr	r3, [pc, #172]	; (801c598 <prvSwitchTimerLists+0xc0>)
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	68db      	ldr	r3, [r3, #12]
 801c4f0:	68db      	ldr	r3, [r3, #12]
 801c4f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	3304      	adds	r3, #4
 801c4f8:	4618      	mov	r0, r3
 801c4fa:	f7fd fd13 	bl	8019f24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801c4fe:	68fb      	ldr	r3, [r7, #12]
 801c500:	6a1b      	ldr	r3, [r3, #32]
 801c502:	68f8      	ldr	r0, [r7, #12]
 801c504:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c50c:	f003 0304 	and.w	r3, r3, #4
 801c510:	2b00      	cmp	r3, #0
 801c512:	d02e      	beq.n	801c572 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	699b      	ldr	r3, [r3, #24]
 801c518:	693a      	ldr	r2, [r7, #16]
 801c51a:	4413      	add	r3, r2
 801c51c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801c51e:	68ba      	ldr	r2, [r7, #8]
 801c520:	693b      	ldr	r3, [r7, #16]
 801c522:	429a      	cmp	r2, r3
 801c524:	d90e      	bls.n	801c544 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	68ba      	ldr	r2, [r7, #8]
 801c52a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801c52c:	68fb      	ldr	r3, [r7, #12]
 801c52e:	68fa      	ldr	r2, [r7, #12]
 801c530:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801c532:	4b19      	ldr	r3, [pc, #100]	; (801c598 <prvSwitchTimerLists+0xc0>)
 801c534:	681a      	ldr	r2, [r3, #0]
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	3304      	adds	r3, #4
 801c53a:	4619      	mov	r1, r3
 801c53c:	4610      	mov	r0, r2
 801c53e:	f7fd fcb8 	bl	8019eb2 <vListInsert>
 801c542:	e016      	b.n	801c572 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801c544:	2300      	movs	r3, #0
 801c546:	9300      	str	r3, [sp, #0]
 801c548:	2300      	movs	r3, #0
 801c54a:	693a      	ldr	r2, [r7, #16]
 801c54c:	2100      	movs	r1, #0
 801c54e:	68f8      	ldr	r0, [r7, #12]
 801c550:	f7ff fd7c 	bl	801c04c <xTimerGenericCommand>
 801c554:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d10a      	bne.n	801c572 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801c55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c560:	f383 8811 	msr	BASEPRI, r3
 801c564:	f3bf 8f6f 	isb	sy
 801c568:	f3bf 8f4f 	dsb	sy
 801c56c:	603b      	str	r3, [r7, #0]
}
 801c56e:	bf00      	nop
 801c570:	e7fe      	b.n	801c570 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801c572:	4b09      	ldr	r3, [pc, #36]	; (801c598 <prvSwitchTimerLists+0xc0>)
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d1b1      	bne.n	801c4e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801c57c:	4b06      	ldr	r3, [pc, #24]	; (801c598 <prvSwitchTimerLists+0xc0>)
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801c582:	4b06      	ldr	r3, [pc, #24]	; (801c59c <prvSwitchTimerLists+0xc4>)
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	4a04      	ldr	r2, [pc, #16]	; (801c598 <prvSwitchTimerLists+0xc0>)
 801c588:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801c58a:	4a04      	ldr	r2, [pc, #16]	; (801c59c <prvSwitchTimerLists+0xc4>)
 801c58c:	697b      	ldr	r3, [r7, #20]
 801c58e:	6013      	str	r3, [r2, #0]
}
 801c590:	bf00      	nop
 801c592:	3718      	adds	r7, #24
 801c594:	46bd      	mov	sp, r7
 801c596:	bd80      	pop	{r7, pc}
 801c598:	200008b8 	.word	0x200008b8
 801c59c:	200008bc 	.word	0x200008bc

0801c5a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801c5a0:	b580      	push	{r7, lr}
 801c5a2:	b082      	sub	sp, #8
 801c5a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801c5a6:	f000 f965 	bl	801c874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801c5aa:	4b15      	ldr	r3, [pc, #84]	; (801c600 <prvCheckForValidListAndQueue+0x60>)
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d120      	bne.n	801c5f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c5b2:	4814      	ldr	r0, [pc, #80]	; (801c604 <prvCheckForValidListAndQueue+0x64>)
 801c5b4:	f7fd fc2c 	bl	8019e10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c5b8:	4813      	ldr	r0, [pc, #76]	; (801c608 <prvCheckForValidListAndQueue+0x68>)
 801c5ba:	f7fd fc29 	bl	8019e10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c5be:	4b13      	ldr	r3, [pc, #76]	; (801c60c <prvCheckForValidListAndQueue+0x6c>)
 801c5c0:	4a10      	ldr	r2, [pc, #64]	; (801c604 <prvCheckForValidListAndQueue+0x64>)
 801c5c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c5c4:	4b12      	ldr	r3, [pc, #72]	; (801c610 <prvCheckForValidListAndQueue+0x70>)
 801c5c6:	4a10      	ldr	r2, [pc, #64]	; (801c608 <prvCheckForValidListAndQueue+0x68>)
 801c5c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	9300      	str	r3, [sp, #0]
 801c5ce:	4b11      	ldr	r3, [pc, #68]	; (801c614 <prvCheckForValidListAndQueue+0x74>)
 801c5d0:	4a11      	ldr	r2, [pc, #68]	; (801c618 <prvCheckForValidListAndQueue+0x78>)
 801c5d2:	210c      	movs	r1, #12
 801c5d4:	200a      	movs	r0, #10
 801c5d6:	f7fd fd37 	bl	801a048 <xQueueGenericCreateStatic>
 801c5da:	4603      	mov	r3, r0
 801c5dc:	4a08      	ldr	r2, [pc, #32]	; (801c600 <prvCheckForValidListAndQueue+0x60>)
 801c5de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c5e0:	4b07      	ldr	r3, [pc, #28]	; (801c600 <prvCheckForValidListAndQueue+0x60>)
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d005      	beq.n	801c5f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c5e8:	4b05      	ldr	r3, [pc, #20]	; (801c600 <prvCheckForValidListAndQueue+0x60>)
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	490b      	ldr	r1, [pc, #44]	; (801c61c <prvCheckForValidListAndQueue+0x7c>)
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	f7fe faaa 	bl	801ab48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c5f4:	f000 f96e 	bl	801c8d4 <vPortExitCritical>
}
 801c5f8:	bf00      	nop
 801c5fa:	46bd      	mov	sp, r7
 801c5fc:	bd80      	pop	{r7, pc}
 801c5fe:	bf00      	nop
 801c600:	200008c0 	.word	0x200008c0
 801c604:	20000890 	.word	0x20000890
 801c608:	200008a4 	.word	0x200008a4
 801c60c:	200008b8 	.word	0x200008b8
 801c610:	200008bc 	.word	0x200008bc
 801c614:	20000944 	.word	0x20000944
 801c618:	200008cc 	.word	0x200008cc
 801c61c:	0801d25c 	.word	0x0801d25c

0801c620 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c620:	b480      	push	{r7}
 801c622:	b085      	sub	sp, #20
 801c624:	af00      	add	r7, sp, #0
 801c626:	60f8      	str	r0, [r7, #12]
 801c628:	60b9      	str	r1, [r7, #8]
 801c62a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	3b04      	subs	r3, #4
 801c630:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	3b04      	subs	r3, #4
 801c63e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c640:	68bb      	ldr	r3, [r7, #8]
 801c642:	f023 0201 	bic.w	r2, r3, #1
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	3b04      	subs	r3, #4
 801c64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c650:	4a0c      	ldr	r2, [pc, #48]	; (801c684 <pxPortInitialiseStack+0x64>)
 801c652:	68fb      	ldr	r3, [r7, #12]
 801c654:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	3b14      	subs	r3, #20
 801c65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c65c:	687a      	ldr	r2, [r7, #4]
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	3b04      	subs	r3, #4
 801c666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	f06f 0202 	mvn.w	r2, #2
 801c66e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c670:	68fb      	ldr	r3, [r7, #12]
 801c672:	3b20      	subs	r3, #32
 801c674:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c676:	68fb      	ldr	r3, [r7, #12]
}
 801c678:	4618      	mov	r0, r3
 801c67a:	3714      	adds	r7, #20
 801c67c:	46bd      	mov	sp, r7
 801c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c682:	4770      	bx	lr
 801c684:	0801c689 	.word	0x0801c689

0801c688 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c688:	b480      	push	{r7}
 801c68a:	b085      	sub	sp, #20
 801c68c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c68e:	2300      	movs	r3, #0
 801c690:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c692:	4b12      	ldr	r3, [pc, #72]	; (801c6dc <prvTaskExitError+0x54>)
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c69a:	d00a      	beq.n	801c6b2 <prvTaskExitError+0x2a>
	__asm volatile
 801c69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6a0:	f383 8811 	msr	BASEPRI, r3
 801c6a4:	f3bf 8f6f 	isb	sy
 801c6a8:	f3bf 8f4f 	dsb	sy
 801c6ac:	60fb      	str	r3, [r7, #12]
}
 801c6ae:	bf00      	nop
 801c6b0:	e7fe      	b.n	801c6b0 <prvTaskExitError+0x28>
	__asm volatile
 801c6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6b6:	f383 8811 	msr	BASEPRI, r3
 801c6ba:	f3bf 8f6f 	isb	sy
 801c6be:	f3bf 8f4f 	dsb	sy
 801c6c2:	60bb      	str	r3, [r7, #8]
}
 801c6c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c6c6:	bf00      	nop
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d0fc      	beq.n	801c6c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c6ce:	bf00      	nop
 801c6d0:	bf00      	nop
 801c6d2:	3714      	adds	r7, #20
 801c6d4:	46bd      	mov	sp, r7
 801c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6da:	4770      	bx	lr
 801c6dc:	2000006c 	.word	0x2000006c

0801c6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c6e0:	4b07      	ldr	r3, [pc, #28]	; (801c700 <pxCurrentTCBConst2>)
 801c6e2:	6819      	ldr	r1, [r3, #0]
 801c6e4:	6808      	ldr	r0, [r1, #0]
 801c6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6ea:	f380 8809 	msr	PSP, r0
 801c6ee:	f3bf 8f6f 	isb	sy
 801c6f2:	f04f 0000 	mov.w	r0, #0
 801c6f6:	f380 8811 	msr	BASEPRI, r0
 801c6fa:	4770      	bx	lr
 801c6fc:	f3af 8000 	nop.w

0801c700 <pxCurrentTCBConst2>:
 801c700:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c704:	bf00      	nop
 801c706:	bf00      	nop

0801c708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c708:	4808      	ldr	r0, [pc, #32]	; (801c72c <prvPortStartFirstTask+0x24>)
 801c70a:	6800      	ldr	r0, [r0, #0]
 801c70c:	6800      	ldr	r0, [r0, #0]
 801c70e:	f380 8808 	msr	MSP, r0
 801c712:	f04f 0000 	mov.w	r0, #0
 801c716:	f380 8814 	msr	CONTROL, r0
 801c71a:	b662      	cpsie	i
 801c71c:	b661      	cpsie	f
 801c71e:	f3bf 8f4f 	dsb	sy
 801c722:	f3bf 8f6f 	isb	sy
 801c726:	df00      	svc	0
 801c728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c72a:	bf00      	nop
 801c72c:	e000ed08 	.word	0xe000ed08

0801c730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c730:	b580      	push	{r7, lr}
 801c732:	b086      	sub	sp, #24
 801c734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c736:	4b46      	ldr	r3, [pc, #280]	; (801c850 <xPortStartScheduler+0x120>)
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	4a46      	ldr	r2, [pc, #280]	; (801c854 <xPortStartScheduler+0x124>)
 801c73c:	4293      	cmp	r3, r2
 801c73e:	d10a      	bne.n	801c756 <xPortStartScheduler+0x26>
	__asm volatile
 801c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c744:	f383 8811 	msr	BASEPRI, r3
 801c748:	f3bf 8f6f 	isb	sy
 801c74c:	f3bf 8f4f 	dsb	sy
 801c750:	613b      	str	r3, [r7, #16]
}
 801c752:	bf00      	nop
 801c754:	e7fe      	b.n	801c754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c756:	4b3e      	ldr	r3, [pc, #248]	; (801c850 <xPortStartScheduler+0x120>)
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	4a3f      	ldr	r2, [pc, #252]	; (801c858 <xPortStartScheduler+0x128>)
 801c75c:	4293      	cmp	r3, r2
 801c75e:	d10a      	bne.n	801c776 <xPortStartScheduler+0x46>
	__asm volatile
 801c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c764:	f383 8811 	msr	BASEPRI, r3
 801c768:	f3bf 8f6f 	isb	sy
 801c76c:	f3bf 8f4f 	dsb	sy
 801c770:	60fb      	str	r3, [r7, #12]
}
 801c772:	bf00      	nop
 801c774:	e7fe      	b.n	801c774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c776:	4b39      	ldr	r3, [pc, #228]	; (801c85c <xPortStartScheduler+0x12c>)
 801c778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c77a:	697b      	ldr	r3, [r7, #20]
 801c77c:	781b      	ldrb	r3, [r3, #0]
 801c77e:	b2db      	uxtb	r3, r3
 801c780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c782:	697b      	ldr	r3, [r7, #20]
 801c784:	22ff      	movs	r2, #255	; 0xff
 801c786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c788:	697b      	ldr	r3, [r7, #20]
 801c78a:	781b      	ldrb	r3, [r3, #0]
 801c78c:	b2db      	uxtb	r3, r3
 801c78e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c790:	78fb      	ldrb	r3, [r7, #3]
 801c792:	b2db      	uxtb	r3, r3
 801c794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c798:	b2da      	uxtb	r2, r3
 801c79a:	4b31      	ldr	r3, [pc, #196]	; (801c860 <xPortStartScheduler+0x130>)
 801c79c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c79e:	4b31      	ldr	r3, [pc, #196]	; (801c864 <xPortStartScheduler+0x134>)
 801c7a0:	2207      	movs	r2, #7
 801c7a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c7a4:	e009      	b.n	801c7ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801c7a6:	4b2f      	ldr	r3, [pc, #188]	; (801c864 <xPortStartScheduler+0x134>)
 801c7a8:	681b      	ldr	r3, [r3, #0]
 801c7aa:	3b01      	subs	r3, #1
 801c7ac:	4a2d      	ldr	r2, [pc, #180]	; (801c864 <xPortStartScheduler+0x134>)
 801c7ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c7b0:	78fb      	ldrb	r3, [r7, #3]
 801c7b2:	b2db      	uxtb	r3, r3
 801c7b4:	005b      	lsls	r3, r3, #1
 801c7b6:	b2db      	uxtb	r3, r3
 801c7b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c7ba:	78fb      	ldrb	r3, [r7, #3]
 801c7bc:	b2db      	uxtb	r3, r3
 801c7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c7c2:	2b80      	cmp	r3, #128	; 0x80
 801c7c4:	d0ef      	beq.n	801c7a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c7c6:	4b27      	ldr	r3, [pc, #156]	; (801c864 <xPortStartScheduler+0x134>)
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	f1c3 0307 	rsb	r3, r3, #7
 801c7ce:	2b04      	cmp	r3, #4
 801c7d0:	d00a      	beq.n	801c7e8 <xPortStartScheduler+0xb8>
	__asm volatile
 801c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c7d6:	f383 8811 	msr	BASEPRI, r3
 801c7da:	f3bf 8f6f 	isb	sy
 801c7de:	f3bf 8f4f 	dsb	sy
 801c7e2:	60bb      	str	r3, [r7, #8]
}
 801c7e4:	bf00      	nop
 801c7e6:	e7fe      	b.n	801c7e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c7e8:	4b1e      	ldr	r3, [pc, #120]	; (801c864 <xPortStartScheduler+0x134>)
 801c7ea:	681b      	ldr	r3, [r3, #0]
 801c7ec:	021b      	lsls	r3, r3, #8
 801c7ee:	4a1d      	ldr	r2, [pc, #116]	; (801c864 <xPortStartScheduler+0x134>)
 801c7f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c7f2:	4b1c      	ldr	r3, [pc, #112]	; (801c864 <xPortStartScheduler+0x134>)
 801c7f4:	681b      	ldr	r3, [r3, #0]
 801c7f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c7fa:	4a1a      	ldr	r2, [pc, #104]	; (801c864 <xPortStartScheduler+0x134>)
 801c7fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	b2da      	uxtb	r2, r3
 801c802:	697b      	ldr	r3, [r7, #20]
 801c804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c806:	4b18      	ldr	r3, [pc, #96]	; (801c868 <xPortStartScheduler+0x138>)
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	4a17      	ldr	r2, [pc, #92]	; (801c868 <xPortStartScheduler+0x138>)
 801c80c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801c810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c812:	4b15      	ldr	r3, [pc, #84]	; (801c868 <xPortStartScheduler+0x138>)
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	4a14      	ldr	r2, [pc, #80]	; (801c868 <xPortStartScheduler+0x138>)
 801c818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801c81c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c81e:	f000 f8dd 	bl	801c9dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c822:	4b12      	ldr	r3, [pc, #72]	; (801c86c <xPortStartScheduler+0x13c>)
 801c824:	2200      	movs	r2, #0
 801c826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c828:	f000 f8fc 	bl	801ca24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c82c:	4b10      	ldr	r3, [pc, #64]	; (801c870 <xPortStartScheduler+0x140>)
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	4a0f      	ldr	r2, [pc, #60]	; (801c870 <xPortStartScheduler+0x140>)
 801c832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801c836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c838:	f7ff ff66 	bl	801c708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c83c:	f7fe ff34 	bl	801b6a8 <vTaskSwitchContext>
	prvTaskExitError();
 801c840:	f7ff ff22 	bl	801c688 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c844:	2300      	movs	r3, #0
}
 801c846:	4618      	mov	r0, r3
 801c848:	3718      	adds	r7, #24
 801c84a:	46bd      	mov	sp, r7
 801c84c:	bd80      	pop	{r7, pc}
 801c84e:	bf00      	nop
 801c850:	e000ed00 	.word	0xe000ed00
 801c854:	410fc271 	.word	0x410fc271
 801c858:	410fc270 	.word	0x410fc270
 801c85c:	e000e400 	.word	0xe000e400
 801c860:	2000098c 	.word	0x2000098c
 801c864:	20000990 	.word	0x20000990
 801c868:	e000ed20 	.word	0xe000ed20
 801c86c:	2000006c 	.word	0x2000006c
 801c870:	e000ef34 	.word	0xe000ef34

0801c874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c874:	b480      	push	{r7}
 801c876:	b083      	sub	sp, #12
 801c878:	af00      	add	r7, sp, #0
	__asm volatile
 801c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c87e:	f383 8811 	msr	BASEPRI, r3
 801c882:	f3bf 8f6f 	isb	sy
 801c886:	f3bf 8f4f 	dsb	sy
 801c88a:	607b      	str	r3, [r7, #4]
}
 801c88c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c88e:	4b0f      	ldr	r3, [pc, #60]	; (801c8cc <vPortEnterCritical+0x58>)
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	3301      	adds	r3, #1
 801c894:	4a0d      	ldr	r2, [pc, #52]	; (801c8cc <vPortEnterCritical+0x58>)
 801c896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c898:	4b0c      	ldr	r3, [pc, #48]	; (801c8cc <vPortEnterCritical+0x58>)
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	2b01      	cmp	r3, #1
 801c89e:	d10f      	bne.n	801c8c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c8a0:	4b0b      	ldr	r3, [pc, #44]	; (801c8d0 <vPortEnterCritical+0x5c>)
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	b2db      	uxtb	r3, r3
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d00a      	beq.n	801c8c0 <vPortEnterCritical+0x4c>
	__asm volatile
 801c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8ae:	f383 8811 	msr	BASEPRI, r3
 801c8b2:	f3bf 8f6f 	isb	sy
 801c8b6:	f3bf 8f4f 	dsb	sy
 801c8ba:	603b      	str	r3, [r7, #0]
}
 801c8bc:	bf00      	nop
 801c8be:	e7fe      	b.n	801c8be <vPortEnterCritical+0x4a>
	}
}
 801c8c0:	bf00      	nop
 801c8c2:	370c      	adds	r7, #12
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8ca:	4770      	bx	lr
 801c8cc:	2000006c 	.word	0x2000006c
 801c8d0:	e000ed04 	.word	0xe000ed04

0801c8d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c8d4:	b480      	push	{r7}
 801c8d6:	b083      	sub	sp, #12
 801c8d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c8da:	4b12      	ldr	r3, [pc, #72]	; (801c924 <vPortExitCritical+0x50>)
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d10a      	bne.n	801c8f8 <vPortExitCritical+0x24>
	__asm volatile
 801c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c8e6:	f383 8811 	msr	BASEPRI, r3
 801c8ea:	f3bf 8f6f 	isb	sy
 801c8ee:	f3bf 8f4f 	dsb	sy
 801c8f2:	607b      	str	r3, [r7, #4]
}
 801c8f4:	bf00      	nop
 801c8f6:	e7fe      	b.n	801c8f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c8f8:	4b0a      	ldr	r3, [pc, #40]	; (801c924 <vPortExitCritical+0x50>)
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	3b01      	subs	r3, #1
 801c8fe:	4a09      	ldr	r2, [pc, #36]	; (801c924 <vPortExitCritical+0x50>)
 801c900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c902:	4b08      	ldr	r3, [pc, #32]	; (801c924 <vPortExitCritical+0x50>)
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	2b00      	cmp	r3, #0
 801c908:	d105      	bne.n	801c916 <vPortExitCritical+0x42>
 801c90a:	2300      	movs	r3, #0
 801c90c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c90e:	683b      	ldr	r3, [r7, #0]
 801c910:	f383 8811 	msr	BASEPRI, r3
}
 801c914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c916:	bf00      	nop
 801c918:	370c      	adds	r7, #12
 801c91a:	46bd      	mov	sp, r7
 801c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c920:	4770      	bx	lr
 801c922:	bf00      	nop
 801c924:	2000006c 	.word	0x2000006c
	...

0801c930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c930:	f3ef 8009 	mrs	r0, PSP
 801c934:	f3bf 8f6f 	isb	sy
 801c938:	4b15      	ldr	r3, [pc, #84]	; (801c990 <pxCurrentTCBConst>)
 801c93a:	681a      	ldr	r2, [r3, #0]
 801c93c:	f01e 0f10 	tst.w	lr, #16
 801c940:	bf08      	it	eq
 801c942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c94a:	6010      	str	r0, [r2, #0]
 801c94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c950:	f04f 0050 	mov.w	r0, #80	; 0x50
 801c954:	f380 8811 	msr	BASEPRI, r0
 801c958:	f3bf 8f4f 	dsb	sy
 801c95c:	f3bf 8f6f 	isb	sy
 801c960:	f7fe fea2 	bl	801b6a8 <vTaskSwitchContext>
 801c964:	f04f 0000 	mov.w	r0, #0
 801c968:	f380 8811 	msr	BASEPRI, r0
 801c96c:	bc09      	pop	{r0, r3}
 801c96e:	6819      	ldr	r1, [r3, #0]
 801c970:	6808      	ldr	r0, [r1, #0]
 801c972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c976:	f01e 0f10 	tst.w	lr, #16
 801c97a:	bf08      	it	eq
 801c97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c980:	f380 8809 	msr	PSP, r0
 801c984:	f3bf 8f6f 	isb	sy
 801c988:	4770      	bx	lr
 801c98a:	bf00      	nop
 801c98c:	f3af 8000 	nop.w

0801c990 <pxCurrentTCBConst>:
 801c990:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c994:	bf00      	nop
 801c996:	bf00      	nop

0801c998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c998:	b580      	push	{r7, lr}
 801c99a:	b082      	sub	sp, #8
 801c99c:	af00      	add	r7, sp, #0
	__asm volatile
 801c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c9a2:	f383 8811 	msr	BASEPRI, r3
 801c9a6:	f3bf 8f6f 	isb	sy
 801c9aa:	f3bf 8f4f 	dsb	sy
 801c9ae:	607b      	str	r3, [r7, #4]
}
 801c9b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c9b2:	f7fe fdc1 	bl	801b538 <xTaskIncrementTick>
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	d003      	beq.n	801c9c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c9bc:	4b06      	ldr	r3, [pc, #24]	; (801c9d8 <SysTick_Handler+0x40>)
 801c9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c9c2:	601a      	str	r2, [r3, #0]
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c9c8:	683b      	ldr	r3, [r7, #0]
 801c9ca:	f383 8811 	msr	BASEPRI, r3
}
 801c9ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c9d0:	bf00      	nop
 801c9d2:	3708      	adds	r7, #8
 801c9d4:	46bd      	mov	sp, r7
 801c9d6:	bd80      	pop	{r7, pc}
 801c9d8:	e000ed04 	.word	0xe000ed04

0801c9dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c9dc:	b480      	push	{r7}
 801c9de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c9e0:	4b0b      	ldr	r3, [pc, #44]	; (801ca10 <vPortSetupTimerInterrupt+0x34>)
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c9e6:	4b0b      	ldr	r3, [pc, #44]	; (801ca14 <vPortSetupTimerInterrupt+0x38>)
 801c9e8:	2200      	movs	r2, #0
 801c9ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c9ec:	4b0a      	ldr	r3, [pc, #40]	; (801ca18 <vPortSetupTimerInterrupt+0x3c>)
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	4a0a      	ldr	r2, [pc, #40]	; (801ca1c <vPortSetupTimerInterrupt+0x40>)
 801c9f2:	fba2 2303 	umull	r2, r3, r2, r3
 801c9f6:	099b      	lsrs	r3, r3, #6
 801c9f8:	4a09      	ldr	r2, [pc, #36]	; (801ca20 <vPortSetupTimerInterrupt+0x44>)
 801c9fa:	3b01      	subs	r3, #1
 801c9fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c9fe:	4b04      	ldr	r3, [pc, #16]	; (801ca10 <vPortSetupTimerInterrupt+0x34>)
 801ca00:	2207      	movs	r2, #7
 801ca02:	601a      	str	r2, [r3, #0]
}
 801ca04:	bf00      	nop
 801ca06:	46bd      	mov	sp, r7
 801ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca0c:	4770      	bx	lr
 801ca0e:	bf00      	nop
 801ca10:	e000e010 	.word	0xe000e010
 801ca14:	e000e018 	.word	0xe000e018
 801ca18:	20000060 	.word	0x20000060
 801ca1c:	10624dd3 	.word	0x10624dd3
 801ca20:	e000e014 	.word	0xe000e014

0801ca24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801ca24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801ca34 <vPortEnableVFP+0x10>
 801ca28:	6801      	ldr	r1, [r0, #0]
 801ca2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801ca2e:	6001      	str	r1, [r0, #0]
 801ca30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801ca32:	bf00      	nop
 801ca34:	e000ed88 	.word	0xe000ed88

0801ca38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801ca38:	b480      	push	{r7}
 801ca3a:	b085      	sub	sp, #20
 801ca3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801ca3e:	f3ef 8305 	mrs	r3, IPSR
 801ca42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	2b0f      	cmp	r3, #15
 801ca48:	d914      	bls.n	801ca74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801ca4a:	4a17      	ldr	r2, [pc, #92]	; (801caa8 <vPortValidateInterruptPriority+0x70>)
 801ca4c:	68fb      	ldr	r3, [r7, #12]
 801ca4e:	4413      	add	r3, r2
 801ca50:	781b      	ldrb	r3, [r3, #0]
 801ca52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801ca54:	4b15      	ldr	r3, [pc, #84]	; (801caac <vPortValidateInterruptPriority+0x74>)
 801ca56:	781b      	ldrb	r3, [r3, #0]
 801ca58:	7afa      	ldrb	r2, [r7, #11]
 801ca5a:	429a      	cmp	r2, r3
 801ca5c:	d20a      	bcs.n	801ca74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801ca5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca62:	f383 8811 	msr	BASEPRI, r3
 801ca66:	f3bf 8f6f 	isb	sy
 801ca6a:	f3bf 8f4f 	dsb	sy
 801ca6e:	607b      	str	r3, [r7, #4]
}
 801ca70:	bf00      	nop
 801ca72:	e7fe      	b.n	801ca72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801ca74:	4b0e      	ldr	r3, [pc, #56]	; (801cab0 <vPortValidateInterruptPriority+0x78>)
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801ca7c:	4b0d      	ldr	r3, [pc, #52]	; (801cab4 <vPortValidateInterruptPriority+0x7c>)
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	429a      	cmp	r2, r3
 801ca82:	d90a      	bls.n	801ca9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801ca84:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ca88:	f383 8811 	msr	BASEPRI, r3
 801ca8c:	f3bf 8f6f 	isb	sy
 801ca90:	f3bf 8f4f 	dsb	sy
 801ca94:	603b      	str	r3, [r7, #0]
}
 801ca96:	bf00      	nop
 801ca98:	e7fe      	b.n	801ca98 <vPortValidateInterruptPriority+0x60>
	}
 801ca9a:	bf00      	nop
 801ca9c:	3714      	adds	r7, #20
 801ca9e:	46bd      	mov	sp, r7
 801caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caa4:	4770      	bx	lr
 801caa6:	bf00      	nop
 801caa8:	e000e3f0 	.word	0xe000e3f0
 801caac:	2000098c 	.word	0x2000098c
 801cab0:	e000ed0c 	.word	0xe000ed0c
 801cab4:	20000990 	.word	0x20000990

0801cab8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801cab8:	b580      	push	{r7, lr}
 801caba:	b08a      	sub	sp, #40	; 0x28
 801cabc:	af00      	add	r7, sp, #0
 801cabe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801cac0:	2300      	movs	r3, #0
 801cac2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801cac4:	f7fe fc7e 	bl	801b3c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801cac8:	4b5b      	ldr	r3, [pc, #364]	; (801cc38 <pvPortMalloc+0x180>)
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d101      	bne.n	801cad4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801cad0:	f000 f92c 	bl	801cd2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801cad4:	4b59      	ldr	r3, [pc, #356]	; (801cc3c <pvPortMalloc+0x184>)
 801cad6:	681a      	ldr	r2, [r3, #0]
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	4013      	ands	r3, r2
 801cadc:	2b00      	cmp	r3, #0
 801cade:	f040 8093 	bne.w	801cc08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d01d      	beq.n	801cb24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801cae8:	2208      	movs	r2, #8
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	4413      	add	r3, r2
 801caee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	f003 0307 	and.w	r3, r3, #7
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d014      	beq.n	801cb24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	f023 0307 	bic.w	r3, r3, #7
 801cb00:	3308      	adds	r3, #8
 801cb02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801cb04:	687b      	ldr	r3, [r7, #4]
 801cb06:	f003 0307 	and.w	r3, r3, #7
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d00a      	beq.n	801cb24 <pvPortMalloc+0x6c>
	__asm volatile
 801cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb12:	f383 8811 	msr	BASEPRI, r3
 801cb16:	f3bf 8f6f 	isb	sy
 801cb1a:	f3bf 8f4f 	dsb	sy
 801cb1e:	617b      	str	r3, [r7, #20]
}
 801cb20:	bf00      	nop
 801cb22:	e7fe      	b.n	801cb22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d06e      	beq.n	801cc08 <pvPortMalloc+0x150>
 801cb2a:	4b45      	ldr	r3, [pc, #276]	; (801cc40 <pvPortMalloc+0x188>)
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	687a      	ldr	r2, [r7, #4]
 801cb30:	429a      	cmp	r2, r3
 801cb32:	d869      	bhi.n	801cc08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801cb34:	4b43      	ldr	r3, [pc, #268]	; (801cc44 <pvPortMalloc+0x18c>)
 801cb36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801cb38:	4b42      	ldr	r3, [pc, #264]	; (801cc44 <pvPortMalloc+0x18c>)
 801cb3a:	681b      	ldr	r3, [r3, #0]
 801cb3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801cb3e:	e004      	b.n	801cb4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb46:	681b      	ldr	r3, [r3, #0]
 801cb48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb4c:	685b      	ldr	r3, [r3, #4]
 801cb4e:	687a      	ldr	r2, [r7, #4]
 801cb50:	429a      	cmp	r2, r3
 801cb52:	d903      	bls.n	801cb5c <pvPortMalloc+0xa4>
 801cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d1f1      	bne.n	801cb40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801cb5c:	4b36      	ldr	r3, [pc, #216]	; (801cc38 <pvPortMalloc+0x180>)
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb62:	429a      	cmp	r2, r3
 801cb64:	d050      	beq.n	801cc08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801cb66:	6a3b      	ldr	r3, [r7, #32]
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	2208      	movs	r2, #8
 801cb6c:	4413      	add	r3, r2
 801cb6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801cb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb72:	681a      	ldr	r2, [r3, #0]
 801cb74:	6a3b      	ldr	r3, [r7, #32]
 801cb76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb7a:	685a      	ldr	r2, [r3, #4]
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	1ad2      	subs	r2, r2, r3
 801cb80:	2308      	movs	r3, #8
 801cb82:	005b      	lsls	r3, r3, #1
 801cb84:	429a      	cmp	r2, r3
 801cb86:	d91f      	bls.n	801cbc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801cb88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	4413      	add	r3, r2
 801cb8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801cb90:	69bb      	ldr	r3, [r7, #24]
 801cb92:	f003 0307 	and.w	r3, r3, #7
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d00a      	beq.n	801cbb0 <pvPortMalloc+0xf8>
	__asm volatile
 801cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cb9e:	f383 8811 	msr	BASEPRI, r3
 801cba2:	f3bf 8f6f 	isb	sy
 801cba6:	f3bf 8f4f 	dsb	sy
 801cbaa:	613b      	str	r3, [r7, #16]
}
 801cbac:	bf00      	nop
 801cbae:	e7fe      	b.n	801cbae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801cbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbb2:	685a      	ldr	r2, [r3, #4]
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	1ad2      	subs	r2, r2, r3
 801cbb8:	69bb      	ldr	r3, [r7, #24]
 801cbba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbbe:	687a      	ldr	r2, [r7, #4]
 801cbc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801cbc2:	69b8      	ldr	r0, [r7, #24]
 801cbc4:	f000 f914 	bl	801cdf0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801cbc8:	4b1d      	ldr	r3, [pc, #116]	; (801cc40 <pvPortMalloc+0x188>)
 801cbca:	681a      	ldr	r2, [r3, #0]
 801cbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbce:	685b      	ldr	r3, [r3, #4]
 801cbd0:	1ad3      	subs	r3, r2, r3
 801cbd2:	4a1b      	ldr	r2, [pc, #108]	; (801cc40 <pvPortMalloc+0x188>)
 801cbd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801cbd6:	4b1a      	ldr	r3, [pc, #104]	; (801cc40 <pvPortMalloc+0x188>)
 801cbd8:	681a      	ldr	r2, [r3, #0]
 801cbda:	4b1b      	ldr	r3, [pc, #108]	; (801cc48 <pvPortMalloc+0x190>)
 801cbdc:	681b      	ldr	r3, [r3, #0]
 801cbde:	429a      	cmp	r2, r3
 801cbe0:	d203      	bcs.n	801cbea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801cbe2:	4b17      	ldr	r3, [pc, #92]	; (801cc40 <pvPortMalloc+0x188>)
 801cbe4:	681b      	ldr	r3, [r3, #0]
 801cbe6:	4a18      	ldr	r2, [pc, #96]	; (801cc48 <pvPortMalloc+0x190>)
 801cbe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbec:	685a      	ldr	r2, [r3, #4]
 801cbee:	4b13      	ldr	r3, [pc, #76]	; (801cc3c <pvPortMalloc+0x184>)
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	431a      	orrs	r2, r3
 801cbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbfa:	2200      	movs	r2, #0
 801cbfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801cbfe:	4b13      	ldr	r3, [pc, #76]	; (801cc4c <pvPortMalloc+0x194>)
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	3301      	adds	r3, #1
 801cc04:	4a11      	ldr	r2, [pc, #68]	; (801cc4c <pvPortMalloc+0x194>)
 801cc06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801cc08:	f7fe fbea 	bl	801b3e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801cc0c:	69fb      	ldr	r3, [r7, #28]
 801cc0e:	f003 0307 	and.w	r3, r3, #7
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d00a      	beq.n	801cc2c <pvPortMalloc+0x174>
	__asm volatile
 801cc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc1a:	f383 8811 	msr	BASEPRI, r3
 801cc1e:	f3bf 8f6f 	isb	sy
 801cc22:	f3bf 8f4f 	dsb	sy
 801cc26:	60fb      	str	r3, [r7, #12]
}
 801cc28:	bf00      	nop
 801cc2a:	e7fe      	b.n	801cc2a <pvPortMalloc+0x172>
	return pvReturn;
 801cc2c:	69fb      	ldr	r3, [r7, #28]
}
 801cc2e:	4618      	mov	r0, r3
 801cc30:	3728      	adds	r7, #40	; 0x28
 801cc32:	46bd      	mov	sp, r7
 801cc34:	bd80      	pop	{r7, pc}
 801cc36:	bf00      	nop
 801cc38:	2001219c 	.word	0x2001219c
 801cc3c:	200121b0 	.word	0x200121b0
 801cc40:	200121a0 	.word	0x200121a0
 801cc44:	20012194 	.word	0x20012194
 801cc48:	200121a4 	.word	0x200121a4
 801cc4c:	200121a8 	.word	0x200121a8

0801cc50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801cc50:	b580      	push	{r7, lr}
 801cc52:	b086      	sub	sp, #24
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d04d      	beq.n	801ccfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801cc62:	2308      	movs	r3, #8
 801cc64:	425b      	negs	r3, r3
 801cc66:	697a      	ldr	r2, [r7, #20]
 801cc68:	4413      	add	r3, r2
 801cc6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801cc6c:	697b      	ldr	r3, [r7, #20]
 801cc6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801cc70:	693b      	ldr	r3, [r7, #16]
 801cc72:	685a      	ldr	r2, [r3, #4]
 801cc74:	4b24      	ldr	r3, [pc, #144]	; (801cd08 <vPortFree+0xb8>)
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	4013      	ands	r3, r2
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	d10a      	bne.n	801cc94 <vPortFree+0x44>
	__asm volatile
 801cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc82:	f383 8811 	msr	BASEPRI, r3
 801cc86:	f3bf 8f6f 	isb	sy
 801cc8a:	f3bf 8f4f 	dsb	sy
 801cc8e:	60fb      	str	r3, [r7, #12]
}
 801cc90:	bf00      	nop
 801cc92:	e7fe      	b.n	801cc92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801cc94:	693b      	ldr	r3, [r7, #16]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	2b00      	cmp	r3, #0
 801cc9a:	d00a      	beq.n	801ccb2 <vPortFree+0x62>
	__asm volatile
 801cc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cca0:	f383 8811 	msr	BASEPRI, r3
 801cca4:	f3bf 8f6f 	isb	sy
 801cca8:	f3bf 8f4f 	dsb	sy
 801ccac:	60bb      	str	r3, [r7, #8]
}
 801ccae:	bf00      	nop
 801ccb0:	e7fe      	b.n	801ccb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ccb2:	693b      	ldr	r3, [r7, #16]
 801ccb4:	685a      	ldr	r2, [r3, #4]
 801ccb6:	4b14      	ldr	r3, [pc, #80]	; (801cd08 <vPortFree+0xb8>)
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	4013      	ands	r3, r2
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d01e      	beq.n	801ccfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801ccc0:	693b      	ldr	r3, [r7, #16]
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d11a      	bne.n	801ccfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801ccc8:	693b      	ldr	r3, [r7, #16]
 801ccca:	685a      	ldr	r2, [r3, #4]
 801cccc:	4b0e      	ldr	r3, [pc, #56]	; (801cd08 <vPortFree+0xb8>)
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	43db      	mvns	r3, r3
 801ccd2:	401a      	ands	r2, r3
 801ccd4:	693b      	ldr	r3, [r7, #16]
 801ccd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801ccd8:	f7fe fb74 	bl	801b3c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801ccdc:	693b      	ldr	r3, [r7, #16]
 801ccde:	685a      	ldr	r2, [r3, #4]
 801cce0:	4b0a      	ldr	r3, [pc, #40]	; (801cd0c <vPortFree+0xbc>)
 801cce2:	681b      	ldr	r3, [r3, #0]
 801cce4:	4413      	add	r3, r2
 801cce6:	4a09      	ldr	r2, [pc, #36]	; (801cd0c <vPortFree+0xbc>)
 801cce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801ccea:	6938      	ldr	r0, [r7, #16]
 801ccec:	f000 f880 	bl	801cdf0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801ccf0:	4b07      	ldr	r3, [pc, #28]	; (801cd10 <vPortFree+0xc0>)
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	3301      	adds	r3, #1
 801ccf6:	4a06      	ldr	r2, [pc, #24]	; (801cd10 <vPortFree+0xc0>)
 801ccf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801ccfa:	f7fe fb71 	bl	801b3e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801ccfe:	bf00      	nop
 801cd00:	3718      	adds	r7, #24
 801cd02:	46bd      	mov	sp, r7
 801cd04:	bd80      	pop	{r7, pc}
 801cd06:	bf00      	nop
 801cd08:	200121b0 	.word	0x200121b0
 801cd0c:	200121a0 	.word	0x200121a0
 801cd10:	200121ac 	.word	0x200121ac

0801cd14 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 801cd14:	b480      	push	{r7}
 801cd16:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 801cd18:	4b03      	ldr	r3, [pc, #12]	; (801cd28 <xPortGetFreeHeapSize+0x14>)
 801cd1a:	681b      	ldr	r3, [r3, #0]
}
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	46bd      	mov	sp, r7
 801cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd24:	4770      	bx	lr
 801cd26:	bf00      	nop
 801cd28:	200121a0 	.word	0x200121a0

0801cd2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801cd2c:	b480      	push	{r7}
 801cd2e:	b085      	sub	sp, #20
 801cd30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801cd32:	f44f 338c 	mov.w	r3, #71680	; 0x11800
 801cd36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801cd38:	4b27      	ldr	r3, [pc, #156]	; (801cdd8 <prvHeapInit+0xac>)
 801cd3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	f003 0307 	and.w	r3, r3, #7
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d00c      	beq.n	801cd60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	3307      	adds	r3, #7
 801cd4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	f023 0307 	bic.w	r3, r3, #7
 801cd52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801cd54:	68ba      	ldr	r2, [r7, #8]
 801cd56:	68fb      	ldr	r3, [r7, #12]
 801cd58:	1ad3      	subs	r3, r2, r3
 801cd5a:	4a1f      	ldr	r2, [pc, #124]	; (801cdd8 <prvHeapInit+0xac>)
 801cd5c:	4413      	add	r3, r2
 801cd5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801cd64:	4a1d      	ldr	r2, [pc, #116]	; (801cddc <prvHeapInit+0xb0>)
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801cd6a:	4b1c      	ldr	r3, [pc, #112]	; (801cddc <prvHeapInit+0xb0>)
 801cd6c:	2200      	movs	r2, #0
 801cd6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	68ba      	ldr	r2, [r7, #8]
 801cd74:	4413      	add	r3, r2
 801cd76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801cd78:	2208      	movs	r2, #8
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	1a9b      	subs	r3, r3, r2
 801cd7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	f023 0307 	bic.w	r3, r3, #7
 801cd86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	4a15      	ldr	r2, [pc, #84]	; (801cde0 <prvHeapInit+0xb4>)
 801cd8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801cd8e:	4b14      	ldr	r3, [pc, #80]	; (801cde0 <prvHeapInit+0xb4>)
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	2200      	movs	r2, #0
 801cd94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801cd96:	4b12      	ldr	r3, [pc, #72]	; (801cde0 <prvHeapInit+0xb4>)
 801cd98:	681b      	ldr	r3, [r3, #0]
 801cd9a:	2200      	movs	r2, #0
 801cd9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801cda2:	683b      	ldr	r3, [r7, #0]
 801cda4:	68fa      	ldr	r2, [r7, #12]
 801cda6:	1ad2      	subs	r2, r2, r3
 801cda8:	683b      	ldr	r3, [r7, #0]
 801cdaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801cdac:	4b0c      	ldr	r3, [pc, #48]	; (801cde0 <prvHeapInit+0xb4>)
 801cdae:	681a      	ldr	r2, [r3, #0]
 801cdb0:	683b      	ldr	r3, [r7, #0]
 801cdb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cdb4:	683b      	ldr	r3, [r7, #0]
 801cdb6:	685b      	ldr	r3, [r3, #4]
 801cdb8:	4a0a      	ldr	r2, [pc, #40]	; (801cde4 <prvHeapInit+0xb8>)
 801cdba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801cdbc:	683b      	ldr	r3, [r7, #0]
 801cdbe:	685b      	ldr	r3, [r3, #4]
 801cdc0:	4a09      	ldr	r2, [pc, #36]	; (801cde8 <prvHeapInit+0xbc>)
 801cdc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801cdc4:	4b09      	ldr	r3, [pc, #36]	; (801cdec <prvHeapInit+0xc0>)
 801cdc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801cdca:	601a      	str	r2, [r3, #0]
}
 801cdcc:	bf00      	nop
 801cdce:	3714      	adds	r7, #20
 801cdd0:	46bd      	mov	sp, r7
 801cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdd6:	4770      	bx	lr
 801cdd8:	20000994 	.word	0x20000994
 801cddc:	20012194 	.word	0x20012194
 801cde0:	2001219c 	.word	0x2001219c
 801cde4:	200121a4 	.word	0x200121a4
 801cde8:	200121a0 	.word	0x200121a0
 801cdec:	200121b0 	.word	0x200121b0

0801cdf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801cdf0:	b480      	push	{r7}
 801cdf2:	b085      	sub	sp, #20
 801cdf4:	af00      	add	r7, sp, #0
 801cdf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801cdf8:	4b28      	ldr	r3, [pc, #160]	; (801ce9c <prvInsertBlockIntoFreeList+0xac>)
 801cdfa:	60fb      	str	r3, [r7, #12]
 801cdfc:	e002      	b.n	801ce04 <prvInsertBlockIntoFreeList+0x14>
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	60fb      	str	r3, [r7, #12]
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	687a      	ldr	r2, [r7, #4]
 801ce0a:	429a      	cmp	r2, r3
 801ce0c:	d8f7      	bhi.n	801cdfe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801ce0e:	68fb      	ldr	r3, [r7, #12]
 801ce10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801ce12:	68fb      	ldr	r3, [r7, #12]
 801ce14:	685b      	ldr	r3, [r3, #4]
 801ce16:	68ba      	ldr	r2, [r7, #8]
 801ce18:	4413      	add	r3, r2
 801ce1a:	687a      	ldr	r2, [r7, #4]
 801ce1c:	429a      	cmp	r2, r3
 801ce1e:	d108      	bne.n	801ce32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801ce20:	68fb      	ldr	r3, [r7, #12]
 801ce22:	685a      	ldr	r2, [r3, #4]
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	685b      	ldr	r3, [r3, #4]
 801ce28:	441a      	add	r2, r3
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	685b      	ldr	r3, [r3, #4]
 801ce3a:	68ba      	ldr	r2, [r7, #8]
 801ce3c:	441a      	add	r2, r3
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	429a      	cmp	r2, r3
 801ce44:	d118      	bne.n	801ce78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	681a      	ldr	r2, [r3, #0]
 801ce4a:	4b15      	ldr	r3, [pc, #84]	; (801cea0 <prvInsertBlockIntoFreeList+0xb0>)
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	429a      	cmp	r2, r3
 801ce50:	d00d      	beq.n	801ce6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	685a      	ldr	r2, [r3, #4]
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	685b      	ldr	r3, [r3, #4]
 801ce5c:	441a      	add	r2, r3
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801ce62:	68fb      	ldr	r3, [r7, #12]
 801ce64:	681b      	ldr	r3, [r3, #0]
 801ce66:	681a      	ldr	r2, [r3, #0]
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	601a      	str	r2, [r3, #0]
 801ce6c:	e008      	b.n	801ce80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801ce6e:	4b0c      	ldr	r3, [pc, #48]	; (801cea0 <prvInsertBlockIntoFreeList+0xb0>)
 801ce70:	681a      	ldr	r2, [r3, #0]
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	601a      	str	r2, [r3, #0]
 801ce76:	e003      	b.n	801ce80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	681a      	ldr	r2, [r3, #0]
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ce80:	68fa      	ldr	r2, [r7, #12]
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	429a      	cmp	r2, r3
 801ce86:	d002      	beq.n	801ce8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	687a      	ldr	r2, [r7, #4]
 801ce8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ce8e:	bf00      	nop
 801ce90:	3714      	adds	r7, #20
 801ce92:	46bd      	mov	sp, r7
 801ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce98:	4770      	bx	lr
 801ce9a:	bf00      	nop
 801ce9c:	20012194 	.word	0x20012194
 801cea0:	2001219c 	.word	0x2001219c

0801cea4 <__libc_init_array>:
 801cea4:	b570      	push	{r4, r5, r6, lr}
 801cea6:	4d0d      	ldr	r5, [pc, #52]	; (801cedc <__libc_init_array+0x38>)
 801cea8:	4c0d      	ldr	r4, [pc, #52]	; (801cee0 <__libc_init_array+0x3c>)
 801ceaa:	1b64      	subs	r4, r4, r5
 801ceac:	10a4      	asrs	r4, r4, #2
 801ceae:	2600      	movs	r6, #0
 801ceb0:	42a6      	cmp	r6, r4
 801ceb2:	d109      	bne.n	801cec8 <__libc_init_array+0x24>
 801ceb4:	4d0b      	ldr	r5, [pc, #44]	; (801cee4 <__libc_init_array+0x40>)
 801ceb6:	4c0c      	ldr	r4, [pc, #48]	; (801cee8 <__libc_init_array+0x44>)
 801ceb8:	f000 f874 	bl	801cfa4 <_init>
 801cebc:	1b64      	subs	r4, r4, r5
 801cebe:	10a4      	asrs	r4, r4, #2
 801cec0:	2600      	movs	r6, #0
 801cec2:	42a6      	cmp	r6, r4
 801cec4:	d105      	bne.n	801ced2 <__libc_init_array+0x2e>
 801cec6:	bd70      	pop	{r4, r5, r6, pc}
 801cec8:	f855 3b04 	ldr.w	r3, [r5], #4
 801cecc:	4798      	blx	r3
 801cece:	3601      	adds	r6, #1
 801ced0:	e7ee      	b.n	801ceb0 <__libc_init_array+0xc>
 801ced2:	f855 3b04 	ldr.w	r3, [r5], #4
 801ced6:	4798      	blx	r3
 801ced8:	3601      	adds	r6, #1
 801ceda:	e7f2      	b.n	801cec2 <__libc_init_array+0x1e>
 801cedc:	0801d28c 	.word	0x0801d28c
 801cee0:	0801d28c 	.word	0x0801d28c
 801cee4:	0801d28c 	.word	0x0801d28c
 801cee8:	0801d290 	.word	0x0801d290

0801ceec <memcpy>:
 801ceec:	440a      	add	r2, r1
 801ceee:	4291      	cmp	r1, r2
 801cef0:	f100 33ff 	add.w	r3, r0, #4294967295
 801cef4:	d100      	bne.n	801cef8 <memcpy+0xc>
 801cef6:	4770      	bx	lr
 801cef8:	b510      	push	{r4, lr}
 801cefa:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cefe:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cf02:	4291      	cmp	r1, r2
 801cf04:	d1f9      	bne.n	801cefa <memcpy+0xe>
 801cf06:	bd10      	pop	{r4, pc}

0801cf08 <memset>:
 801cf08:	4402      	add	r2, r0
 801cf0a:	4603      	mov	r3, r0
 801cf0c:	4293      	cmp	r3, r2
 801cf0e:	d100      	bne.n	801cf12 <memset+0xa>
 801cf10:	4770      	bx	lr
 801cf12:	f803 1b01 	strb.w	r1, [r3], #1
 801cf16:	e7f9      	b.n	801cf0c <memset+0x4>

0801cf18 <round>:
 801cf18:	ec51 0b10 	vmov	r0, r1, d0
 801cf1c:	b570      	push	{r4, r5, r6, lr}
 801cf1e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801cf22:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801cf26:	2c13      	cmp	r4, #19
 801cf28:	ee10 2a10 	vmov	r2, s0
 801cf2c:	460b      	mov	r3, r1
 801cf2e:	dc19      	bgt.n	801cf64 <round+0x4c>
 801cf30:	2c00      	cmp	r4, #0
 801cf32:	da09      	bge.n	801cf48 <round+0x30>
 801cf34:	3401      	adds	r4, #1
 801cf36:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801cf3a:	d103      	bne.n	801cf44 <round+0x2c>
 801cf3c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801cf40:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cf44:	2100      	movs	r1, #0
 801cf46:	e028      	b.n	801cf9a <round+0x82>
 801cf48:	4d15      	ldr	r5, [pc, #84]	; (801cfa0 <round+0x88>)
 801cf4a:	4125      	asrs	r5, r4
 801cf4c:	ea01 0605 	and.w	r6, r1, r5
 801cf50:	4332      	orrs	r2, r6
 801cf52:	d00e      	beq.n	801cf72 <round+0x5a>
 801cf54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801cf58:	fa42 f404 	asr.w	r4, r2, r4
 801cf5c:	4423      	add	r3, r4
 801cf5e:	ea23 0305 	bic.w	r3, r3, r5
 801cf62:	e7ef      	b.n	801cf44 <round+0x2c>
 801cf64:	2c33      	cmp	r4, #51	; 0x33
 801cf66:	dd07      	ble.n	801cf78 <round+0x60>
 801cf68:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801cf6c:	d101      	bne.n	801cf72 <round+0x5a>
 801cf6e:	f7e3 f935 	bl	80001dc <__adddf3>
 801cf72:	ec41 0b10 	vmov	d0, r0, r1
 801cf76:	bd70      	pop	{r4, r5, r6, pc}
 801cf78:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801cf7c:	f04f 35ff 	mov.w	r5, #4294967295
 801cf80:	40f5      	lsrs	r5, r6
 801cf82:	4228      	tst	r0, r5
 801cf84:	d0f5      	beq.n	801cf72 <round+0x5a>
 801cf86:	2101      	movs	r1, #1
 801cf88:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801cf8c:	fa01 f404 	lsl.w	r4, r1, r4
 801cf90:	1912      	adds	r2, r2, r4
 801cf92:	bf28      	it	cs
 801cf94:	185b      	addcs	r3, r3, r1
 801cf96:	ea22 0105 	bic.w	r1, r2, r5
 801cf9a:	4608      	mov	r0, r1
 801cf9c:	4619      	mov	r1, r3
 801cf9e:	e7e8      	b.n	801cf72 <round+0x5a>
 801cfa0:	000fffff 	.word	0x000fffff

0801cfa4 <_init>:
 801cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfa6:	bf00      	nop
 801cfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfaa:	bc08      	pop	{r3}
 801cfac:	469e      	mov	lr, r3
 801cfae:	4770      	bx	lr

0801cfb0 <_fini>:
 801cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfb2:	bf00      	nop
 801cfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfb6:	bc08      	pop	{r3}
 801cfb8:	469e      	mov	lr, r3
 801cfba:	4770      	bx	lr
